ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"sdcard.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.data
  18              		.type	Stat, %object
  19              		.size	Stat, 1
  20              	Stat:
  21 0000 01       		.byte	1
  22              		.bss
  23              	CardType:
  24 0000 00       		.space	1
  25              		.section	.text.xmit_mmc,"ax",%progbits
  26              		.align	2
  27              		.code	16
  28              		.thumb_func
  29              		.type	xmit_mmc, %function
  30              	xmit_mmc:
  31              	.LFB63:
  32              		.file 1 ".\\lib_Fat\\sdcard.c"
   1:.\lib_Fat/sdcard.c **** /*------------------------------------------------------------------------/
   2:.\lib_Fat/sdcard.c **** /  Foolproof MMCv3/SDv1/SDv2 (in SPI mode) control module
   3:.\lib_Fat/sdcard.c **** /-------------------------------------------------------------------------/
   4:.\lib_Fat/sdcard.c **** /
   5:.\lib_Fat/sdcard.c **** /  Copyright (C) 2013, ChaN, all right reserved.
   6:.\lib_Fat/sdcard.c **** /
   7:.\lib_Fat/sdcard.c **** / * This software is a free software and there is NO WARRANTY.
   8:.\lib_Fat/sdcard.c **** / * No restriction on use. You can use, modify and redistribute it for
   9:.\lib_Fat/sdcard.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  10:.\lib_Fat/sdcard.c **** / * Redistributions of source code must retain the above copyright notice.
  11:.\lib_Fat/sdcard.c **** /
  12:.\lib_Fat/sdcard.c **** /-------------------------------------------------------------------------/
  13:.\lib_Fat/sdcard.c ****   Features and Limitations:
  14:.\lib_Fat/sdcard.c **** 
  15:.\lib_Fat/sdcard.c ****   * Easy to Port Bit-banging SPI
  16:.\lib_Fat/sdcard.c ****     It uses only four GPIO pins. No complex peripheral needs to be used.
  17:.\lib_Fat/sdcard.c **** 
  18:.\lib_Fat/sdcard.c ****   * No Media Change Detection
  19:.\lib_Fat/sdcard.c ****     Application program needs to perform a f_mount() after media change.
  20:.\lib_Fat/sdcard.c **** 
  21:.\lib_Fat/sdcard.c **** /-------------------------------------------------------------------------*/
  22:.\lib_Fat/sdcard.c **** 
  23:.\lib_Fat/sdcard.c **** 
  24:.\lib_Fat/sdcard.c **** #include "diskio.h"		/* Common include file for FatFs and disk I/O layer */
  25:.\lib_Fat/sdcard.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 2


  26:.\lib_Fat/sdcard.c **** 
  27:.\lib_Fat/sdcard.c **** /*-------------------------------------------------------------------------*/
  28:.\lib_Fat/sdcard.c **** /* Platform dependent macros and functions needed to be modified           */
  29:.\lib_Fat/sdcard.c **** /*-------------------------------------------------------------------------*/
  30:.\lib_Fat/sdcard.c **** 
  31:.\lib_Fat/sdcard.c **** #include <project.h>
  32:.\lib_Fat/sdcard.c **** #include <cytypes.h>
  33:.\lib_Fat/sdcard.c **** 
  34:.\lib_Fat/sdcard.c ****     /* Put here the same name of the SPI bus module you have used in schematic. */
  35:.\lib_Fat/sdcard.c **** #define SPI_NAME                SPI  
  36:.\lib_Fat/sdcard.c **** #define SPI_HW_NAME             SwSPI_Master
  37:.\lib_Fat/sdcard.c **** /* Put here function used to control SPI SS line.
  38:.\lib_Fat/sdcard.c ****        Example: 
  39:.\lib_Fat/sdcard.c ****         - if using Cypress API macros: SPI_ss0_m_Write
  40:.\lib_Fat/sdcard.c ****         - if using another gpio pint: SPI_SS_Write. */
  41:.\lib_Fat/sdcard.c **** #define mmSPI_SS_Write(value)   SPI_ss0_m_Write(value)
  42:.\lib_Fat/sdcard.c **** //#define mmSPI_SS_Write(value)     SPI_SS_Write(value)       
  43:.\lib_Fat/sdcard.c **** 
  44:.\lib_Fat/sdcard.c **** #define CS_DELAY_US             1
  45:.\lib_Fat/sdcard.c **** #define M_DELAY_US              100
  46:.\lib_Fat/sdcard.c **** 
  47:.\lib_Fat/sdcard.c ****     /* Text substitution macros to avoid changing function names related to SPI API
  48:.\lib_Fat/sdcard.c ****        if SPI module name is changed in schematic. */
  49:.\lib_Fat/sdcard.c **** 
  50:.\lib_Fat/sdcard.c **** #define CONCATENATE(name, function)                 CONCAT(name, function)
  51:.\lib_Fat/sdcard.c **** #define CONCAT(name, function)                      name##function
  52:.\lib_Fat/sdcard.c **** 
  53:.\lib_Fat/sdcard.c **** #if (CY_PSOC4)
  54:.\lib_Fat/sdcard.c **** 
  55:.\lib_Fat/sdcard.c ****     
  56:.\lib_Fat/sdcard.c ****     /*
  57:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartClearTxBuffer                  CONCATENATE(SPI_NAME, _SpiUartClearTxBuffer
  58:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartClearRxBuffer                  CONCATENATE(SPI_NAME, _SpiUartClearRxBuffer
  59:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartPutArray(a, b)                 CONCATENATE(SPI_NAME, _SpiUartPutArray(a, b
  60:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartWriteTxData(value)             CONCATENATE(SPI_NAME, _SpiUartWriteTxData(v
  61:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartReadRxData                     CONCATENATE(SPI_NAME, _SpiUartReadRxData)
  62:.\lib_Fat/sdcard.c ****     #define mmSPI_GetMasterInterruptSource              CONCATENATE(SPI_NAME, _GetMasterInterruptSo
  63:.\lib_Fat/sdcard.c ****     #define mmSPI_ClearMasterInterruptSource(value)     CONCATENATE(SPI_NAME, _ClearMasterInterrupt
  64:.\lib_Fat/sdcard.c ****     #define mmSPI_INTR_MASTER_SPI_DONE                  CONCATENATE(SPI_NAME, _INTR_MASTER_SPI_DONE
  65:.\lib_Fat/sdcard.c ****     */
  66:.\lib_Fat/sdcard.c ****     
  67:.\lib_Fat/sdcard.c ****     //#define mmSPI_SpiUartClearTxBuffer                  CONCATENATE(SPI_NAME, _SpiUartClearTxBuff
  68:.\lib_Fat/sdcard.c ****     //#define mmSPI_SpiUartClearRxBuffer                  CONCATENATE(SPI_NAME, _SpiUartClearRxBuff
  69:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartPutArray(a, b)                 CONCATENATE(SPI_HW_NAME, _SendBuff(a, b)) 
  70:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartWriteTxData(value)             CONCATENATE(SPI_HW_NAME, _SendByte(value))
  71:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartReadRxData                     CONCATENATE(SPI_HW_NAME, _RecvByte)
  72:.\lib_Fat/sdcard.c ****     
  73:.\lib_Fat/sdcard.c ****     //#define mmSPI_GetMasterInterruptSource              CONCATENATE(SPI_HW_NAME, _GetMasterInterr
  74:.\lib_Fat/sdcard.c ****     //#define mmSPI_ClearMasterInterruptSource(value)     CONCATENATE(SPI_HW_NAME, _ClearMasterInte
  75:.\lib_Fat/sdcard.c ****     //#define mmSPI_INTR_MASTER_SPI_DONE                  CONCATENATE(SPI_HW_NAME, _INTR_MASTER_SPI
  76:.\lib_Fat/sdcard.c **** 
  77:.\lib_Fat/sdcard.c ****     
  78:.\lib_Fat/sdcard.c **** #endif    
  79:.\lib_Fat/sdcard.c **** 
  80:.\lib_Fat/sdcard.c **** #if (CY_PSOC5LP) 
  81:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartClearTxBuffer                  CONCATENATE(SPI_NAME, _ClearTxBuffer)
  82:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartClearRxBuffer                  CONCATENATE(SPI_NAME, _ClearRxBuffer)    
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 3


  83:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartPutArray(a, b)                 CONCATENATE(SPI_NAME, _PutArray(a, b)) 
  84:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartWriteTxData(value)             CONCATENATE(SPI_NAME, _WriteTxData(value))
  85:.\lib_Fat/sdcard.c ****     #define mmSPI_SpiUartReadRxData                     CONCATENATE(SPI_NAME, _ReadRxData)
  86:.\lib_Fat/sdcard.c ****     #define mmSPI_GetMasterInterruptSource              CONCATENATE(SPI_NAME, _GetMasterInterruptSo
  87:.\lib_Fat/sdcard.c ****     #define mmSPI_ClearMasterInterruptSource(value)     CONCATENATE(SPI_NAME, _ClearMasterInterrupt
  88:.\lib_Fat/sdcard.c ****     #define mmSPI_INTR_MASTER_SPI_DONE                  CONCATENATE(SPI_NAME, _INTR_MASTER_SPI_DONE
  89:.\lib_Fat/sdcard.c **** #endif 
  90:.\lib_Fat/sdcard.c **** 
  91:.\lib_Fat/sdcard.c ****     /* Delays. */
  92:.\lib_Fat/sdcard.c **** #define dly_us(n)               CyDelayUs(n); /* Delay n microseconds. */
  93:.\lib_Fat/sdcard.c **** 
  94:.\lib_Fat/sdcard.c **** /*--------------------------------------------------------------------------
  95:.\lib_Fat/sdcard.c **** 
  96:.\lib_Fat/sdcard.c ****    Module Private Functions
  97:.\lib_Fat/sdcard.c **** 
  98:.\lib_Fat/sdcard.c **** ---------------------------------------------------------------------------*/
  99:.\lib_Fat/sdcard.c **** 
 100:.\lib_Fat/sdcard.c **** /* MMC/SD command (SPI mode) */
 101:.\lib_Fat/sdcard.c **** #define CMD0	(0)			/* GO_IDLE_STATE */
 102:.\lib_Fat/sdcard.c **** #define CMD1	(1)			/* SEND_OP_COND */
 103:.\lib_Fat/sdcard.c **** #define	ACMD41	(0x80+41)	/* SEND_OP_COND (SDC) */
 104:.\lib_Fat/sdcard.c **** #define CMD8	(8)			/* SEND_IF_COND */
 105:.\lib_Fat/sdcard.c **** #define CMD9	(9)			/* SEND_CSD */
 106:.\lib_Fat/sdcard.c **** #define CMD10	(10)		/* SEND_CID */
 107:.\lib_Fat/sdcard.c **** #define CMD12	(12)		/* STOP_TRANSMISSION */
 108:.\lib_Fat/sdcard.c **** #define CMD13	(13)		/* SEND_STATUS */
 109:.\lib_Fat/sdcard.c **** #define ACMD13	(0x80+13)	/* SD_STATUS (SDC) */
 110:.\lib_Fat/sdcard.c **** #define CMD16	(16)		/* SET_BLOCKLEN */
 111:.\lib_Fat/sdcard.c **** #define CMD17	(17)		/* READ_SINGLE_BLOCK */
 112:.\lib_Fat/sdcard.c **** #define CMD18	(18)		/* READ_MULTIPLE_BLOCK */
 113:.\lib_Fat/sdcard.c **** #define CMD23	(23)		/* SET_BLOCK_COUNT */
 114:.\lib_Fat/sdcard.c **** #define	ACMD23	(0x80+23)	/* SET_WR_BLK_ERASE_COUNT (SDC) */
 115:.\lib_Fat/sdcard.c **** #define CMD24	(24)		/* WRITE_BLOCK */
 116:.\lib_Fat/sdcard.c **** #define CMD25	(25)		/* WRITE_MULTIPLE_BLOCK */
 117:.\lib_Fat/sdcard.c **** #define CMD32	(32)		/* ERASE_ER_BLK_START */
 118:.\lib_Fat/sdcard.c **** #define CMD33	(33)		/* ERASE_ER_BLK_END */
 119:.\lib_Fat/sdcard.c **** #define CMD38	(38)		/* ERASE */
 120:.\lib_Fat/sdcard.c **** #define CMD55	(55)		/* APP_CMD */
 121:.\lib_Fat/sdcard.c **** #define CMD58	(58)		/* READ_OCR */
 122:.\lib_Fat/sdcard.c **** 
 123:.\lib_Fat/sdcard.c **** 
 124:.\lib_Fat/sdcard.c **** static DSTATUS Stat = STA_NOINIT;	/* Disk status */
 125:.\lib_Fat/sdcard.c **** 
 126:.\lib_Fat/sdcard.c **** static BYTE CardType;			/* b0:MMC, b1:SDv1, b2:SDv2, b3:Block addressing */
 127:.\lib_Fat/sdcard.c **** 
 128:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 129:.\lib_Fat/sdcard.c **** /* Transmit bytes to the card                                            */
 130:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 131:.\lib_Fat/sdcard.c **** 
 132:.\lib_Fat/sdcard.c **** static void xmit_mmc(const BYTE* buff, UINT bc)
 133:.\lib_Fat/sdcard.c **** {
  33              		.loc 1 133 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 4


  39 0002 82B0     		sub	sp, sp, #8
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
 134:.\lib_Fat/sdcard.c **** 
 135:.\lib_Fat/sdcard.c **** #if (CY_PSOC4)
 136:.\lib_Fat/sdcard.c **** 
 137:.\lib_Fat/sdcard.c **** //    mmSPI_SpiUartClearTxBuffer();
 138:.\lib_Fat/sdcard.c **** //    mmSPI_SpiUartClearRxBuffer();
 139:.\lib_Fat/sdcard.c ****       mmSPI_SpiUartPutArray(buff, bc);
  45              		.loc 1 139 0
  46 000a 3B68     		ldr	r3, [r7]
  47 000c 9BB2     		uxth	r3, r3
  48 000e 7A68     		ldr	r2, [r7, #4]
  49 0010 101C     		mov	r0, r2
  50 0012 191C     		mov	r1, r3
  51 0014 FFF7FEFF 		bl	SwSPI_Master_SendBuff
 140:.\lib_Fat/sdcard.c ****       CyDelay(5);
  52              		.loc 1 140 0
  53 0018 0520     		mov	r0, #5
  54 001a FFF7FEFF 		bl	CyDelay
 141:.\lib_Fat/sdcard.c ****     //while(0u == (mmSPI_GetMasterInterruptSource() & mmSPI_INTR_MASTER_SPI_DONE));
 142:.\lib_Fat/sdcard.c ****     
 143:.\lib_Fat/sdcard.c **** #endif
 144:.\lib_Fat/sdcard.c **** 
 145:.\lib_Fat/sdcard.c **** #if (CY_PSOC5LP)
 146:.\lib_Fat/sdcard.c ****     
 147:.\lib_Fat/sdcard.c ****     UINT loop;
 148:.\lib_Fat/sdcard.c ****     
 149:.\lib_Fat/sdcard.c ****     SPI_ClearTxBuffer();
 150:.\lib_Fat/sdcard.c ****     SPI_ClearRxBuffer();
 151:.\lib_Fat/sdcard.c ****     
 152:.\lib_Fat/sdcard.c ****     for (loop = 0; loop < bc; loop++)
 153:.\lib_Fat/sdcard.c ****         SPI_WriteTxData(buff[loop]);
 154:.\lib_Fat/sdcard.c ****     
 155:.\lib_Fat/sdcard.c ****     while (SPI_GetTxBufferSize()) {};
 156:.\lib_Fat/sdcard.c ****     
 157:.\lib_Fat/sdcard.c **** #endif    
 158:.\lib_Fat/sdcard.c **** }
  55              		.loc 1 158 0
  56 001e BD46     		mov	sp, r7
  57 0020 02B0     		add	sp, sp, #8
  58              		@ sp needed
  59 0022 80BD     		pop	{r7, pc}
  60              		.cfi_endproc
  61              	.LFE63:
  62              		.size	xmit_mmc, .-xmit_mmc
  63              		.section	.text.rcvr_mmc,"ax",%progbits
  64              		.align	2
  65              		.code	16
  66              		.thumb_func
  67              		.type	rcvr_mmc, %function
  68              	rcvr_mmc:
  69              	.LFB64:
 159:.\lib_Fat/sdcard.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 5


 160:.\lib_Fat/sdcard.c **** 
 161:.\lib_Fat/sdcard.c **** 
 162:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 163:.\lib_Fat/sdcard.c **** /* Receive bytes from the card                                           */
 164:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 165:.\lib_Fat/sdcard.c **** 
 166:.\lib_Fat/sdcard.c **** static void rcvr_mmc(BYTE *buff, UINT bc)
 167:.\lib_Fat/sdcard.c **** {
  70              		.loc 1 167 0
  71              		.cfi_startproc
  72 0000 90B5     		push	{r4, r7, lr}
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  77 0002 83B0     		sub	sp, sp, #12
  78              		.cfi_def_cfa_offset 24
  79 0004 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  81 0006 7860     		str	r0, [r7, #4]
  82 0008 3960     		str	r1, [r7]
  83              	.L3:
 168:.\lib_Fat/sdcard.c **** 
 169:.\lib_Fat/sdcard.c **** #if (CY_PSOC4) 
 170:.\lib_Fat/sdcard.c ****     
 171:.\lib_Fat/sdcard.c ****     //mmSPI_SpiUartClearTxBuffer();
 172:.\lib_Fat/sdcard.c ****     //mmSPI_SpiUartClearRxBuffer();
 173:.\lib_Fat/sdcard.c ****     
 174:.\lib_Fat/sdcard.c ****     do
 175:.\lib_Fat/sdcard.c ****     {
 176:.\lib_Fat/sdcard.c **** 
 177:.\lib_Fat/sdcard.c ****         //while(0u == (mmSPI_GetMasterInterruptSource() & mmSPI_INTR_MASTER_SPI_DONE));
 178:.\lib_Fat/sdcard.c ****         //CyDelayUs(M_DELAY_US); // <*> adjust, why?
 179:.\lib_Fat/sdcard.c ****         //mmSPI_SpiUartWriteTxData(0xFF);
 180:.\lib_Fat/sdcard.c ****         *buff++ = (BYTE)mmSPI_SpiUartReadRxData();
  84              		.loc 1 180 0 discriminator 1
  85 000a 7C68     		ldr	r4, [r7, #4]
  86 000c 631C     		add	r3, r4, #1
  87 000e 7B60     		str	r3, [r7, #4]
  88 0010 FFF7FEFF 		bl	SwSPI_Master_RecvByte
  89 0014 031C     		mov	r3, r0
  90 0016 2370     		strb	r3, [r4]
 181:.\lib_Fat/sdcard.c **** 
 182:.\lib_Fat/sdcard.c ****     } while (--bc);   
  91              		.loc 1 182 0 discriminator 1
  92 0018 3B68     		ldr	r3, [r7]
  93 001a 013B     		sub	r3, r3, #1
  94 001c 3B60     		str	r3, [r7]
  95 001e 3B68     		ldr	r3, [r7]
  96 0020 002B     		cmp	r3, #0
  97 0022 F2D1     		bne	.L3
 183:.\lib_Fat/sdcard.c ****     
 184:.\lib_Fat/sdcard.c **** #endif    
 185:.\lib_Fat/sdcard.c ****     
 186:.\lib_Fat/sdcard.c **** #if (CY_PSOC5LP)
 187:.\lib_Fat/sdcard.c ****     
 188:.\lib_Fat/sdcard.c ****     SPI_ClearTxBuffer();
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 6


 189:.\lib_Fat/sdcard.c ****     SPI_ClearRxBuffer();
 190:.\lib_Fat/sdcard.c ****     
 191:.\lib_Fat/sdcard.c ****     do
 192:.\lib_Fat/sdcard.c ****     {
 193:.\lib_Fat/sdcard.c **** 
 194:.\lib_Fat/sdcard.c ****         SPI_WriteTxData(0xFF);
 195:.\lib_Fat/sdcard.c ****         while (SPI_GetTxBufferSize()) {};
 196:.\lib_Fat/sdcard.c ****         CyDelayUs(M_DELAY_US); // <*> adjust, why?
 197:.\lib_Fat/sdcard.c ****         *buff++ = (BYTE)SPI_ReadRxData();
 198:.\lib_Fat/sdcard.c **** 
 199:.\lib_Fat/sdcard.c ****     } while (--bc);    
 200:.\lib_Fat/sdcard.c ****     
 201:.\lib_Fat/sdcard.c **** #endif        
 202:.\lib_Fat/sdcard.c **** 
 203:.\lib_Fat/sdcard.c **** }
  98              		.loc 1 203 0
  99 0024 BD46     		mov	sp, r7
 100 0026 03B0     		add	sp, sp, #12
 101              		@ sp needed
 102 0028 90BD     		pop	{r4, r7, pc}
 103              		.cfi_endproc
 104              	.LFE64:
 105              		.size	rcvr_mmc, .-rcvr_mmc
 106 002a C046     		.section	.text.wait_ready,"ax",%progbits
 107              		.align	2
 108              		.code	16
 109              		.thumb_func
 110              		.type	wait_ready, %function
 111              	wait_ready:
 112              	.LFB65:
 204:.\lib_Fat/sdcard.c **** 
 205:.\lib_Fat/sdcard.c **** 
 206:.\lib_Fat/sdcard.c **** 
 207:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 208:.\lib_Fat/sdcard.c **** /* Wait for card ready                                                   */
 209:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 210:.\lib_Fat/sdcard.c **** 
 211:.\lib_Fat/sdcard.c **** static int wait_ready(void)	/* 1:OK, 0:Timeout */
 212:.\lib_Fat/sdcard.c **** {
 113              		.loc 1 212 0
 114              		.cfi_startproc
 115 0000 80B5     		push	{r7, lr}
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 82B0     		sub	sp, sp, #8
 120              		.cfi_def_cfa_offset 16
 121 0004 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
 213:.\lib_Fat/sdcard.c **** 	BYTE d;
 214:.\lib_Fat/sdcard.c **** 	UINT tmr;
 215:.\lib_Fat/sdcard.c **** 
 216:.\lib_Fat/sdcard.c **** 	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
 123              		.loc 1 216 0
 124 0006 0F4B     		ldr	r3, .L10
 125 0008 7B60     		str	r3, [r7, #4]
 126 000a 0FE0     		b	.L5
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 7


 127              	.L8:
 217:.\lib_Fat/sdcard.c **** 		rcvr_mmc(&d, 1);
 128              		.loc 1 217 0
 129 000c FB1C     		add	r3, r7, #3
 130 000e 181C     		mov	r0, r3
 131 0010 0121     		mov	r1, #1
 132 0012 FFF7FEFF 		bl	rcvr_mmc
 218:.\lib_Fat/sdcard.c **** 		if (d == 0xFF) break;
 133              		.loc 1 218 0
 134 0016 FB1C     		add	r3, r7, #3
 135 0018 1B78     		ldrb	r3, [r3]
 136 001a FF2B     		cmp	r3, #255
 137 001c 00D1     		bne	.L6
 138 001e 08E0     		b	.L7
 139              	.L6:
 219:.\lib_Fat/sdcard.c **** 		dly_us(100);
 140              		.loc 1 219 0 discriminator 2
 141 0020 6420     		mov	r0, #100
 142 0022 FFF7FEFF 		bl	CyDelayUs
 216:.\lib_Fat/sdcard.c **** 		rcvr_mmc(&d, 1);
 143              		.loc 1 216 0 discriminator 2
 144 0026 7B68     		ldr	r3, [r7, #4]
 145 0028 013B     		sub	r3, r3, #1
 146 002a 7B60     		str	r3, [r7, #4]
 147              	.L5:
 216:.\lib_Fat/sdcard.c **** 		rcvr_mmc(&d, 1);
 148              		.loc 1 216 0 is_stmt 0 discriminator 1
 149 002c 7B68     		ldr	r3, [r7, #4]
 150 002e 002B     		cmp	r3, #0
 151 0030 ECD1     		bne	.L8
 152              	.L7:
 220:.\lib_Fat/sdcard.c **** 	}
 221:.\lib_Fat/sdcard.c **** 
 222:.\lib_Fat/sdcard.c **** 	return tmr ? 1 : 0;
 153              		.loc 1 222 0 is_stmt 1
 154 0032 7B68     		ldr	r3, [r7, #4]
 155 0034 5A1E     		sub	r2, r3, #1
 156 0036 9341     		sbc	r3, r3, r2
 157 0038 DBB2     		uxtb	r3, r3
 223:.\lib_Fat/sdcard.c **** }
 158              		.loc 1 223 0
 159 003a 181C     		mov	r0, r3
 160 003c BD46     		mov	sp, r7
 161 003e 02B0     		add	sp, sp, #8
 162              		@ sp needed
 163 0040 80BD     		pop	{r7, pc}
 164              	.L11:
 165 0042 C046     		.align	2
 166              	.L10:
 167 0044 88130000 		.word	5000
 168              		.cfi_endproc
 169              	.LFE65:
 170              		.size	wait_ready, .-wait_ready
 171              		.section	.text.deselect,"ax",%progbits
 172              		.align	2
 173              		.code	16
 174              		.thumb_func
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 8


 175              		.type	deselect, %function
 176              	deselect:
 177              	.LFB66:
 224:.\lib_Fat/sdcard.c **** 
 225:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 226:.\lib_Fat/sdcard.c **** /* Deselect the card and release SPI bus                                 */
 227:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 228:.\lib_Fat/sdcard.c **** 
 229:.\lib_Fat/sdcard.c **** static void deselect(void)
 230:.\lib_Fat/sdcard.c **** {
 178              		.loc 1 230 0
 179              		.cfi_startproc
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 82B0     		sub	sp, sp, #8
 185              		.cfi_def_cfa_offset 16
 186 0004 00AF     		add	r7, sp, #0
 187              		.cfi_def_cfa_register 7
 231:.\lib_Fat/sdcard.c **** 	BYTE d;
 232:.\lib_Fat/sdcard.c **** 
 233:.\lib_Fat/sdcard.c ****     CyDelayUs(CS_DELAY_US); // <*> adjust
 188              		.loc 1 233 0
 189 0006 0120     		mov	r0, #1
 190 0008 FFF7FEFF 		bl	CyDelayUs
 234:.\lib_Fat/sdcard.c **** 	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 191              		.loc 1 234 0
 192 000c FB1D     		add	r3, r7, #7
 193 000e 181C     		mov	r0, r3
 194 0010 0121     		mov	r1, #1
 195 0012 FFF7FEFF 		bl	rcvr_mmc
 235:.\lib_Fat/sdcard.c **** }
 196              		.loc 1 235 0
 197 0016 BD46     		mov	sp, r7
 198 0018 02B0     		add	sp, sp, #8
 199              		@ sp needed
 200 001a 80BD     		pop	{r7, pc}
 201              		.cfi_endproc
 202              	.LFE66:
 203              		.size	deselect, .-deselect
 204              		.section	.text.select,"ax",%progbits
 205              		.align	2
 206              		.code	16
 207              		.thumb_func
 208              		.type	select, %function
 209              	select:
 210              	.LFB67:
 236:.\lib_Fat/sdcard.c **** 
 237:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 238:.\lib_Fat/sdcard.c **** /* Select the card and wait for ready                                    */
 239:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 240:.\lib_Fat/sdcard.c **** 
 241:.\lib_Fat/sdcard.c **** static int select(void)	/* 1:OK, 0:Timeout */
 242:.\lib_Fat/sdcard.c **** {
 211              		.loc 1 242 0
 212              		.cfi_startproc
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 9


 213 0000 80B5     		push	{r7, lr}
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 82B0     		sub	sp, sp, #8
 218              		.cfi_def_cfa_offset 16
 219 0004 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 243:.\lib_Fat/sdcard.c **** 	BYTE d;
 244:.\lib_Fat/sdcard.c **** 
 245:.\lib_Fat/sdcard.c ****     CyDelayUs(CS_DELAY_US); // <*> adjust
 221              		.loc 1 245 0
 222 0006 0120     		mov	r0, #1
 223 0008 FFF7FEFF 		bl	CyDelayUs
 246:.\lib_Fat/sdcard.c **** 	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
 224              		.loc 1 246 0
 225 000c FB1D     		add	r3, r7, #7
 226 000e 181C     		mov	r0, r3
 227 0010 0121     		mov	r1, #1
 228 0012 FFF7FEFF 		bl	rcvr_mmc
 247:.\lib_Fat/sdcard.c **** 	if (wait_ready()) return 1;	/* Wait for card ready */
 229              		.loc 1 247 0
 230 0016 FFF7FEFF 		bl	wait_ready
 231 001a 031E     		sub	r3, r0, #0
 232 001c 01D0     		beq	.L14
 233              		.loc 1 247 0 is_stmt 0 discriminator 1
 234 001e 0123     		mov	r3, #1
 235 0020 02E0     		b	.L16
 236              	.L14:
 248:.\lib_Fat/sdcard.c **** 
 249:.\lib_Fat/sdcard.c **** 	deselect();
 237              		.loc 1 249 0 is_stmt 1
 238 0022 FFF7FEFF 		bl	deselect
 250:.\lib_Fat/sdcard.c **** 	return 0;			/* Failed */
 239              		.loc 1 250 0
 240 0026 0023     		mov	r3, #0
 241              	.L16:
 251:.\lib_Fat/sdcard.c **** }
 242              		.loc 1 251 0 discriminator 1
 243 0028 181C     		mov	r0, r3
 244 002a BD46     		mov	sp, r7
 245 002c 02B0     		add	sp, sp, #8
 246              		@ sp needed
 247 002e 80BD     		pop	{r7, pc}
 248              		.cfi_endproc
 249              	.LFE67:
 250              		.size	select, .-select
 251              		.section	.text.rcvr_datablock,"ax",%progbits
 252              		.align	2
 253              		.code	16
 254              		.thumb_func
 255              		.type	rcvr_datablock, %function
 256              	rcvr_datablock:
 257              	.LFB68:
 252:.\lib_Fat/sdcard.c **** 
 253:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 254:.\lib_Fat/sdcard.c **** /* Receive a data packet from the card                                   */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 10


 255:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 256:.\lib_Fat/sdcard.c **** 
 257:.\lib_Fat/sdcard.c **** static int rcvr_datablock(BYTE *buff, UINT btr) 	/* 1:OK, 0:Failed */
 258:.\lib_Fat/sdcard.c **** {
 258              		.loc 1 258 0
 259              		.cfi_startproc
 260 0000 80B5     		push	{r7, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 14, -4
 264 0002 84B0     		sub	sp, sp, #16
 265              		.cfi_def_cfa_offset 24
 266 0004 00AF     		add	r7, sp, #0
 267              		.cfi_def_cfa_register 7
 268 0006 7860     		str	r0, [r7, #4]
 269 0008 3960     		str	r1, [r7]
 259:.\lib_Fat/sdcard.c **** 	BYTE d[2];
 260:.\lib_Fat/sdcard.c **** 	UINT tmr;
 261:.\lib_Fat/sdcard.c **** 
 262:.\lib_Fat/sdcard.c **** 	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
 270              		.loc 1 262 0
 271 000a FA23     		mov	r3, #250
 272 000c 9B00     		lsl	r3, r3, #2
 273 000e FB60     		str	r3, [r7, #12]
 274 0010 11E0     		b	.L18
 275              	.L21:
 263:.\lib_Fat/sdcard.c **** 		rcvr_mmc(d, 1);
 276              		.loc 1 263 0
 277 0012 0823     		mov	r3, #8
 278 0014 FB18     		add	r3, r7, r3
 279 0016 181C     		mov	r0, r3
 280 0018 0121     		mov	r1, #1
 281 001a FFF7FEFF 		bl	rcvr_mmc
 264:.\lib_Fat/sdcard.c **** 		if (d[0] != 0xFF) break;
 282              		.loc 1 264 0
 283 001e 0823     		mov	r3, #8
 284 0020 FB18     		add	r3, r7, r3
 285 0022 1B78     		ldrb	r3, [r3]
 286 0024 FF2B     		cmp	r3, #255
 287 0026 00D0     		beq	.L19
 288 0028 08E0     		b	.L20
 289              	.L19:
 265:.\lib_Fat/sdcard.c **** 		dly_us(100);
 290              		.loc 1 265 0 discriminator 2
 291 002a 6420     		mov	r0, #100
 292 002c FFF7FEFF 		bl	CyDelayUs
 262:.\lib_Fat/sdcard.c **** 		rcvr_mmc(d, 1);
 293              		.loc 1 262 0 discriminator 2
 294 0030 FB68     		ldr	r3, [r7, #12]
 295 0032 013B     		sub	r3, r3, #1
 296 0034 FB60     		str	r3, [r7, #12]
 297              	.L18:
 262:.\lib_Fat/sdcard.c **** 		rcvr_mmc(d, 1);
 298              		.loc 1 262 0 is_stmt 0 discriminator 1
 299 0036 FB68     		ldr	r3, [r7, #12]
 300 0038 002B     		cmp	r3, #0
 301 003a EAD1     		bne	.L21
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 11


 302              	.L20:
 266:.\lib_Fat/sdcard.c **** 	}
 267:.\lib_Fat/sdcard.c **** 	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
 303              		.loc 1 267 0 is_stmt 1
 304 003c 0823     		mov	r3, #8
 305 003e FB18     		add	r3, r7, r3
 306 0040 1B78     		ldrb	r3, [r3]
 307 0042 FE2B     		cmp	r3, #254
 308 0044 01D0     		beq	.L22
 309              		.loc 1 267 0 is_stmt 0 discriminator 1
 310 0046 0023     		mov	r3, #0
 311 0048 0CE0     		b	.L24
 312              	.L22:
 268:.\lib_Fat/sdcard.c **** 
 269:.\lib_Fat/sdcard.c **** 	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
 313              		.loc 1 269 0 is_stmt 1
 314 004a 7A68     		ldr	r2, [r7, #4]
 315 004c 3B68     		ldr	r3, [r7]
 316 004e 101C     		mov	r0, r2
 317 0050 191C     		mov	r1, r3
 318 0052 FFF7FEFF 		bl	rcvr_mmc
 270:.\lib_Fat/sdcard.c **** 	rcvr_mmc(d, 2);					/* Discard CRC */
 319              		.loc 1 270 0
 320 0056 0823     		mov	r3, #8
 321 0058 FB18     		add	r3, r7, r3
 322 005a 181C     		mov	r0, r3
 323 005c 0221     		mov	r1, #2
 324 005e FFF7FEFF 		bl	rcvr_mmc
 271:.\lib_Fat/sdcard.c **** 
 272:.\lib_Fat/sdcard.c **** 	return 1;						/* Return with success */
 325              		.loc 1 272 0
 326 0062 0123     		mov	r3, #1
 327              	.L24:
 273:.\lib_Fat/sdcard.c **** }
 328              		.loc 1 273 0 discriminator 1
 329 0064 181C     		mov	r0, r3
 330 0066 BD46     		mov	sp, r7
 331 0068 04B0     		add	sp, sp, #16
 332              		@ sp needed
 333 006a 80BD     		pop	{r7, pc}
 334              		.cfi_endproc
 335              	.LFE68:
 336              		.size	rcvr_datablock, .-rcvr_datablock
 337              		.section	.text.xmit_datablock,"ax",%progbits
 338              		.align	2
 339              		.code	16
 340              		.thumb_func
 341              		.type	xmit_datablock, %function
 342              	xmit_datablock:
 343              	.LFB69:
 274:.\lib_Fat/sdcard.c **** 
 275:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 276:.\lib_Fat/sdcard.c **** /* Send a data packet to the card                                        */
 277:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 278:.\lib_Fat/sdcard.c **** 
 279:.\lib_Fat/sdcard.c **** static int xmit_datablock(const BYTE *buff, BYTE token)	/* 1:OK, 0:Failed */
 280:.\lib_Fat/sdcard.c **** {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 12


 344              		.loc 1 280 0
 345              		.cfi_startproc
 346 0000 80B5     		push	{r7, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 7, -8
 349              		.cfi_offset 14, -4
 350 0002 84B0     		sub	sp, sp, #16
 351              		.cfi_def_cfa_offset 24
 352 0004 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 354 0006 7860     		str	r0, [r7, #4]
 355 0008 0A1C     		mov	r2, r1
 356 000a FB1C     		add	r3, r7, #3
 357 000c 1A70     		strb	r2, [r3]
 281:.\lib_Fat/sdcard.c **** 	BYTE d[2];
 282:.\lib_Fat/sdcard.c **** 
 283:.\lib_Fat/sdcard.c **** 	if (!wait_ready()) return 0;
 358              		.loc 1 283 0
 359 000e FFF7FEFF 		bl	wait_ready
 360 0012 031E     		sub	r3, r0, #0
 361 0014 01D1     		bne	.L26
 362              		.loc 1 283 0 is_stmt 0 discriminator 1
 363 0016 0023     		mov	r3, #0
 364 0018 32E0     		b	.L29
 365              	.L26:
 284:.\lib_Fat/sdcard.c **** 
 285:.\lib_Fat/sdcard.c **** 	d[0] = token;
 366              		.loc 1 285 0 is_stmt 1
 367 001a 0C23     		mov	r3, #12
 368 001c FB18     		add	r3, r7, r3
 369 001e FA1C     		add	r2, r7, #3
 370 0020 1278     		ldrb	r2, [r2]
 371 0022 1A70     		strb	r2, [r3]
 286:.\lib_Fat/sdcard.c **** 	xmit_mmc(d, 1);				/* Xmit a token */
 372              		.loc 1 286 0
 373 0024 0C23     		mov	r3, #12
 374 0026 FB18     		add	r3, r7, r3
 375 0028 181C     		mov	r0, r3
 376 002a 0121     		mov	r1, #1
 377 002c FFF7FEFF 		bl	xmit_mmc
 287:.\lib_Fat/sdcard.c ****     CyDelayUs(M_DELAY_US); // <*> why?
 378              		.loc 1 287 0
 379 0030 6420     		mov	r0, #100
 380 0032 FFF7FEFF 		bl	CyDelayUs
 288:.\lib_Fat/sdcard.c **** 	if (token != 0xFD) {		/* Is it data token? */
 381              		.loc 1 288 0
 382 0036 FB1C     		add	r3, r7, #3
 383 0038 1B78     		ldrb	r3, [r3]
 384 003a FD2B     		cmp	r3, #253
 385 003c 1FD0     		beq	.L28
 289:.\lib_Fat/sdcard.c **** 		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
 386              		.loc 1 289 0
 387 003e 7A68     		ldr	r2, [r7, #4]
 388 0040 8023     		mov	r3, #128
 389 0042 9B00     		lsl	r3, r3, #2
 390 0044 101C     		mov	r0, r2
 391 0046 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 13


 392 0048 FFF7FEFF 		bl	xmit_mmc
 290:.\lib_Fat/sdcard.c ****         CyDelayUs(M_DELAY_US); // <*> why?
 393              		.loc 1 290 0
 394 004c 6420     		mov	r0, #100
 395 004e FFF7FEFF 		bl	CyDelayUs
 291:.\lib_Fat/sdcard.c **** 		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
 396              		.loc 1 291 0
 397 0052 0C23     		mov	r3, #12
 398 0054 FB18     		add	r3, r7, r3
 399 0056 181C     		mov	r0, r3
 400 0058 0221     		mov	r1, #2
 401 005a FFF7FEFF 		bl	rcvr_mmc
 292:.\lib_Fat/sdcard.c **** 		rcvr_mmc(d, 1);			/* Receive data response */
 402              		.loc 1 292 0
 403 005e 0C23     		mov	r3, #12
 404 0060 FB18     		add	r3, r7, r3
 405 0062 181C     		mov	r0, r3
 406 0064 0121     		mov	r1, #1
 407 0066 FFF7FEFF 		bl	rcvr_mmc
 293:.\lib_Fat/sdcard.c **** 		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
 408              		.loc 1 293 0
 409 006a 0C23     		mov	r3, #12
 410 006c FB18     		add	r3, r7, r3
 411 006e 1B78     		ldrb	r3, [r3]
 412 0070 1A1C     		mov	r2, r3
 413 0072 1F23     		mov	r3, #31
 414 0074 1340     		and	r3, r2
 415 0076 052B     		cmp	r3, #5
 416 0078 01D0     		beq	.L28
 294:.\lib_Fat/sdcard.c **** 			return 0;
 417              		.loc 1 294 0
 418 007a 0023     		mov	r3, #0
 419 007c 00E0     		b	.L29
 420              	.L28:
 295:.\lib_Fat/sdcard.c **** 	}
 296:.\lib_Fat/sdcard.c **** 
 297:.\lib_Fat/sdcard.c **** 	return 1;
 421              		.loc 1 297 0
 422 007e 0123     		mov	r3, #1
 423              	.L29:
 298:.\lib_Fat/sdcard.c **** }
 424              		.loc 1 298 0 discriminator 1
 425 0080 181C     		mov	r0, r3
 426 0082 BD46     		mov	sp, r7
 427 0084 04B0     		add	sp, sp, #16
 428              		@ sp needed
 429 0086 80BD     		pop	{r7, pc}
 430              		.cfi_endproc
 431              	.LFE69:
 432              		.size	xmit_datablock, .-xmit_datablock
 433              		.section	.text.send_cmd,"ax",%progbits
 434              		.align	2
 435              		.code	16
 436              		.thumb_func
 437              		.type	send_cmd, %function
 438              	send_cmd:
 439              	.LFB70:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 14


 299:.\lib_Fat/sdcard.c **** 
 300:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 301:.\lib_Fat/sdcard.c **** /* Send a command packet to the card                                     */
 302:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 303:.\lib_Fat/sdcard.c **** 
 304:.\lib_Fat/sdcard.c **** static BYTE send_cmd(BYTE cmd,	DWORD arg)		/* Returns command response (bit7==1:Send failed)*/
 305:.\lib_Fat/sdcard.c **** {
 440              		.loc 1 305 0
 441              		.cfi_startproc
 442 0000 90B5     		push	{r4, r7, lr}
 443              		.cfi_def_cfa_offset 12
 444              		.cfi_offset 4, -12
 445              		.cfi_offset 7, -8
 446              		.cfi_offset 14, -4
 447 0002 85B0     		sub	sp, sp, #20
 448              		.cfi_def_cfa_offset 32
 449 0004 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 451 0006 021C     		mov	r2, r0
 452 0008 3960     		str	r1, [r7]
 453 000a FB1D     		add	r3, r7, #7
 454 000c 1A70     		strb	r2, [r3]
 306:.\lib_Fat/sdcard.c **** 	BYTE n, d, buf[6];
 307:.\lib_Fat/sdcard.c **** 
 308:.\lib_Fat/sdcard.c **** 
 309:.\lib_Fat/sdcard.c **** 	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
 455              		.loc 1 309 0
 456 000e FB1D     		add	r3, r7, #7
 457 0010 1B78     		ldrb	r3, [r3]
 458 0012 5BB2     		sxtb	r3, r3
 459 0014 002B     		cmp	r3, #0
 460 0016 16DA     		bge	.L31
 310:.\lib_Fat/sdcard.c **** 		cmd &= 0x7F;
 461              		.loc 1 310 0
 462 0018 FB1D     		add	r3, r7, #7
 463 001a FA1D     		add	r2, r7, #7
 464 001c 1278     		ldrb	r2, [r2]
 465 001e 7F21     		mov	r1, #127
 466 0020 0A40     		and	r2, r1
 467 0022 1A70     		strb	r2, [r3]
 311:.\lib_Fat/sdcard.c **** 		n = send_cmd(CMD55, 0);
 468              		.loc 1 311 0
 469 0024 0F23     		mov	r3, #15
 470 0026 FC18     		add	r4, r7, r3
 471 0028 3720     		mov	r0, #55
 472 002a 0021     		mov	r1, #0
 473 002c FFF7E8FF 		bl	send_cmd
 474 0030 031C     		mov	r3, r0
 475 0032 2370     		strb	r3, [r4]
 312:.\lib_Fat/sdcard.c **** 		if (n > 1) return n;
 476              		.loc 1 312 0
 477 0034 0F23     		mov	r3, #15
 478 0036 FB18     		add	r3, r7, r3
 479 0038 1B78     		ldrb	r3, [r3]
 480 003a 012B     		cmp	r3, #1
 481 003c 03D9     		bls	.L31
 482              		.loc 1 312 0 is_stmt 0 discriminator 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 15


 483 003e 0F23     		mov	r3, #15
 484 0040 FB18     		add	r3, r7, r3
 485 0042 1B78     		ldrb	r3, [r3]
 486 0044 77E0     		b	.L39
 487              	.L31:
 313:.\lib_Fat/sdcard.c **** 	}
 314:.\lib_Fat/sdcard.c **** 
 315:.\lib_Fat/sdcard.c **** 	/* Select the card and wait for ready except to stop multiple block read */
 316:.\lib_Fat/sdcard.c **** 	if (cmd != CMD12) {
 488              		.loc 1 316 0 is_stmt 1
 489 0046 FB1D     		add	r3, r7, #7
 490 0048 1B78     		ldrb	r3, [r3]
 491 004a 0C2B     		cmp	r3, #12
 492 004c 07D0     		beq	.L33
 317:.\lib_Fat/sdcard.c **** 		deselect();
 493              		.loc 1 317 0
 494 004e FFF7FEFF 		bl	deselect
 318:.\lib_Fat/sdcard.c **** 		if (!select()) return 0xFF;
 495              		.loc 1 318 0
 496 0052 FFF7FEFF 		bl	select
 497 0056 031E     		sub	r3, r0, #0
 498 0058 01D1     		bne	.L33
 499              		.loc 1 318 0 is_stmt 0 discriminator 1
 500 005a FF23     		mov	r3, #255
 501 005c 6BE0     		b	.L39
 502              	.L33:
 319:.\lib_Fat/sdcard.c **** 	}
 320:.\lib_Fat/sdcard.c **** 
 321:.\lib_Fat/sdcard.c **** 	/* Send a command packet */
 322:.\lib_Fat/sdcard.c **** 	buf[0] = 0x40 | cmd;			/* Start + Command index */
 503              		.loc 1 322 0 is_stmt 1
 504 005e FB1D     		add	r3, r7, #7
 505 0060 1B78     		ldrb	r3, [r3]
 506 0062 4022     		mov	r2, #64
 507 0064 1343     		orr	r3, r2
 508 0066 DAB2     		uxtb	r2, r3
 509 0068 0823     		mov	r3, #8
 510 006a FB18     		add	r3, r7, r3
 511 006c 1A70     		strb	r2, [r3]
 323:.\lib_Fat/sdcard.c **** 	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
 512              		.loc 1 323 0
 513 006e 3B68     		ldr	r3, [r7]
 514 0070 1B0E     		lsr	r3, r3, #24
 515 0072 DAB2     		uxtb	r2, r3
 516 0074 0823     		mov	r3, #8
 517 0076 FB18     		add	r3, r7, r3
 518 0078 5A70     		strb	r2, [r3, #1]
 324:.\lib_Fat/sdcard.c **** 	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
 519              		.loc 1 324 0
 520 007a 3B68     		ldr	r3, [r7]
 521 007c 1B0C     		lsr	r3, r3, #16
 522 007e DAB2     		uxtb	r2, r3
 523 0080 0823     		mov	r3, #8
 524 0082 FB18     		add	r3, r7, r3
 525 0084 9A70     		strb	r2, [r3, #2]
 325:.\lib_Fat/sdcard.c **** 	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
 526              		.loc 1 325 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 16


 527 0086 3B68     		ldr	r3, [r7]
 528 0088 1B0A     		lsr	r3, r3, #8
 529 008a DAB2     		uxtb	r2, r3
 530 008c 0823     		mov	r3, #8
 531 008e FB18     		add	r3, r7, r3
 532 0090 DA70     		strb	r2, [r3, #3]
 326:.\lib_Fat/sdcard.c **** 	buf[4] = (BYTE)arg;				/* Argument[7..0] */
 533              		.loc 1 326 0
 534 0092 3B68     		ldr	r3, [r7]
 535 0094 DAB2     		uxtb	r2, r3
 536 0096 0823     		mov	r3, #8
 537 0098 FB18     		add	r3, r7, r3
 538 009a 1A71     		strb	r2, [r3, #4]
 327:.\lib_Fat/sdcard.c **** 	n = 0x01;						/* Dummy CRC + Stop */
 539              		.loc 1 327 0
 540 009c 0F23     		mov	r3, #15
 541 009e FB18     		add	r3, r7, r3
 542 00a0 0122     		mov	r2, #1
 543 00a2 1A70     		strb	r2, [r3]
 328:.\lib_Fat/sdcard.c **** 	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
 544              		.loc 1 328 0
 545 00a4 FB1D     		add	r3, r7, #7
 546 00a6 1B78     		ldrb	r3, [r3]
 547 00a8 002B     		cmp	r3, #0
 548 00aa 03D1     		bne	.L34
 549              		.loc 1 328 0 is_stmt 0 discriminator 1
 550 00ac 0F23     		mov	r3, #15
 551 00ae FB18     		add	r3, r7, r3
 552 00b0 9522     		mov	r2, #149
 553 00b2 1A70     		strb	r2, [r3]
 554              	.L34:
 329:.\lib_Fat/sdcard.c **** 	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
 555              		.loc 1 329 0 is_stmt 1
 556 00b4 FB1D     		add	r3, r7, #7
 557 00b6 1B78     		ldrb	r3, [r3]
 558 00b8 082B     		cmp	r3, #8
 559 00ba 03D1     		bne	.L35
 560              		.loc 1 329 0 is_stmt 0 discriminator 1
 561 00bc 0F23     		mov	r3, #15
 562 00be FB18     		add	r3, r7, r3
 563 00c0 8722     		mov	r2, #135
 564 00c2 1A70     		strb	r2, [r3]
 565              	.L35:
 330:.\lib_Fat/sdcard.c **** 	buf[5] = n;
 566              		.loc 1 330 0 is_stmt 1
 567 00c4 0823     		mov	r3, #8
 568 00c6 FB18     		add	r3, r7, r3
 569 00c8 0F22     		mov	r2, #15
 570 00ca BA18     		add	r2, r7, r2
 571 00cc 1278     		ldrb	r2, [r2]
 572 00ce 5A71     		strb	r2, [r3, #5]
 331:.\lib_Fat/sdcard.c **** 	xmit_mmc(buf, 6);
 573              		.loc 1 331 0
 574 00d0 0823     		mov	r3, #8
 575 00d2 FB18     		add	r3, r7, r3
 576 00d4 181C     		mov	r0, r3
 577 00d6 0621     		mov	r1, #6
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 17


 578 00d8 FFF7FEFF 		bl	xmit_mmc
 332:.\lib_Fat/sdcard.c ****     CyDelayUs(M_DELAY_US); // <*> why?
 579              		.loc 1 332 0
 580 00dc 6420     		mov	r0, #100
 581 00de FFF7FEFF 		bl	CyDelayUs
 333:.\lib_Fat/sdcard.c **** 
 334:.\lib_Fat/sdcard.c **** 	/* Receive command response */
 335:.\lib_Fat/sdcard.c **** 	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
 582              		.loc 1 335 0
 583 00e2 FB1D     		add	r3, r7, #7
 584 00e4 1B78     		ldrb	r3, [r3]
 585 00e6 0C2B     		cmp	r3, #12
 586 00e8 05D1     		bne	.L36
 587              		.loc 1 335 0 is_stmt 0 discriminator 1
 588 00ea 0E23     		mov	r3, #14
 589 00ec FB18     		add	r3, r7, r3
 590 00ee 181C     		mov	r0, r3
 591 00f0 0121     		mov	r1, #1
 592 00f2 FFF7FEFF 		bl	rcvr_mmc
 593              	.L36:
 336:.\lib_Fat/sdcard.c **** 	n = 20;								/* Wait for a valid response in timeout of 10 attempts */
 594              		.loc 1 336 0 is_stmt 1
 595 00f6 0F23     		mov	r3, #15
 596 00f8 FB18     		add	r3, r7, r3
 597 00fa 1422     		mov	r2, #20
 598 00fc 1A70     		strb	r2, [r3]
 599              	.L38:
 337:.\lib_Fat/sdcard.c **** 	do
 338:.\lib_Fat/sdcard.c ****     {
 339:.\lib_Fat/sdcard.c **** 		rcvr_mmc(&d, 1);
 600              		.loc 1 339 0 discriminator 2
 601 00fe 0E23     		mov	r3, #14
 602 0100 FB18     		add	r3, r7, r3
 603 0102 181C     		mov	r0, r3
 604 0104 0121     		mov	r1, #1
 605 0106 FFF7FEFF 		bl	rcvr_mmc
 340:.\lib_Fat/sdcard.c ****     }
 341:.\lib_Fat/sdcard.c **** 	while ((d & 0x80) && --n);
 606              		.loc 1 341 0 discriminator 2
 607 010a 0E23     		mov	r3, #14
 608 010c FB18     		add	r3, r7, r3
 609 010e 1B78     		ldrb	r3, [r3]
 610 0110 DBB2     		uxtb	r3, r3
 611 0112 5BB2     		sxtb	r3, r3
 612 0114 002B     		cmp	r3, #0
 613 0116 0BDA     		bge	.L37
 614              		.loc 1 341 0 is_stmt 0 discriminator 1
 615 0118 0F23     		mov	r3, #15
 616 011a FB18     		add	r3, r7, r3
 617 011c 0F22     		mov	r2, #15
 618 011e BA18     		add	r2, r7, r2
 619 0120 1278     		ldrb	r2, [r2]
 620 0122 013A     		sub	r2, r2, #1
 621 0124 1A70     		strb	r2, [r3]
 622 0126 0F23     		mov	r3, #15
 623 0128 FB18     		add	r3, r7, r3
 624 012a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 18


 625 012c 002B     		cmp	r3, #0
 626 012e E6D1     		bne	.L38
 627              	.L37:
 342:.\lib_Fat/sdcard.c **** 
 343:.\lib_Fat/sdcard.c **** 	return d;			/* Return with the response value */
 628              		.loc 1 343 0 is_stmt 1
 629 0130 0E23     		mov	r3, #14
 630 0132 FB18     		add	r3, r7, r3
 631 0134 1B78     		ldrb	r3, [r3]
 632              	.L39:
 344:.\lib_Fat/sdcard.c **** }
 633              		.loc 1 344 0 discriminator 1
 634 0136 181C     		mov	r0, r3
 635 0138 BD46     		mov	sp, r7
 636 013a 05B0     		add	sp, sp, #20
 637              		@ sp needed
 638 013c 90BD     		pop	{r4, r7, pc}
 639              		.cfi_endproc
 640              	.LFE70:
 641              		.size	send_cmd, .-send_cmd
 642 013e C046     		.section	.text.disk_status,"ax",%progbits
 643              		.align	2
 644              		.global	disk_status
 645              		.code	16
 646              		.thumb_func
 647              		.type	disk_status, %function
 648              	disk_status:
 649              	.LFB71:
 345:.\lib_Fat/sdcard.c **** 
 346:.\lib_Fat/sdcard.c **** /*--------------------------------------------------------------------------
 347:.\lib_Fat/sdcard.c **** 
 348:.\lib_Fat/sdcard.c ****    Public Functions
 349:.\lib_Fat/sdcard.c **** 
 350:.\lib_Fat/sdcard.c **** ---------------------------------------------------------------------------*/
 351:.\lib_Fat/sdcard.c **** 
 352:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 353:.\lib_Fat/sdcard.c **** /* Get Disk Status                                                       */
 354:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 355:.\lib_Fat/sdcard.c **** 
 356:.\lib_Fat/sdcard.c **** DSTATUS disk_status(BYTE drv) /* Drive number (always 0) */
 357:.\lib_Fat/sdcard.c **** {
 650              		.loc 1 357 0
 651              		.cfi_startproc
 652 0000 80B5     		push	{r7, lr}
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0002 82B0     		sub	sp, sp, #8
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 021C     		mov	r2, r0
 661 0008 FB1D     		add	r3, r7, #7
 662 000a 1A70     		strb	r2, [r3]
 358:.\lib_Fat/sdcard.c **** 	if (drv) return STA_NOINIT;
 663              		.loc 1 358 0
 664 000c FB1D     		add	r3, r7, #7
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 19


 665 000e 1B78     		ldrb	r3, [r3]
 666 0010 002B     		cmp	r3, #0
 667 0012 01D0     		beq	.L41
 668              		.loc 1 358 0 is_stmt 0 discriminator 1
 669 0014 0123     		mov	r3, #1
 670 0016 01E0     		b	.L42
 671              	.L41:
 359:.\lib_Fat/sdcard.c **** 
 360:.\lib_Fat/sdcard.c **** 	return Stat;
 672              		.loc 1 360 0 is_stmt 1
 673 0018 024B     		ldr	r3, .L43
 674 001a 1B78     		ldrb	r3, [r3]
 675              	.L42:
 361:.\lib_Fat/sdcard.c **** }
 676              		.loc 1 361 0
 677 001c 181C     		mov	r0, r3
 678 001e BD46     		mov	sp, r7
 679 0020 02B0     		add	sp, sp, #8
 680              		@ sp needed
 681 0022 80BD     		pop	{r7, pc}
 682              	.L44:
 683              		.align	2
 684              	.L43:
 685 0024 00000000 		.word	Stat
 686              		.cfi_endproc
 687              	.LFE71:
 688              		.size	disk_status, .-disk_status
 689              		.section	.text.disk_initialize,"ax",%progbits
 690              		.align	2
 691              		.global	disk_initialize
 692              		.code	16
 693              		.thumb_func
 694              		.type	disk_initialize, %function
 695              	disk_initialize:
 696              	.LFB72:
 362:.\lib_Fat/sdcard.c **** 
 363:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 364:.\lib_Fat/sdcard.c **** /* Initialize Disk Drive                                                 */
 365:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 366:.\lib_Fat/sdcard.c **** 
 367:.\lib_Fat/sdcard.c **** DSTATUS disk_initialize(BYTE drv) /* Physical drive nmuber (0) */
 368:.\lib_Fat/sdcard.c **** {
 697              		.loc 1 368 0
 698              		.cfi_startproc
 699 0000 80B5     		push	{r7, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 86B0     		sub	sp, sp, #24
 704              		.cfi_def_cfa_offset 32
 705 0004 00AF     		add	r7, sp, #0
 706              		.cfi_def_cfa_register 7
 707 0006 021C     		mov	r2, r0
 708 0008 FB1D     		add	r3, r7, #7
 709 000a 1A70     		strb	r2, [r3]
 369:.\lib_Fat/sdcard.c **** 	BYTE n, ty, cmd, buf[4];
 370:.\lib_Fat/sdcard.c **** 	UINT tmr;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 20


 371:.\lib_Fat/sdcard.c **** 	DSTATUS s;
 372:.\lib_Fat/sdcard.c **** 
 373:.\lib_Fat/sdcard.c **** 	if (drv) return RES_NOTRDY;
 710              		.loc 1 373 0
 711 000c FB1D     		add	r3, r7, #7
 712 000e 1B78     		ldrb	r3, [r3]
 713 0010 002B     		cmp	r3, #0
 714 0012 01D0     		beq	.L46
 715              		.loc 1 373 0 is_stmt 0 discriminator 1
 716 0014 0323     		mov	r3, #3
 717 0016 CEE0     		b	.L66
 718              	.L46:
 374:.\lib_Fat/sdcard.c **** 
 375:.\lib_Fat/sdcard.c **** 	dly_us(10000);			/* 10ms */
 719              		.loc 1 375 0 is_stmt 1
 720 0018 694B     		ldr	r3, .L67
 721 001a 181C     		mov	r0, r3
 722 001c FFF7FEFF 		bl	CyDelayUs
 376:.\lib_Fat/sdcard.c **** 
 377:.\lib_Fat/sdcard.c **** 	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive
 723              		.loc 1 377 0
 724 0020 1723     		mov	r3, #23
 725 0022 FB18     		add	r3, r7, r3
 726 0024 0A22     		mov	r2, #10
 727 0026 1A70     		strb	r2, [r3]
 728 0028 0CE0     		b	.L48
 729              	.L49:
 730              		.loc 1 377 0 is_stmt 0 discriminator 3
 731 002a 0823     		mov	r3, #8
 732 002c FB18     		add	r3, r7, r3
 733 002e 181C     		mov	r0, r3
 734 0030 0121     		mov	r1, #1
 735 0032 FFF7FEFF 		bl	rcvr_mmc
 736 0036 1723     		mov	r3, #23
 737 0038 FB18     		add	r3, r7, r3
 738 003a 1A78     		ldrb	r2, [r3]
 739 003c 1723     		mov	r3, #23
 740 003e FB18     		add	r3, r7, r3
 741 0040 013A     		sub	r2, r2, #1
 742 0042 1A70     		strb	r2, [r3]
 743              	.L48:
 744              		.loc 1 377 0 discriminator 1
 745 0044 1723     		mov	r3, #23
 746 0046 FB18     		add	r3, r7, r3
 747 0048 1B78     		ldrb	r3, [r3]
 748 004a 002B     		cmp	r3, #0
 749 004c EDD1     		bne	.L49
 378:.\lib_Fat/sdcard.c **** 
 379:.\lib_Fat/sdcard.c **** 	ty = 0;
 750              		.loc 1 379 0 is_stmt 1
 751 004e 1623     		mov	r3, #22
 752 0050 FB18     		add	r3, r7, r3
 753 0052 0022     		mov	r2, #0
 754 0054 1A70     		strb	r2, [r3]
 380:.\lib_Fat/sdcard.c **** 	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
 755              		.loc 1 380 0
 756 0056 0020     		mov	r0, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 21


 757 0058 0021     		mov	r1, #0
 758 005a FFF7FEFF 		bl	send_cmd
 759 005e 031E     		sub	r3, r0, #0
 760 0060 012B     		cmp	r3, #1
 761 0062 00D0     		beq	.LCB663
 762 0064 8FE0     		b	.L50	@long jump
 763              	.LCB663:
 381:.\lib_Fat/sdcard.c **** 		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 764              		.loc 1 381 0
 765 0066 D523     		mov	r3, #213
 766 0068 5B00     		lsl	r3, r3, #1
 767 006a 0820     		mov	r0, #8
 768 006c 191C     		mov	r1, r3
 769 006e FFF7FEFF 		bl	send_cmd
 770 0072 031E     		sub	r3, r0, #0
 771 0074 012B     		cmp	r3, #1
 772 0076 46D1     		bne	.L51
 382:.\lib_Fat/sdcard.c **** 			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
 773              		.loc 1 382 0
 774 0078 0823     		mov	r3, #8
 775 007a FB18     		add	r3, r7, r3
 776 007c 181C     		mov	r0, r3
 777 007e 0421     		mov	r1, #4
 778 0080 FFF7FEFF 		bl	rcvr_mmc
 383:.\lib_Fat/sdcard.c **** 			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
 779              		.loc 1 383 0
 780 0084 0823     		mov	r3, #8
 781 0086 FB18     		add	r3, r7, r3
 782 0088 9B78     		ldrb	r3, [r3, #2]
 783 008a 012B     		cmp	r3, #1
 784 008c 00D0     		beq	.LCB681
 785 008e 7AE0     		b	.L50	@long jump
 786              	.LCB681:
 787              		.loc 1 383 0 is_stmt 0 discriminator 1
 788 0090 0823     		mov	r3, #8
 789 0092 FB18     		add	r3, r7, r3
 790 0094 DB78     		ldrb	r3, [r3, #3]
 791 0096 AA2B     		cmp	r3, #170
 792 0098 00D0     		beq	.LCB686
 793 009a 74E0     		b	.L50	@long jump
 794              	.LCB686:
 384:.\lib_Fat/sdcard.c **** 				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
 795              		.loc 1 384 0 is_stmt 1
 796 009c FA23     		mov	r3, #250
 797 009e 9B00     		lsl	r3, r3, #2
 798 00a0 3B61     		str	r3, [r7, #16]
 799 00a2 10E0     		b	.L53
 800              	.L56:
 385:.\lib_Fat/sdcard.c **** 					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
 801              		.loc 1 385 0
 802 00a4 8023     		mov	r3, #128
 803 00a6 DB05     		lsl	r3, r3, #23
 804 00a8 A920     		mov	r0, #169
 805 00aa 191C     		mov	r1, r3
 806 00ac FFF7FEFF 		bl	send_cmd
 807 00b0 031E     		sub	r3, r0, #0
 808 00b2 00D1     		bne	.L54
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 22


 809 00b4 0AE0     		b	.L55
 810              	.L54:
 386:.\lib_Fat/sdcard.c **** 					dly_us(1000);
 811              		.loc 1 386 0 discriminator 2
 812 00b6 FA23     		mov	r3, #250
 813 00b8 9B00     		lsl	r3, r3, #2
 814 00ba 181C     		mov	r0, r3
 815 00bc FFF7FEFF 		bl	CyDelayUs
 384:.\lib_Fat/sdcard.c **** 				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
 816              		.loc 1 384 0 discriminator 2
 817 00c0 3B69     		ldr	r3, [r7, #16]
 818 00c2 013B     		sub	r3, r3, #1
 819 00c4 3B61     		str	r3, [r7, #16]
 820              	.L53:
 384:.\lib_Fat/sdcard.c **** 				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
 821              		.loc 1 384 0 is_stmt 0 discriminator 1
 822 00c6 3B69     		ldr	r3, [r7, #16]
 823 00c8 002B     		cmp	r3, #0
 824 00ca EBD1     		bne	.L56
 825              	.L55:
 387:.\lib_Fat/sdcard.c **** 				}
 388:.\lib_Fat/sdcard.c **** 				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
 826              		.loc 1 388 0 is_stmt 1
 827 00cc 3B69     		ldr	r3, [r7, #16]
 828 00ce 002B     		cmp	r3, #0
 829 00d0 59D0     		beq	.L50
 830              		.loc 1 388 0 is_stmt 0 discriminator 1
 831 00d2 3A20     		mov	r0, #58
 832 00d4 0021     		mov	r1, #0
 833 00d6 FFF7FEFF 		bl	send_cmd
 834 00da 031E     		sub	r3, r0, #0
 835 00dc 53D1     		bne	.L50
 389:.\lib_Fat/sdcard.c **** 					rcvr_mmc(buf, 4);
 836              		.loc 1 389 0 is_stmt 1
 837 00de 0823     		mov	r3, #8
 838 00e0 FB18     		add	r3, r7, r3
 839 00e2 181C     		mov	r0, r3
 840 00e4 0421     		mov	r1, #4
 841 00e6 FFF7FEFF 		bl	rcvr_mmc
 390:.\lib_Fat/sdcard.c **** 					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
 842              		.loc 1 390 0
 843 00ea 0823     		mov	r3, #8
 844 00ec FB18     		add	r3, r7, r3
 845 00ee 1B78     		ldrb	r3, [r3]
 846 00f0 1A1C     		mov	r2, r3
 847 00f2 4023     		mov	r3, #64
 848 00f4 1340     		and	r3, r2
 849 00f6 01D0     		beq	.L57
 850              		.loc 1 390 0 is_stmt 0 discriminator 1
 851 00f8 0C22     		mov	r2, #12
 852 00fa 00E0     		b	.L58
 853              	.L57:
 854              		.loc 1 390 0 discriminator 2
 855 00fc 0422     		mov	r2, #4
 856              	.L58:
 857              		.loc 1 390 0 discriminator 4
 858 00fe 1623     		mov	r3, #22
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 23


 859 0100 FB18     		add	r3, r7, r3
 860 0102 1A70     		strb	r2, [r3]
 861 0104 3FE0     		b	.L50
 862              	.L51:
 391:.\lib_Fat/sdcard.c **** 				}
 392:.\lib_Fat/sdcard.c **** 			}
 393:.\lib_Fat/sdcard.c **** 		} else {							/* SDv1 or MMCv3 */
 394:.\lib_Fat/sdcard.c **** 			if (send_cmd(ACMD41, 0) <= 1) 	{
 863              		.loc 1 394 0 is_stmt 1
 864 0106 A920     		mov	r0, #169
 865 0108 0021     		mov	r1, #0
 866 010a FFF7FEFF 		bl	send_cmd
 867 010e 031E     		sub	r3, r0, #0
 868 0110 012B     		cmp	r3, #1
 869 0112 08D8     		bhi	.L59
 395:.\lib_Fat/sdcard.c **** 				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
 870              		.loc 1 395 0
 871 0114 1623     		mov	r3, #22
 872 0116 FB18     		add	r3, r7, r3
 873 0118 0222     		mov	r2, #2
 874 011a 1A70     		strb	r2, [r3]
 875 011c 1523     		mov	r3, #21
 876 011e FB18     		add	r3, r7, r3
 877 0120 A922     		mov	r2, #169
 878 0122 1A70     		strb	r2, [r3]
 879 0124 07E0     		b	.L60
 880              	.L59:
 396:.\lib_Fat/sdcard.c **** 			} else {
 397:.\lib_Fat/sdcard.c **** 				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
 881              		.loc 1 397 0
 882 0126 1623     		mov	r3, #22
 883 0128 FB18     		add	r3, r7, r3
 884 012a 0122     		mov	r2, #1
 885 012c 1A70     		strb	r2, [r3]
 886 012e 1523     		mov	r3, #21
 887 0130 FB18     		add	r3, r7, r3
 888 0132 0122     		mov	r2, #1
 889 0134 1A70     		strb	r2, [r3]
 890              	.L60:
 398:.\lib_Fat/sdcard.c **** 			}
 399:.\lib_Fat/sdcard.c **** 			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
 891              		.loc 1 399 0
 892 0136 FA23     		mov	r3, #250
 893 0138 9B00     		lsl	r3, r3, #2
 894 013a 3B61     		str	r3, [r7, #16]
 895 013c 11E0     		b	.L61
 896              	.L64:
 400:.\lib_Fat/sdcard.c **** 				if (send_cmd(cmd, 0) == 0) break;
 897              		.loc 1 400 0
 898 013e 1523     		mov	r3, #21
 899 0140 FB18     		add	r3, r7, r3
 900 0142 1B78     		ldrb	r3, [r3]
 901 0144 181C     		mov	r0, r3
 902 0146 0021     		mov	r1, #0
 903 0148 FFF7FEFF 		bl	send_cmd
 904 014c 031E     		sub	r3, r0, #0
 905 014e 00D1     		bne	.L62
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 24


 906 0150 0AE0     		b	.L63
 907              	.L62:
 401:.\lib_Fat/sdcard.c **** 				dly_us(1000);
 908              		.loc 1 401 0 discriminator 2
 909 0152 FA23     		mov	r3, #250
 910 0154 9B00     		lsl	r3, r3, #2
 911 0156 181C     		mov	r0, r3
 912 0158 FFF7FEFF 		bl	CyDelayUs
 399:.\lib_Fat/sdcard.c **** 				if (send_cmd(cmd, 0) == 0) break;
 913              		.loc 1 399 0 discriminator 2
 914 015c 3B69     		ldr	r3, [r7, #16]
 915 015e 013B     		sub	r3, r3, #1
 916 0160 3B61     		str	r3, [r7, #16]
 917              	.L61:
 399:.\lib_Fat/sdcard.c **** 				if (send_cmd(cmd, 0) == 0) break;
 918              		.loc 1 399 0 is_stmt 0 discriminator 1
 919 0162 3B69     		ldr	r3, [r7, #16]
 920 0164 002B     		cmp	r3, #0
 921 0166 EAD1     		bne	.L64
 922              	.L63:
 402:.\lib_Fat/sdcard.c **** 			}
 403:.\lib_Fat/sdcard.c **** 			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
 923              		.loc 1 403 0 is_stmt 1
 924 0168 3B69     		ldr	r3, [r7, #16]
 925 016a 002B     		cmp	r3, #0
 926 016c 07D0     		beq	.L65
 927              		.loc 1 403 0 is_stmt 0 discriminator 1
 928 016e 8023     		mov	r3, #128
 929 0170 9B00     		lsl	r3, r3, #2
 930 0172 1020     		mov	r0, #16
 931 0174 191C     		mov	r1, r3
 932 0176 FFF7FEFF 		bl	send_cmd
 933 017a 031E     		sub	r3, r0, #0
 934 017c 03D0     		beq	.L50
 935              	.L65:
 404:.\lib_Fat/sdcard.c **** 				ty = 0;
 936              		.loc 1 404 0 is_stmt 1
 937 017e 1623     		mov	r3, #22
 938 0180 FB18     		add	r3, r7, r3
 939 0182 0022     		mov	r2, #0
 940 0184 1A70     		strb	r2, [r3]
 941              	.L50:
 405:.\lib_Fat/sdcard.c **** 		}
 406:.\lib_Fat/sdcard.c **** 	}
 407:.\lib_Fat/sdcard.c **** 	CardType = ty;
 942              		.loc 1 407 0
 943 0186 0F4B     		ldr	r3, .L67+4
 944 0188 1622     		mov	r2, #22
 945 018a BA18     		add	r2, r7, r2
 946 018c 1278     		ldrb	r2, [r2]
 947 018e 1A70     		strb	r2, [r3]
 408:.\lib_Fat/sdcard.c **** 	s = ty ? 0 : STA_NOINIT;
 948              		.loc 1 408 0
 949 0190 1623     		mov	r3, #22
 950 0192 FB18     		add	r3, r7, r3
 951 0194 1B78     		ldrb	r3, [r3]
 952 0196 5A42     		neg	r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 25


 953 0198 5341     		adc	r3, r3, r2
 954 019a DAB2     		uxtb	r2, r3
 955 019c 0F23     		mov	r3, #15
 956 019e FB18     		add	r3, r7, r3
 957 01a0 1A70     		strb	r2, [r3]
 409:.\lib_Fat/sdcard.c **** 	Stat = s;
 958              		.loc 1 409 0
 959 01a2 094B     		ldr	r3, .L67+8
 960 01a4 0F22     		mov	r2, #15
 961 01a6 BA18     		add	r2, r7, r2
 962 01a8 1278     		ldrb	r2, [r2]
 963 01aa 1A70     		strb	r2, [r3]
 410:.\lib_Fat/sdcard.c **** 
 411:.\lib_Fat/sdcard.c **** 	deselect();
 964              		.loc 1 411 0
 965 01ac FFF7FEFF 		bl	deselect
 412:.\lib_Fat/sdcard.c **** 
 413:.\lib_Fat/sdcard.c **** 	return s;
 966              		.loc 1 413 0
 967 01b0 0F23     		mov	r3, #15
 968 01b2 FB18     		add	r3, r7, r3
 969 01b4 1B78     		ldrb	r3, [r3]
 970              	.L66:
 414:.\lib_Fat/sdcard.c **** }
 971              		.loc 1 414 0 discriminator 1
 972 01b6 181C     		mov	r0, r3
 973 01b8 BD46     		mov	sp, r7
 974 01ba 06B0     		add	sp, sp, #24
 975              		@ sp needed
 976 01bc 80BD     		pop	{r7, pc}
 977              	.L68:
 978 01be C046     		.align	2
 979              	.L67:
 980 01c0 10270000 		.word	10000
 981 01c4 00000000 		.word	CardType
 982 01c8 00000000 		.word	Stat
 983              		.cfi_endproc
 984              	.LFE72:
 985              		.size	disk_initialize, .-disk_initialize
 986              		.section	.text.disk_read,"ax",%progbits
 987              		.align	2
 988              		.global	disk_read
 989              		.code	16
 990              		.thumb_func
 991              		.type	disk_read, %function
 992              	disk_read:
 993              	.LFB73:
 415:.\lib_Fat/sdcard.c **** 
 416:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 417:.\lib_Fat/sdcard.c **** /* Read Sector(s)                                                        */
 418:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 419:.\lib_Fat/sdcard.c **** 
 420:.\lib_Fat/sdcard.c **** DRESULT disk_read(BYTE drv,	BYTE *buff,	DWORD sector, UINT count) /* Physical drive nmuber (0) */
 421:.\lib_Fat/sdcard.c **** {
 994              		.loc 1 421 0
 995              		.cfi_startproc
 996 0000 80B5     		push	{r7, lr}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 26


 997              		.cfi_def_cfa_offset 8
 998              		.cfi_offset 7, -8
 999              		.cfi_offset 14, -4
 1000 0002 86B0     		sub	sp, sp, #24
 1001              		.cfi_def_cfa_offset 32
 1002 0004 00AF     		add	r7, sp, #0
 1003              		.cfi_def_cfa_register 7
 1004 0006 B960     		str	r1, [r7, #8]
 1005 0008 7A60     		str	r2, [r7, #4]
 1006 000a 3B60     		str	r3, [r7]
 1007 000c 0F23     		mov	r3, #15
 1008 000e FB18     		add	r3, r7, r3
 1009 0010 021C     		add	r2, r0, #0
 1010 0012 1A70     		strb	r2, [r3]
 422:.\lib_Fat/sdcard.c **** 	BYTE cmd;
 423:.\lib_Fat/sdcard.c **** 
 424:.\lib_Fat/sdcard.c **** 	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
 1011              		.loc 1 424 0
 1012 0014 0F23     		mov	r3, #15
 1013 0016 FB18     		add	r3, r7, r3
 1014 0018 1B78     		ldrb	r3, [r3]
 1015 001a 181C     		mov	r0, r3
 1016 001c FFF7FEFF 		bl	disk_status
 1017 0020 031C     		mov	r3, r0
 1018 0022 1A1C     		mov	r2, r3
 1019 0024 0123     		mov	r3, #1
 1020 0026 1340     		and	r3, r2
 1021 0028 01D0     		beq	.L70
 1022              		.loc 1 424 0 is_stmt 0 discriminator 1
 1023 002a 0323     		mov	r3, #3
 1024 002c 40E0     		b	.L71
 1025              	.L70:
 425:.\lib_Fat/sdcard.c **** 	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
 1026              		.loc 1 425 0 is_stmt 1
 1027 002e 224B     		ldr	r3, .L79
 1028 0030 1B78     		ldrb	r3, [r3]
 1029 0032 1A1C     		mov	r2, r3
 1030 0034 0823     		mov	r3, #8
 1031 0036 1340     		and	r3, r2
 1032 0038 02D1     		bne	.L72
 1033              		.loc 1 425 0 is_stmt 0 discriminator 1
 1034 003a 7B68     		ldr	r3, [r7, #4]
 1035 003c 5B02     		lsl	r3, r3, #9
 1036 003e 7B60     		str	r3, [r7, #4]
 1037              	.L72:
 426:.\lib_Fat/sdcard.c **** 
 427:.\lib_Fat/sdcard.c **** 	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
 1038              		.loc 1 427 0 is_stmt 1
 1039 0040 3B68     		ldr	r3, [r7]
 1040 0042 012B     		cmp	r3, #1
 1041 0044 01D9     		bls	.L73
 1042              		.loc 1 427 0 is_stmt 0 discriminator 1
 1043 0046 1222     		mov	r2, #18
 1044 0048 00E0     		b	.L74
 1045              	.L73:
 1046              		.loc 1 427 0 discriminator 2
 1047 004a 1122     		mov	r2, #17
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 27


 1048              	.L74:
 1049              		.loc 1 427 0 discriminator 4
 1050 004c 1723     		mov	r3, #23
 1051 004e FB18     		add	r3, r7, r3
 1052 0050 1A70     		strb	r2, [r3]
 428:.\lib_Fat/sdcard.c **** 	if (send_cmd(cmd, sector) == 0) {
 1053              		.loc 1 428 0 is_stmt 1 discriminator 4
 1054 0052 1723     		mov	r3, #23
 1055 0054 FB18     		add	r3, r7, r3
 1056 0056 1A78     		ldrb	r2, [r3]
 1057 0058 7B68     		ldr	r3, [r7, #4]
 1058 005a 101C     		mov	r0, r2
 1059 005c 191C     		mov	r1, r3
 1060 005e FFF7FEFF 		bl	send_cmd
 1061 0062 031E     		sub	r3, r0, #0
 1062 0064 1ED1     		bne	.L75
 1063              	.L78:
 429:.\lib_Fat/sdcard.c **** 		do {
 430:.\lib_Fat/sdcard.c **** 			if (!rcvr_datablock(buff, 512)) break;
 1064              		.loc 1 430 0
 1065 0066 BA68     		ldr	r2, [r7, #8]
 1066 0068 8023     		mov	r3, #128
 1067 006a 9B00     		lsl	r3, r3, #2
 1068 006c 101C     		mov	r0, r2
 1069 006e 191C     		mov	r1, r3
 1070 0070 FFF7FEFF 		bl	rcvr_datablock
 1071 0074 031E     		sub	r3, r0, #0
 1072 0076 00D1     		bne	.L76
 1073 0078 0BE0     		b	.L77
 1074              	.L76:
 431:.\lib_Fat/sdcard.c **** 			buff += 512;
 1075              		.loc 1 431 0
 1076 007a BB68     		ldr	r3, [r7, #8]
 1077 007c 8022     		mov	r2, #128
 1078 007e 9200     		lsl	r2, r2, #2
 1079 0080 9446     		mov	ip, r2
 1080 0082 6344     		add	r3, r3, ip
 1081 0084 BB60     		str	r3, [r7, #8]
 432:.\lib_Fat/sdcard.c **** 		} while (--count);
 1082              		.loc 1 432 0
 1083 0086 3B68     		ldr	r3, [r7]
 1084 0088 013B     		sub	r3, r3, #1
 1085 008a 3B60     		str	r3, [r7]
 1086 008c 3B68     		ldr	r3, [r7]
 1087 008e 002B     		cmp	r3, #0
 1088 0090 E9D1     		bne	.L78
 1089              	.L77:
 433:.\lib_Fat/sdcard.c **** 		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
 1090              		.loc 1 433 0
 1091 0092 1723     		mov	r3, #23
 1092 0094 FB18     		add	r3, r7, r3
 1093 0096 1B78     		ldrb	r3, [r3]
 1094 0098 122B     		cmp	r3, #18
 1095 009a 03D1     		bne	.L75
 1096              		.loc 1 433 0 is_stmt 0 discriminator 1
 1097 009c 0C20     		mov	r0, #12
 1098 009e 0021     		mov	r1, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 28


 1099 00a0 FFF7FEFF 		bl	send_cmd
 1100              	.L75:
 434:.\lib_Fat/sdcard.c **** 	}
 435:.\lib_Fat/sdcard.c **** 	deselect();
 1101              		.loc 1 435 0 is_stmt 1
 1102 00a4 FFF7FEFF 		bl	deselect
 436:.\lib_Fat/sdcard.c **** 
 437:.\lib_Fat/sdcard.c **** 	return count ? RES_ERROR : RES_OK;
 1103              		.loc 1 437 0
 1104 00a8 3B68     		ldr	r3, [r7]
 1105 00aa 5A1E     		sub	r2, r3, #1
 1106 00ac 9341     		sbc	r3, r3, r2
 1107 00ae DBB2     		uxtb	r3, r3
 1108              	.L71:
 438:.\lib_Fat/sdcard.c **** }
 1109              		.loc 1 438 0
 1110 00b0 181C     		mov	r0, r3
 1111 00b2 BD46     		mov	sp, r7
 1112 00b4 06B0     		add	sp, sp, #24
 1113              		@ sp needed
 1114 00b6 80BD     		pop	{r7, pc}
 1115              	.L80:
 1116              		.align	2
 1117              	.L79:
 1118 00b8 00000000 		.word	CardType
 1119              		.cfi_endproc
 1120              	.LFE73:
 1121              		.size	disk_read, .-disk_read
 1122              		.section	.text.disk_write,"ax",%progbits
 1123              		.align	2
 1124              		.global	disk_write
 1125              		.code	16
 1126              		.thumb_func
 1127              		.type	disk_write, %function
 1128              	disk_write:
 1129              	.LFB74:
 439:.\lib_Fat/sdcard.c **** 
 440:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 441:.\lib_Fat/sdcard.c **** /* Write Sector(s)                                                       */
 442:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 443:.\lib_Fat/sdcard.c **** 
 444:.\lib_Fat/sdcard.c **** DRESULT disk_write (
 445:.\lib_Fat/sdcard.c **** 	BYTE drv,			/* Physical drive nmuber (0) */
 446:.\lib_Fat/sdcard.c **** 	const BYTE *buff,	/* Pointer to the data to be written */
 447:.\lib_Fat/sdcard.c **** 	DWORD sector,		/* Start sector number (LBA) */
 448:.\lib_Fat/sdcard.c **** 	UINT count			/* Sector count (1..128) */
 449:.\lib_Fat/sdcard.c **** )
 450:.\lib_Fat/sdcard.c **** {
 1130              		.loc 1 450 0
 1131              		.cfi_startproc
 1132 0000 80B5     		push	{r7, lr}
 1133              		.cfi_def_cfa_offset 8
 1134              		.cfi_offset 7, -8
 1135              		.cfi_offset 14, -4
 1136 0002 84B0     		sub	sp, sp, #16
 1137              		.cfi_def_cfa_offset 24
 1138 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 29


 1139              		.cfi_def_cfa_register 7
 1140 0006 B960     		str	r1, [r7, #8]
 1141 0008 7A60     		str	r2, [r7, #4]
 1142 000a 3B60     		str	r3, [r7]
 1143 000c 0F23     		mov	r3, #15
 1144 000e FB18     		add	r3, r7, r3
 1145 0010 021C     		add	r2, r0, #0
 1146 0012 1A70     		strb	r2, [r3]
 451:.\lib_Fat/sdcard.c **** 	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
 1147              		.loc 1 451 0
 1148 0014 0F23     		mov	r3, #15
 1149 0016 FB18     		add	r3, r7, r3
 1150 0018 1B78     		ldrb	r3, [r3]
 1151 001a 181C     		mov	r0, r3
 1152 001c FFF7FEFF 		bl	disk_status
 1153 0020 031C     		mov	r3, r0
 1154 0022 1A1C     		mov	r2, r3
 1155 0024 0123     		mov	r3, #1
 1156 0026 1340     		and	r3, r2
 1157 0028 01D0     		beq	.L82
 1158              		.loc 1 451 0 is_stmt 0 discriminator 1
 1159 002a 0323     		mov	r3, #3
 1160 002c 50E0     		b	.L83
 1161              	.L82:
 452:.\lib_Fat/sdcard.c **** 	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
 1162              		.loc 1 452 0 is_stmt 1
 1163 002e 2A4B     		ldr	r3, .L92
 1164 0030 1B78     		ldrb	r3, [r3]
 1165 0032 1A1C     		mov	r2, r3
 1166 0034 0823     		mov	r3, #8
 1167 0036 1340     		and	r3, r2
 1168 0038 02D1     		bne	.L84
 1169              		.loc 1 452 0 is_stmt 0 discriminator 1
 1170 003a 7B68     		ldr	r3, [r7, #4]
 1171 003c 5B02     		lsl	r3, r3, #9
 1172 003e 7B60     		str	r3, [r7, #4]
 1173              	.L84:
 453:.\lib_Fat/sdcard.c **** 
 454:.\lib_Fat/sdcard.c **** 	if (count == 1) {	/* Single block write */
 1174              		.loc 1 454 0 is_stmt 1
 1175 0040 3B68     		ldr	r3, [r7]
 1176 0042 012B     		cmp	r3, #1
 1177 0044 10D1     		bne	.L85
 455:.\lib_Fat/sdcard.c **** 		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 1178              		.loc 1 455 0
 1179 0046 7B68     		ldr	r3, [r7, #4]
 1180 0048 1820     		mov	r0, #24
 1181 004a 191C     		mov	r1, r3
 1182 004c FFF7FEFF 		bl	send_cmd
 1183 0050 031E     		sub	r3, r0, #0
 1184 0052 37D1     		bne	.L87
 456:.\lib_Fat/sdcard.c **** 			&& xmit_datablock(buff, 0xFE))
 1185              		.loc 1 456 0
 1186 0054 BB68     		ldr	r3, [r7, #8]
 1187 0056 181C     		mov	r0, r3
 1188 0058 FE21     		mov	r1, #254
 1189 005a FFF7FEFF 		bl	xmit_datablock
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 30


 1190 005e 031E     		sub	r3, r0, #0
 1191 0060 30D0     		beq	.L87
 457:.\lib_Fat/sdcard.c **** 			count = 0;
 1192              		.loc 1 457 0
 1193 0062 0023     		mov	r3, #0
 1194 0064 3B60     		str	r3, [r7]
 1195 0066 2DE0     		b	.L87
 1196              	.L85:
 458:.\lib_Fat/sdcard.c **** 	}
 459:.\lib_Fat/sdcard.c **** 	else {				/* Multiple block write */
 460:.\lib_Fat/sdcard.c **** 		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 1197              		.loc 1 460 0
 1198 0068 1B4B     		ldr	r3, .L92
 1199 006a 1B78     		ldrb	r3, [r3]
 1200 006c 1A1C     		mov	r2, r3
 1201 006e 0623     		mov	r3, #6
 1202 0070 1340     		and	r3, r2
 1203 0072 04D0     		beq	.L88
 1204              		.loc 1 460 0 is_stmt 0 discriminator 1
 1205 0074 3B68     		ldr	r3, [r7]
 1206 0076 9720     		mov	r0, #151
 1207 0078 191C     		mov	r1, r3
 1208 007a FFF7FEFF 		bl	send_cmd
 1209              	.L88:
 461:.\lib_Fat/sdcard.c **** 		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 1210              		.loc 1 461 0 is_stmt 1
 1211 007e 7B68     		ldr	r3, [r7, #4]
 1212 0080 1920     		mov	r0, #25
 1213 0082 191C     		mov	r1, r3
 1214 0084 FFF7FEFF 		bl	send_cmd
 1215 0088 031E     		sub	r3, r0, #0
 1216 008a 1BD1     		bne	.L87
 1217              	.L91:
 462:.\lib_Fat/sdcard.c **** 			do {
 463:.\lib_Fat/sdcard.c **** 				if (!xmit_datablock(buff, 0xFC)) break;
 1218              		.loc 1 463 0
 1219 008c BB68     		ldr	r3, [r7, #8]
 1220 008e 181C     		mov	r0, r3
 1221 0090 FC21     		mov	r1, #252
 1222 0092 FFF7FEFF 		bl	xmit_datablock
 1223 0096 031E     		sub	r3, r0, #0
 1224 0098 00D1     		bne	.L89
 1225 009a 0BE0     		b	.L90
 1226              	.L89:
 464:.\lib_Fat/sdcard.c **** 				buff += 512;
 1227              		.loc 1 464 0
 1228 009c BB68     		ldr	r3, [r7, #8]
 1229 009e 8022     		mov	r2, #128
 1230 00a0 9200     		lsl	r2, r2, #2
 1231 00a2 9446     		mov	ip, r2
 1232 00a4 6344     		add	r3, r3, ip
 1233 00a6 BB60     		str	r3, [r7, #8]
 465:.\lib_Fat/sdcard.c **** 			} while (--count);
 1234              		.loc 1 465 0
 1235 00a8 3B68     		ldr	r3, [r7]
 1236 00aa 013B     		sub	r3, r3, #1
 1237 00ac 3B60     		str	r3, [r7]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 31


 1238 00ae 3B68     		ldr	r3, [r7]
 1239 00b0 002B     		cmp	r3, #0
 1240 00b2 EBD1     		bne	.L91
 1241              	.L90:
 466:.\lib_Fat/sdcard.c **** 			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
 1242              		.loc 1 466 0
 1243 00b4 0020     		mov	r0, #0
 1244 00b6 FD21     		mov	r1, #253
 1245 00b8 FFF7FEFF 		bl	xmit_datablock
 1246 00bc 031E     		sub	r3, r0, #0
 1247 00be 01D1     		bne	.L87
 467:.\lib_Fat/sdcard.c **** 				count = 1;
 1248              		.loc 1 467 0
 1249 00c0 0123     		mov	r3, #1
 1250 00c2 3B60     		str	r3, [r7]
 1251              	.L87:
 468:.\lib_Fat/sdcard.c **** 		}
 469:.\lib_Fat/sdcard.c **** 	}
 470:.\lib_Fat/sdcard.c **** 	deselect();
 1252              		.loc 1 470 0
 1253 00c4 FFF7FEFF 		bl	deselect
 471:.\lib_Fat/sdcard.c **** 
 472:.\lib_Fat/sdcard.c **** 	return count ? RES_ERROR : RES_OK;
 1254              		.loc 1 472 0
 1255 00c8 3B68     		ldr	r3, [r7]
 1256 00ca 5A1E     		sub	r2, r3, #1
 1257 00cc 9341     		sbc	r3, r3, r2
 1258 00ce DBB2     		uxtb	r3, r3
 1259              	.L83:
 473:.\lib_Fat/sdcard.c **** }
 1260              		.loc 1 473 0
 1261 00d0 181C     		mov	r0, r3
 1262 00d2 BD46     		mov	sp, r7
 1263 00d4 04B0     		add	sp, sp, #16
 1264              		@ sp needed
 1265 00d6 80BD     		pop	{r7, pc}
 1266              	.L93:
 1267              		.align	2
 1268              	.L92:
 1269 00d8 00000000 		.word	CardType
 1270              		.cfi_endproc
 1271              	.LFE74:
 1272              		.size	disk_write, .-disk_write
 1273              		.section	.text.disk_ioctl,"ax",%progbits
 1274              		.align	2
 1275              		.global	disk_ioctl
 1276              		.code	16
 1277              		.thumb_func
 1278              		.type	disk_ioctl, %function
 1279              	disk_ioctl:
 1280              	.LFB75:
 474:.\lib_Fat/sdcard.c **** 
 475:.\lib_Fat/sdcard.c **** 
 476:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 477:.\lib_Fat/sdcard.c **** /* Miscellaneous Functions                                               */
 478:.\lib_Fat/sdcard.c **** /*-----------------------------------------------------------------------*/
 479:.\lib_Fat/sdcard.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 32


 480:.\lib_Fat/sdcard.c **** DRESULT disk_ioctl (
 481:.\lib_Fat/sdcard.c **** 	BYTE drv,		/* Physical drive nmuber (0) */
 482:.\lib_Fat/sdcard.c **** 	BYTE ctrl,		/* Control code */
 483:.\lib_Fat/sdcard.c **** 	void *buff		/* Buffer to send/receive control data */
 484:.\lib_Fat/sdcard.c **** )
 485:.\lib_Fat/sdcard.c **** {
 1281              		.loc 1 485 0
 1282              		.cfi_startproc
 1283 0000 80B5     		push	{r7, lr}
 1284              		.cfi_def_cfa_offset 8
 1285              		.cfi_offset 7, -8
 1286              		.cfi_offset 14, -4
 1287 0002 8AB0     		sub	sp, sp, #40
 1288              		.cfi_def_cfa_offset 48
 1289 0004 00AF     		add	r7, sp, #0
 1290              		.cfi_def_cfa_register 7
 1291 0006 3A60     		str	r2, [r7]
 1292 0008 FB1D     		add	r3, r7, #7
 1293 000a 021C     		add	r2, r0, #0
 1294 000c 1A70     		strb	r2, [r3]
 1295 000e BB1D     		add	r3, r7, #6
 1296 0010 0A1C     		add	r2, r1, #0
 1297 0012 1A70     		strb	r2, [r3]
 486:.\lib_Fat/sdcard.c **** 	DRESULT res;
 487:.\lib_Fat/sdcard.c **** 	BYTE n, csd[16];
 488:.\lib_Fat/sdcard.c **** 	DWORD cs;
 489:.\lib_Fat/sdcard.c **** 
 490:.\lib_Fat/sdcard.c **** 
 491:.\lib_Fat/sdcard.c **** 	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
 1298              		.loc 1 491 0
 1299 0014 FB1D     		add	r3, r7, #7
 1300 0016 1B78     		ldrb	r3, [r3]
 1301 0018 181C     		mov	r0, r3
 1302 001a FFF7FEFF 		bl	disk_status
 1303 001e 031C     		mov	r3, r0
 1304 0020 1A1C     		mov	r2, r3
 1305 0022 0123     		mov	r3, #1
 1306 0024 1340     		and	r3, r2
 1307 0026 01D0     		beq	.L95
 1308              		.loc 1 491 0 is_stmt 0 discriminator 1
 1309 0028 0323     		mov	r3, #3
 1310 002a 94E0     		b	.L106
 1311              	.L95:
 492:.\lib_Fat/sdcard.c **** 
 493:.\lib_Fat/sdcard.c **** 	res = RES_ERROR;
 1312              		.loc 1 493 0 is_stmt 1
 1313 002c 2723     		mov	r3, #39
 1314 002e FB18     		add	r3, r7, r3
 1315 0030 0122     		mov	r2, #1
 1316 0032 1A70     		strb	r2, [r3]
 494:.\lib_Fat/sdcard.c **** 	switch (ctrl) {
 1317              		.loc 1 494 0
 1318 0034 BB1D     		add	r3, r7, #6
 1319 0036 1B78     		ldrb	r3, [r3]
 1320 0038 012B     		cmp	r3, #1
 1321 003a 0FD0     		beq	.L98
 1322 003c 032B     		cmp	r3, #3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 33


 1323 003e 00D1     		bne	.LCB1200
 1324 0040 78E0     		b	.L99	@long jump
 1325              	.LCB1200:
 1326 0042 002B     		cmp	r3, #0
 1327 0044 00D0     		beq	.LCB1202
 1328 0046 7DE0     		b	.L107	@long jump
 1329              	.LCB1202:
 495:.\lib_Fat/sdcard.c **** 		case CTRL_SYNC :		/* Make sure that no pending write process */
 496:.\lib_Fat/sdcard.c **** 			if (select()) res = RES_OK;
 1330              		.loc 1 496 0
 1331 0048 FFF7FEFF 		bl	select
 1332 004c 031E     		sub	r3, r0, #0
 1333 004e 04D0     		beq	.L101
 1334              		.loc 1 496 0 is_stmt 0 discriminator 1
 1335 0050 2723     		mov	r3, #39
 1336 0052 FB18     		add	r3, r7, r3
 1337 0054 0022     		mov	r2, #0
 1338 0056 1A70     		strb	r2, [r3]
 497:.\lib_Fat/sdcard.c **** 			break;
 1339              		.loc 1 497 0 is_stmt 1 discriminator 1
 1340 0058 78E0     		b	.L102
 1341              	.L101:
 1342              		.loc 1 497 0 is_stmt 0
 1343 005a 77E0     		b	.L102
 1344              	.L98:
 498:.\lib_Fat/sdcard.c **** 
 499:.\lib_Fat/sdcard.c **** 		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
 500:.\lib_Fat/sdcard.c **** 			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 1345              		.loc 1 500 0 is_stmt 1
 1346 005c 0920     		mov	r0, #9
 1347 005e 0021     		mov	r1, #0
 1348 0060 FFF7FEFF 		bl	send_cmd
 1349 0064 031E     		sub	r3, r0, #0
 1350 0066 64D1     		bne	.L103
 1351              		.loc 1 500 0 is_stmt 0 discriminator 1
 1352 0068 0C23     		mov	r3, #12
 1353 006a FB18     		add	r3, r7, r3
 1354 006c 181C     		mov	r0, r3
 1355 006e 1021     		mov	r1, #16
 1356 0070 FFF7FEFF 		bl	rcvr_datablock
 1357 0074 031E     		sub	r3, r0, #0
 1358 0076 5CD0     		beq	.L103
 501:.\lib_Fat/sdcard.c **** 				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 1359              		.loc 1 501 0 is_stmt 1
 1360 0078 0C23     		mov	r3, #12
 1361 007a FB18     		add	r3, r7, r3
 1362 007c 1B78     		ldrb	r3, [r3]
 1363 007e 9B09     		lsr	r3, r3, #6
 1364 0080 DBB2     		uxtb	r3, r3
 1365 0082 012B     		cmp	r3, #1
 1366 0084 18D1     		bne	.L104
 502:.\lib_Fat/sdcard.c **** 					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 1367              		.loc 1 502 0
 1368 0086 0C23     		mov	r3, #12
 1369 0088 FB18     		add	r3, r7, r3
 1370 008a 5B7A     		ldrb	r3, [r3, #9]
 1371 008c 1A1C     		mov	r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 34


 1372 008e 0C23     		mov	r3, #12
 1373 0090 FB18     		add	r3, r7, r3
 1374 0092 1B7A     		ldrb	r3, [r3, #8]
 1375 0094 1B02     		lsl	r3, r3, #8
 1376 0096 D318     		add	r3, r2, r3
 1377 0098 1A1C     		mov	r2, r3
 1378 009a 0C23     		mov	r3, #12
 1379 009c FB18     		add	r3, r7, r3
 1380 009e DB79     		ldrb	r3, [r3, #7]
 1381 00a0 191C     		mov	r1, r3
 1382 00a2 3F23     		mov	r3, #63
 1383 00a4 0B40     		and	r3, r1
 1384 00a6 1B04     		lsl	r3, r3, #16
 1385 00a8 D318     		add	r3, r2, r3
 1386 00aa 0133     		add	r3, r3, #1
 1387 00ac 3B62     		str	r3, [r7, #32]
 503:.\lib_Fat/sdcard.c **** 					*(DWORD*)buff = cs << 10;
 1388              		.loc 1 503 0
 1389 00ae 3B6A     		ldr	r3, [r7, #32]
 1390 00b0 9A02     		lsl	r2, r3, #10
 1391 00b2 3B68     		ldr	r3, [r7]
 1392 00b4 1A60     		str	r2, [r3]
 1393 00b6 37E0     		b	.L105
 1394              	.L104:
 504:.\lib_Fat/sdcard.c **** 				} else {					/* SDC ver 1.XX or MMC */
 505:.\lib_Fat/sdcard.c **** 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 1395              		.loc 1 505 0
 1396 00b8 0C23     		mov	r3, #12
 1397 00ba FB18     		add	r3, r7, r3
 1398 00bc 5B79     		ldrb	r3, [r3, #5]
 1399 00be 0F22     		mov	r2, #15
 1400 00c0 1340     		and	r3, r2
 1401 00c2 DAB2     		uxtb	r2, r3
 1402 00c4 0C23     		mov	r3, #12
 1403 00c6 FB18     		add	r3, r7, r3
 1404 00c8 9B7A     		ldrb	r3, [r3, #10]
 1405 00ca DB09     		lsr	r3, r3, #7
 1406 00cc DBB2     		uxtb	r3, r3
 1407 00ce D318     		add	r3, r2, r3
 1408 00d0 DAB2     		uxtb	r2, r3
 1409 00d2 0C23     		mov	r3, #12
 1410 00d4 FB18     		add	r3, r7, r3
 1411 00d6 5B7A     		ldrb	r3, [r3, #9]
 1412 00d8 0321     		mov	r1, #3
 1413 00da 0B40     		and	r3, r1
 1414 00dc DBB2     		uxtb	r3, r3
 1415 00de DB18     		add	r3, r3, r3
 1416 00e0 DBB2     		uxtb	r3, r3
 1417 00e2 D318     		add	r3, r2, r3
 1418 00e4 DAB2     		uxtb	r2, r3
 1419 00e6 1F23     		mov	r3, #31
 1420 00e8 FB18     		add	r3, r7, r3
 1421 00ea 0232     		add	r2, r2, #2
 1422 00ec 1A70     		strb	r2, [r3]
 506:.\lib_Fat/sdcard.c **** 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 1423              		.loc 1 506 0
 1424 00ee 0C23     		mov	r3, #12
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 35


 1425 00f0 FB18     		add	r3, r7, r3
 1426 00f2 1B7A     		ldrb	r3, [r3, #8]
 1427 00f4 9B09     		lsr	r3, r3, #6
 1428 00f6 DBB2     		uxtb	r3, r3
 1429 00f8 1A1C     		mov	r2, r3
 1430 00fa 0C23     		mov	r3, #12
 1431 00fc FB18     		add	r3, r7, r3
 1432 00fe DB79     		ldrb	r3, [r3, #7]
 1433 0100 9B00     		lsl	r3, r3, #2
 1434 0102 D218     		add	r2, r2, r3
 1435 0104 0C23     		mov	r3, #12
 1436 0106 FB18     		add	r3, r7, r3
 1437 0108 9B79     		ldrb	r3, [r3, #6]
 1438 010a 191C     		mov	r1, r3
 1439 010c 0323     		mov	r3, #3
 1440 010e 0B40     		and	r3, r1
 1441 0110 9B02     		lsl	r3, r3, #10
 1442 0112 D318     		add	r3, r2, r3
 1443 0114 0133     		add	r3, r3, #1
 1444 0116 3B62     		str	r3, [r7, #32]
 507:.\lib_Fat/sdcard.c **** 					*(DWORD*)buff = cs << (n - 9);
 1445              		.loc 1 507 0
 1446 0118 1F23     		mov	r3, #31
 1447 011a FB18     		add	r3, r7, r3
 1448 011c 1B78     		ldrb	r3, [r3]
 1449 011e 093B     		sub	r3, r3, #9
 1450 0120 3A6A     		ldr	r2, [r7, #32]
 1451 0122 9A40     		lsl	r2, r2, r3
 1452 0124 3B68     		ldr	r3, [r7]
 1453 0126 1A60     		str	r2, [r3]
 1454              	.L105:
 508:.\lib_Fat/sdcard.c **** 				}
 509:.\lib_Fat/sdcard.c **** 				res = RES_OK;
 1455              		.loc 1 509 0
 1456 0128 2723     		mov	r3, #39
 1457 012a FB18     		add	r3, r7, r3
 1458 012c 0022     		mov	r2, #0
 1459 012e 1A70     		strb	r2, [r3]
 510:.\lib_Fat/sdcard.c **** 			}
 511:.\lib_Fat/sdcard.c **** 			break;
 1460              		.loc 1 511 0
 1461 0130 0CE0     		b	.L102
 1462              	.L103:
 1463 0132 0BE0     		b	.L102
 1464              	.L99:
 512:.\lib_Fat/sdcard.c **** 
 513:.\lib_Fat/sdcard.c **** 		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
 514:.\lib_Fat/sdcard.c **** 			*(DWORD*)buff = 128;
 1465              		.loc 1 514 0
 1466 0134 3B68     		ldr	r3, [r7]
 1467 0136 8022     		mov	r2, #128
 1468 0138 1A60     		str	r2, [r3]
 515:.\lib_Fat/sdcard.c **** 			res = RES_OK;
 1469              		.loc 1 515 0
 1470 013a 2723     		mov	r3, #39
 1471 013c FB18     		add	r3, r7, r3
 1472 013e 0022     		mov	r2, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 36


 1473 0140 1A70     		strb	r2, [r3]
 516:.\lib_Fat/sdcard.c **** 			break;
 1474              		.loc 1 516 0
 1475 0142 03E0     		b	.L102
 1476              	.L107:
 517:.\lib_Fat/sdcard.c **** 
 518:.\lib_Fat/sdcard.c **** 		default:
 519:.\lib_Fat/sdcard.c **** 			res = RES_PARERR;
 1477              		.loc 1 519 0
 1478 0144 2723     		mov	r3, #39
 1479 0146 FB18     		add	r3, r7, r3
 1480 0148 0422     		mov	r2, #4
 1481 014a 1A70     		strb	r2, [r3]
 1482              	.L102:
 520:.\lib_Fat/sdcard.c **** 	}
 521:.\lib_Fat/sdcard.c **** 
 522:.\lib_Fat/sdcard.c **** 	deselect();
 1483              		.loc 1 522 0
 1484 014c FFF7FEFF 		bl	deselect
 523:.\lib_Fat/sdcard.c **** 
 524:.\lib_Fat/sdcard.c **** 	return res;
 1485              		.loc 1 524 0
 1486 0150 2723     		mov	r3, #39
 1487 0152 FB18     		add	r3, r7, r3
 1488 0154 1B78     		ldrb	r3, [r3]
 1489              	.L106:
 525:.\lib_Fat/sdcard.c **** }
 1490              		.loc 1 525 0 discriminator 1
 1491 0156 181C     		mov	r0, r3
 1492 0158 BD46     		mov	sp, r7
 1493 015a 0AB0     		add	sp, sp, #40
 1494              		@ sp needed
 1495 015c 80BD     		pop	{r7, pc}
 1496              		.cfi_endproc
 1497              	.LFE75:
 1498              		.size	disk_ioctl, .-disk_ioctl
 1499 015e C046     		.text
 1500              	.Letext0:
 1501              		.file 2 ".\\lib_Fat\\integer.h"
 1502              		.file 3 ".\\lib_Fat\\diskio.h"
 1503              		.section	.debug_info,"",%progbits
 1504              	.Ldebug_info0:
 1505 0000 24050000 		.4byte	0x524
 1506 0004 0400     		.2byte	0x4
 1507 0006 00000000 		.4byte	.Ldebug_abbrev0
 1508 000a 04       		.byte	0x4
 1509 000b 01       		.uleb128 0x1
 1510 000c 07010000 		.4byte	.LASF44
 1511 0010 01       		.byte	0x1
 1512 0011 C4000000 		.4byte	.LASF45
 1513 0015 00000000 		.4byte	.LASF46
 1514 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1515 001d 00000000 		.4byte	0
 1516 0021 00000000 		.4byte	.Ldebug_line0
 1517 0025 02       		.uleb128 0x2
 1518 0026 4D000000 		.4byte	.LASF2
 1519 002a 02       		.byte	0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 37


 1520 002b 10       		.byte	0x10
 1521 002c 30000000 		.4byte	0x30
 1522 0030 03       		.uleb128 0x3
 1523 0031 01       		.byte	0x1
 1524 0032 08       		.byte	0x8
 1525 0033 81000000 		.4byte	.LASF0
 1526 0037 03       		.uleb128 0x3
 1527 0038 02       		.byte	0x2
 1528 0039 05       		.byte	0x5
 1529 003a 42020000 		.4byte	.LASF1
 1530 003e 02       		.uleb128 0x2
 1531 003f 36020000 		.4byte	.LASF3
 1532 0043 02       		.byte	0x2
 1533 0044 14       		.byte	0x14
 1534 0045 49000000 		.4byte	0x49
 1535 0049 03       		.uleb128 0x3
 1536 004a 02       		.byte	0x2
 1537 004b 07       		.byte	0x7
 1538 004c A1000000 		.4byte	.LASF4
 1539 0050 04       		.uleb128 0x4
 1540 0051 04       		.byte	0x4
 1541 0052 05       		.byte	0x5
 1542 0053 696E7400 		.ascii	"int\000"
 1543 0057 02       		.uleb128 0x2
 1544 0058 AD010000 		.4byte	.LASF5
 1545 005c 02       		.byte	0x2
 1546 005d 19       		.byte	0x19
 1547 005e 62000000 		.4byte	0x62
 1548 0062 03       		.uleb128 0x3
 1549 0063 04       		.byte	0x4
 1550 0064 07       		.byte	0x7
 1551 0065 A0010000 		.4byte	.LASF6
 1552 0069 03       		.uleb128 0x3
 1553 006a 04       		.byte	0x4
 1554 006b 05       		.byte	0x5
 1555 006c F2010000 		.4byte	.LASF7
 1556 0070 02       		.uleb128 0x2
 1557 0071 6A000000 		.4byte	.LASF8
 1558 0075 02       		.byte	0x2
 1559 0076 1D       		.byte	0x1d
 1560 0077 7B000000 		.4byte	0x7b
 1561 007b 03       		.uleb128 0x3
 1562 007c 04       		.byte	0x4
 1563 007d 07       		.byte	0x7
 1564 007e 8F000000 		.4byte	.LASF9
 1565 0082 02       		.uleb128 0x2
 1566 0083 E0000000 		.4byte	.LASF10
 1567 0087 03       		.byte	0x3
 1568 0088 13       		.byte	0x13
 1569 0089 25000000 		.4byte	0x25
 1570 008d 05       		.uleb128 0x5
 1571 008e 01       		.byte	0x1
 1572 008f 03       		.byte	0x3
 1573 0090 16       		.byte	0x16
 1574 0091 B4000000 		.4byte	0xb4
 1575 0095 06       		.uleb128 0x6
 1576 0096 FB010000 		.4byte	.LASF11
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 38


 1577 009a 00       		.sleb128 0
 1578 009b 06       		.uleb128 0x6
 1579 009c 4C020000 		.4byte	.LASF12
 1580 00a0 01       		.sleb128 1
 1581 00a1 06       		.uleb128 0x6
 1582 00a2 43000000 		.4byte	.LASF13
 1583 00a6 02       		.sleb128 2
 1584 00a7 06       		.uleb128 0x6
 1585 00a8 76000000 		.4byte	.LASF14
 1586 00ac 03       		.sleb128 3
 1587 00ad 06       		.uleb128 0x6
 1588 00ae 2B020000 		.4byte	.LASF15
 1589 00b2 04       		.sleb128 4
 1590 00b3 00       		.byte	0
 1591 00b4 02       		.uleb128 0x2
 1592 00b5 07020000 		.4byte	.LASF16
 1593 00b9 03       		.byte	0x3
 1594 00ba 1C       		.byte	0x1c
 1595 00bb 8D000000 		.4byte	0x8d
 1596 00bf 03       		.uleb128 0x3
 1597 00c0 01       		.byte	0x1
 1598 00c1 06       		.byte	0x6
 1599 00c2 5E000000 		.4byte	.LASF17
 1600 00c6 03       		.uleb128 0x3
 1601 00c7 08       		.byte	0x8
 1602 00c8 05       		.byte	0x5
 1603 00c9 18020000 		.4byte	.LASF18
 1604 00cd 03       		.uleb128 0x3
 1605 00ce 08       		.byte	0x8
 1606 00cf 07       		.byte	0x7
 1607 00d0 BD010000 		.4byte	.LASF19
 1608 00d4 03       		.uleb128 0x3
 1609 00d5 04       		.byte	0x4
 1610 00d6 04       		.byte	0x4
 1611 00d7 70000000 		.4byte	.LASF20
 1612 00db 03       		.uleb128 0x3
 1613 00dc 08       		.byte	0x8
 1614 00dd 04       		.byte	0x4
 1615 00de 6B020000 		.4byte	.LASF21
 1616 00e2 03       		.uleb128 0x3
 1617 00e3 01       		.byte	0x1
 1618 00e4 08       		.byte	0x8
 1619 00e5 26020000 		.4byte	.LASF22
 1620 00e9 03       		.uleb128 0x3
 1621 00ea 04       		.byte	0x4
 1622 00eb 07       		.byte	0x7
 1623 00ec 0F020000 		.4byte	.LASF23
 1624 00f0 07       		.uleb128 0x7
 1625 00f1 04       		.byte	0x4
 1626 00f2 08       		.uleb128 0x8
 1627 00f3 3A000000 		.4byte	.LASF25
 1628 00f7 01       		.byte	0x1
 1629 00f8 84       		.byte	0x84
 1630 00f9 00000000 		.4byte	.LFB63
 1631 00fd 24000000 		.4byte	.LFE63-.LFB63
 1632 0101 01       		.uleb128 0x1
 1633 0102 9C       		.byte	0x9c
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 39


 1634 0103 23010000 		.4byte	0x123
 1635 0107 09       		.uleb128 0x9
 1636 0108 E8000000 		.4byte	.LASF24
 1637 010c 01       		.byte	0x1
 1638 010d 84       		.byte	0x84
 1639 010e 23010000 		.4byte	0x123
 1640 0112 02       		.uleb128 0x2
 1641 0113 91       		.byte	0x91
 1642 0114 74       		.sleb128 -12
 1643 0115 0A       		.uleb128 0xa
 1644 0116 626300   		.ascii	"bc\000"
 1645 0119 01       		.byte	0x1
 1646 011a 84       		.byte	0x84
 1647 011b 57000000 		.4byte	0x57
 1648 011f 02       		.uleb128 0x2
 1649 0120 91       		.byte	0x91
 1650 0121 70       		.sleb128 -16
 1651 0122 00       		.byte	0
 1652 0123 0B       		.uleb128 0xb
 1653 0124 04       		.byte	0x4
 1654 0125 29010000 		.4byte	0x129
 1655 0129 0C       		.uleb128 0xc
 1656 012a 25000000 		.4byte	0x25
 1657 012e 08       		.uleb128 0x8
 1658 012f 2B000000 		.4byte	.LASF26
 1659 0133 01       		.byte	0x1
 1660 0134 A6       		.byte	0xa6
 1661 0135 00000000 		.4byte	.LFB64
 1662 0139 2A000000 		.4byte	.LFE64-.LFB64
 1663 013d 01       		.uleb128 0x1
 1664 013e 9C       		.byte	0x9c
 1665 013f 5F010000 		.4byte	0x15f
 1666 0143 09       		.uleb128 0x9
 1667 0144 E8000000 		.4byte	.LASF24
 1668 0148 01       		.byte	0x1
 1669 0149 A6       		.byte	0xa6
 1670 014a 5F010000 		.4byte	0x15f
 1671 014e 02       		.uleb128 0x2
 1672 014f 91       		.byte	0x91
 1673 0150 6C       		.sleb128 -20
 1674 0151 0A       		.uleb128 0xa
 1675 0152 626300   		.ascii	"bc\000"
 1676 0155 01       		.byte	0x1
 1677 0156 A6       		.byte	0xa6
 1678 0157 57000000 		.4byte	0x57
 1679 015b 02       		.uleb128 0x2
 1680 015c 91       		.byte	0x91
 1681 015d 68       		.sleb128 -24
 1682 015e 00       		.byte	0
 1683 015f 0B       		.uleb128 0xb
 1684 0160 04       		.byte	0x4
 1685 0161 25000000 		.4byte	0x25
 1686 0165 0D       		.uleb128 0xd
 1687 0166 ED000000 		.4byte	.LASF28
 1688 016a 01       		.byte	0x1
 1689 016b D3       		.byte	0xd3
 1690 016c 50000000 		.4byte	0x50
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 40


 1691 0170 00000000 		.4byte	.LFB65
 1692 0174 48000000 		.4byte	.LFE65-.LFB65
 1693 0178 01       		.uleb128 0x1
 1694 0179 9C       		.byte	0x9c
 1695 017a 99010000 		.4byte	0x199
 1696 017e 0E       		.uleb128 0xe
 1697 017f 6400     		.ascii	"d\000"
 1698 0181 01       		.byte	0x1
 1699 0182 D5       		.byte	0xd5
 1700 0183 25000000 		.4byte	0x25
 1701 0187 02       		.uleb128 0x2
 1702 0188 91       		.byte	0x91
 1703 0189 73       		.sleb128 -13
 1704 018a 0E       		.uleb128 0xe
 1705 018b 746D7200 		.ascii	"tmr\000"
 1706 018f 01       		.byte	0x1
 1707 0190 D6       		.byte	0xd6
 1708 0191 57000000 		.4byte	0x57
 1709 0195 02       		.uleb128 0x2
 1710 0196 91       		.byte	0x91
 1711 0197 74       		.sleb128 -12
 1712 0198 00       		.byte	0
 1713 0199 08       		.uleb128 0x8
 1714 019a D4010000 		.4byte	.LASF27
 1715 019e 01       		.byte	0x1
 1716 019f E5       		.byte	0xe5
 1717 01a0 00000000 		.4byte	.LFB66
 1718 01a4 1C000000 		.4byte	.LFE66-.LFB66
 1719 01a8 01       		.uleb128 0x1
 1720 01a9 9C       		.byte	0x9c
 1721 01aa BB010000 		.4byte	0x1bb
 1722 01ae 0E       		.uleb128 0xe
 1723 01af 6400     		.ascii	"d\000"
 1724 01b1 01       		.byte	0x1
 1725 01b2 E7       		.byte	0xe7
 1726 01b3 25000000 		.4byte	0x25
 1727 01b7 02       		.uleb128 0x2
 1728 01b8 91       		.byte	0x91
 1729 01b9 77       		.sleb128 -9
 1730 01ba 00       		.byte	0
 1731 01bb 0D       		.uleb128 0xd
 1732 01bc 52000000 		.4byte	.LASF29
 1733 01c0 01       		.byte	0x1
 1734 01c1 F1       		.byte	0xf1
 1735 01c2 50000000 		.4byte	0x50
 1736 01c6 00000000 		.4byte	.LFB67
 1737 01ca 30000000 		.4byte	.LFE67-.LFB67
 1738 01ce 01       		.uleb128 0x1
 1739 01cf 9C       		.byte	0x9c
 1740 01d0 E1010000 		.4byte	0x1e1
 1741 01d4 0E       		.uleb128 0xe
 1742 01d5 6400     		.ascii	"d\000"
 1743 01d7 01       		.byte	0x1
 1744 01d8 F3       		.byte	0xf3
 1745 01d9 25000000 		.4byte	0x25
 1746 01dd 02       		.uleb128 0x2
 1747 01de 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 41


 1748 01df 77       		.sleb128 -9
 1749 01e0 00       		.byte	0
 1750 01e1 0F       		.uleb128 0xf
 1751 01e2 5C020000 		.4byte	.LASF30
 1752 01e6 01       		.byte	0x1
 1753 01e7 0101     		.2byte	0x101
 1754 01e9 50000000 		.4byte	0x50
 1755 01ed 00000000 		.4byte	.LFB68
 1756 01f1 6C000000 		.4byte	.LFE68-.LFB68
 1757 01f5 01       		.uleb128 0x1
 1758 01f6 9C       		.byte	0x9c
 1759 01f7 36020000 		.4byte	0x236
 1760 01fb 10       		.uleb128 0x10
 1761 01fc E8000000 		.4byte	.LASF24
 1762 0200 01       		.byte	0x1
 1763 0201 0101     		.2byte	0x101
 1764 0203 5F010000 		.4byte	0x15f
 1765 0207 02       		.uleb128 0x2
 1766 0208 91       		.byte	0x91
 1767 0209 6C       		.sleb128 -20
 1768 020a 11       		.uleb128 0x11
 1769 020b 62747200 		.ascii	"btr\000"
 1770 020f 01       		.byte	0x1
 1771 0210 0101     		.2byte	0x101
 1772 0212 57000000 		.4byte	0x57
 1773 0216 02       		.uleb128 0x2
 1774 0217 91       		.byte	0x91
 1775 0218 68       		.sleb128 -24
 1776 0219 12       		.uleb128 0x12
 1777 021a 6400     		.ascii	"d\000"
 1778 021c 01       		.byte	0x1
 1779 021d 0301     		.2byte	0x103
 1780 021f 36020000 		.4byte	0x236
 1781 0223 02       		.uleb128 0x2
 1782 0224 91       		.byte	0x91
 1783 0225 70       		.sleb128 -16
 1784 0226 12       		.uleb128 0x12
 1785 0227 746D7200 		.ascii	"tmr\000"
 1786 022b 01       		.byte	0x1
 1787 022c 0401     		.2byte	0x104
 1788 022e 57000000 		.4byte	0x57
 1789 0232 02       		.uleb128 0x2
 1790 0233 91       		.byte	0x91
 1791 0234 74       		.sleb128 -12
 1792 0235 00       		.byte	0
 1793 0236 13       		.uleb128 0x13
 1794 0237 25000000 		.4byte	0x25
 1795 023b 46020000 		.4byte	0x246
 1796 023f 14       		.uleb128 0x14
 1797 0240 E9000000 		.4byte	0xe9
 1798 0244 01       		.byte	0x1
 1799 0245 00       		.byte	0
 1800 0246 0F       		.uleb128 0xf
 1801 0247 F8000000 		.4byte	.LASF31
 1802 024b 01       		.byte	0x1
 1803 024c 1701     		.2byte	0x117
 1804 024e 50000000 		.4byte	0x50
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 42


 1805 0252 00000000 		.4byte	.LFB69
 1806 0256 88000000 		.4byte	.LFE69-.LFB69
 1807 025a 01       		.uleb128 0x1
 1808 025b 9C       		.byte	0x9c
 1809 025c 8C020000 		.4byte	0x28c
 1810 0260 10       		.uleb128 0x10
 1811 0261 E8000000 		.4byte	.LASF24
 1812 0265 01       		.byte	0x1
 1813 0266 1701     		.2byte	0x117
 1814 0268 23010000 		.4byte	0x123
 1815 026c 02       		.uleb128 0x2
 1816 026d 91       		.byte	0x91
 1817 026e 6C       		.sleb128 -20
 1818 026f 10       		.uleb128 0x10
 1819 0270 56020000 		.4byte	.LASF32
 1820 0274 01       		.byte	0x1
 1821 0275 1701     		.2byte	0x117
 1822 0277 25000000 		.4byte	0x25
 1823 027b 02       		.uleb128 0x2
 1824 027c 91       		.byte	0x91
 1825 027d 6B       		.sleb128 -21
 1826 027e 12       		.uleb128 0x12
 1827 027f 6400     		.ascii	"d\000"
 1828 0281 01       		.byte	0x1
 1829 0282 1901     		.2byte	0x119
 1830 0284 36020000 		.4byte	0x236
 1831 0288 02       		.uleb128 0x2
 1832 0289 91       		.byte	0x91
 1833 028a 74       		.sleb128 -12
 1834 028b 00       		.byte	0
 1835 028c 0F       		.uleb128 0xf
 1836 028d D7000000 		.4byte	.LASF33
 1837 0291 01       		.byte	0x1
 1838 0292 3001     		.2byte	0x130
 1839 0294 25000000 		.4byte	0x25
 1840 0298 00000000 		.4byte	.LFB70
 1841 029c 3E010000 		.4byte	.LFE70-.LFB70
 1842 02a0 01       		.uleb128 0x1
 1843 02a1 9C       		.byte	0x9c
 1844 02a2 EE020000 		.4byte	0x2ee
 1845 02a6 11       		.uleb128 0x11
 1846 02a7 636D6400 		.ascii	"cmd\000"
 1847 02ab 01       		.byte	0x1
 1848 02ac 3001     		.2byte	0x130
 1849 02ae 25000000 		.4byte	0x25
 1850 02b2 02       		.uleb128 0x2
 1851 02b3 91       		.byte	0x91
 1852 02b4 67       		.sleb128 -25
 1853 02b5 11       		.uleb128 0x11
 1854 02b6 61726700 		.ascii	"arg\000"
 1855 02ba 01       		.byte	0x1
 1856 02bb 3001     		.2byte	0x130
 1857 02bd 70000000 		.4byte	0x70
 1858 02c1 02       		.uleb128 0x2
 1859 02c2 91       		.byte	0x91
 1860 02c3 60       		.sleb128 -32
 1861 02c4 12       		.uleb128 0x12
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 43


 1862 02c5 6E00     		.ascii	"n\000"
 1863 02c7 01       		.byte	0x1
 1864 02c8 3201     		.2byte	0x132
 1865 02ca 25000000 		.4byte	0x25
 1866 02ce 02       		.uleb128 0x2
 1867 02cf 91       		.byte	0x91
 1868 02d0 6F       		.sleb128 -17
 1869 02d1 12       		.uleb128 0x12
 1870 02d2 6400     		.ascii	"d\000"
 1871 02d4 01       		.byte	0x1
 1872 02d5 3201     		.2byte	0x132
 1873 02d7 25000000 		.4byte	0x25
 1874 02db 02       		.uleb128 0x2
 1875 02dc 91       		.byte	0x91
 1876 02dd 6E       		.sleb128 -18
 1877 02de 12       		.uleb128 0x12
 1878 02df 62756600 		.ascii	"buf\000"
 1879 02e3 01       		.byte	0x1
 1880 02e4 3201     		.2byte	0x132
 1881 02e6 EE020000 		.4byte	0x2ee
 1882 02ea 02       		.uleb128 0x2
 1883 02eb 91       		.byte	0x91
 1884 02ec 68       		.sleb128 -24
 1885 02ed 00       		.byte	0
 1886 02ee 13       		.uleb128 0x13
 1887 02ef 25000000 		.4byte	0x25
 1888 02f3 FE020000 		.4byte	0x2fe
 1889 02f7 14       		.uleb128 0x14
 1890 02f8 E9000000 		.4byte	0xe9
 1891 02fc 05       		.byte	0x5
 1892 02fd 00       		.byte	0
 1893 02fe 15       		.uleb128 0x15
 1894 02ff DD010000 		.4byte	.LASF34
 1895 0303 01       		.byte	0x1
 1896 0304 6401     		.2byte	0x164
 1897 0306 82000000 		.4byte	0x82
 1898 030a 00000000 		.4byte	.LFB71
 1899 030e 28000000 		.4byte	.LFE71-.LFB71
 1900 0312 01       		.uleb128 0x1
 1901 0313 9C       		.byte	0x9c
 1902 0314 28030000 		.4byte	0x328
 1903 0318 11       		.uleb128 0x11
 1904 0319 64727600 		.ascii	"drv\000"
 1905 031d 01       		.byte	0x1
 1906 031e 6401     		.2byte	0x164
 1907 0320 25000000 		.4byte	0x25
 1908 0324 02       		.uleb128 0x2
 1909 0325 91       		.byte	0x91
 1910 0326 77       		.sleb128 -9
 1911 0327 00       		.byte	0
 1912 0328 16       		.uleb128 0x16
 1913 0329 B4000000 		.4byte	.LASF35
 1914 032d 01       		.byte	0x1
 1915 032e 6F01     		.2byte	0x16f
 1916 0330 82000000 		.4byte	0x82
 1917 0334 00000000 		.4byte	.LFB72
 1918 0338 CC010000 		.4byte	.LFE72-.LFB72
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 44


 1919 033c 01       		.uleb128 0x1
 1920 033d 9C       		.byte	0x9c
 1921 033e A7030000 		.4byte	0x3a7
 1922 0342 11       		.uleb128 0x11
 1923 0343 64727600 		.ascii	"drv\000"
 1924 0347 01       		.byte	0x1
 1925 0348 6F01     		.2byte	0x16f
 1926 034a 25000000 		.4byte	0x25
 1927 034e 02       		.uleb128 0x2
 1928 034f 91       		.byte	0x91
 1929 0350 67       		.sleb128 -25
 1930 0351 12       		.uleb128 0x12
 1931 0352 6E00     		.ascii	"n\000"
 1932 0354 01       		.byte	0x1
 1933 0355 7101     		.2byte	0x171
 1934 0357 25000000 		.4byte	0x25
 1935 035b 02       		.uleb128 0x2
 1936 035c 91       		.byte	0x91
 1937 035d 77       		.sleb128 -9
 1938 035e 12       		.uleb128 0x12
 1939 035f 747900   		.ascii	"ty\000"
 1940 0362 01       		.byte	0x1
 1941 0363 7101     		.2byte	0x171
 1942 0365 25000000 		.4byte	0x25
 1943 0369 02       		.uleb128 0x2
 1944 036a 91       		.byte	0x91
 1945 036b 76       		.sleb128 -10
 1946 036c 12       		.uleb128 0x12
 1947 036d 636D6400 		.ascii	"cmd\000"
 1948 0371 01       		.byte	0x1
 1949 0372 7101     		.2byte	0x171
 1950 0374 25000000 		.4byte	0x25
 1951 0378 02       		.uleb128 0x2
 1952 0379 91       		.byte	0x91
 1953 037a 75       		.sleb128 -11
 1954 037b 12       		.uleb128 0x12
 1955 037c 62756600 		.ascii	"buf\000"
 1956 0380 01       		.byte	0x1
 1957 0381 7101     		.2byte	0x171
 1958 0383 A7030000 		.4byte	0x3a7
 1959 0387 02       		.uleb128 0x2
 1960 0388 91       		.byte	0x91
 1961 0389 68       		.sleb128 -24
 1962 038a 12       		.uleb128 0x12
 1963 038b 746D7200 		.ascii	"tmr\000"
 1964 038f 01       		.byte	0x1
 1965 0390 7201     		.2byte	0x172
 1966 0392 57000000 		.4byte	0x57
 1967 0396 02       		.uleb128 0x2
 1968 0397 91       		.byte	0x91
 1969 0398 70       		.sleb128 -16
 1970 0399 12       		.uleb128 0x12
 1971 039a 7300     		.ascii	"s\000"
 1972 039c 01       		.byte	0x1
 1973 039d 7301     		.2byte	0x173
 1974 039f 82000000 		.4byte	0x82
 1975 03a3 02       		.uleb128 0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 45


 1976 03a4 91       		.byte	0x91
 1977 03a5 6F       		.sleb128 -17
 1978 03a6 00       		.byte	0
 1979 03a7 13       		.uleb128 0x13
 1980 03a8 25000000 		.4byte	0x25
 1981 03ac B7030000 		.4byte	0x3b7
 1982 03b0 14       		.uleb128 0x14
 1983 03b1 E9000000 		.4byte	0xe9
 1984 03b5 03       		.byte	0x3
 1985 03b6 00       		.byte	0
 1986 03b7 16       		.uleb128 0x16
 1987 03b8 72020000 		.4byte	.LASF36
 1988 03bc 01       		.byte	0x1
 1989 03bd A401     		.2byte	0x1a4
 1990 03bf B4000000 		.4byte	0xb4
 1991 03c3 00000000 		.4byte	.LFB73
 1992 03c7 BC000000 		.4byte	.LFE73-.LFB73
 1993 03cb 01       		.uleb128 0x1
 1994 03cc 9C       		.byte	0x9c
 1995 03cd 1D040000 		.4byte	0x41d
 1996 03d1 11       		.uleb128 0x11
 1997 03d2 64727600 		.ascii	"drv\000"
 1998 03d6 01       		.byte	0x1
 1999 03d7 A401     		.2byte	0x1a4
 2000 03d9 25000000 		.4byte	0x25
 2001 03dd 02       		.uleb128 0x2
 2002 03de 91       		.byte	0x91
 2003 03df 6F       		.sleb128 -17
 2004 03e0 10       		.uleb128 0x10
 2005 03e1 E8000000 		.4byte	.LASF24
 2006 03e5 01       		.byte	0x1
 2007 03e6 A401     		.2byte	0x1a4
 2008 03e8 5F010000 		.4byte	0x15f
 2009 03ec 02       		.uleb128 0x2
 2010 03ed 91       		.byte	0x91
 2011 03ee 68       		.sleb128 -24
 2012 03ef 10       		.uleb128 0x10
 2013 03f0 3B020000 		.4byte	.LASF37
 2014 03f4 01       		.byte	0x1
 2015 03f5 A401     		.2byte	0x1a4
 2016 03f7 70000000 		.4byte	0x70
 2017 03fb 02       		.uleb128 0x2
 2018 03fc 91       		.byte	0x91
 2019 03fd 64       		.sleb128 -28
 2020 03fe 10       		.uleb128 0x10
 2021 03ff 34000000 		.4byte	.LASF38
 2022 0403 01       		.byte	0x1
 2023 0404 A401     		.2byte	0x1a4
 2024 0406 57000000 		.4byte	0x57
 2025 040a 02       		.uleb128 0x2
 2026 040b 91       		.byte	0x91
 2027 040c 60       		.sleb128 -32
 2028 040d 12       		.uleb128 0x12
 2029 040e 636D6400 		.ascii	"cmd\000"
 2030 0412 01       		.byte	0x1
 2031 0413 A601     		.2byte	0x1a6
 2032 0415 25000000 		.4byte	0x25
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 46


 2033 0419 02       		.uleb128 0x2
 2034 041a 91       		.byte	0x91
 2035 041b 77       		.sleb128 -9
 2036 041c 00       		.byte	0
 2037 041d 16       		.uleb128 0x16
 2038 041e B2010000 		.4byte	.LASF39
 2039 0422 01       		.byte	0x1
 2040 0423 BC01     		.2byte	0x1bc
 2041 0425 B4000000 		.4byte	0xb4
 2042 0429 00000000 		.4byte	.LFB74
 2043 042d DC000000 		.4byte	.LFE74-.LFB74
 2044 0431 01       		.uleb128 0x1
 2045 0432 9C       		.byte	0x9c
 2046 0433 74040000 		.4byte	0x474
 2047 0437 11       		.uleb128 0x11
 2048 0438 64727600 		.ascii	"drv\000"
 2049 043c 01       		.byte	0x1
 2050 043d BD01     		.2byte	0x1bd
 2051 043f 25000000 		.4byte	0x25
 2052 0443 02       		.uleb128 0x2
 2053 0444 91       		.byte	0x91
 2054 0445 77       		.sleb128 -9
 2055 0446 10       		.uleb128 0x10
 2056 0447 E8000000 		.4byte	.LASF24
 2057 044b 01       		.byte	0x1
 2058 044c BE01     		.2byte	0x1be
 2059 044e 23010000 		.4byte	0x123
 2060 0452 02       		.uleb128 0x2
 2061 0453 91       		.byte	0x91
 2062 0454 70       		.sleb128 -16
 2063 0455 10       		.uleb128 0x10
 2064 0456 3B020000 		.4byte	.LASF37
 2065 045a 01       		.byte	0x1
 2066 045b BF01     		.2byte	0x1bf
 2067 045d 70000000 		.4byte	0x70
 2068 0461 02       		.uleb128 0x2
 2069 0462 91       		.byte	0x91
 2070 0463 6C       		.sleb128 -20
 2071 0464 10       		.uleb128 0x10
 2072 0465 34000000 		.4byte	.LASF38
 2073 0469 01       		.byte	0x1
 2074 046a C001     		.2byte	0x1c0
 2075 046c 57000000 		.4byte	0x57
 2076 0470 02       		.uleb128 0x2
 2077 0471 91       		.byte	0x91
 2078 0472 68       		.sleb128 -24
 2079 0473 00       		.byte	0
 2080 0474 16       		.uleb128 0x16
 2081 0475 95010000 		.4byte	.LASF40
 2082 0479 01       		.byte	0x1
 2083 047a E001     		.2byte	0x1e0
 2084 047c B4000000 		.4byte	0xb4
 2085 0480 00000000 		.4byte	.LFB75
 2086 0484 5E010000 		.4byte	.LFE75-.LFB75
 2087 0488 01       		.uleb128 0x1
 2088 0489 9C       		.byte	0x9c
 2089 048a F5040000 		.4byte	0x4f5
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 47


 2090 048e 11       		.uleb128 0x11
 2091 048f 64727600 		.ascii	"drv\000"
 2092 0493 01       		.byte	0x1
 2093 0494 E101     		.2byte	0x1e1
 2094 0496 25000000 		.4byte	0x25
 2095 049a 02       		.uleb128 0x2
 2096 049b 91       		.byte	0x91
 2097 049c 57       		.sleb128 -41
 2098 049d 10       		.uleb128 0x10
 2099 049e 02020000 		.4byte	.LASF41
 2100 04a2 01       		.byte	0x1
 2101 04a3 E201     		.2byte	0x1e2
 2102 04a5 25000000 		.4byte	0x25
 2103 04a9 02       		.uleb128 0x2
 2104 04aa 91       		.byte	0x91
 2105 04ab 56       		.sleb128 -42
 2106 04ac 10       		.uleb128 0x10
 2107 04ad E8000000 		.4byte	.LASF24
 2108 04b1 01       		.byte	0x1
 2109 04b2 E301     		.2byte	0x1e3
 2110 04b4 F0000000 		.4byte	0xf0
 2111 04b8 02       		.uleb128 0x2
 2112 04b9 91       		.byte	0x91
 2113 04ba 50       		.sleb128 -48
 2114 04bb 12       		.uleb128 0x12
 2115 04bc 72657300 		.ascii	"res\000"
 2116 04c0 01       		.byte	0x1
 2117 04c1 E601     		.2byte	0x1e6
 2118 04c3 B4000000 		.4byte	0xb4
 2119 04c7 02       		.uleb128 0x2
 2120 04c8 91       		.byte	0x91
 2121 04c9 77       		.sleb128 -9
 2122 04ca 12       		.uleb128 0x12
 2123 04cb 6E00     		.ascii	"n\000"
 2124 04cd 01       		.byte	0x1
 2125 04ce E701     		.2byte	0x1e7
 2126 04d0 25000000 		.4byte	0x25
 2127 04d4 02       		.uleb128 0x2
 2128 04d5 91       		.byte	0x91
 2129 04d6 6F       		.sleb128 -17
 2130 04d7 12       		.uleb128 0x12
 2131 04d8 63736400 		.ascii	"csd\000"
 2132 04dc 01       		.byte	0x1
 2133 04dd E701     		.2byte	0x1e7
 2134 04df F5040000 		.4byte	0x4f5
 2135 04e3 02       		.uleb128 0x2
 2136 04e4 91       		.byte	0x91
 2137 04e5 5C       		.sleb128 -36
 2138 04e6 12       		.uleb128 0x12
 2139 04e7 637300   		.ascii	"cs\000"
 2140 04ea 01       		.byte	0x1
 2141 04eb E801     		.2byte	0x1e8
 2142 04ed 70000000 		.4byte	0x70
 2143 04f1 02       		.uleb128 0x2
 2144 04f2 91       		.byte	0x91
 2145 04f3 70       		.sleb128 -16
 2146 04f4 00       		.byte	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 48


 2147 04f5 13       		.uleb128 0x13
 2148 04f6 25000000 		.4byte	0x25
 2149 04fa 05050000 		.4byte	0x505
 2150 04fe 14       		.uleb128 0x14
 2151 04ff E9000000 		.4byte	0xe9
 2152 0503 0F       		.byte	0xf
 2153 0504 00       		.byte	0
 2154 0505 17       		.uleb128 0x17
 2155 0506 59000000 		.4byte	.LASF42
 2156 050a 01       		.byte	0x1
 2157 050b 7C       		.byte	0x7c
 2158 050c 82000000 		.4byte	0x82
 2159 0510 05       		.uleb128 0x5
 2160 0511 03       		.byte	0x3
 2161 0512 00000000 		.4byte	Stat
 2162 0516 17       		.uleb128 0x17
 2163 0517 E9010000 		.4byte	.LASF43
 2164 051b 01       		.byte	0x1
 2165 051c 7E       		.byte	0x7e
 2166 051d 25000000 		.4byte	0x25
 2167 0521 05       		.uleb128 0x5
 2168 0522 03       		.byte	0x3
 2169 0523 00000000 		.4byte	CardType
 2170 0527 00       		.byte	0
 2171              		.section	.debug_abbrev,"",%progbits
 2172              	.Ldebug_abbrev0:
 2173 0000 01       		.uleb128 0x1
 2174 0001 11       		.uleb128 0x11
 2175 0002 01       		.byte	0x1
 2176 0003 25       		.uleb128 0x25
 2177 0004 0E       		.uleb128 0xe
 2178 0005 13       		.uleb128 0x13
 2179 0006 0B       		.uleb128 0xb
 2180 0007 03       		.uleb128 0x3
 2181 0008 0E       		.uleb128 0xe
 2182 0009 1B       		.uleb128 0x1b
 2183 000a 0E       		.uleb128 0xe
 2184 000b 55       		.uleb128 0x55
 2185 000c 17       		.uleb128 0x17
 2186 000d 11       		.uleb128 0x11
 2187 000e 01       		.uleb128 0x1
 2188 000f 10       		.uleb128 0x10
 2189 0010 17       		.uleb128 0x17
 2190 0011 00       		.byte	0
 2191 0012 00       		.byte	0
 2192 0013 02       		.uleb128 0x2
 2193 0014 16       		.uleb128 0x16
 2194 0015 00       		.byte	0
 2195 0016 03       		.uleb128 0x3
 2196 0017 0E       		.uleb128 0xe
 2197 0018 3A       		.uleb128 0x3a
 2198 0019 0B       		.uleb128 0xb
 2199 001a 3B       		.uleb128 0x3b
 2200 001b 0B       		.uleb128 0xb
 2201 001c 49       		.uleb128 0x49
 2202 001d 13       		.uleb128 0x13
 2203 001e 00       		.byte	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 49


 2204 001f 00       		.byte	0
 2205 0020 03       		.uleb128 0x3
 2206 0021 24       		.uleb128 0x24
 2207 0022 00       		.byte	0
 2208 0023 0B       		.uleb128 0xb
 2209 0024 0B       		.uleb128 0xb
 2210 0025 3E       		.uleb128 0x3e
 2211 0026 0B       		.uleb128 0xb
 2212 0027 03       		.uleb128 0x3
 2213 0028 0E       		.uleb128 0xe
 2214 0029 00       		.byte	0
 2215 002a 00       		.byte	0
 2216 002b 04       		.uleb128 0x4
 2217 002c 24       		.uleb128 0x24
 2218 002d 00       		.byte	0
 2219 002e 0B       		.uleb128 0xb
 2220 002f 0B       		.uleb128 0xb
 2221 0030 3E       		.uleb128 0x3e
 2222 0031 0B       		.uleb128 0xb
 2223 0032 03       		.uleb128 0x3
 2224 0033 08       		.uleb128 0x8
 2225 0034 00       		.byte	0
 2226 0035 00       		.byte	0
 2227 0036 05       		.uleb128 0x5
 2228 0037 04       		.uleb128 0x4
 2229 0038 01       		.byte	0x1
 2230 0039 0B       		.uleb128 0xb
 2231 003a 0B       		.uleb128 0xb
 2232 003b 3A       		.uleb128 0x3a
 2233 003c 0B       		.uleb128 0xb
 2234 003d 3B       		.uleb128 0x3b
 2235 003e 0B       		.uleb128 0xb
 2236 003f 01       		.uleb128 0x1
 2237 0040 13       		.uleb128 0x13
 2238 0041 00       		.byte	0
 2239 0042 00       		.byte	0
 2240 0043 06       		.uleb128 0x6
 2241 0044 28       		.uleb128 0x28
 2242 0045 00       		.byte	0
 2243 0046 03       		.uleb128 0x3
 2244 0047 0E       		.uleb128 0xe
 2245 0048 1C       		.uleb128 0x1c
 2246 0049 0D       		.uleb128 0xd
 2247 004a 00       		.byte	0
 2248 004b 00       		.byte	0
 2249 004c 07       		.uleb128 0x7
 2250 004d 0F       		.uleb128 0xf
 2251 004e 00       		.byte	0
 2252 004f 0B       		.uleb128 0xb
 2253 0050 0B       		.uleb128 0xb
 2254 0051 00       		.byte	0
 2255 0052 00       		.byte	0
 2256 0053 08       		.uleb128 0x8
 2257 0054 2E       		.uleb128 0x2e
 2258 0055 01       		.byte	0x1
 2259 0056 03       		.uleb128 0x3
 2260 0057 0E       		.uleb128 0xe
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 50


 2261 0058 3A       		.uleb128 0x3a
 2262 0059 0B       		.uleb128 0xb
 2263 005a 3B       		.uleb128 0x3b
 2264 005b 0B       		.uleb128 0xb
 2265 005c 27       		.uleb128 0x27
 2266 005d 19       		.uleb128 0x19
 2267 005e 11       		.uleb128 0x11
 2268 005f 01       		.uleb128 0x1
 2269 0060 12       		.uleb128 0x12
 2270 0061 06       		.uleb128 0x6
 2271 0062 40       		.uleb128 0x40
 2272 0063 18       		.uleb128 0x18
 2273 0064 9642     		.uleb128 0x2116
 2274 0066 19       		.uleb128 0x19
 2275 0067 01       		.uleb128 0x1
 2276 0068 13       		.uleb128 0x13
 2277 0069 00       		.byte	0
 2278 006a 00       		.byte	0
 2279 006b 09       		.uleb128 0x9
 2280 006c 05       		.uleb128 0x5
 2281 006d 00       		.byte	0
 2282 006e 03       		.uleb128 0x3
 2283 006f 0E       		.uleb128 0xe
 2284 0070 3A       		.uleb128 0x3a
 2285 0071 0B       		.uleb128 0xb
 2286 0072 3B       		.uleb128 0x3b
 2287 0073 0B       		.uleb128 0xb
 2288 0074 49       		.uleb128 0x49
 2289 0075 13       		.uleb128 0x13
 2290 0076 02       		.uleb128 0x2
 2291 0077 18       		.uleb128 0x18
 2292 0078 00       		.byte	0
 2293 0079 00       		.byte	0
 2294 007a 0A       		.uleb128 0xa
 2295 007b 05       		.uleb128 0x5
 2296 007c 00       		.byte	0
 2297 007d 03       		.uleb128 0x3
 2298 007e 08       		.uleb128 0x8
 2299 007f 3A       		.uleb128 0x3a
 2300 0080 0B       		.uleb128 0xb
 2301 0081 3B       		.uleb128 0x3b
 2302 0082 0B       		.uleb128 0xb
 2303 0083 49       		.uleb128 0x49
 2304 0084 13       		.uleb128 0x13
 2305 0085 02       		.uleb128 0x2
 2306 0086 18       		.uleb128 0x18
 2307 0087 00       		.byte	0
 2308 0088 00       		.byte	0
 2309 0089 0B       		.uleb128 0xb
 2310 008a 0F       		.uleb128 0xf
 2311 008b 00       		.byte	0
 2312 008c 0B       		.uleb128 0xb
 2313 008d 0B       		.uleb128 0xb
 2314 008e 49       		.uleb128 0x49
 2315 008f 13       		.uleb128 0x13
 2316 0090 00       		.byte	0
 2317 0091 00       		.byte	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 51


 2318 0092 0C       		.uleb128 0xc
 2319 0093 26       		.uleb128 0x26
 2320 0094 00       		.byte	0
 2321 0095 49       		.uleb128 0x49
 2322 0096 13       		.uleb128 0x13
 2323 0097 00       		.byte	0
 2324 0098 00       		.byte	0
 2325 0099 0D       		.uleb128 0xd
 2326 009a 2E       		.uleb128 0x2e
 2327 009b 01       		.byte	0x1
 2328 009c 03       		.uleb128 0x3
 2329 009d 0E       		.uleb128 0xe
 2330 009e 3A       		.uleb128 0x3a
 2331 009f 0B       		.uleb128 0xb
 2332 00a0 3B       		.uleb128 0x3b
 2333 00a1 0B       		.uleb128 0xb
 2334 00a2 27       		.uleb128 0x27
 2335 00a3 19       		.uleb128 0x19
 2336 00a4 49       		.uleb128 0x49
 2337 00a5 13       		.uleb128 0x13
 2338 00a6 11       		.uleb128 0x11
 2339 00a7 01       		.uleb128 0x1
 2340 00a8 12       		.uleb128 0x12
 2341 00a9 06       		.uleb128 0x6
 2342 00aa 40       		.uleb128 0x40
 2343 00ab 18       		.uleb128 0x18
 2344 00ac 9642     		.uleb128 0x2116
 2345 00ae 19       		.uleb128 0x19
 2346 00af 01       		.uleb128 0x1
 2347 00b0 13       		.uleb128 0x13
 2348 00b1 00       		.byte	0
 2349 00b2 00       		.byte	0
 2350 00b3 0E       		.uleb128 0xe
 2351 00b4 34       		.uleb128 0x34
 2352 00b5 00       		.byte	0
 2353 00b6 03       		.uleb128 0x3
 2354 00b7 08       		.uleb128 0x8
 2355 00b8 3A       		.uleb128 0x3a
 2356 00b9 0B       		.uleb128 0xb
 2357 00ba 3B       		.uleb128 0x3b
 2358 00bb 0B       		.uleb128 0xb
 2359 00bc 49       		.uleb128 0x49
 2360 00bd 13       		.uleb128 0x13
 2361 00be 02       		.uleb128 0x2
 2362 00bf 18       		.uleb128 0x18
 2363 00c0 00       		.byte	0
 2364 00c1 00       		.byte	0
 2365 00c2 0F       		.uleb128 0xf
 2366 00c3 2E       		.uleb128 0x2e
 2367 00c4 01       		.byte	0x1
 2368 00c5 03       		.uleb128 0x3
 2369 00c6 0E       		.uleb128 0xe
 2370 00c7 3A       		.uleb128 0x3a
 2371 00c8 0B       		.uleb128 0xb
 2372 00c9 3B       		.uleb128 0x3b
 2373 00ca 05       		.uleb128 0x5
 2374 00cb 27       		.uleb128 0x27
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 52


 2375 00cc 19       		.uleb128 0x19
 2376 00cd 49       		.uleb128 0x49
 2377 00ce 13       		.uleb128 0x13
 2378 00cf 11       		.uleb128 0x11
 2379 00d0 01       		.uleb128 0x1
 2380 00d1 12       		.uleb128 0x12
 2381 00d2 06       		.uleb128 0x6
 2382 00d3 40       		.uleb128 0x40
 2383 00d4 18       		.uleb128 0x18
 2384 00d5 9642     		.uleb128 0x2116
 2385 00d7 19       		.uleb128 0x19
 2386 00d8 01       		.uleb128 0x1
 2387 00d9 13       		.uleb128 0x13
 2388 00da 00       		.byte	0
 2389 00db 00       		.byte	0
 2390 00dc 10       		.uleb128 0x10
 2391 00dd 05       		.uleb128 0x5
 2392 00de 00       		.byte	0
 2393 00df 03       		.uleb128 0x3
 2394 00e0 0E       		.uleb128 0xe
 2395 00e1 3A       		.uleb128 0x3a
 2396 00e2 0B       		.uleb128 0xb
 2397 00e3 3B       		.uleb128 0x3b
 2398 00e4 05       		.uleb128 0x5
 2399 00e5 49       		.uleb128 0x49
 2400 00e6 13       		.uleb128 0x13
 2401 00e7 02       		.uleb128 0x2
 2402 00e8 18       		.uleb128 0x18
 2403 00e9 00       		.byte	0
 2404 00ea 00       		.byte	0
 2405 00eb 11       		.uleb128 0x11
 2406 00ec 05       		.uleb128 0x5
 2407 00ed 00       		.byte	0
 2408 00ee 03       		.uleb128 0x3
 2409 00ef 08       		.uleb128 0x8
 2410 00f0 3A       		.uleb128 0x3a
 2411 00f1 0B       		.uleb128 0xb
 2412 00f2 3B       		.uleb128 0x3b
 2413 00f3 05       		.uleb128 0x5
 2414 00f4 49       		.uleb128 0x49
 2415 00f5 13       		.uleb128 0x13
 2416 00f6 02       		.uleb128 0x2
 2417 00f7 18       		.uleb128 0x18
 2418 00f8 00       		.byte	0
 2419 00f9 00       		.byte	0
 2420 00fa 12       		.uleb128 0x12
 2421 00fb 34       		.uleb128 0x34
 2422 00fc 00       		.byte	0
 2423 00fd 03       		.uleb128 0x3
 2424 00fe 08       		.uleb128 0x8
 2425 00ff 3A       		.uleb128 0x3a
 2426 0100 0B       		.uleb128 0xb
 2427 0101 3B       		.uleb128 0x3b
 2428 0102 05       		.uleb128 0x5
 2429 0103 49       		.uleb128 0x49
 2430 0104 13       		.uleb128 0x13
 2431 0105 02       		.uleb128 0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 53


 2432 0106 18       		.uleb128 0x18
 2433 0107 00       		.byte	0
 2434 0108 00       		.byte	0
 2435 0109 13       		.uleb128 0x13
 2436 010a 01       		.uleb128 0x1
 2437 010b 01       		.byte	0x1
 2438 010c 49       		.uleb128 0x49
 2439 010d 13       		.uleb128 0x13
 2440 010e 01       		.uleb128 0x1
 2441 010f 13       		.uleb128 0x13
 2442 0110 00       		.byte	0
 2443 0111 00       		.byte	0
 2444 0112 14       		.uleb128 0x14
 2445 0113 21       		.uleb128 0x21
 2446 0114 00       		.byte	0
 2447 0115 49       		.uleb128 0x49
 2448 0116 13       		.uleb128 0x13
 2449 0117 2F       		.uleb128 0x2f
 2450 0118 0B       		.uleb128 0xb
 2451 0119 00       		.byte	0
 2452 011a 00       		.byte	0
 2453 011b 15       		.uleb128 0x15
 2454 011c 2E       		.uleb128 0x2e
 2455 011d 01       		.byte	0x1
 2456 011e 3F       		.uleb128 0x3f
 2457 011f 19       		.uleb128 0x19
 2458 0120 03       		.uleb128 0x3
 2459 0121 0E       		.uleb128 0xe
 2460 0122 3A       		.uleb128 0x3a
 2461 0123 0B       		.uleb128 0xb
 2462 0124 3B       		.uleb128 0x3b
 2463 0125 05       		.uleb128 0x5
 2464 0126 27       		.uleb128 0x27
 2465 0127 19       		.uleb128 0x19
 2466 0128 49       		.uleb128 0x49
 2467 0129 13       		.uleb128 0x13
 2468 012a 11       		.uleb128 0x11
 2469 012b 01       		.uleb128 0x1
 2470 012c 12       		.uleb128 0x12
 2471 012d 06       		.uleb128 0x6
 2472 012e 40       		.uleb128 0x40
 2473 012f 18       		.uleb128 0x18
 2474 0130 9742     		.uleb128 0x2117
 2475 0132 19       		.uleb128 0x19
 2476 0133 01       		.uleb128 0x1
 2477 0134 13       		.uleb128 0x13
 2478 0135 00       		.byte	0
 2479 0136 00       		.byte	0
 2480 0137 16       		.uleb128 0x16
 2481 0138 2E       		.uleb128 0x2e
 2482 0139 01       		.byte	0x1
 2483 013a 3F       		.uleb128 0x3f
 2484 013b 19       		.uleb128 0x19
 2485 013c 03       		.uleb128 0x3
 2486 013d 0E       		.uleb128 0xe
 2487 013e 3A       		.uleb128 0x3a
 2488 013f 0B       		.uleb128 0xb
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 54


 2489 0140 3B       		.uleb128 0x3b
 2490 0141 05       		.uleb128 0x5
 2491 0142 27       		.uleb128 0x27
 2492 0143 19       		.uleb128 0x19
 2493 0144 49       		.uleb128 0x49
 2494 0145 13       		.uleb128 0x13
 2495 0146 11       		.uleb128 0x11
 2496 0147 01       		.uleb128 0x1
 2497 0148 12       		.uleb128 0x12
 2498 0149 06       		.uleb128 0x6
 2499 014a 40       		.uleb128 0x40
 2500 014b 18       		.uleb128 0x18
 2501 014c 9642     		.uleb128 0x2116
 2502 014e 19       		.uleb128 0x19
 2503 014f 01       		.uleb128 0x1
 2504 0150 13       		.uleb128 0x13
 2505 0151 00       		.byte	0
 2506 0152 00       		.byte	0
 2507 0153 17       		.uleb128 0x17
 2508 0154 34       		.uleb128 0x34
 2509 0155 00       		.byte	0
 2510 0156 03       		.uleb128 0x3
 2511 0157 0E       		.uleb128 0xe
 2512 0158 3A       		.uleb128 0x3a
 2513 0159 0B       		.uleb128 0xb
 2514 015a 3B       		.uleb128 0x3b
 2515 015b 0B       		.uleb128 0xb
 2516 015c 49       		.uleb128 0x49
 2517 015d 13       		.uleb128 0x13
 2518 015e 02       		.uleb128 0x2
 2519 015f 18       		.uleb128 0x18
 2520 0160 00       		.byte	0
 2521 0161 00       		.byte	0
 2522 0162 00       		.byte	0
 2523              		.section	.debug_aranges,"",%progbits
 2524 0000 7C000000 		.4byte	0x7c
 2525 0004 0200     		.2byte	0x2
 2526 0006 00000000 		.4byte	.Ldebug_info0
 2527 000a 04       		.byte	0x4
 2528 000b 00       		.byte	0
 2529 000c 0000     		.2byte	0
 2530 000e 0000     		.2byte	0
 2531 0010 00000000 		.4byte	.LFB63
 2532 0014 24000000 		.4byte	.LFE63-.LFB63
 2533 0018 00000000 		.4byte	.LFB64
 2534 001c 2A000000 		.4byte	.LFE64-.LFB64
 2535 0020 00000000 		.4byte	.LFB65
 2536 0024 48000000 		.4byte	.LFE65-.LFB65
 2537 0028 00000000 		.4byte	.LFB66
 2538 002c 1C000000 		.4byte	.LFE66-.LFB66
 2539 0030 00000000 		.4byte	.LFB67
 2540 0034 30000000 		.4byte	.LFE67-.LFB67
 2541 0038 00000000 		.4byte	.LFB68
 2542 003c 6C000000 		.4byte	.LFE68-.LFB68
 2543 0040 00000000 		.4byte	.LFB69
 2544 0044 88000000 		.4byte	.LFE69-.LFB69
 2545 0048 00000000 		.4byte	.LFB70
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 55


 2546 004c 3E010000 		.4byte	.LFE70-.LFB70
 2547 0050 00000000 		.4byte	.LFB71
 2548 0054 28000000 		.4byte	.LFE71-.LFB71
 2549 0058 00000000 		.4byte	.LFB72
 2550 005c CC010000 		.4byte	.LFE72-.LFB72
 2551 0060 00000000 		.4byte	.LFB73
 2552 0064 BC000000 		.4byte	.LFE73-.LFB73
 2553 0068 00000000 		.4byte	.LFB74
 2554 006c DC000000 		.4byte	.LFE74-.LFB74
 2555 0070 00000000 		.4byte	.LFB75
 2556 0074 5E010000 		.4byte	.LFE75-.LFB75
 2557 0078 00000000 		.4byte	0
 2558 007c 00000000 		.4byte	0
 2559              		.section	.debug_ranges,"",%progbits
 2560              	.Ldebug_ranges0:
 2561 0000 00000000 		.4byte	.LFB63
 2562 0004 24000000 		.4byte	.LFE63
 2563 0008 00000000 		.4byte	.LFB64
 2564 000c 2A000000 		.4byte	.LFE64
 2565 0010 00000000 		.4byte	.LFB65
 2566 0014 48000000 		.4byte	.LFE65
 2567 0018 00000000 		.4byte	.LFB66
 2568 001c 1C000000 		.4byte	.LFE66
 2569 0020 00000000 		.4byte	.LFB67
 2570 0024 30000000 		.4byte	.LFE67
 2571 0028 00000000 		.4byte	.LFB68
 2572 002c 6C000000 		.4byte	.LFE68
 2573 0030 00000000 		.4byte	.LFB69
 2574 0034 88000000 		.4byte	.LFE69
 2575 0038 00000000 		.4byte	.LFB70
 2576 003c 3E010000 		.4byte	.LFE70
 2577 0040 00000000 		.4byte	.LFB71
 2578 0044 28000000 		.4byte	.LFE71
 2579 0048 00000000 		.4byte	.LFB72
 2580 004c CC010000 		.4byte	.LFE72
 2581 0050 00000000 		.4byte	.LFB73
 2582 0054 BC000000 		.4byte	.LFE73
 2583 0058 00000000 		.4byte	.LFB74
 2584 005c DC000000 		.4byte	.LFE74
 2585 0060 00000000 		.4byte	.LFB75
 2586 0064 5E010000 		.4byte	.LFE75
 2587 0068 00000000 		.4byte	0
 2588 006c 00000000 		.4byte	0
 2589              		.section	.debug_line,"",%progbits
 2590              	.Ldebug_line0:
 2591 0000 F5020000 		.section	.debug_str,"MS",%progbits,1
 2591      02004200 
 2591      00000201 
 2591      FB0E0D00 
 2591      01010101 
 2592              	.LASF46:
 2593 0000 633A5C43 		.ascii	"c:\\Cypress\\Mainline_v2\\Finish\\fin_v0.cydsn\000"
 2593      79707265 
 2593      73735C4D 
 2593      61696E6C 
 2593      696E655F 
 2594              	.LASF26:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 56


 2595 002b 72637672 		.ascii	"rcvr_mmc\000"
 2595      5F6D6D63 
 2595      00
 2596              	.LASF38:
 2597 0034 636F756E 		.ascii	"count\000"
 2597      7400
 2598              	.LASF25:
 2599 003a 786D6974 		.ascii	"xmit_mmc\000"
 2599      5F6D6D63 
 2599      00
 2600              	.LASF13:
 2601 0043 5245535F 		.ascii	"RES_WRPRT\000"
 2601      57525052 
 2601      5400
 2602              	.LASF2:
 2603 004d 42595445 		.ascii	"BYTE\000"
 2603      00
 2604              	.LASF29:
 2605 0052 73656C65 		.ascii	"select\000"
 2605      637400
 2606              	.LASF42:
 2607 0059 53746174 		.ascii	"Stat\000"
 2607      00
 2608              	.LASF17:
 2609 005e 7369676E 		.ascii	"signed char\000"
 2609      65642063 
 2609      68617200 
 2610              	.LASF8:
 2611 006a 44574F52 		.ascii	"DWORD\000"
 2611      4400
 2612              	.LASF20:
 2613 0070 666C6F61 		.ascii	"float\000"
 2613      7400
 2614              	.LASF14:
 2615 0076 5245535F 		.ascii	"RES_NOTRDY\000"
 2615      4E4F5452 
 2615      445900
 2616              	.LASF0:
 2617 0081 756E7369 		.ascii	"unsigned char\000"
 2617      676E6564 
 2617      20636861 
 2617      7200
 2618              	.LASF9:
 2619 008f 6C6F6E67 		.ascii	"long unsigned int\000"
 2619      20756E73 
 2619      69676E65 
 2619      6420696E 
 2619      7400
 2620              	.LASF4:
 2621 00a1 73686F72 		.ascii	"short unsigned int\000"
 2621      7420756E 
 2621      7369676E 
 2621      65642069 
 2621      6E7400
 2622              	.LASF35:
 2623 00b4 6469736B 		.ascii	"disk_initialize\000"
 2623      5F696E69 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 57


 2623      7469616C 
 2623      697A6500 
 2624              	.LASF45:
 2625 00c4 2E5C6C69 		.ascii	".\\lib_Fat\\sdcard.c\000"
 2625      625F4661 
 2625      745C7364 
 2625      63617264 
 2625      2E6300
 2626              	.LASF33:
 2627 00d7 73656E64 		.ascii	"send_cmd\000"
 2627      5F636D64 
 2627      00
 2628              	.LASF10:
 2629 00e0 44535441 		.ascii	"DSTATUS\000"
 2629      54555300 
 2630              	.LASF24:
 2631 00e8 62756666 		.ascii	"buff\000"
 2631      00
 2632              	.LASF28:
 2633 00ed 77616974 		.ascii	"wait_ready\000"
 2633      5F726561 
 2633      647900
 2634              	.LASF31:
 2635 00f8 786D6974 		.ascii	"xmit_datablock\000"
 2635      5F646174 
 2635      61626C6F 
 2635      636B00
 2636              	.LASF44:
 2637 0107 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2637      4320342E 
 2637      392E3320 
 2637      32303135 
 2637      30333033 
 2638 013a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2638      20726576 
 2638      6973696F 
 2638      6E203232 
 2638      31323230 
 2639 016d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2639      66756E63 
 2639      74696F6E 
 2639      2D736563 
 2639      74696F6E 
 2640              	.LASF40:
 2641 0195 6469736B 		.ascii	"disk_ioctl\000"
 2641      5F696F63 
 2641      746C00
 2642              	.LASF6:
 2643 01a0 756E7369 		.ascii	"unsigned int\000"
 2643      676E6564 
 2643      20696E74 
 2643      00
 2644              	.LASF5:
 2645 01ad 55494E54 		.ascii	"UINT\000"
 2645      00
 2646              	.LASF39:
 2647 01b2 6469736B 		.ascii	"disk_write\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 58


 2647      5F777269 
 2647      746500
 2648              	.LASF19:
 2649 01bd 6C6F6E67 		.ascii	"long long unsigned int\000"
 2649      206C6F6E 
 2649      6720756E 
 2649      7369676E 
 2649      65642069 
 2650              	.LASF27:
 2651 01d4 64657365 		.ascii	"deselect\000"
 2651      6C656374 
 2651      00
 2652              	.LASF34:
 2653 01dd 6469736B 		.ascii	"disk_status\000"
 2653      5F737461 
 2653      74757300 
 2654              	.LASF43:
 2655 01e9 43617264 		.ascii	"CardType\000"
 2655      54797065 
 2655      00
 2656              	.LASF7:
 2657 01f2 6C6F6E67 		.ascii	"long int\000"
 2657      20696E74 
 2657      00
 2658              	.LASF11:
 2659 01fb 5245535F 		.ascii	"RES_OK\000"
 2659      4F4B00
 2660              	.LASF41:
 2661 0202 6374726C 		.ascii	"ctrl\000"
 2661      00
 2662              	.LASF16:
 2663 0207 44524553 		.ascii	"DRESULT\000"
 2663      554C5400 
 2664              	.LASF23:
 2665 020f 73697A65 		.ascii	"sizetype\000"
 2665      74797065 
 2665      00
 2666              	.LASF18:
 2667 0218 6C6F6E67 		.ascii	"long long int\000"
 2667      206C6F6E 
 2667      6720696E 
 2667      7400
 2668              	.LASF22:
 2669 0226 63686172 		.ascii	"char\000"
 2669      00
 2670              	.LASF15:
 2671 022b 5245535F 		.ascii	"RES_PARERR\000"
 2671      50415245 
 2671      525200
 2672              	.LASF3:
 2673 0236 574F5244 		.ascii	"WORD\000"
 2673      00
 2674              	.LASF37:
 2675 023b 73656374 		.ascii	"sector\000"
 2675      6F7200
 2676              	.LASF1:
 2677 0242 73686F72 		.ascii	"short int\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccJZd8x8.s 			page 59


 2677      7420696E 
 2677      7400
 2678              	.LASF12:
 2679 024c 5245535F 		.ascii	"RES_ERROR\000"
 2679      4552524F 
 2679      5200
 2680              	.LASF32:
 2681 0256 746F6B65 		.ascii	"token\000"
 2681      6E00
 2682              	.LASF30:
 2683 025c 72637672 		.ascii	"rcvr_datablock\000"
 2683      5F646174 
 2683      61626C6F 
 2683      636B00
 2684              	.LASF21:
 2685 026b 646F7562 		.ascii	"double\000"
 2685      6C6500
 2686              	.LASF36:
 2687 0272 6469736B 		.ascii	"disk_read\000"
 2687      5F726561 
 2687      6400
 2688              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
