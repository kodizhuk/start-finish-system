ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ff.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.bss
  18              		.align	2
  19              	FatFs:
  20 0000 00000000 		.space	4
  21              		.align	1
  22              	Fsid:
  23 0004 0000     		.space	2
  24 0006 0000     		.section	.rodata
  25              		.align	2
  26              		.type	ExCvt, %object
  27              		.size	ExCvt, 128
  28              	ExCvt:
  29 0000 80       		.byte	-128
  30 0001 9A       		.byte	-102
  31 0002 45       		.byte	69
  32 0003 41       		.byte	65
  33 0004 8E       		.byte	-114
  34 0005 41       		.byte	65
  35 0006 8F       		.byte	-113
  36 0007 80       		.byte	-128
  37 0008 45       		.byte	69
  38 0009 45       		.byte	69
  39 000a 45       		.byte	69
  40 000b 49       		.byte	73
  41 000c 49       		.byte	73
  42 000d 49       		.byte	73
  43 000e 8E       		.byte	-114
  44 000f 8F       		.byte	-113
  45 0010 90       		.byte	-112
  46 0011 92       		.byte	-110
  47 0012 92       		.byte	-110
  48 0013 4F       		.byte	79
  49 0014 99       		.byte	-103
  50 0015 4F       		.byte	79
  51 0016 55       		.byte	85
  52 0017 55       		.byte	85
  53 0018 59       		.byte	89
  54 0019 99       		.byte	-103
  55 001a 9A       		.byte	-102
  56 001b 9B       		.byte	-101
  57 001c 9C       		.byte	-100
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 2


  58 001d 9D       		.byte	-99
  59 001e 9E       		.byte	-98
  60 001f 9F       		.byte	-97
  61 0020 41       		.byte	65
  62 0021 49       		.byte	73
  63 0022 4F       		.byte	79
  64 0023 55       		.byte	85
  65 0024 A5       		.byte	-91
  66 0025 A5       		.byte	-91
  67 0026 A6       		.byte	-90
  68 0027 A7       		.byte	-89
  69 0028 A8       		.byte	-88
  70 0029 A9       		.byte	-87
  71 002a AA       		.byte	-86
  72 002b AB       		.byte	-85
  73 002c AC       		.byte	-84
  74 002d AD       		.byte	-83
  75 002e AE       		.byte	-82
  76 002f AF       		.byte	-81
  77 0030 B0       		.byte	-80
  78 0031 B1       		.byte	-79
  79 0032 B2       		.byte	-78
  80 0033 B3       		.byte	-77
  81 0034 B4       		.byte	-76
  82 0035 B5       		.byte	-75
  83 0036 B6       		.byte	-74
  84 0037 B7       		.byte	-73
  85 0038 B8       		.byte	-72
  86 0039 B9       		.byte	-71
  87 003a BA       		.byte	-70
  88 003b BB       		.byte	-69
  89 003c BC       		.byte	-68
  90 003d BD       		.byte	-67
  91 003e BE       		.byte	-66
  92 003f BF       		.byte	-65
  93 0040 C0       		.byte	-64
  94 0041 C1       		.byte	-63
  95 0042 C2       		.byte	-62
  96 0043 C3       		.byte	-61
  97 0044 C4       		.byte	-60
  98 0045 C5       		.byte	-59
  99 0046 C6       		.byte	-58
 100 0047 C7       		.byte	-57
 101 0048 C8       		.byte	-56
 102 0049 C9       		.byte	-55
 103 004a CA       		.byte	-54
 104 004b CB       		.byte	-53
 105 004c CC       		.byte	-52
 106 004d CD       		.byte	-51
 107 004e CE       		.byte	-50
 108 004f CF       		.byte	-49
 109 0050 D0       		.byte	-48
 110 0051 D1       		.byte	-47
 111 0052 D2       		.byte	-46
 112 0053 D3       		.byte	-45
 113 0054 D4       		.byte	-44
 114 0055 D5       		.byte	-43
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 3


 115 0056 D6       		.byte	-42
 116 0057 D7       		.byte	-41
 117 0058 D8       		.byte	-40
 118 0059 D9       		.byte	-39
 119 005a DA       		.byte	-38
 120 005b DB       		.byte	-37
 121 005c DC       		.byte	-36
 122 005d DD       		.byte	-35
 123 005e DE       		.byte	-34
 124 005f DF       		.byte	-33
 125 0060 E0       		.byte	-32
 126 0061 E1       		.byte	-31
 127 0062 E2       		.byte	-30
 128 0063 E3       		.byte	-29
 129 0064 E4       		.byte	-28
 130 0065 E5       		.byte	-27
 131 0066 E6       		.byte	-26
 132 0067 E7       		.byte	-25
 133 0068 E8       		.byte	-24
 134 0069 E9       		.byte	-23
 135 006a EA       		.byte	-22
 136 006b EB       		.byte	-21
 137 006c EC       		.byte	-20
 138 006d ED       		.byte	-19
 139 006e EE       		.byte	-18
 140 006f EF       		.byte	-17
 141 0070 F0       		.byte	-16
 142 0071 F1       		.byte	-15
 143 0072 F2       		.byte	-14
 144 0073 F3       		.byte	-13
 145 0074 F4       		.byte	-12
 146 0075 F5       		.byte	-11
 147 0076 F6       		.byte	-10
 148 0077 F7       		.byte	-9
 149 0078 F8       		.byte	-8
 150 0079 F9       		.byte	-7
 151 007a FA       		.byte	-6
 152 007b FB       		.byte	-5
 153 007c FC       		.byte	-4
 154 007d FD       		.byte	-3
 155 007e FE       		.byte	-2
 156 007f FF       		.byte	-1
 157              		.section	.text.ld_word,"ax",%progbits
 158              		.align	2
 159              		.code	16
 160              		.thumb_func
 161              		.type	ld_word, %function
 162              	ld_word:
 163              	.LFB0:
 164              		.file 1 ".\\lib_Fat\\ff.c"
   1:.\lib_Fat/ff.c **** /*----------------------------------------------------------------------------/
   2:.\lib_Fat/ff.c **** /  FatFs - Generic FAT file system module  R0.12a                             /
   3:.\lib_Fat/ff.c **** /-----------------------------------------------------------------------------/
   4:.\lib_Fat/ff.c **** /
   5:.\lib_Fat/ff.c **** / Copyright (C) 2016, ChaN, all right reserved.
   6:.\lib_Fat/ff.c **** /
   7:.\lib_Fat/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 4


   8:.\lib_Fat/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:.\lib_Fat/ff.c **** / that the following condition is met:
  10:.\lib_Fat/ff.c **** 
  11:.\lib_Fat/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:.\lib_Fat/ff.c **** /    this condition and the following disclaimer.
  13:.\lib_Fat/ff.c **** /
  14:.\lib_Fat/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:.\lib_Fat/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:.\lib_Fat/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:.\lib_Fat/ff.c **** / by use of this software.
  18:.\lib_Fat/ff.c **** /----------------------------------------------------------------------------*/
  19:.\lib_Fat/ff.c **** 
  20:.\lib_Fat/ff.c **** 
  21:.\lib_Fat/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  22:.\lib_Fat/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:.\lib_Fat/ff.c **** 
  24:.\lib_Fat/ff.c **** 
  25:.\lib_Fat/ff.c **** /*--------------------------------------------------------------------------
  26:.\lib_Fat/ff.c **** 
  27:.\lib_Fat/ff.c ****    Module Private Definitions
  28:.\lib_Fat/ff.c **** 
  29:.\lib_Fat/ff.c **** ---------------------------------------------------------------------------*/
  30:.\lib_Fat/ff.c **** 
  31:.\lib_Fat/ff.c **** #if _FATFS != 80186	/* Revision ID */
  32:.\lib_Fat/ff.c **** #error Wrong include file (ff.h).
  33:.\lib_Fat/ff.c **** #endif
  34:.\lib_Fat/ff.c **** 
  35:.\lib_Fat/ff.c **** 
  36:.\lib_Fat/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
  37:.\lib_Fat/ff.c **** 
  38:.\lib_Fat/ff.c **** 
  39:.\lib_Fat/ff.c **** /* Reentrancy related */
  40:.\lib_Fat/ff.c **** #if _FS_REENTRANT
  41:.\lib_Fat/ff.c **** #if _USE_LFN == 1
  42:.\lib_Fat/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
  43:.\lib_Fat/ff.c **** #endif
  44:.\lib_Fat/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
  45:.\lib_Fat/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
  46:.\lib_Fat/ff.c **** #else
  47:.\lib_Fat/ff.c **** #define	ENTER_FF(fs)
  48:.\lib_Fat/ff.c **** #define LEAVE_FF(fs, res)	return res
  49:.\lib_Fat/ff.c **** #endif
  50:.\lib_Fat/ff.c **** 
  51:.\lib_Fat/ff.c **** 
  52:.\lib_Fat/ff.c **** 
  53:.\lib_Fat/ff.c **** /* Definitions of sector size */
  54:.\lib_Fat/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
  55:.\lib_Fat/ff.c **** #error Wrong sector size configuration
  56:.\lib_Fat/ff.c **** #endif
  57:.\lib_Fat/ff.c **** #if _MAX_SS == _MIN_SS
  58:.\lib_Fat/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
  59:.\lib_Fat/ff.c **** #else
  60:.\lib_Fat/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
  61:.\lib_Fat/ff.c **** #endif
  62:.\lib_Fat/ff.c **** 
  63:.\lib_Fat/ff.c **** 
  64:.\lib_Fat/ff.c **** /* Timestamp */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 5


  65:.\lib_Fat/ff.c **** #if _FS_NORTC == 1
  66:.\lib_Fat/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
  67:.\lib_Fat/ff.c **** #error Invalid _FS_NORTC settings
  68:.\lib_Fat/ff.c **** #endif
  69:.\lib_Fat/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
  70:.\lib_Fat/ff.c **** #else
  71:.\lib_Fat/ff.c **** #define GET_FATTIME()	0//get_fattime()
  72:.\lib_Fat/ff.c **** #endif
  73:.\lib_Fat/ff.c **** 
  74:.\lib_Fat/ff.c **** 
  75:.\lib_Fat/ff.c **** /* File lock controls */
  76:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
  77:.\lib_Fat/ff.c **** #if _FS_READONLY
  78:.\lib_Fat/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
  79:.\lib_Fat/ff.c **** #endif
  80:.\lib_Fat/ff.c **** typedef struct {
  81:.\lib_Fat/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
  82:.\lib_Fat/ff.c **** 	DWORD clu;		/* Object ID 2, directory (0:root) */
  83:.\lib_Fat/ff.c **** 	DWORD ofs;		/* Object ID 3, directory offset */
  84:.\lib_Fat/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
  85:.\lib_Fat/ff.c **** } FILESEM;
  86:.\lib_Fat/ff.c **** #endif
  87:.\lib_Fat/ff.c **** 
  88:.\lib_Fat/ff.c **** 
  89:.\lib_Fat/ff.c **** 
  90:.\lib_Fat/ff.c **** /* DBCS code ranges and SBCS upper conversion tables */
  91:.\lib_Fat/ff.c **** 
  92:.\lib_Fat/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  93:.\lib_Fat/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  94:.\lib_Fat/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  95:.\lib_Fat/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  96:.\lib_Fat/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  97:.\lib_Fat/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  98:.\lib_Fat/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  99:.\lib_Fat/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 100:.\lib_Fat/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 101:.\lib_Fat/ff.c **** 
 102:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 103:.\lib_Fat/ff.c **** #define _DF1S	0x81
 104:.\lib_Fat/ff.c **** #define _DF1E	0xFE
 105:.\lib_Fat/ff.c **** #define _DS1S	0x40
 106:.\lib_Fat/ff.c **** #define _DS1E	0x7E
 107:.\lib_Fat/ff.c **** #define _DS2S	0x80
 108:.\lib_Fat/ff.c **** #define _DS2E	0xFE
 109:.\lib_Fat/ff.c **** 
 110:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 111:.\lib_Fat/ff.c **** #define _DF1S	0x81
 112:.\lib_Fat/ff.c **** #define _DF1E	0xFE
 113:.\lib_Fat/ff.c **** #define _DS1S	0x41
 114:.\lib_Fat/ff.c **** #define _DS1E	0x5A
 115:.\lib_Fat/ff.c **** #define _DS2S	0x61
 116:.\lib_Fat/ff.c **** #define _DS2E	0x7A
 117:.\lib_Fat/ff.c **** #define _DS3S	0x81
 118:.\lib_Fat/ff.c **** #define _DS3E	0xFE
 119:.\lib_Fat/ff.c **** 
 120:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 121:.\lib_Fat/ff.c **** #define _DF1S	0x81
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 6


 122:.\lib_Fat/ff.c **** #define _DF1E	0xFE
 123:.\lib_Fat/ff.c **** #define _DS1S	0x40
 124:.\lib_Fat/ff.c **** #define _DS1E	0x7E
 125:.\lib_Fat/ff.c **** #define _DS2S	0xA1
 126:.\lib_Fat/ff.c **** #define _DS2E	0xFE
 127:.\lib_Fat/ff.c **** 
 128:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 437	/* U.S. */
 129:.\lib_Fat/ff.c **** #define _DF1S	0
 130:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 131:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 132:.\lib_Fat/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 133:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 134:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 135:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 136:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 137:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 138:.\lib_Fat/ff.c **** 
 139:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 720	/* Arabic */
 140:.\lib_Fat/ff.c **** #define _DF1S	0
 141:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 142:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 143:.\lib_Fat/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 144:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 145:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 146:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 147:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 148:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 149:.\lib_Fat/ff.c **** 
 150:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 737	/* Greek */
 151:.\lib_Fat/ff.c **** #define _DF1S	0
 152:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 153:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 154:.\lib_Fat/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 155:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 156:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 157:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 158:.\lib_Fat/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 159:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 160:.\lib_Fat/ff.c **** 
 161:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 771	/* KBL */
 162:.\lib_Fat/ff.c **** #define _DF1S	0
 163:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 164:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 165:.\lib_Fat/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 166:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 167:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 168:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 169:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 170:.\lib_Fat/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 171:.\lib_Fat/ff.c **** 
 172:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 775	/* Baltic */
 173:.\lib_Fat/ff.c **** #define _DF1S	0
 174:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 175:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 176:.\lib_Fat/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 177:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 178:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 7


 179:.\lib_Fat/ff.c **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 180:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 181:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 182:.\lib_Fat/ff.c **** 
 183:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 850	/* Latin 1 */
 184:.\lib_Fat/ff.c **** #define _DF1S	0
 185:.\lib_Fat/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 186:.\lib_Fat/ff.c **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 187:.\lib_Fat/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 188:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 189:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 190:.\lib_Fat/ff.c **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 191:.\lib_Fat/ff.c **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 192:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 193:.\lib_Fat/ff.c **** 
 194:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 */
 195:.\lib_Fat/ff.c **** #define _DF1S	0
 196:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 197:.\lib_Fat/ff.c **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 198:.\lib_Fat/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 199:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 200:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 201:.\lib_Fat/ff.c **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 202:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 203:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 204:.\lib_Fat/ff.c **** 
 205:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic */
 206:.\lib_Fat/ff.c **** #define _DF1S	0
 207:.\lib_Fat/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 208:.\lib_Fat/ff.c **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 209:.\lib_Fat/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 210:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 211:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 212:.\lib_Fat/ff.c **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 213:.\lib_Fat/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 214:.\lib_Fat/ff.c **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 215:.\lib_Fat/ff.c **** 
 216:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 857	/* Turkish */
 217:.\lib_Fat/ff.c **** #define _DF1S	0
 218:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 219:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 220:.\lib_Fat/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 221:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 222:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 223:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 224:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 225:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 226:.\lib_Fat/ff.c **** 
 227:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 860	/* Portuguese */
 228:.\lib_Fat/ff.c **** #define _DF1S	0
 229:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 230:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 231:.\lib_Fat/ff.c **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 232:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 233:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 234:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 235:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 8


 236:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 237:.\lib_Fat/ff.c **** 
 238:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 861	/* Icelandic */
 239:.\lib_Fat/ff.c **** #define _DF1S	0
 240:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 241:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 242:.\lib_Fat/ff.c **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 243:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 244:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 245:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 246:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 247:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 248:.\lib_Fat/ff.c **** 
 249:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew */
 250:.\lib_Fat/ff.c **** #define _DF1S	0
 251:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 252:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 253:.\lib_Fat/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 254:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 255:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 256:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 257:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 258:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 259:.\lib_Fat/ff.c **** 
 260:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 863	/* Canadian-French */
 261:.\lib_Fat/ff.c **** #define _DF1S	0
 262:.\lib_Fat/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 263:.\lib_Fat/ff.c **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 264:.\lib_Fat/ff.c **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 265:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 266:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 267:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 268:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 269:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 270:.\lib_Fat/ff.c **** 
 271:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 864	/* Arabic */
 272:.\lib_Fat/ff.c **** #define _DF1S	0
 273:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 274:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 275:.\lib_Fat/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 276:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 277:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 278:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 279:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 280:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 281:.\lib_Fat/ff.c **** 
 282:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 865	/* Nordic */
 283:.\lib_Fat/ff.c **** #define _DF1S	0
 284:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 285:.\lib_Fat/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 286:.\lib_Fat/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 287:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 288:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 289:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 290:.\lib_Fat/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 291:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 292:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 9


 293:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 866	/* Russian */
 294:.\lib_Fat/ff.c **** #define _DF1S	0
 295:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 296:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 297:.\lib_Fat/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 298:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 299:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 300:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 301:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 302:.\lib_Fat/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 303:.\lib_Fat/ff.c **** 
 304:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 869	/* Greek 2 */
 305:.\lib_Fat/ff.c **** #define _DF1S	0
 306:.\lib_Fat/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 307:.\lib_Fat/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 308:.\lib_Fat/ff.c **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 309:.\lib_Fat/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 310:.\lib_Fat/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 311:.\lib_Fat/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 312:.\lib_Fat/ff.c **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 313:.\lib_Fat/ff.c **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 314:.\lib_Fat/ff.c **** 
 315:.\lib_Fat/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 316:.\lib_Fat/ff.c **** #if _USE_LFN != 0
 317:.\lib_Fat/ff.c **** #error Cannot enable LFN without valid code page.
 318:.\lib_Fat/ff.c **** #endif
 319:.\lib_Fat/ff.c **** #define _DF1S	0
 320:.\lib_Fat/ff.c **** 
 321:.\lib_Fat/ff.c **** #else
 322:.\lib_Fat/ff.c **** #error Unknown code page
 323:.\lib_Fat/ff.c **** 
 324:.\lib_Fat/ff.c **** #endif
 325:.\lib_Fat/ff.c **** 
 326:.\lib_Fat/ff.c **** 
 327:.\lib_Fat/ff.c **** /* Character code support macros */
 328:.\lib_Fat/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 329:.\lib_Fat/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 330:.\lib_Fat/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 331:.\lib_Fat/ff.c **** 
 332:.\lib_Fat/ff.c **** #if _DF1S != 0	/* Code page is DBCS */
 333:.\lib_Fat/ff.c **** 
 334:.\lib_Fat/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 335:.\lib_Fat/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 336:.\lib_Fat/ff.c **** #else			/* One 1st byte area */
 337:.\lib_Fat/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 338:.\lib_Fat/ff.c **** #endif
 339:.\lib_Fat/ff.c **** 
 340:.\lib_Fat/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 341:.\lib_Fat/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 342:.\lib_Fat/ff.c **** #else			/* Two 2nd byte areas */
 343:.\lib_Fat/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 344:.\lib_Fat/ff.c **** #endif
 345:.\lib_Fat/ff.c **** 
 346:.\lib_Fat/ff.c **** #else			/* Code page is SBCS */
 347:.\lib_Fat/ff.c **** 
 348:.\lib_Fat/ff.c **** #define IsDBCS1(c)	0
 349:.\lib_Fat/ff.c **** #define IsDBCS2(c)	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 10


 350:.\lib_Fat/ff.c **** 
 351:.\lib_Fat/ff.c **** #endif /* _DF1S */
 352:.\lib_Fat/ff.c **** 
 353:.\lib_Fat/ff.c **** 
 354:.\lib_Fat/ff.c **** /* File attribute bits (internal use) */
 355:.\lib_Fat/ff.c **** #define	AM_VOL		0x08	/* Volume label */
 356:.\lib_Fat/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
 357:.\lib_Fat/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
 358:.\lib_Fat/ff.c **** 
 359:.\lib_Fat/ff.c **** 
 360:.\lib_Fat/ff.c **** /* File access control and file status flags (internal use) */
 361:.\lib_Fat/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 362:.\lib_Fat/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
 363:.\lib_Fat/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 364:.\lib_Fat/ff.c **** 
 365:.\lib_Fat/ff.c **** 
 366:.\lib_Fat/ff.c **** /* Name status flags */
 367:.\lib_Fat/ff.c **** #define NSFLAG		11		/* Index of name status byte in fn[] */
 368:.\lib_Fat/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 369:.\lib_Fat/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 370:.\lib_Fat/ff.c **** #define NS_LAST		0x04	/* Last segment */
 371:.\lib_Fat/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 372:.\lib_Fat/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 373:.\lib_Fat/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 374:.\lib_Fat/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
 375:.\lib_Fat/ff.c **** #define NS_NONAME	0x80	/* Not followed */
 376:.\lib_Fat/ff.c **** 
 377:.\lib_Fat/ff.c **** 
 378:.\lib_Fat/ff.c **** /* Limits and boundaries (differ from specs but correct for real DOS/Windows) */
 379:.\lib_Fat/ff.c **** #define MAX_FAT12	0xFF5			/* Maximum number of FAT12 clusters */
 380:.\lib_Fat/ff.c **** #define	MAX_FAT16	0xFFF5			/* Maximum number of FAT16 clusters */
 381:.\lib_Fat/ff.c **** #define	MAX_FAT32	0xFFFFFF5		/* Maximum number of FAT32 clusters */
 382:.\lib_Fat/ff.c **** #define	MAX_EXFAT	0x7FFFFFFD		/* Maximum number of exFAT clusters (limited by implementation) */
 383:.\lib_Fat/ff.c **** #define MAX_DIR		0x200000		/* Maximum size of FAT directory */
 384:.\lib_Fat/ff.c **** #define MAX_DIR_EX	0x10000000		/* Maximum size of exFAT directory */
 385:.\lib_Fat/ff.c **** 
 386:.\lib_Fat/ff.c **** 
 387:.\lib_Fat/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 388:.\lib_Fat/ff.c **** / structure members because the structure is not binary compatible between
 389:.\lib_Fat/ff.c **** / different platforms */
 390:.\lib_Fat/ff.c **** 
 391:.\lib_Fat/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 392:.\lib_Fat/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
 393:.\lib_Fat/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 394:.\lib_Fat/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 395:.\lib_Fat/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 396:.\lib_Fat/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 397:.\lib_Fat/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 398:.\lib_Fat/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 399:.\lib_Fat/ff.c **** #define BPB_Media			21		/* Media descriptor (BYTE) */
 400:.\lib_Fat/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 401:.\lib_Fat/ff.c **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 402:.\lib_Fat/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 403:.\lib_Fat/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 404:.\lib_Fat/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 405:.\lib_Fat/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 406:.\lib_Fat/ff.c **** #define BS_NTres			37		/* Error flag (BYTE) */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 11


 407:.\lib_Fat/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 408:.\lib_Fat/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 409:.\lib_Fat/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 410:.\lib_Fat/ff.c **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 411:.\lib_Fat/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 412:.\lib_Fat/ff.c **** 
 413:.\lib_Fat/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 414:.\lib_Fat/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 415:.\lib_Fat/ff.c **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 416:.\lib_Fat/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 417:.\lib_Fat/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 418:.\lib_Fat/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 419:.\lib_Fat/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 420:.\lib_Fat/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 421:.\lib_Fat/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 422:.\lib_Fat/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 423:.\lib_Fat/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 424:.\lib_Fat/ff.c **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 425:.\lib_Fat/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 426:.\lib_Fat/ff.c **** 
 427:.\lib_Fat/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 428:.\lib_Fat/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 429:.\lib_Fat/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 430:.\lib_Fat/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 431:.\lib_Fat/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 432:.\lib_Fat/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 433:.\lib_Fat/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 434:.\lib_Fat/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory cluster (DWORD) */
 435:.\lib_Fat/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 436:.\lib_Fat/ff.c **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
 437:.\lib_Fat/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 438:.\lib_Fat/ff.c **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 439:.\lib_Fat/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in byte (BYTE) */
 440:.\lib_Fat/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in sector (BYTE) */
 441:.\lib_Fat/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 442:.\lib_Fat/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 443:.\lib_Fat/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 444:.\lib_Fat/ff.c **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 445:.\lib_Fat/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 446:.\lib_Fat/ff.c **** 
 447:.\lib_Fat/ff.c **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 448:.\lib_Fat/ff.c **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 449:.\lib_Fat/ff.c **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 450:.\lib_Fat/ff.c **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 451:.\lib_Fat/ff.c **** 
 452:.\lib_Fat/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 453:.\lib_Fat/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 454:.\lib_Fat/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 455:.\lib_Fat/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 456:.\lib_Fat/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 457:.\lib_Fat/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 458:.\lib_Fat/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 459:.\lib_Fat/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 460:.\lib_Fat/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 461:.\lib_Fat/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 462:.\lib_Fat/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 463:.\lib_Fat/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 12


 464:.\lib_Fat/ff.c **** 
 465:.\lib_Fat/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 466:.\lib_Fat/ff.c **** 
 467:.\lib_Fat/ff.c **** #define	DIR_Name			0		/* Short file name (11-byte) */
 468:.\lib_Fat/ff.c **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 469:.\lib_Fat/ff.c **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 470:.\lib_Fat/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 471:.\lib_Fat/ff.c **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 472:.\lib_Fat/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 473:.\lib_Fat/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 474:.\lib_Fat/ff.c **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 475:.\lib_Fat/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 476:.\lib_Fat/ff.c **** #define	DIR_FileSize		28		/* File size (DWORD) */
 477:.\lib_Fat/ff.c **** #define	LDIR_Ord			0		/* LFN entry order and LLE flag (BYTE) */
 478:.\lib_Fat/ff.c **** #define	LDIR_Attr			11		/* LFN attribute (BYTE) */
 479:.\lib_Fat/ff.c **** #define	LDIR_Type			12		/* LFN type (BYTE) */
 480:.\lib_Fat/ff.c **** #define	LDIR_Chksum			13		/* Checksum of the SFN entry (BYTE) */
 481:.\lib_Fat/ff.c **** #define	LDIR_FstClusLO		26		/* Must be zero (WORD) */
 482:.\lib_Fat/ff.c **** #define	XDIR_Type			0		/* Type of exFAT directory entry (BYTE) */
 483:.\lib_Fat/ff.c **** #define	XDIR_NumLabel		1		/* Number of volume label characters (BYTE) */
 484:.\lib_Fat/ff.c **** #define	XDIR_Label			2		/* Volume label (11-WORD) */
 485:.\lib_Fat/ff.c **** #define	XDIR_CaseSum		4		/* Sum of case conversion table (DWORD) */
 486:.\lib_Fat/ff.c **** #define	XDIR_NumSec			1		/* Number of secondary entries (BYTE) */
 487:.\lib_Fat/ff.c **** #define	XDIR_SetSum			2		/* Sum of the set of directory entries (WORD) */
 488:.\lib_Fat/ff.c **** #define	XDIR_Attr			4		/* File attribute (WORD) */
 489:.\lib_Fat/ff.c **** #define	XDIR_CrtTime		8		/* Created time (DWORD) */
 490:.\lib_Fat/ff.c **** #define	XDIR_ModTime		12		/* Modified time (DWORD) */
 491:.\lib_Fat/ff.c **** #define	XDIR_AccTime		16		/* Last accessed time (DWORD) */
 492:.\lib_Fat/ff.c **** #define	XDIR_CrtTime10		20		/* Created time subsecond (BYTE) */
 493:.\lib_Fat/ff.c **** #define	XDIR_ModTime10		21		/* Modified time subsecond (BYTE) */
 494:.\lib_Fat/ff.c **** #define	XDIR_CrtTZ			22		/* Created timezone (BYTE) */
 495:.\lib_Fat/ff.c **** #define	XDIR_ModTZ			23		/* Modified timezone (BYTE) */
 496:.\lib_Fat/ff.c **** #define	XDIR_AccTZ			24		/* Last accessed timezone (BYTE) */
 497:.\lib_Fat/ff.c **** #define	XDIR_GenFlags		33		/* Gneral secondary flags (WORD) */
 498:.\lib_Fat/ff.c **** #define	XDIR_NumName		35		/* Number of file name characters (BYTE) */
 499:.\lib_Fat/ff.c **** #define	XDIR_NameHash		36		/* Hash of file name (WORD) */
 500:.\lib_Fat/ff.c **** #define XDIR_ValidFileSize	40		/* Valid file size (QWORD) */
 501:.\lib_Fat/ff.c **** #define	XDIR_FstClus		52		/* First cluster of the file data (DWORD) */
 502:.\lib_Fat/ff.c **** #define	XDIR_FileSize		56		/* File/Directory size (QWORD) */
 503:.\lib_Fat/ff.c **** 
 504:.\lib_Fat/ff.c **** #define	SZDIRE				32		/* Size of a directory entry */
 505:.\lib_Fat/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 506:.\lib_Fat/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 507:.\lib_Fat/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
 508:.\lib_Fat/ff.c **** 
 509:.\lib_Fat/ff.c **** 
 510:.\lib_Fat/ff.c **** 
 511:.\lib_Fat/ff.c **** 
 512:.\lib_Fat/ff.c **** 
 513:.\lib_Fat/ff.c **** /*--------------------------------------------------------------------------
 514:.\lib_Fat/ff.c **** 
 515:.\lib_Fat/ff.c ****    Module Private Work Area
 516:.\lib_Fat/ff.c **** 
 517:.\lib_Fat/ff.c **** ---------------------------------------------------------------------------*/
 518:.\lib_Fat/ff.c **** 
 519:.\lib_Fat/ff.c **** /* Remark: Variables here without initial value shall be guaranteed zero/null
 520:.\lib_Fat/ff.c **** /  at start-up. If not, either the linker or start-up routine being used is
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 13


 521:.\lib_Fat/ff.c **** /  not compliance with C standard. */
 522:.\lib_Fat/ff.c **** 
 523:.\lib_Fat/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 9
 524:.\lib_Fat/ff.c **** #error Wrong _VOLUMES setting
 525:.\lib_Fat/ff.c **** #endif
 526:.\lib_Fat/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 527:.\lib_Fat/ff.c **** static WORD Fsid;				/* File system mount ID */
 528:.\lib_Fat/ff.c **** 
 529:.\lib_Fat/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 530:.\lib_Fat/ff.c **** static BYTE CurrVol;			/* Current drive */
 531:.\lib_Fat/ff.c **** #endif
 532:.\lib_Fat/ff.c **** 
 533:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
 534:.\lib_Fat/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 535:.\lib_Fat/ff.c **** #endif
 536:.\lib_Fat/ff.c **** 
 537:.\lib_Fat/ff.c **** #if _USE_LFN == 0			/* Non-LFN configuration */
 538:.\lib_Fat/ff.c **** #define	DEF_NAMBUF
 539:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)
 540:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()
 541:.\lib_Fat/ff.c **** #else
 542:.\lib_Fat/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 543:.\lib_Fat/ff.c **** #error Wrong _MAX_LFN setting
 544:.\lib_Fat/ff.c **** #endif
 545:.\lib_Fat/ff.c **** 
 546:.\lib_Fat/ff.c **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
 547:.\lib_Fat/ff.c **** #if _FS_EXFAT
 548:.\lib_Fat/ff.c **** static BYTE	DirBuf[SZDIRE*19];	/* Directory entry block scratchpad buffer (19 entries in size) */
 549:.\lib_Fat/ff.c **** #endif
 550:.\lib_Fat/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];	/* LFN enabled with static working buffer */
 551:.\lib_Fat/ff.c **** #define	DEF_NAMBUF
 552:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)
 553:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()
 554:.\lib_Fat/ff.c **** 
 555:.\lib_Fat/ff.c **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 556:.\lib_Fat/ff.c **** #if _FS_EXFAT
 557:.\lib_Fat/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[SZDIRE*19];
 558:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 559:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()
 560:.\lib_Fat/ff.c **** #else
 561:.\lib_Fat/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 562:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 563:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()
 564:.\lib_Fat/ff.c **** #endif
 565:.\lib_Fat/ff.c **** 
 566:.\lib_Fat/ff.c **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 567:.\lib_Fat/ff.c **** #if _FS_EXFAT
 568:.\lib_Fat/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 569:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + SZDIRE*19); if (!lfn) LEAVE_FF(fs, FR_
 570:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 571:.\lib_Fat/ff.c **** #else
 572:.\lib_Fat/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 573:.\lib_Fat/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 574:.\lib_Fat/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 575:.\lib_Fat/ff.c **** #endif
 576:.\lib_Fat/ff.c **** 
 577:.\lib_Fat/ff.c **** #else
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 14


 578:.\lib_Fat/ff.c **** #error Wrong _USE_LFN setting
 579:.\lib_Fat/ff.c **** #endif
 580:.\lib_Fat/ff.c **** #endif
 581:.\lib_Fat/ff.c **** 
 582:.\lib_Fat/ff.c **** #ifdef _EXCVT
 583:.\lib_Fat/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 584:.\lib_Fat/ff.c **** #endif
 585:.\lib_Fat/ff.c **** 
 586:.\lib_Fat/ff.c **** 
 587:.\lib_Fat/ff.c **** 
 588:.\lib_Fat/ff.c **** 
 589:.\lib_Fat/ff.c **** 
 590:.\lib_Fat/ff.c **** 
 591:.\lib_Fat/ff.c **** /*--------------------------------------------------------------------------
 592:.\lib_Fat/ff.c **** 
 593:.\lib_Fat/ff.c ****    Module Private Functions
 594:.\lib_Fat/ff.c **** 
 595:.\lib_Fat/ff.c **** ---------------------------------------------------------------------------*/
 596:.\lib_Fat/ff.c **** 
 597:.\lib_Fat/ff.c **** 
 598:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 599:.\lib_Fat/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 600:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 601:.\lib_Fat/ff.c **** 
 602:.\lib_Fat/ff.c **** static
 603:.\lib_Fat/ff.c **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 604:.\lib_Fat/ff.c **** {
 165              		.loc 1 604 0
 166              		.cfi_startproc
 167 0000 80B5     		push	{r7, lr}
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 84B0     		sub	sp, sp, #16
 172              		.cfi_def_cfa_offset 24
 173 0004 00AF     		add	r7, sp, #0
 174              		.cfi_def_cfa_register 7
 175 0006 7860     		str	r0, [r7, #4]
 605:.\lib_Fat/ff.c **** 	WORD rv;
 606:.\lib_Fat/ff.c **** 
 607:.\lib_Fat/ff.c **** 	rv = ptr[1];
 176              		.loc 1 607 0
 177 0008 7B68     		ldr	r3, [r7, #4]
 178 000a 0133     		add	r3, r3, #1
 179 000c 1A78     		ldrb	r2, [r3]
 180 000e 0E23     		mov	r3, #14
 181 0010 FB18     		add	r3, r7, r3
 182 0012 1A80     		strh	r2, [r3]
 608:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[0];
 183              		.loc 1 608 0
 184 0014 0E23     		mov	r3, #14
 185 0016 FB18     		add	r3, r7, r3
 186 0018 1B88     		ldrh	r3, [r3]
 187 001a 1B02     		lsl	r3, r3, #8
 188 001c 9AB2     		uxth	r2, r3
 189 001e 7B68     		ldr	r3, [r7, #4]
 190 0020 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 15


 191 0022 9BB2     		uxth	r3, r3
 192 0024 1343     		orr	r3, r2
 193 0026 9AB2     		uxth	r2, r3
 194 0028 0E23     		mov	r3, #14
 195 002a FB18     		add	r3, r7, r3
 196 002c 1A80     		strh	r2, [r3]
 609:.\lib_Fat/ff.c **** 	return rv;
 197              		.loc 1 609 0
 198 002e 0E23     		mov	r3, #14
 199 0030 FB18     		add	r3, r7, r3
 200 0032 1B88     		ldrh	r3, [r3]
 610:.\lib_Fat/ff.c **** }
 201              		.loc 1 610 0
 202 0034 181C     		mov	r0, r3
 203 0036 BD46     		mov	sp, r7
 204 0038 04B0     		add	sp, sp, #16
 205              		@ sp needed
 206 003a 80BD     		pop	{r7, pc}
 207              		.cfi_endproc
 208              	.LFE0:
 209              		.size	ld_word, .-ld_word
 210              		.section	.text.ld_dword,"ax",%progbits
 211              		.align	2
 212              		.code	16
 213              		.thumb_func
 214              		.type	ld_dword, %function
 215              	ld_dword:
 216              	.LFB1:
 611:.\lib_Fat/ff.c **** 
 612:.\lib_Fat/ff.c **** static
 613:.\lib_Fat/ff.c **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 614:.\lib_Fat/ff.c **** {
 217              		.loc 1 614 0
 218              		.cfi_startproc
 219 0000 80B5     		push	{r7, lr}
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 84B0     		sub	sp, sp, #16
 224              		.cfi_def_cfa_offset 24
 225 0004 00AF     		add	r7, sp, #0
 226              		.cfi_def_cfa_register 7
 227 0006 7860     		str	r0, [r7, #4]
 615:.\lib_Fat/ff.c **** 	DWORD rv;
 616:.\lib_Fat/ff.c **** 
 617:.\lib_Fat/ff.c **** 	rv = ptr[3];
 228              		.loc 1 617 0
 229 0008 7B68     		ldr	r3, [r7, #4]
 230 000a 0333     		add	r3, r3, #3
 231 000c 1B78     		ldrb	r3, [r3]
 232 000e FB60     		str	r3, [r7, #12]
 618:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[2];
 233              		.loc 1 618 0
 234 0010 FB68     		ldr	r3, [r7, #12]
 235 0012 1B02     		lsl	r3, r3, #8
 236 0014 7A68     		ldr	r2, [r7, #4]
 237 0016 0232     		add	r2, r2, #2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 16


 238 0018 1278     		ldrb	r2, [r2]
 239 001a 1343     		orr	r3, r2
 240 001c FB60     		str	r3, [r7, #12]
 619:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[1];
 241              		.loc 1 619 0
 242 001e FB68     		ldr	r3, [r7, #12]
 243 0020 1B02     		lsl	r3, r3, #8
 244 0022 7A68     		ldr	r2, [r7, #4]
 245 0024 0132     		add	r2, r2, #1
 246 0026 1278     		ldrb	r2, [r2]
 247 0028 1343     		orr	r3, r2
 248 002a FB60     		str	r3, [r7, #12]
 620:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[0];
 249              		.loc 1 620 0
 250 002c FB68     		ldr	r3, [r7, #12]
 251 002e 1B02     		lsl	r3, r3, #8
 252 0030 7A68     		ldr	r2, [r7, #4]
 253 0032 1278     		ldrb	r2, [r2]
 254 0034 1343     		orr	r3, r2
 255 0036 FB60     		str	r3, [r7, #12]
 621:.\lib_Fat/ff.c **** 	return rv;
 256              		.loc 1 621 0
 257 0038 FB68     		ldr	r3, [r7, #12]
 622:.\lib_Fat/ff.c **** }
 258              		.loc 1 622 0
 259 003a 181C     		mov	r0, r3
 260 003c BD46     		mov	sp, r7
 261 003e 04B0     		add	sp, sp, #16
 262              		@ sp needed
 263 0040 80BD     		pop	{r7, pc}
 264              		.cfi_endproc
 265              	.LFE1:
 266              		.size	ld_dword, .-ld_dword
 267 0042 C046     		.section	.text.st_word,"ax",%progbits
 268              		.align	2
 269              		.code	16
 270              		.thumb_func
 271              		.type	st_word, %function
 272              	st_word:
 273              	.LFB2:
 623:.\lib_Fat/ff.c **** 
 624:.\lib_Fat/ff.c **** #if _FS_EXFAT
 625:.\lib_Fat/ff.c **** static
 626:.\lib_Fat/ff.c **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 627:.\lib_Fat/ff.c **** {
 628:.\lib_Fat/ff.c **** 	QWORD rv;
 629:.\lib_Fat/ff.c **** 
 630:.\lib_Fat/ff.c **** 	rv = ptr[7];
 631:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[6];
 632:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[5];
 633:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[4];
 634:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[3];
 635:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[2];
 636:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[1];
 637:.\lib_Fat/ff.c **** 	rv = rv << 8 | ptr[0];
 638:.\lib_Fat/ff.c **** 	return rv;
 639:.\lib_Fat/ff.c **** }
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 17


 640:.\lib_Fat/ff.c **** #endif
 641:.\lib_Fat/ff.c **** 
 642:.\lib_Fat/ff.c **** #if !_FS_READONLY
 643:.\lib_Fat/ff.c **** static
 644:.\lib_Fat/ff.c **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 645:.\lib_Fat/ff.c **** {
 274              		.loc 1 645 0
 275              		.cfi_startproc
 276 0000 80B5     		push	{r7, lr}
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 82B0     		sub	sp, sp, #8
 281              		.cfi_def_cfa_offset 16
 282 0004 00AF     		add	r7, sp, #0
 283              		.cfi_def_cfa_register 7
 284 0006 7860     		str	r0, [r7, #4]
 285 0008 0A1C     		mov	r2, r1
 286 000a BB1C     		add	r3, r7, #2
 287 000c 1A80     		strh	r2, [r3]
 646:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 288              		.loc 1 646 0
 289 000e 7B68     		ldr	r3, [r7, #4]
 290 0010 5A1C     		add	r2, r3, #1
 291 0012 7A60     		str	r2, [r7, #4]
 292 0014 BA1C     		add	r2, r7, #2
 293 0016 1288     		ldrh	r2, [r2]
 294 0018 D2B2     		uxtb	r2, r2
 295 001a 1A70     		strb	r2, [r3]
 296 001c BB1C     		add	r3, r7, #2
 297 001e BA1C     		add	r2, r7, #2
 298 0020 1288     		ldrh	r2, [r2]
 299 0022 120A     		lsr	r2, r2, #8
 300 0024 1A80     		strh	r2, [r3]
 647:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val;
 301              		.loc 1 647 0
 302 0026 7B68     		ldr	r3, [r7, #4]
 303 0028 5A1C     		add	r2, r3, #1
 304 002a 7A60     		str	r2, [r7, #4]
 305 002c BA1C     		add	r2, r7, #2
 306 002e 1288     		ldrh	r2, [r2]
 307 0030 D2B2     		uxtb	r2, r2
 308 0032 1A70     		strb	r2, [r3]
 648:.\lib_Fat/ff.c **** }
 309              		.loc 1 648 0
 310 0034 BD46     		mov	sp, r7
 311 0036 02B0     		add	sp, sp, #8
 312              		@ sp needed
 313 0038 80BD     		pop	{r7, pc}
 314              		.cfi_endproc
 315              	.LFE2:
 316              		.size	st_word, .-st_word
 317 003a C046     		.section	.text.st_dword,"ax",%progbits
 318              		.align	2
 319              		.code	16
 320              		.thumb_func
 321              		.type	st_dword, %function
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 18


 322              	st_dword:
 323              	.LFB3:
 649:.\lib_Fat/ff.c **** 
 650:.\lib_Fat/ff.c **** static
 651:.\lib_Fat/ff.c **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 652:.\lib_Fat/ff.c **** {
 324              		.loc 1 652 0
 325              		.cfi_startproc
 326 0000 80B5     		push	{r7, lr}
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 7, -8
 329              		.cfi_offset 14, -4
 330 0002 82B0     		sub	sp, sp, #8
 331              		.cfi_def_cfa_offset 16
 332 0004 00AF     		add	r7, sp, #0
 333              		.cfi_def_cfa_register 7
 334 0006 7860     		str	r0, [r7, #4]
 335 0008 3960     		str	r1, [r7]
 653:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 336              		.loc 1 653 0
 337 000a 7B68     		ldr	r3, [r7, #4]
 338 000c 5A1C     		add	r2, r3, #1
 339 000e 7A60     		str	r2, [r7, #4]
 340 0010 3A68     		ldr	r2, [r7]
 341 0012 D2B2     		uxtb	r2, r2
 342 0014 1A70     		strb	r2, [r3]
 343 0016 3B68     		ldr	r3, [r7]
 344 0018 1B0A     		lsr	r3, r3, #8
 345 001a 3B60     		str	r3, [r7]
 654:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 346              		.loc 1 654 0
 347 001c 7B68     		ldr	r3, [r7, #4]
 348 001e 5A1C     		add	r2, r3, #1
 349 0020 7A60     		str	r2, [r7, #4]
 350 0022 3A68     		ldr	r2, [r7]
 351 0024 D2B2     		uxtb	r2, r2
 352 0026 1A70     		strb	r2, [r3]
 353 0028 3B68     		ldr	r3, [r7]
 354 002a 1B0A     		lsr	r3, r3, #8
 355 002c 3B60     		str	r3, [r7]
 655:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 356              		.loc 1 655 0
 357 002e 7B68     		ldr	r3, [r7, #4]
 358 0030 5A1C     		add	r2, r3, #1
 359 0032 7A60     		str	r2, [r7, #4]
 360 0034 3A68     		ldr	r2, [r7]
 361 0036 D2B2     		uxtb	r2, r2
 362 0038 1A70     		strb	r2, [r3]
 363 003a 3B68     		ldr	r3, [r7]
 364 003c 1B0A     		lsr	r3, r3, #8
 365 003e 3B60     		str	r3, [r7]
 656:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val;
 366              		.loc 1 656 0
 367 0040 7B68     		ldr	r3, [r7, #4]
 368 0042 5A1C     		add	r2, r3, #1
 369 0044 7A60     		str	r2, [r7, #4]
 370 0046 3A68     		ldr	r2, [r7]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 19


 371 0048 D2B2     		uxtb	r2, r2
 372 004a 1A70     		strb	r2, [r3]
 657:.\lib_Fat/ff.c **** }
 373              		.loc 1 657 0
 374 004c BD46     		mov	sp, r7
 375 004e 02B0     		add	sp, sp, #8
 376              		@ sp needed
 377 0050 80BD     		pop	{r7, pc}
 378              		.cfi_endproc
 379              	.LFE3:
 380              		.size	st_dword, .-st_dword
 381 0052 C046     		.section	.text.mem_cpy,"ax",%progbits
 382              		.align	2
 383              		.code	16
 384              		.thumb_func
 385              		.type	mem_cpy, %function
 386              	mem_cpy:
 387              	.LFB4:
 658:.\lib_Fat/ff.c **** 
 659:.\lib_Fat/ff.c **** #if _FS_EXFAT
 660:.\lib_Fat/ff.c **** static
 661:.\lib_Fat/ff.c **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 662:.\lib_Fat/ff.c **** {
 663:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 664:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 665:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 666:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 667:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 668:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 669:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 670:.\lib_Fat/ff.c **** 	*ptr++ = (BYTE)val;
 671:.\lib_Fat/ff.c **** }
 672:.\lib_Fat/ff.c **** #endif
 673:.\lib_Fat/ff.c **** #endif	/* !_FS_READONLY */
 674:.\lib_Fat/ff.c **** 
 675:.\lib_Fat/ff.c **** 
 676:.\lib_Fat/ff.c **** 
 677:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 678:.\lib_Fat/ff.c **** /* String functions                                                      */
 679:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 680:.\lib_Fat/ff.c **** 
 681:.\lib_Fat/ff.c **** /* Copy memory to memory */
 682:.\lib_Fat/ff.c **** static
 683:.\lib_Fat/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 388              		.loc 1 683 0
 389              		.cfi_startproc
 390 0000 80B5     		push	{r7, lr}
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 7, -8
 393              		.cfi_offset 14, -4
 394 0002 86B0     		sub	sp, sp, #24
 395              		.cfi_def_cfa_offset 32
 396 0004 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 398 0006 F860     		str	r0, [r7, #12]
 399 0008 B960     		str	r1, [r7, #8]
 400 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 20


 684:.\lib_Fat/ff.c **** 	BYTE *d = (BYTE*)dst;
 401              		.loc 1 684 0
 402 000c FB68     		ldr	r3, [r7, #12]
 403 000e 7B61     		str	r3, [r7, #20]
 685:.\lib_Fat/ff.c **** 	const BYTE *s = (const BYTE*)src;
 404              		.loc 1 685 0
 405 0010 BB68     		ldr	r3, [r7, #8]
 406 0012 3B61     		str	r3, [r7, #16]
 686:.\lib_Fat/ff.c **** 
 687:.\lib_Fat/ff.c **** 	if (cnt) {
 407              		.loc 1 687 0
 408 0014 7B68     		ldr	r3, [r7, #4]
 409 0016 002B     		cmp	r3, #0
 410 0018 0DD0     		beq	.L7
 411              	.L9:
 688:.\lib_Fat/ff.c **** 		do *d++ = *s++; while (--cnt);
 412              		.loc 1 688 0 discriminator 1
 413 001a 7B69     		ldr	r3, [r7, #20]
 414 001c 5A1C     		add	r2, r3, #1
 415 001e 7A61     		str	r2, [r7, #20]
 416 0020 3A69     		ldr	r2, [r7, #16]
 417 0022 511C     		add	r1, r2, #1
 418 0024 3961     		str	r1, [r7, #16]
 419 0026 1278     		ldrb	r2, [r2]
 420 0028 1A70     		strb	r2, [r3]
 421 002a 7B68     		ldr	r3, [r7, #4]
 422 002c 013B     		sub	r3, r3, #1
 423 002e 7B60     		str	r3, [r7, #4]
 424 0030 7B68     		ldr	r3, [r7, #4]
 425 0032 002B     		cmp	r3, #0
 426 0034 F1D1     		bne	.L9
 427              	.L7:
 689:.\lib_Fat/ff.c **** 	}
 690:.\lib_Fat/ff.c **** }
 428              		.loc 1 690 0
 429 0036 BD46     		mov	sp, r7
 430 0038 06B0     		add	sp, sp, #24
 431              		@ sp needed
 432 003a 80BD     		pop	{r7, pc}
 433              		.cfi_endproc
 434              	.LFE4:
 435              		.size	mem_cpy, .-mem_cpy
 436              		.section	.text.mem_set,"ax",%progbits
 437              		.align	2
 438              		.code	16
 439              		.thumb_func
 440              		.type	mem_set, %function
 441              	mem_set:
 442              	.LFB5:
 691:.\lib_Fat/ff.c **** 
 692:.\lib_Fat/ff.c **** /* Fill memory block */
 693:.\lib_Fat/ff.c **** static
 694:.\lib_Fat/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 443              		.loc 1 694 0
 444              		.cfi_startproc
 445 0000 80B5     		push	{r7, lr}
 446              		.cfi_def_cfa_offset 8
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 21


 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 86B0     		sub	sp, sp, #24
 450              		.cfi_def_cfa_offset 32
 451 0004 00AF     		add	r7, sp, #0
 452              		.cfi_def_cfa_register 7
 453 0006 F860     		str	r0, [r7, #12]
 454 0008 B960     		str	r1, [r7, #8]
 455 000a 7A60     		str	r2, [r7, #4]
 695:.\lib_Fat/ff.c **** 	BYTE *d = (BYTE*)dst;
 456              		.loc 1 695 0
 457 000c FB68     		ldr	r3, [r7, #12]
 458 000e 7B61     		str	r3, [r7, #20]
 459              	.L11:
 696:.\lib_Fat/ff.c **** 
 697:.\lib_Fat/ff.c **** 	do *d++ = (BYTE)val; while (--cnt);
 460              		.loc 1 697 0 discriminator 1
 461 0010 7B69     		ldr	r3, [r7, #20]
 462 0012 5A1C     		add	r2, r3, #1
 463 0014 7A61     		str	r2, [r7, #20]
 464 0016 BA68     		ldr	r2, [r7, #8]
 465 0018 D2B2     		uxtb	r2, r2
 466 001a 1A70     		strb	r2, [r3]
 467 001c 7B68     		ldr	r3, [r7, #4]
 468 001e 013B     		sub	r3, r3, #1
 469 0020 7B60     		str	r3, [r7, #4]
 470 0022 7B68     		ldr	r3, [r7, #4]
 471 0024 002B     		cmp	r3, #0
 472 0026 F3D1     		bne	.L11
 698:.\lib_Fat/ff.c **** }
 473              		.loc 1 698 0
 474 0028 BD46     		mov	sp, r7
 475 002a 06B0     		add	sp, sp, #24
 476              		@ sp needed
 477 002c 80BD     		pop	{r7, pc}
 478              		.cfi_endproc
 479              	.LFE5:
 480              		.size	mem_set, .-mem_set
 481 002e C046     		.section	.text.mem_cmp,"ax",%progbits
 482              		.align	2
 483              		.code	16
 484              		.thumb_func
 485              		.type	mem_cmp, %function
 486              	mem_cmp:
 487              	.LFB6:
 699:.\lib_Fat/ff.c **** 
 700:.\lib_Fat/ff.c **** /* Compare memory block */
 701:.\lib_Fat/ff.c **** static
 702:.\lib_Fat/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 488              		.loc 1 702 0
 489              		.cfi_startproc
 490 0000 80B5     		push	{r7, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 7, -8
 493              		.cfi_offset 14, -4
 494 0002 88B0     		sub	sp, sp, #32
 495              		.cfi_def_cfa_offset 40
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 22


 496 0004 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 498 0006 F860     		str	r0, [r7, #12]
 499 0008 B960     		str	r1, [r7, #8]
 500 000a 7A60     		str	r2, [r7, #4]
 703:.\lib_Fat/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 501              		.loc 1 703 0
 502 000c FB68     		ldr	r3, [r7, #12]
 503 000e FB61     		str	r3, [r7, #28]
 504 0010 BB68     		ldr	r3, [r7, #8]
 505 0012 BB61     		str	r3, [r7, #24]
 704:.\lib_Fat/ff.c **** 	int r = 0;
 506              		.loc 1 704 0
 507 0014 0023     		mov	r3, #0
 508 0016 7B61     		str	r3, [r7, #20]
 509              	.L14:
 705:.\lib_Fat/ff.c **** 
 706:.\lib_Fat/ff.c **** 	do {
 707:.\lib_Fat/ff.c **** 		r = *d++ - *s++;
 510              		.loc 1 707 0 discriminator 2
 511 0018 FB69     		ldr	r3, [r7, #28]
 512 001a 5A1C     		add	r2, r3, #1
 513 001c FA61     		str	r2, [r7, #28]
 514 001e 1B78     		ldrb	r3, [r3]
 515 0020 191C     		mov	r1, r3
 516 0022 BB69     		ldr	r3, [r7, #24]
 517 0024 5A1C     		add	r2, r3, #1
 518 0026 BA61     		str	r2, [r7, #24]
 519 0028 1B78     		ldrb	r3, [r3]
 520 002a CB1A     		sub	r3, r1, r3
 521 002c 7B61     		str	r3, [r7, #20]
 708:.\lib_Fat/ff.c **** 	} while (--cnt && r == 0);
 522              		.loc 1 708 0 discriminator 2
 523 002e 7B68     		ldr	r3, [r7, #4]
 524 0030 013B     		sub	r3, r3, #1
 525 0032 7B60     		str	r3, [r7, #4]
 526 0034 7B68     		ldr	r3, [r7, #4]
 527 0036 002B     		cmp	r3, #0
 528 0038 02D0     		beq	.L13
 529              		.loc 1 708 0 is_stmt 0 discriminator 1
 530 003a 7B69     		ldr	r3, [r7, #20]
 531 003c 002B     		cmp	r3, #0
 532 003e EBD0     		beq	.L14
 533              	.L13:
 709:.\lib_Fat/ff.c **** 
 710:.\lib_Fat/ff.c **** 	return r;
 534              		.loc 1 710 0 is_stmt 1
 535 0040 7B69     		ldr	r3, [r7, #20]
 711:.\lib_Fat/ff.c **** }
 536              		.loc 1 711 0
 537 0042 181C     		mov	r0, r3
 538 0044 BD46     		mov	sp, r7
 539 0046 08B0     		add	sp, sp, #32
 540              		@ sp needed
 541 0048 80BD     		pop	{r7, pc}
 542              		.cfi_endproc
 543              	.LFE6:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 23


 544              		.size	mem_cmp, .-mem_cmp
 545 004a C046     		.section	.text.chk_chr,"ax",%progbits
 546              		.align	2
 547              		.code	16
 548              		.thumb_func
 549              		.type	chk_chr, %function
 550              	chk_chr:
 551              	.LFB7:
 712:.\lib_Fat/ff.c **** 
 713:.\lib_Fat/ff.c **** /* Check if chr is contained in the string */
 714:.\lib_Fat/ff.c **** static
 715:.\lib_Fat/ff.c **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 552              		.loc 1 715 0
 553              		.cfi_startproc
 554 0000 80B5     		push	{r7, lr}
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 7, -8
 557              		.cfi_offset 14, -4
 558 0002 82B0     		sub	sp, sp, #8
 559              		.cfi_def_cfa_offset 16
 560 0004 00AF     		add	r7, sp, #0
 561              		.cfi_def_cfa_register 7
 562 0006 7860     		str	r0, [r7, #4]
 563 0008 3960     		str	r1, [r7]
 716:.\lib_Fat/ff.c **** 	while (*str && *str != chr) str++;
 564              		.loc 1 716 0
 565 000a 02E0     		b	.L17
 566              	.L19:
 567              		.loc 1 716 0 is_stmt 0 discriminator 3
 568 000c 7B68     		ldr	r3, [r7, #4]
 569 000e 0133     		add	r3, r3, #1
 570 0010 7B60     		str	r3, [r7, #4]
 571              	.L17:
 572              		.loc 1 716 0 discriminator 1
 573 0012 7B68     		ldr	r3, [r7, #4]
 574 0014 1B78     		ldrb	r3, [r3]
 575 0016 002B     		cmp	r3, #0
 576 0018 05D0     		beq	.L18
 577              		.loc 1 716 0 discriminator 2
 578 001a 7B68     		ldr	r3, [r7, #4]
 579 001c 1B78     		ldrb	r3, [r3]
 580 001e 1A1E     		sub	r2, r3, #0
 581 0020 3B68     		ldr	r3, [r7]
 582 0022 9A42     		cmp	r2, r3
 583 0024 F2D1     		bne	.L19
 584              	.L18:
 717:.\lib_Fat/ff.c **** 	return *str;
 585              		.loc 1 717 0 is_stmt 1
 586 0026 7B68     		ldr	r3, [r7, #4]
 587 0028 1B78     		ldrb	r3, [r3]
 718:.\lib_Fat/ff.c **** }
 588              		.loc 1 718 0
 589 002a 181C     		mov	r0, r3
 590 002c BD46     		mov	sp, r7
 591 002e 02B0     		add	sp, sp, #8
 592              		@ sp needed
 593 0030 80BD     		pop	{r7, pc}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 24


 594              		.cfi_endproc
 595              	.LFE7:
 596              		.size	chk_chr, .-chk_chr
 597 0032 C046     		.section	.text.sync_window,"ax",%progbits
 598              		.align	2
 599              		.code	16
 600              		.thumb_func
 601              		.type	sync_window, %function
 602              	sync_window:
 603              	.LFB8:
 719:.\lib_Fat/ff.c **** 
 720:.\lib_Fat/ff.c **** 
 721:.\lib_Fat/ff.c **** 
 722:.\lib_Fat/ff.c **** 
 723:.\lib_Fat/ff.c **** #if _FS_REENTRANT
 724:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 725:.\lib_Fat/ff.c **** /* Request/Release grant to access the volume                            */
 726:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 727:.\lib_Fat/ff.c **** static
 728:.\lib_Fat/ff.c **** int lock_fs (
 729:.\lib_Fat/ff.c **** 	FATFS* fs		/* File system object */
 730:.\lib_Fat/ff.c **** )
 731:.\lib_Fat/ff.c **** {
 732:.\lib_Fat/ff.c **** 	return ff_req_grant(fs->sobj);
 733:.\lib_Fat/ff.c **** }
 734:.\lib_Fat/ff.c **** 
 735:.\lib_Fat/ff.c **** 
 736:.\lib_Fat/ff.c **** static
 737:.\lib_Fat/ff.c **** void unlock_fs (
 738:.\lib_Fat/ff.c **** 	FATFS* fs,		/* File system object */
 739:.\lib_Fat/ff.c **** 	FRESULT res		/* Result code to be returned */
 740:.\lib_Fat/ff.c **** )
 741:.\lib_Fat/ff.c **** {
 742:.\lib_Fat/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 743:.\lib_Fat/ff.c **** 		ff_rel_grant(fs->sobj);
 744:.\lib_Fat/ff.c **** 	}
 745:.\lib_Fat/ff.c **** }
 746:.\lib_Fat/ff.c **** 
 747:.\lib_Fat/ff.c **** #endif
 748:.\lib_Fat/ff.c **** 
 749:.\lib_Fat/ff.c **** 
 750:.\lib_Fat/ff.c **** 
 751:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
 752:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 753:.\lib_Fat/ff.c **** /* File lock control functions                                           */
 754:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 755:.\lib_Fat/ff.c **** 
 756:.\lib_Fat/ff.c **** static
 757:.\lib_Fat/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 758:.\lib_Fat/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 759:.\lib_Fat/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 760:.\lib_Fat/ff.c **** )
 761:.\lib_Fat/ff.c **** {
 762:.\lib_Fat/ff.c **** 	UINT i, be;
 763:.\lib_Fat/ff.c **** 
 764:.\lib_Fat/ff.c **** 	/* Search file semaphore table */
 765:.\lib_Fat/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 25


 766:.\lib_Fat/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 767:.\lib_Fat/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 768:.\lib_Fat/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 769:.\lib_Fat/ff.c **** 				Files[i].ofs == dp->dptr) break;
 770:.\lib_Fat/ff.c **** 		} else {			/* Blank entry */
 771:.\lib_Fat/ff.c **** 			be = 1;
 772:.\lib_Fat/ff.c **** 		}
 773:.\lib_Fat/ff.c **** 	}
 774:.\lib_Fat/ff.c **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 775:.\lib_Fat/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 776:.\lib_Fat/ff.c **** 	}
 777:.\lib_Fat/ff.c **** 
 778:.\lib_Fat/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 779:.\lib_Fat/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 780:.\lib_Fat/ff.c **** }
 781:.\lib_Fat/ff.c **** 
 782:.\lib_Fat/ff.c **** 
 783:.\lib_Fat/ff.c **** static
 784:.\lib_Fat/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 785:.\lib_Fat/ff.c **** {
 786:.\lib_Fat/ff.c **** 	UINT i;
 787:.\lib_Fat/ff.c **** 
 788:.\lib_Fat/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 789:.\lib_Fat/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 790:.\lib_Fat/ff.c **** }
 791:.\lib_Fat/ff.c **** 
 792:.\lib_Fat/ff.c **** 
 793:.\lib_Fat/ff.c **** static
 794:.\lib_Fat/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 795:.\lib_Fat/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 796:.\lib_Fat/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 797:.\lib_Fat/ff.c **** )
 798:.\lib_Fat/ff.c **** {
 799:.\lib_Fat/ff.c **** 	UINT i;
 800:.\lib_Fat/ff.c **** 
 801:.\lib_Fat/ff.c **** 
 802:.\lib_Fat/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 803:.\lib_Fat/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 804:.\lib_Fat/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 805:.\lib_Fat/ff.c **** 			Files[i].ofs == dp->dptr) break;
 806:.\lib_Fat/ff.c **** 	}
 807:.\lib_Fat/ff.c **** 
 808:.\lib_Fat/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 809:.\lib_Fat/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 810:.\lib_Fat/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 811:.\lib_Fat/ff.c **** 		Files[i].fs = dp->obj.fs;
 812:.\lib_Fat/ff.c **** 		Files[i].clu = dp->obj.sclust;
 813:.\lib_Fat/ff.c **** 		Files[i].ofs = dp->dptr;
 814:.\lib_Fat/ff.c **** 		Files[i].ctr = 0;
 815:.\lib_Fat/ff.c **** 	}
 816:.\lib_Fat/ff.c **** 
 817:.\lib_Fat/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 818:.\lib_Fat/ff.c **** 
 819:.\lib_Fat/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 820:.\lib_Fat/ff.c **** 
 821:.\lib_Fat/ff.c **** 	return i + 1;
 822:.\lib_Fat/ff.c **** }
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 26


 823:.\lib_Fat/ff.c **** 
 824:.\lib_Fat/ff.c **** 
 825:.\lib_Fat/ff.c **** static
 826:.\lib_Fat/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 827:.\lib_Fat/ff.c **** 	UINT i			/* Semaphore index (1..) */
 828:.\lib_Fat/ff.c **** )
 829:.\lib_Fat/ff.c **** {
 830:.\lib_Fat/ff.c **** 	WORD n;
 831:.\lib_Fat/ff.c **** 	FRESULT res;
 832:.\lib_Fat/ff.c **** 
 833:.\lib_Fat/ff.c **** 
 834:.\lib_Fat/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 835:.\lib_Fat/ff.c **** 		n = Files[i].ctr;
 836:.\lib_Fat/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 837:.\lib_Fat/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 838:.\lib_Fat/ff.c **** 		Files[i].ctr = n;
 839:.\lib_Fat/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 840:.\lib_Fat/ff.c **** 		res = FR_OK;
 841:.\lib_Fat/ff.c **** 	} else {
 842:.\lib_Fat/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 843:.\lib_Fat/ff.c **** 	}
 844:.\lib_Fat/ff.c **** 	return res;
 845:.\lib_Fat/ff.c **** }
 846:.\lib_Fat/ff.c **** 
 847:.\lib_Fat/ff.c **** 
 848:.\lib_Fat/ff.c **** static
 849:.\lib_Fat/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 850:.\lib_Fat/ff.c **** 	FATFS *fs
 851:.\lib_Fat/ff.c **** )
 852:.\lib_Fat/ff.c **** {
 853:.\lib_Fat/ff.c **** 	UINT i;
 854:.\lib_Fat/ff.c **** 
 855:.\lib_Fat/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 856:.\lib_Fat/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 857:.\lib_Fat/ff.c **** 	}
 858:.\lib_Fat/ff.c **** }
 859:.\lib_Fat/ff.c **** 
 860:.\lib_Fat/ff.c **** #endif	/* _FS_LOCK != 0 */
 861:.\lib_Fat/ff.c **** 
 862:.\lib_Fat/ff.c **** 
 863:.\lib_Fat/ff.c **** 
 864:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 865:.\lib_Fat/ff.c **** /* Move/Flush disk access window in the file system object               */
 866:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 867:.\lib_Fat/ff.c **** #if !_FS_READONLY
 868:.\lib_Fat/ff.c **** static
 869:.\lib_Fat/ff.c **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 870:.\lib_Fat/ff.c **** 	FATFS* fs			/* File system object */
 871:.\lib_Fat/ff.c **** )
 872:.\lib_Fat/ff.c **** {
 604              		.loc 1 872 0
 605              		.cfi_startproc
 606 0000 80B5     		push	{r7, lr}
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 7, -8
 609              		.cfi_offset 14, -4
 610 0002 86B0     		sub	sp, sp, #24
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 27


 611              		.cfi_def_cfa_offset 32
 612 0004 00AF     		add	r7, sp, #0
 613              		.cfi_def_cfa_register 7
 614 0006 7860     		str	r0, [r7, #4]
 873:.\lib_Fat/ff.c **** 	DWORD wsect;
 874:.\lib_Fat/ff.c **** 	UINT nf;
 875:.\lib_Fat/ff.c **** 	FRESULT res = FR_OK;
 615              		.loc 1 875 0
 616 0008 0F23     		mov	r3, #15
 617 000a FB18     		add	r3, r7, r3
 618 000c 0022     		mov	r2, #0
 619 000e 1A70     		strb	r2, [r3]
 876:.\lib_Fat/ff.c **** 
 877:.\lib_Fat/ff.c **** 
 878:.\lib_Fat/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 620              		.loc 1 878 0
 621 0010 7B68     		ldr	r3, [r7, #4]
 622 0012 DB78     		ldrb	r3, [r3, #3]
 623 0014 002B     		cmp	r3, #0
 624 0016 3BD0     		beq	.L22
 879:.\lib_Fat/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 625              		.loc 1 879 0
 626 0018 7B68     		ldr	r3, [r7, #4]
 627 001a DB6A     		ldr	r3, [r3, #44]
 628 001c 7B61     		str	r3, [r7, #20]
 880:.\lib_Fat/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 629              		.loc 1 880 0
 630 001e 7B68     		ldr	r3, [r7, #4]
 631 0020 5978     		ldrb	r1, [r3, #1]
 632 0022 7B68     		ldr	r3, [r7, #4]
 633 0024 3033     		add	r3, r3, #48
 634 0026 1A1C     		mov	r2, r3
 635 0028 7B69     		ldr	r3, [r7, #20]
 636 002a 081C     		mov	r0, r1
 637 002c 111C     		mov	r1, r2
 638 002e 1A1C     		mov	r2, r3
 639 0030 0123     		mov	r3, #1
 640 0032 FFF7FEFF 		bl	disk_write
 641 0036 031E     		sub	r3, r0, #0
 642 0038 04D0     		beq	.L23
 881:.\lib_Fat/ff.c **** 			res = FR_DISK_ERR;
 643              		.loc 1 881 0
 644 003a 0F23     		mov	r3, #15
 645 003c FB18     		add	r3, r7, r3
 646 003e 0122     		mov	r2, #1
 647 0040 1A70     		strb	r2, [r3]
 648 0042 25E0     		b	.L22
 649              	.L23:
 882:.\lib_Fat/ff.c **** 		} else {
 883:.\lib_Fat/ff.c **** 			fs->wflag = 0;
 650              		.loc 1 883 0
 651 0044 7B68     		ldr	r3, [r7, #4]
 652 0046 0022     		mov	r2, #0
 653 0048 DA70     		strb	r2, [r3, #3]
 884:.\lib_Fat/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 654              		.loc 1 884 0
 655 004a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 28


 656 004c 1B6A     		ldr	r3, [r3, #32]
 657 004e 7A69     		ldr	r2, [r7, #20]
 658 0050 D21A     		sub	r2, r2, r3
 659 0052 7B68     		ldr	r3, [r7, #4]
 660 0054 9B69     		ldr	r3, [r3, #24]
 661 0056 9A42     		cmp	r2, r3
 662 0058 1AD2     		bcs	.L22
 885:.\lib_Fat/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 663              		.loc 1 885 0
 664 005a 7B68     		ldr	r3, [r7, #4]
 665 005c 9B78     		ldrb	r3, [r3, #2]
 666 005e 3B61     		str	r3, [r7, #16]
 667 0060 13E0     		b	.L24
 668              	.L25:
 886:.\lib_Fat/ff.c **** 					wsect += fs->fsize;
 669              		.loc 1 886 0 discriminator 3
 670 0062 7B68     		ldr	r3, [r7, #4]
 671 0064 9B69     		ldr	r3, [r3, #24]
 672 0066 7A69     		ldr	r2, [r7, #20]
 673 0068 D318     		add	r3, r2, r3
 674 006a 7B61     		str	r3, [r7, #20]
 887:.\lib_Fat/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 675              		.loc 1 887 0 discriminator 3
 676 006c 7B68     		ldr	r3, [r7, #4]
 677 006e 5978     		ldrb	r1, [r3, #1]
 678 0070 7B68     		ldr	r3, [r7, #4]
 679 0072 3033     		add	r3, r3, #48
 680 0074 1A1C     		mov	r2, r3
 681 0076 7B69     		ldr	r3, [r7, #20]
 682 0078 081C     		mov	r0, r1
 683 007a 111C     		mov	r1, r2
 684 007c 1A1C     		mov	r2, r3
 685 007e 0123     		mov	r3, #1
 686 0080 FFF7FEFF 		bl	disk_write
 885:.\lib_Fat/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 687              		.loc 1 885 0 discriminator 3
 688 0084 3B69     		ldr	r3, [r7, #16]
 689 0086 013B     		sub	r3, r3, #1
 690 0088 3B61     		str	r3, [r7, #16]
 691              	.L24:
 885:.\lib_Fat/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 692              		.loc 1 885 0 is_stmt 0 discriminator 1
 693 008a 3B69     		ldr	r3, [r7, #16]
 694 008c 012B     		cmp	r3, #1
 695 008e E8D8     		bhi	.L25
 696              	.L22:
 888:.\lib_Fat/ff.c **** 				}
 889:.\lib_Fat/ff.c **** 			}
 890:.\lib_Fat/ff.c **** 		}
 891:.\lib_Fat/ff.c **** 	}
 892:.\lib_Fat/ff.c **** 	return res;
 697              		.loc 1 892 0 is_stmt 1
 698 0090 0F23     		mov	r3, #15
 699 0092 FB18     		add	r3, r7, r3
 700 0094 1B78     		ldrb	r3, [r3]
 893:.\lib_Fat/ff.c **** }
 701              		.loc 1 893 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 29


 702 0096 181C     		mov	r0, r3
 703 0098 BD46     		mov	sp, r7
 704 009a 06B0     		add	sp, sp, #24
 705              		@ sp needed
 706 009c 80BD     		pop	{r7, pc}
 707              		.cfi_endproc
 708              	.LFE8:
 709              		.size	sync_window, .-sync_window
 710 009e C046     		.section	.text.move_window,"ax",%progbits
 711              		.align	2
 712              		.code	16
 713              		.thumb_func
 714              		.type	move_window, %function
 715              	move_window:
 716              	.LFB9:
 894:.\lib_Fat/ff.c **** #endif
 895:.\lib_Fat/ff.c **** 
 896:.\lib_Fat/ff.c **** 
 897:.\lib_Fat/ff.c **** static
 898:.\lib_Fat/ff.c **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 899:.\lib_Fat/ff.c **** 	FATFS* fs,			/* File system object */
 900:.\lib_Fat/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 901:.\lib_Fat/ff.c **** )
 902:.\lib_Fat/ff.c **** {
 717              		.loc 1 902 0
 718              		.cfi_startproc
 719 0000 90B5     		push	{r4, r7, lr}
 720              		.cfi_def_cfa_offset 12
 721              		.cfi_offset 4, -12
 722              		.cfi_offset 7, -8
 723              		.cfi_offset 14, -4
 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 32
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
 729 0008 3960     		str	r1, [r7]
 903:.\lib_Fat/ff.c **** 	FRESULT res = FR_OK;
 730              		.loc 1 903 0
 731 000a 0F23     		mov	r3, #15
 732 000c FB18     		add	r3, r7, r3
 733 000e 0022     		mov	r2, #0
 734 0010 1A70     		strb	r2, [r3]
 904:.\lib_Fat/ff.c **** 
 905:.\lib_Fat/ff.c **** 
 906:.\lib_Fat/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 735              		.loc 1 906 0
 736 0012 7B68     		ldr	r3, [r7, #4]
 737 0014 DA6A     		ldr	r2, [r3, #44]
 738 0016 3B68     		ldr	r3, [r7]
 739 0018 9A42     		cmp	r2, r3
 740 001a 24D0     		beq	.L28
 907:.\lib_Fat/ff.c **** #if !_FS_READONLY
 908:.\lib_Fat/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 741              		.loc 1 908 0
 742 001c 0F23     		mov	r3, #15
 743 001e FC18     		add	r4, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 30


 744 0020 7B68     		ldr	r3, [r7, #4]
 745 0022 181C     		mov	r0, r3
 746 0024 FFF7FEFF 		bl	sync_window
 747 0028 031C     		mov	r3, r0
 748 002a 2370     		strb	r3, [r4]
 909:.\lib_Fat/ff.c **** #endif
 910:.\lib_Fat/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 749              		.loc 1 910 0
 750 002c 0F23     		mov	r3, #15
 751 002e FB18     		add	r3, r7, r3
 752 0030 1B78     		ldrb	r3, [r3]
 753 0032 002B     		cmp	r3, #0
 754 0034 17D1     		bne	.L28
 911:.\lib_Fat/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 755              		.loc 1 911 0
 756 0036 7B68     		ldr	r3, [r7, #4]
 757 0038 5978     		ldrb	r1, [r3, #1]
 758 003a 7B68     		ldr	r3, [r7, #4]
 759 003c 3033     		add	r3, r3, #48
 760 003e 1A1C     		mov	r2, r3
 761 0040 3B68     		ldr	r3, [r7]
 762 0042 081C     		mov	r0, r1
 763 0044 111C     		mov	r1, r2
 764 0046 1A1C     		mov	r2, r3
 765 0048 0123     		mov	r3, #1
 766 004a FFF7FEFF 		bl	disk_read
 767 004e 031E     		sub	r3, r0, #0
 768 0050 06D0     		beq	.L29
 912:.\lib_Fat/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 769              		.loc 1 912 0
 770 0052 0123     		mov	r3, #1
 771 0054 5B42     		neg	r3, r3
 772 0056 3B60     		str	r3, [r7]
 913:.\lib_Fat/ff.c **** 				res = FR_DISK_ERR;
 773              		.loc 1 913 0
 774 0058 0F23     		mov	r3, #15
 775 005a FB18     		add	r3, r7, r3
 776 005c 0122     		mov	r2, #1
 777 005e 1A70     		strb	r2, [r3]
 778              	.L29:
 914:.\lib_Fat/ff.c **** 			}
 915:.\lib_Fat/ff.c **** 			fs->winsect = sector;
 779              		.loc 1 915 0
 780 0060 7B68     		ldr	r3, [r7, #4]
 781 0062 3A68     		ldr	r2, [r7]
 782 0064 DA62     		str	r2, [r3, #44]
 783              	.L28:
 916:.\lib_Fat/ff.c **** 		}
 917:.\lib_Fat/ff.c **** 	}
 918:.\lib_Fat/ff.c **** 	return res;
 784              		.loc 1 918 0
 785 0066 0F23     		mov	r3, #15
 786 0068 FB18     		add	r3, r7, r3
 787 006a 1B78     		ldrb	r3, [r3]
 919:.\lib_Fat/ff.c **** }
 788              		.loc 1 919 0
 789 006c 181C     		mov	r0, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 31


 790 006e BD46     		mov	sp, r7
 791 0070 05B0     		add	sp, sp, #20
 792              		@ sp needed
 793 0072 90BD     		pop	{r4, r7, pc}
 794              		.cfi_endproc
 795              	.LFE9:
 796              		.size	move_window, .-move_window
 797              		.section	.text.sync_fs,"ax",%progbits
 798              		.align	2
 799              		.code	16
 800              		.thumb_func
 801              		.type	sync_fs, %function
 802              	sync_fs:
 803              	.LFB10:
 920:.\lib_Fat/ff.c **** 
 921:.\lib_Fat/ff.c **** 
 922:.\lib_Fat/ff.c **** 
 923:.\lib_Fat/ff.c **** 
 924:.\lib_Fat/ff.c **** #if !_FS_READONLY
 925:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 926:.\lib_Fat/ff.c **** /* Synchronize file system and strage device                             */
 927:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 928:.\lib_Fat/ff.c **** 
 929:.\lib_Fat/ff.c **** static
 930:.\lib_Fat/ff.c **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 931:.\lib_Fat/ff.c **** 	FATFS* fs		/* File system object */
 932:.\lib_Fat/ff.c **** )
 933:.\lib_Fat/ff.c **** {
 804              		.loc 1 933 0
 805              		.cfi_startproc
 806 0000 90B5     		push	{r4, r7, lr}
 807              		.cfi_def_cfa_offset 12
 808              		.cfi_offset 4, -12
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 85B0     		sub	sp, sp, #20
 812              		.cfi_def_cfa_offset 32
 813 0004 00AF     		add	r7, sp, #0
 814              		.cfi_def_cfa_register 7
 815 0006 7860     		str	r0, [r7, #4]
 934:.\lib_Fat/ff.c **** 	FRESULT res;
 935:.\lib_Fat/ff.c **** 
 936:.\lib_Fat/ff.c **** 
 937:.\lib_Fat/ff.c **** 	res = sync_window(fs);
 816              		.loc 1 937 0
 817 0008 0F23     		mov	r3, #15
 818 000a FC18     		add	r4, r7, r3
 819 000c 7B68     		ldr	r3, [r7, #4]
 820 000e 181C     		mov	r0, r3
 821 0010 FFF7FEFF 		bl	sync_window
 822 0014 031C     		mov	r3, r0
 823 0016 2370     		strb	r3, [r4]
 938:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 824              		.loc 1 938 0
 825 0018 0F23     		mov	r3, #15
 826 001a FB18     		add	r3, r7, r3
 827 001c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 32


 828 001e 002B     		cmp	r3, #0
 829 0020 61D1     		bne	.L32
 939:.\lib_Fat/ff.c **** 		/* Update FSInfo sector if needed */
 940:.\lib_Fat/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 830              		.loc 1 940 0
 831 0022 7B68     		ldr	r3, [r7, #4]
 832 0024 1B78     		ldrb	r3, [r3]
 833 0026 032B     		cmp	r3, #3
 834 0028 50D1     		bne	.L33
 835              		.loc 1 940 0 is_stmt 0 discriminator 1
 836 002a 7B68     		ldr	r3, [r7, #4]
 837 002c 1B79     		ldrb	r3, [r3, #4]
 838 002e 012B     		cmp	r3, #1
 839 0030 4CD1     		bne	.L33
 941:.\lib_Fat/ff.c **** 			/* Create FSInfo structure */
 942:.\lib_Fat/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 840              		.loc 1 942 0 is_stmt 1
 841 0032 7B68     		ldr	r3, [r7, #4]
 842 0034 3033     		add	r3, r3, #48
 843 0036 1A1C     		mov	r2, r3
 844 0038 8023     		mov	r3, #128
 845 003a 9B00     		lsl	r3, r3, #2
 846 003c 101C     		mov	r0, r2
 847 003e 0021     		mov	r1, #0
 848 0040 1A1C     		mov	r2, r3
 849 0042 FFF7FEFF 		bl	mem_set
 943:.\lib_Fat/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 850              		.loc 1 943 0
 851 0046 7B68     		ldr	r3, [r7, #4]
 852 0048 2A4A     		ldr	r2, .L35
 853 004a 9446     		mov	ip, r2
 854 004c 6344     		add	r3, r3, ip
 855 004e 2A4A     		ldr	r2, .L35+4
 856 0050 181C     		mov	r0, r3
 857 0052 111C     		mov	r1, r2
 858 0054 FFF7FEFF 		bl	st_word
 944:.\lib_Fat/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 859              		.loc 1 944 0
 860 0058 7B68     		ldr	r3, [r7, #4]
 861 005a 3033     		add	r3, r3, #48
 862 005c 274A     		ldr	r2, .L35+8
 863 005e 181C     		mov	r0, r3
 864 0060 111C     		mov	r1, r2
 865 0062 FFF7FEFF 		bl	st_dword
 945:.\lib_Fat/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 866              		.loc 1 945 0
 867 0066 7B68     		ldr	r3, [r7, #4]
 868 0068 8522     		mov	r2, #133
 869 006a 9200     		lsl	r2, r2, #2
 870 006c 9446     		mov	ip, r2
 871 006e 6344     		add	r3, r3, ip
 872 0070 234A     		ldr	r2, .L35+12
 873 0072 181C     		mov	r0, r3
 874 0074 111C     		mov	r1, r2
 875 0076 FFF7FEFF 		bl	st_dword
 946:.\lib_Fat/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 876              		.loc 1 946 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 33


 877 007a 7B68     		ldr	r3, [r7, #4]
 878 007c 8622     		mov	r2, #134
 879 007e 9200     		lsl	r2, r2, #2
 880 0080 9A18     		add	r2, r3, r2
 881 0082 7B68     		ldr	r3, [r7, #4]
 882 0084 1B69     		ldr	r3, [r3, #16]
 883 0086 101C     		mov	r0, r2
 884 0088 191C     		mov	r1, r3
 885 008a FFF7FEFF 		bl	st_dword
 947:.\lib_Fat/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 886              		.loc 1 947 0
 887 008e 7B68     		ldr	r3, [r7, #4]
 888 0090 8722     		mov	r2, #135
 889 0092 9200     		lsl	r2, r2, #2
 890 0094 9A18     		add	r2, r3, r2
 891 0096 7B68     		ldr	r3, [r7, #4]
 892 0098 DB68     		ldr	r3, [r3, #12]
 893 009a 101C     		mov	r0, r2
 894 009c 191C     		mov	r1, r3
 895 009e FFF7FEFF 		bl	st_dword
 948:.\lib_Fat/ff.c **** 			/* Write it into the FSInfo sector */
 949:.\lib_Fat/ff.c **** 			fs->winsect = fs->volbase + 1;
 896              		.loc 1 949 0
 897 00a2 7B68     		ldr	r3, [r7, #4]
 898 00a4 DB69     		ldr	r3, [r3, #28]
 899 00a6 5A1C     		add	r2, r3, #1
 900 00a8 7B68     		ldr	r3, [r7, #4]
 901 00aa DA62     		str	r2, [r3, #44]
 950:.\lib_Fat/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 902              		.loc 1 950 0
 903 00ac 7B68     		ldr	r3, [r7, #4]
 904 00ae 5978     		ldrb	r1, [r3, #1]
 905 00b0 7B68     		ldr	r3, [r7, #4]
 906 00b2 3033     		add	r3, r3, #48
 907 00b4 1A1C     		mov	r2, r3
 908 00b6 7B68     		ldr	r3, [r7, #4]
 909 00b8 DB6A     		ldr	r3, [r3, #44]
 910 00ba 081C     		mov	r0, r1
 911 00bc 111C     		mov	r1, r2
 912 00be 1A1C     		mov	r2, r3
 913 00c0 0123     		mov	r3, #1
 914 00c2 FFF7FEFF 		bl	disk_write
 951:.\lib_Fat/ff.c **** 			fs->fsi_flag = 0;
 915              		.loc 1 951 0
 916 00c6 7B68     		ldr	r3, [r7, #4]
 917 00c8 0022     		mov	r2, #0
 918 00ca 1A71     		strb	r2, [r3, #4]
 919              	.L33:
 952:.\lib_Fat/ff.c **** 		}
 953:.\lib_Fat/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 954:.\lib_Fat/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 920              		.loc 1 954 0
 921 00cc 7B68     		ldr	r3, [r7, #4]
 922 00ce 5B78     		ldrb	r3, [r3, #1]
 923 00d0 181C     		mov	r0, r3
 924 00d2 0021     		mov	r1, #0
 925 00d4 0022     		mov	r2, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 34


 926 00d6 FFF7FEFF 		bl	disk_ioctl
 927 00da 031E     		sub	r3, r0, #0
 928 00dc 03D0     		beq	.L32
 929              		.loc 1 954 0 is_stmt 0 discriminator 1
 930 00de 0F23     		mov	r3, #15
 931 00e0 FB18     		add	r3, r7, r3
 932 00e2 0122     		mov	r2, #1
 933 00e4 1A70     		strb	r2, [r3]
 934              	.L32:
 955:.\lib_Fat/ff.c **** 	}
 956:.\lib_Fat/ff.c **** 
 957:.\lib_Fat/ff.c **** 	return res;
 935              		.loc 1 957 0 is_stmt 1
 936 00e6 0F23     		mov	r3, #15
 937 00e8 FB18     		add	r3, r7, r3
 938 00ea 1B78     		ldrb	r3, [r3]
 958:.\lib_Fat/ff.c **** }
 939              		.loc 1 958 0
 940 00ec 181C     		mov	r0, r3
 941 00ee BD46     		mov	sp, r7
 942 00f0 05B0     		add	sp, sp, #20
 943              		@ sp needed
 944 00f2 90BD     		pop	{r4, r7, pc}
 945              	.L36:
 946              		.align	2
 947              	.L35:
 948 00f4 2E020000 		.word	558
 949 00f8 55AA0000 		.word	43605
 950 00fc 52526141 		.word	1096897106
 951 0100 72724161 		.word	1631679090
 952              		.cfi_endproc
 953              	.LFE10:
 954              		.size	sync_fs, .-sync_fs
 955              		.section	.text.clust2sect,"ax",%progbits
 956              		.align	2
 957              		.code	16
 958              		.thumb_func
 959              		.type	clust2sect, %function
 960              	clust2sect:
 961              	.LFB11:
 959:.\lib_Fat/ff.c **** 
 960:.\lib_Fat/ff.c **** #endif
 961:.\lib_Fat/ff.c **** 
 962:.\lib_Fat/ff.c **** 
 963:.\lib_Fat/ff.c **** 
 964:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 965:.\lib_Fat/ff.c **** /* Get sector# from cluster#                                             */
 966:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 967:.\lib_Fat/ff.c **** 
 968:.\lib_Fat/ff.c **** static
 969:.\lib_Fat/ff.c **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 970:.\lib_Fat/ff.c **** 	FATFS* fs,		/* File system object */
 971:.\lib_Fat/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 972:.\lib_Fat/ff.c **** )
 973:.\lib_Fat/ff.c **** {
 962              		.loc 1 973 0
 963              		.cfi_startproc
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 35


 964 0000 80B5     		push	{r7, lr}
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 7, -8
 967              		.cfi_offset 14, -4
 968 0002 82B0     		sub	sp, sp, #8
 969              		.cfi_def_cfa_offset 16
 970 0004 00AF     		add	r7, sp, #0
 971              		.cfi_def_cfa_register 7
 972 0006 7860     		str	r0, [r7, #4]
 973 0008 3960     		str	r1, [r7]
 974:.\lib_Fat/ff.c **** 	clst -= 2;
 974              		.loc 1 974 0
 975 000a 3B68     		ldr	r3, [r7]
 976 000c 023B     		sub	r3, r3, #2
 977 000e 3B60     		str	r3, [r7]
 975:.\lib_Fat/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 978              		.loc 1 975 0
 979 0010 7B68     		ldr	r3, [r7, #4]
 980 0012 5B69     		ldr	r3, [r3, #20]
 981 0014 9A1E     		sub	r2, r3, #2
 982 0016 3B68     		ldr	r3, [r7]
 983 0018 9A42     		cmp	r2, r3
 984 001a 01D8     		bhi	.L38
 985              		.loc 1 975 0 is_stmt 0 discriminator 1
 986 001c 0023     		mov	r3, #0
 987 001e 07E0     		b	.L39
 988              	.L38:
 976:.\lib_Fat/ff.c **** 	return clst * fs->csize + fs->database;
 989              		.loc 1 976 0 is_stmt 1
 990 0020 7B68     		ldr	r3, [r7, #4]
 991 0022 5B89     		ldrh	r3, [r3, #10]
 992 0024 1A1C     		mov	r2, r3
 993 0026 3B68     		ldr	r3, [r7]
 994 0028 5A43     		mul	r2, r3
 995 002a 7B68     		ldr	r3, [r7, #4]
 996 002c 9B6A     		ldr	r3, [r3, #40]
 997 002e D318     		add	r3, r2, r3
 998              	.L39:
 977:.\lib_Fat/ff.c **** }
 999              		.loc 1 977 0
 1000 0030 181C     		mov	r0, r3
 1001 0032 BD46     		mov	sp, r7
 1002 0034 02B0     		add	sp, sp, #8
 1003              		@ sp needed
 1004 0036 80BD     		pop	{r7, pc}
 1005              		.cfi_endproc
 1006              	.LFE11:
 1007              		.size	clust2sect, .-clust2sect
 1008              		.section	.text.get_fat,"ax",%progbits
 1009              		.align	2
 1010              		.code	16
 1011              		.thumb_func
 1012              		.type	get_fat, %function
 1013              	get_fat:
 1014              	.LFB12:
 978:.\lib_Fat/ff.c **** 
 979:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 36


 980:.\lib_Fat/ff.c **** 
 981:.\lib_Fat/ff.c **** 
 982:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 983:.\lib_Fat/ff.c **** /* FAT access - Read value of a FAT entry                                */
 984:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
 985:.\lib_Fat/ff.c **** 
 986:.\lib_Fat/ff.c **** static
 987:.\lib_Fat/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 988:.\lib_Fat/ff.c **** 	_FDID* obj,	/* Corresponding object */
 989:.\lib_Fat/ff.c **** 	DWORD clst	/* Cluster number to get the value */
 990:.\lib_Fat/ff.c **** )
 991:.\lib_Fat/ff.c **** {
 1015              		.loc 1 991 0
 1016              		.cfi_startproc
 1017 0000 80B5     		push	{r7, lr}
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 1021 0002 86B0     		sub	sp, sp, #24
 1022              		.cfi_def_cfa_offset 32
 1023 0004 00AF     		add	r7, sp, #0
 1024              		.cfi_def_cfa_register 7
 1025 0006 7860     		str	r0, [r7, #4]
 1026 0008 3960     		str	r1, [r7]
 992:.\lib_Fat/ff.c **** 	UINT wc, bc;
 993:.\lib_Fat/ff.c **** 	DWORD val;
 994:.\lib_Fat/ff.c **** 	FATFS *fs = obj->fs;
 1027              		.loc 1 994 0
 1028 000a 7B68     		ldr	r3, [r7, #4]
 1029 000c 1B68     		ldr	r3, [r3]
 1030 000e 3B61     		str	r3, [r7, #16]
 995:.\lib_Fat/ff.c **** 
 996:.\lib_Fat/ff.c **** 
 997:.\lib_Fat/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 1031              		.loc 1 997 0
 1032 0010 3B68     		ldr	r3, [r7]
 1033 0012 012B     		cmp	r3, #1
 1034 0014 04D9     		bls	.L41
 1035              		.loc 1 997 0 is_stmt 0 discriminator 1
 1036 0016 3B69     		ldr	r3, [r7, #16]
 1037 0018 5A69     		ldr	r2, [r3, #20]
 1038 001a 3B68     		ldr	r3, [r7]
 1039 001c 9A42     		cmp	r2, r3
 1040 001e 02D8     		bhi	.L42
 1041              	.L41:
 998:.\lib_Fat/ff.c **** 		val = 1;	/* Internal error */
 1042              		.loc 1 998 0 is_stmt 1
 1043 0020 0123     		mov	r3, #1
 1044 0022 7B61     		str	r3, [r7, #20]
 1045 0024 8AE0     		b	.L43
 1046              	.L42:
 999:.\lib_Fat/ff.c **** 
1000:.\lib_Fat/ff.c **** 	} else {
1001:.\lib_Fat/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 1047              		.loc 1 1001 0
 1048 0026 0123     		mov	r3, #1
 1049 0028 5B42     		neg	r3, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 37


 1050 002a 7B61     		str	r3, [r7, #20]
1002:.\lib_Fat/ff.c **** 
1003:.\lib_Fat/ff.c **** 		switch (fs->fs_type) {
 1051              		.loc 1 1003 0
 1052 002c 3B69     		ldr	r3, [r7, #16]
 1053 002e 1B78     		ldrb	r3, [r3]
 1054 0030 022B     		cmp	r3, #2
 1055 0032 49D0     		beq	.L45
 1056 0034 032B     		cmp	r3, #3
 1057 0036 62D0     		beq	.L46
 1058 0038 012B     		cmp	r3, #1
 1059 003a 00D0     		beq	.LCB812
 1060 003c 7CE0     		b	.L55	@long jump
 1061              	.LCB812:
1004:.\lib_Fat/ff.c **** 		case FS_FAT12 :
1005:.\lib_Fat/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1062              		.loc 1 1005 0
 1063 003e 3B68     		ldr	r3, [r7]
 1064 0040 FB60     		str	r3, [r7, #12]
 1065 0042 FB68     		ldr	r3, [r7, #12]
 1066 0044 5B08     		lsr	r3, r3, #1
 1067 0046 FA68     		ldr	r2, [r7, #12]
 1068 0048 D318     		add	r3, r2, r3
 1069 004a FB60     		str	r3, [r7, #12]
1006:.\lib_Fat/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1070              		.loc 1 1006 0
 1071 004c 3B69     		ldr	r3, [r7, #16]
 1072 004e 1A6A     		ldr	r2, [r3, #32]
 1073 0050 FB68     		ldr	r3, [r7, #12]
 1074 0052 5B0A     		lsr	r3, r3, #9
 1075 0054 D318     		add	r3, r2, r3
 1076 0056 3A69     		ldr	r2, [r7, #16]
 1077 0058 101C     		mov	r0, r2
 1078 005a 191C     		mov	r1, r3
 1079 005c FFF7FEFF 		bl	move_window
 1080 0060 031E     		sub	r3, r0, #0
 1081 0062 00D0     		beq	.L48
 1082 0064 6AE0     		b	.L43
 1083              	.L48:
1007:.\lib_Fat/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 1084              		.loc 1 1007 0
 1085 0066 FB68     		ldr	r3, [r7, #12]
 1086 0068 5A1C     		add	r2, r3, #1
 1087 006a FA60     		str	r2, [r7, #12]
 1088 006c DB05     		lsl	r3, r3, #23
 1089 006e DB0D     		lsr	r3, r3, #23
 1090 0070 3A69     		ldr	r2, [r7, #16]
 1091 0072 3021     		mov	r1, #48
 1092 0074 D318     		add	r3, r2, r3
 1093 0076 5B18     		add	r3, r3, r1
 1094 0078 1B78     		ldrb	r3, [r3]
 1095 007a BB60     		str	r3, [r7, #8]
1008:.\lib_Fat/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1096              		.loc 1 1008 0
 1097 007c 3B69     		ldr	r3, [r7, #16]
 1098 007e 1A6A     		ldr	r2, [r3, #32]
 1099 0080 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 38


 1100 0082 5B0A     		lsr	r3, r3, #9
 1101 0084 D318     		add	r3, r2, r3
 1102 0086 3A69     		ldr	r2, [r7, #16]
 1103 0088 101C     		mov	r0, r2
 1104 008a 191C     		mov	r1, r3
 1105 008c FFF7FEFF 		bl	move_window
 1106 0090 031E     		sub	r3, r0, #0
 1107 0092 00D0     		beq	.L49
 1108 0094 52E0     		b	.L43
 1109              	.L49:
1009:.\lib_Fat/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 1110              		.loc 1 1009 0
 1111 0096 FB68     		ldr	r3, [r7, #12]
 1112 0098 DB05     		lsl	r3, r3, #23
 1113 009a DB0D     		lsr	r3, r3, #23
 1114 009c 3A69     		ldr	r2, [r7, #16]
 1115 009e 3021     		mov	r1, #48
 1116 00a0 D318     		add	r3, r2, r3
 1117 00a2 5B18     		add	r3, r3, r1
 1118 00a4 1B78     		ldrb	r3, [r3]
 1119 00a6 1B02     		lsl	r3, r3, #8
 1120 00a8 1A1C     		mov	r2, r3
 1121 00aa BB68     		ldr	r3, [r7, #8]
 1122 00ac 1343     		orr	r3, r2
 1123 00ae BB60     		str	r3, [r7, #8]
1010:.\lib_Fat/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1124              		.loc 1 1010 0
 1125 00b0 3B68     		ldr	r3, [r7]
 1126 00b2 0122     		mov	r2, #1
 1127 00b4 1340     		and	r3, r2
 1128 00b6 02D0     		beq	.L50
 1129              		.loc 1 1010 0 is_stmt 0 discriminator 1
 1130 00b8 BB68     		ldr	r3, [r7, #8]
 1131 00ba 1B09     		lsr	r3, r3, #4
 1132 00bc 02E0     		b	.L51
 1133              	.L50:
 1134              		.loc 1 1010 0 discriminator 2
 1135 00be BB68     		ldr	r3, [r7, #8]
 1136 00c0 1B05     		lsl	r3, r3, #20
 1137 00c2 1B0D     		lsr	r3, r3, #20
 1138              	.L51:
 1139              		.loc 1 1010 0 discriminator 4
 1140 00c4 7B61     		str	r3, [r7, #20]
1011:.\lib_Fat/ff.c **** 			break;
 1141              		.loc 1 1011 0 is_stmt 1 discriminator 4
 1142 00c6 39E0     		b	.L43
 1143              	.L45:
1012:.\lib_Fat/ff.c **** 
1013:.\lib_Fat/ff.c **** 		case FS_FAT16 :
1014:.\lib_Fat/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 1144              		.loc 1 1014 0
 1145 00c8 3B69     		ldr	r3, [r7, #16]
 1146 00ca 1A6A     		ldr	r2, [r3, #32]
 1147 00cc 3B68     		ldr	r3, [r7]
 1148 00ce 1B0A     		lsr	r3, r3, #8
 1149 00d0 D318     		add	r3, r2, r3
 1150 00d2 3A69     		ldr	r2, [r7, #16]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 39


 1151 00d4 101C     		mov	r0, r2
 1152 00d6 191C     		mov	r1, r3
 1153 00d8 FFF7FEFF 		bl	move_window
 1154 00dc 031E     		sub	r3, r0, #0
 1155 00de 00D0     		beq	.L52
 1156 00e0 2CE0     		b	.L43
 1157              	.L52:
1015:.\lib_Fat/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 1158              		.loc 1 1015 0
 1159 00e2 3B68     		ldr	r3, [r7]
 1160 00e4 5A00     		lsl	r2, r3, #1
 1161 00e6 FF23     		mov	r3, #255
 1162 00e8 5B00     		lsl	r3, r3, #1
 1163 00ea 1340     		and	r3, r2
 1164 00ec 3033     		add	r3, r3, #48
 1165 00ee 3A69     		ldr	r2, [r7, #16]
 1166 00f0 D318     		add	r3, r2, r3
 1167 00f2 181C     		mov	r0, r3
 1168 00f4 FFF7FEFF 		bl	ld_word
 1169 00f8 031C     		mov	r3, r0
 1170 00fa 7B61     		str	r3, [r7, #20]
1016:.\lib_Fat/ff.c **** 			break;
 1171              		.loc 1 1016 0
 1172 00fc 1EE0     		b	.L43
 1173              	.L46:
1017:.\lib_Fat/ff.c **** 
1018:.\lib_Fat/ff.c **** 		case FS_FAT32 :
1019:.\lib_Fat/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 1174              		.loc 1 1019 0
 1175 00fe 3B69     		ldr	r3, [r7, #16]
 1176 0100 1A6A     		ldr	r2, [r3, #32]
 1177 0102 3B68     		ldr	r3, [r7]
 1178 0104 DB09     		lsr	r3, r3, #7
 1179 0106 D318     		add	r3, r2, r3
 1180 0108 3A69     		ldr	r2, [r7, #16]
 1181 010a 101C     		mov	r0, r2
 1182 010c 191C     		mov	r1, r3
 1183 010e FFF7FEFF 		bl	move_window
 1184 0112 031E     		sub	r3, r0, #0
 1185 0114 00D0     		beq	.L53
 1186 0116 11E0     		b	.L43
 1187              	.L53:
1020:.\lib_Fat/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 1188              		.loc 1 1020 0
 1189 0118 3B68     		ldr	r3, [r7]
 1190 011a 9A00     		lsl	r2, r3, #2
 1191 011c FE23     		mov	r3, #254
 1192 011e 5B00     		lsl	r3, r3, #1
 1193 0120 1340     		and	r3, r2
 1194 0122 3033     		add	r3, r3, #48
 1195 0124 3A69     		ldr	r2, [r7, #16]
 1196 0126 D318     		add	r3, r2, r3
 1197 0128 181C     		mov	r0, r3
 1198 012a FFF7FEFF 		bl	ld_dword
 1199 012e 031C     		mov	r3, r0
 1200 0130 1B01     		lsl	r3, r3, #4
 1201 0132 1B09     		lsr	r3, r3, #4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 40


 1202 0134 7B61     		str	r3, [r7, #20]
1021:.\lib_Fat/ff.c **** 			break;
 1203              		.loc 1 1021 0
 1204 0136 01E0     		b	.L43
 1205              	.L55:
1022:.\lib_Fat/ff.c **** #if _FS_EXFAT
1023:.\lib_Fat/ff.c **** 		case FS_EXFAT :
1024:.\lib_Fat/ff.c **** 			if (obj->objsize) {
1025:.\lib_Fat/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1026:.\lib_Fat/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1027:.\lib_Fat/ff.c **** 
1028:.\lib_Fat/ff.c **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1029:.\lib_Fat/ff.c **** 					if (cofs <= clen) {
1030:.\lib_Fat/ff.c **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1031:.\lib_Fat/ff.c **** 						break;
1032:.\lib_Fat/ff.c **** 					}
1033:.\lib_Fat/ff.c **** 				}
1034:.\lib_Fat/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the contiguous part? */
1035:.\lib_Fat/ff.c **** 					val = clst + 1; 	/* Generate the value */
1036:.\lib_Fat/ff.c **** 					break;
1037:.\lib_Fat/ff.c **** 				}
1038:.\lib_Fat/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1039:.\lib_Fat/ff.c **** 					if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1040:.\lib_Fat/ff.c **** 					val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1041:.\lib_Fat/ff.c **** 					break;
1042:.\lib_Fat/ff.c **** 				}
1043:.\lib_Fat/ff.c **** 			}
1044:.\lib_Fat/ff.c **** 			/* go next */
1045:.\lib_Fat/ff.c **** #endif
1046:.\lib_Fat/ff.c **** 		default:
1047:.\lib_Fat/ff.c **** 			val = 1;	/* Internal error */
 1206              		.loc 1 1047 0
 1207 0138 0123     		mov	r3, #1
 1208 013a 7B61     		str	r3, [r7, #20]
 1209              	.L43:
1048:.\lib_Fat/ff.c **** 		}
1049:.\lib_Fat/ff.c **** 	}
1050:.\lib_Fat/ff.c **** 
1051:.\lib_Fat/ff.c **** 	return val;
 1210              		.loc 1 1051 0
 1211 013c 7B69     		ldr	r3, [r7, #20]
1052:.\lib_Fat/ff.c **** }
 1212              		.loc 1 1052 0
 1213 013e 181C     		mov	r0, r3
 1214 0140 BD46     		mov	sp, r7
 1215 0142 06B0     		add	sp, sp, #24
 1216              		@ sp needed
 1217 0144 80BD     		pop	{r7, pc}
 1218              		.cfi_endproc
 1219              	.LFE12:
 1220              		.size	get_fat, .-get_fat
 1221 0146 C046     		.section	.text.put_fat,"ax",%progbits
 1222              		.align	2
 1223              		.code	16
 1224              		.thumb_func
 1225              		.type	put_fat, %function
 1226              	put_fat:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 41


 1227              	.LFB13:
1053:.\lib_Fat/ff.c **** 
1054:.\lib_Fat/ff.c **** 
1055:.\lib_Fat/ff.c **** 
1056:.\lib_Fat/ff.c **** 
1057:.\lib_Fat/ff.c **** #if !_FS_READONLY
1058:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1059:.\lib_Fat/ff.c **** /* FAT access - Change value of a FAT entry                              */
1060:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1061:.\lib_Fat/ff.c **** 
1062:.\lib_Fat/ff.c **** static
1063:.\lib_Fat/ff.c **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1064:.\lib_Fat/ff.c **** 	FATFS* fs,		/* Corresponding file system object */
1065:.\lib_Fat/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1066:.\lib_Fat/ff.c **** 	DWORD val		/* New value to be set to the entry */
1067:.\lib_Fat/ff.c **** )
1068:.\lib_Fat/ff.c **** {
 1228              		.loc 1 1068 0
 1229              		.cfi_startproc
 1230 0000 90B5     		push	{r4, r7, lr}
 1231              		.cfi_def_cfa_offset 12
 1232              		.cfi_offset 4, -12
 1233              		.cfi_offset 7, -8
 1234              		.cfi_offset 14, -4
 1235 0002 89B0     		sub	sp, sp, #36
 1236              		.cfi_def_cfa_offset 48
 1237 0004 00AF     		add	r7, sp, #0
 1238              		.cfi_def_cfa_register 7
 1239 0006 F860     		str	r0, [r7, #12]
 1240 0008 B960     		str	r1, [r7, #8]
 1241 000a 7A60     		str	r2, [r7, #4]
1069:.\lib_Fat/ff.c **** 	UINT bc;
1070:.\lib_Fat/ff.c **** 	BYTE *p;
1071:.\lib_Fat/ff.c **** 	FRESULT res = FR_INT_ERR;
 1242              		.loc 1 1071 0
 1243 000c 1F23     		mov	r3, #31
 1244 000e FB18     		add	r3, r7, r3
 1245 0010 0222     		mov	r2, #2
 1246 0012 1A70     		strb	r2, [r3]
1072:.\lib_Fat/ff.c **** 
1073:.\lib_Fat/ff.c **** 
1074:.\lib_Fat/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 1247              		.loc 1 1074 0
 1248 0014 BB68     		ldr	r3, [r7, #8]
 1249 0016 012B     		cmp	r3, #1
 1250 0018 00D8     		bhi	.LCB1001
 1251 001a E7E0     		b	.L57	@long jump
 1252              	.LCB1001:
 1253              		.loc 1 1074 0 is_stmt 0 discriminator 1
 1254 001c FB68     		ldr	r3, [r7, #12]
 1255 001e 5A69     		ldr	r2, [r3, #20]
 1256 0020 BB68     		ldr	r3, [r7, #8]
 1257 0022 9A42     		cmp	r2, r3
 1258 0024 00D8     		bhi	.LCB1006
 1259 0026 E1E0     		b	.L57	@long jump
 1260              	.LCB1006:
1075:.\lib_Fat/ff.c **** 		switch (fs->fs_type) {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 42


 1261              		.loc 1 1075 0 is_stmt 1
 1262 0028 FB68     		ldr	r3, [r7, #12]
 1263 002a 1B78     		ldrb	r3, [r3]
 1264 002c 022B     		cmp	r3, #2
 1265 002e 00D1     		bne	.LCB1010
 1266 0030 7EE0     		b	.L58	@long jump
 1267              	.LCB1010:
 1268 0032 032B     		cmp	r3, #3
 1269 0034 00D1     		bne	.LCB1012
 1270 0036 A1E0     		b	.L59	@long jump
 1271              	.LCB1012:
 1272 0038 012B     		cmp	r3, #1
 1273 003a 00D0     		beq	.LCB1014
 1274 003c D6E0     		b	.L57	@long jump
 1275              	.LCB1014:
1076:.\lib_Fat/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
1077:.\lib_Fat/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1276              		.loc 1 1077 0
 1277 003e BB68     		ldr	r3, [r7, #8]
 1278 0040 BB61     		str	r3, [r7, #24]
 1279 0042 BB69     		ldr	r3, [r7, #24]
 1280 0044 5B08     		lsr	r3, r3, #1
 1281 0046 BA69     		ldr	r2, [r7, #24]
 1282 0048 D318     		add	r3, r2, r3
 1283 004a BB61     		str	r3, [r7, #24]
1078:.\lib_Fat/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1284              		.loc 1 1078 0
 1285 004c FB68     		ldr	r3, [r7, #12]
 1286 004e 1A6A     		ldr	r2, [r3, #32]
 1287 0050 BB69     		ldr	r3, [r7, #24]
 1288 0052 5B0A     		lsr	r3, r3, #9
 1289 0054 D318     		add	r3, r2, r3
 1290 0056 1F22     		mov	r2, #31
 1291 0058 BC18     		add	r4, r7, r2
 1292 005a FA68     		ldr	r2, [r7, #12]
 1293 005c 101C     		mov	r0, r2
 1294 005e 191C     		mov	r1, r3
 1295 0060 FFF7FEFF 		bl	move_window
 1296 0064 031C     		mov	r3, r0
 1297 0066 2370     		strb	r3, [r4]
1079:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 1298              		.loc 1 1079 0
 1299 0068 1F23     		mov	r3, #31
 1300 006a FB18     		add	r3, r7, r3
 1301 006c 1B78     		ldrb	r3, [r3]
 1302 006e 002B     		cmp	r3, #0
 1303 0070 00D0     		beq	.L61
 1304 0072 BBE0     		b	.L57
 1305              	.L61:
1080:.\lib_Fat/ff.c **** 			p = fs->win + bc++ % SS(fs);
 1306              		.loc 1 1080 0
 1307 0074 BB69     		ldr	r3, [r7, #24]
 1308 0076 5A1C     		add	r2, r3, #1
 1309 0078 BA61     		str	r2, [r7, #24]
 1310 007a DB05     		lsl	r3, r3, #23
 1311 007c DB0D     		lsr	r3, r3, #23
 1312 007e 3033     		add	r3, r3, #48
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 43


 1313 0080 FA68     		ldr	r2, [r7, #12]
 1314 0082 D318     		add	r3, r2, r3
 1315 0084 7B61     		str	r3, [r7, #20]
1081:.\lib_Fat/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1316              		.loc 1 1081 0
 1317 0086 BB68     		ldr	r3, [r7, #8]
 1318 0088 0122     		mov	r2, #1
 1319 008a 1340     		and	r3, r2
 1320 008c 0ED0     		beq	.L62
 1321              		.loc 1 1081 0 is_stmt 0 discriminator 1
 1322 008e 7B69     		ldr	r3, [r7, #20]
 1323 0090 1B78     		ldrb	r3, [r3]
 1324 0092 DBB2     		uxtb	r3, r3
 1325 0094 1A1C     		add	r2, r3, #0
 1326 0096 0F23     		mov	r3, #15
 1327 0098 1340     		and	r3, r2
 1328 009a DAB2     		uxtb	r2, r3
 1329 009c 7B68     		ldr	r3, [r7, #4]
 1330 009e DBB2     		uxtb	r3, r3
 1331 00a0 1B01     		lsl	r3, r3, #4
 1332 00a2 DBB2     		uxtb	r3, r3
 1333 00a4 1343     		orr	r3, r2
 1334 00a6 DBB2     		uxtb	r3, r3
 1335 00a8 DBB2     		uxtb	r3, r3
 1336 00aa 01E0     		b	.L63
 1337              	.L62:
 1338              		.loc 1 1081 0 discriminator 2
 1339 00ac 7B68     		ldr	r3, [r7, #4]
 1340 00ae DBB2     		uxtb	r3, r3
 1341              	.L63:
 1342              		.loc 1 1081 0 discriminator 4
 1343 00b0 7A69     		ldr	r2, [r7, #20]
 1344 00b2 1370     		strb	r3, [r2]
1082:.\lib_Fat/ff.c **** 			fs->wflag = 1;
 1345              		.loc 1 1082 0 is_stmt 1 discriminator 4
 1346 00b4 FB68     		ldr	r3, [r7, #12]
 1347 00b6 0122     		mov	r2, #1
 1348 00b8 DA70     		strb	r2, [r3, #3]
1083:.\lib_Fat/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1349              		.loc 1 1083 0 discriminator 4
 1350 00ba FB68     		ldr	r3, [r7, #12]
 1351 00bc 1A6A     		ldr	r2, [r3, #32]
 1352 00be BB69     		ldr	r3, [r7, #24]
 1353 00c0 5B0A     		lsr	r3, r3, #9
 1354 00c2 D318     		add	r3, r2, r3
 1355 00c4 1F22     		mov	r2, #31
 1356 00c6 BC18     		add	r4, r7, r2
 1357 00c8 FA68     		ldr	r2, [r7, #12]
 1358 00ca 101C     		mov	r0, r2
 1359 00cc 191C     		mov	r1, r3
 1360 00ce FFF7FEFF 		bl	move_window
 1361 00d2 031C     		mov	r3, r0
 1362 00d4 2370     		strb	r3, [r4]
1084:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 1363              		.loc 1 1084 0 discriminator 4
 1364 00d6 1F23     		mov	r3, #31
 1365 00d8 FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 44


 1366 00da 1B78     		ldrb	r3, [r3]
 1367 00dc 002B     		cmp	r3, #0
 1368 00de 00D0     		beq	.L64
 1369              		.loc 1 1084 0 is_stmt 0
 1370 00e0 84E0     		b	.L57
 1371              	.L64:
1085:.\lib_Fat/ff.c **** 			p = fs->win + bc % SS(fs);
 1372              		.loc 1 1085 0 is_stmt 1
 1373 00e2 BB69     		ldr	r3, [r7, #24]
 1374 00e4 DB05     		lsl	r3, r3, #23
 1375 00e6 DB0D     		lsr	r3, r3, #23
 1376 00e8 3033     		add	r3, r3, #48
 1377 00ea FA68     		ldr	r2, [r7, #12]
 1378 00ec D318     		add	r3, r2, r3
 1379 00ee 7B61     		str	r3, [r7, #20]
1086:.\lib_Fat/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1380              		.loc 1 1086 0
 1381 00f0 BB68     		ldr	r3, [r7, #8]
 1382 00f2 0122     		mov	r2, #1
 1383 00f4 1340     		and	r3, r2
 1384 00f6 03D0     		beq	.L65
 1385              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1386 00f8 7B68     		ldr	r3, [r7, #4]
 1387 00fa 1B09     		lsr	r3, r3, #4
 1388 00fc DBB2     		uxtb	r3, r3
 1389 00fe 11E0     		b	.L66
 1390              	.L65:
 1391              		.loc 1 1086 0 discriminator 2
 1392 0100 7B69     		ldr	r3, [r7, #20]
 1393 0102 1B78     		ldrb	r3, [r3]
 1394 0104 DBB2     		uxtb	r3, r3
 1395 0106 1A1C     		add	r2, r3, #0
 1396 0108 0F23     		mov	r3, #15
 1397 010a 9A43     		bic	r2, r3
 1398 010c 131C     		mov	r3, r2
 1399 010e DAB2     		uxtb	r2, r3
 1400 0110 7B68     		ldr	r3, [r7, #4]
 1401 0112 1B0A     		lsr	r3, r3, #8
 1402 0114 DBB2     		uxtb	r3, r3
 1403 0116 191C     		add	r1, r3, #0
 1404 0118 0F23     		mov	r3, #15
 1405 011a 0B40     		and	r3, r1
 1406 011c DBB2     		uxtb	r3, r3
 1407 011e 1343     		orr	r3, r2
 1408 0120 DBB2     		uxtb	r3, r3
 1409 0122 DBB2     		uxtb	r3, r3
 1410              	.L66:
 1411              		.loc 1 1086 0 discriminator 4
 1412 0124 7A69     		ldr	r2, [r7, #20]
 1413 0126 1370     		strb	r3, [r2]
1087:.\lib_Fat/ff.c **** 			fs->wflag = 1;
 1414              		.loc 1 1087 0 is_stmt 1 discriminator 4
 1415 0128 FB68     		ldr	r3, [r7, #12]
 1416 012a 0122     		mov	r2, #1
 1417 012c DA70     		strb	r2, [r3, #3]
1088:.\lib_Fat/ff.c **** 			break;
 1418              		.loc 1 1088 0 discriminator 4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 45


 1419 012e 5DE0     		b	.L57
 1420              	.L58:
1089:.\lib_Fat/ff.c **** 
1090:.\lib_Fat/ff.c **** 		case FS_FAT16 :	/* WORD aligned items */
1091:.\lib_Fat/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 1421              		.loc 1 1091 0
 1422 0130 FB68     		ldr	r3, [r7, #12]
 1423 0132 1A6A     		ldr	r2, [r3, #32]
 1424 0134 BB68     		ldr	r3, [r7, #8]
 1425 0136 1B0A     		lsr	r3, r3, #8
 1426 0138 D318     		add	r3, r2, r3
 1427 013a 1F22     		mov	r2, #31
 1428 013c BC18     		add	r4, r7, r2
 1429 013e FA68     		ldr	r2, [r7, #12]
 1430 0140 101C     		mov	r0, r2
 1431 0142 191C     		mov	r1, r3
 1432 0144 FFF7FEFF 		bl	move_window
 1433 0148 031C     		mov	r3, r0
 1434 014a 2370     		strb	r3, [r4]
1092:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 1435              		.loc 1 1092 0
 1436 014c 1F23     		mov	r3, #31
 1437 014e FB18     		add	r3, r7, r3
 1438 0150 1B78     		ldrb	r3, [r3]
 1439 0152 002B     		cmp	r3, #0
 1440 0154 00D0     		beq	.L67
 1441 0156 49E0     		b	.L57
 1442              	.L67:
1093:.\lib_Fat/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 1443              		.loc 1 1093 0
 1444 0158 BB68     		ldr	r3, [r7, #8]
 1445 015a 5A00     		lsl	r2, r3, #1
 1446 015c FF23     		mov	r3, #255
 1447 015e 5B00     		lsl	r3, r3, #1
 1448 0160 1340     		and	r3, r2
 1449 0162 3033     		add	r3, r3, #48
 1450 0164 FA68     		ldr	r2, [r7, #12]
 1451 0166 D218     		add	r2, r2, r3
 1452 0168 7B68     		ldr	r3, [r7, #4]
 1453 016a 9BB2     		uxth	r3, r3
 1454 016c 101C     		mov	r0, r2
 1455 016e 191C     		mov	r1, r3
 1456 0170 FFF7FEFF 		bl	st_word
1094:.\lib_Fat/ff.c **** 			fs->wflag = 1;
 1457              		.loc 1 1094 0
 1458 0174 FB68     		ldr	r3, [r7, #12]
 1459 0176 0122     		mov	r2, #1
 1460 0178 DA70     		strb	r2, [r3, #3]
1095:.\lib_Fat/ff.c **** 			break;
 1461              		.loc 1 1095 0
 1462 017a 37E0     		b	.L57
 1463              	.L59:
1096:.\lib_Fat/ff.c **** 
1097:.\lib_Fat/ff.c **** 		case FS_FAT32 :	/* DWORD aligned items */
1098:.\lib_Fat/ff.c **** #if _FS_EXFAT
1099:.\lib_Fat/ff.c **** 		case FS_EXFAT :
1100:.\lib_Fat/ff.c **** #endif
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 46


1101:.\lib_Fat/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 1464              		.loc 1 1101 0
 1465 017c FB68     		ldr	r3, [r7, #12]
 1466 017e 1A6A     		ldr	r2, [r3, #32]
 1467 0180 BB68     		ldr	r3, [r7, #8]
 1468 0182 DB09     		lsr	r3, r3, #7
 1469 0184 D318     		add	r3, r2, r3
 1470 0186 1F22     		mov	r2, #31
 1471 0188 BC18     		add	r4, r7, r2
 1472 018a FA68     		ldr	r2, [r7, #12]
 1473 018c 101C     		mov	r0, r2
 1474 018e 191C     		mov	r1, r3
 1475 0190 FFF7FEFF 		bl	move_window
 1476 0194 031C     		mov	r3, r0
 1477 0196 2370     		strb	r3, [r4]
1102:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 1478              		.loc 1 1102 0
 1479 0198 1F23     		mov	r3, #31
 1480 019a FB18     		add	r3, r7, r3
 1481 019c 1B78     		ldrb	r3, [r3]
 1482 019e 002B     		cmp	r3, #0
 1483 01a0 00D0     		beq	.L68
 1484 01a2 23E0     		b	.L57
 1485              	.L68:
1103:.\lib_Fat/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1104:.\lib_Fat/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 1486              		.loc 1 1104 0
 1487 01a4 7B68     		ldr	r3, [r7, #4]
 1488 01a6 1B01     		lsl	r3, r3, #4
 1489 01a8 1C09     		lsr	r4, r3, #4
 1490 01aa BB68     		ldr	r3, [r7, #8]
 1491 01ac 9A00     		lsl	r2, r3, #2
 1492 01ae FE23     		mov	r3, #254
 1493 01b0 5B00     		lsl	r3, r3, #1
 1494 01b2 1340     		and	r3, r2
 1495 01b4 3033     		add	r3, r3, #48
 1496 01b6 FA68     		ldr	r2, [r7, #12]
 1497 01b8 D318     		add	r3, r2, r3
 1498 01ba 181C     		mov	r0, r3
 1499 01bc FFF7FEFF 		bl	ld_dword
 1500 01c0 031C     		mov	r3, r0
 1501 01c2 1B0F     		lsr	r3, r3, #28
 1502 01c4 1B07     		lsl	r3, r3, #28
 1503 01c6 2343     		orr	r3, r4
 1504 01c8 7B60     		str	r3, [r7, #4]
1105:.\lib_Fat/ff.c **** 			}
1106:.\lib_Fat/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
 1505              		.loc 1 1106 0
 1506 01ca BB68     		ldr	r3, [r7, #8]
 1507 01cc 9A00     		lsl	r2, r3, #2
 1508 01ce FE23     		mov	r3, #254
 1509 01d0 5B00     		lsl	r3, r3, #1
 1510 01d2 1340     		and	r3, r2
 1511 01d4 3033     		add	r3, r3, #48
 1512 01d6 FA68     		ldr	r2, [r7, #12]
 1513 01d8 D218     		add	r2, r2, r3
 1514 01da 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 47


 1515 01dc 101C     		mov	r0, r2
 1516 01de 191C     		mov	r1, r3
 1517 01e0 FFF7FEFF 		bl	st_dword
1107:.\lib_Fat/ff.c **** 			fs->wflag = 1;
 1518              		.loc 1 1107 0
 1519 01e4 FB68     		ldr	r3, [r7, #12]
 1520 01e6 0122     		mov	r2, #1
 1521 01e8 DA70     		strb	r2, [r3, #3]
1108:.\lib_Fat/ff.c **** 			break;
 1522              		.loc 1 1108 0
 1523 01ea C046     		mov	r8, r8
 1524              	.L57:
1109:.\lib_Fat/ff.c **** 		}
1110:.\lib_Fat/ff.c **** 	}
1111:.\lib_Fat/ff.c **** 	return res;
 1525              		.loc 1 1111 0
 1526 01ec 1F23     		mov	r3, #31
 1527 01ee FB18     		add	r3, r7, r3
 1528 01f0 1B78     		ldrb	r3, [r3]
1112:.\lib_Fat/ff.c **** }
 1529              		.loc 1 1112 0
 1530 01f2 181C     		mov	r0, r3
 1531 01f4 BD46     		mov	sp, r7
 1532 01f6 09B0     		add	sp, sp, #36
 1533              		@ sp needed
 1534 01f8 90BD     		pop	{r4, r7, pc}
 1535              		.cfi_endproc
 1536              	.LFE13:
 1537              		.size	put_fat, .-put_fat
 1538 01fa C046     		.section	.text.remove_chain,"ax",%progbits
 1539              		.align	2
 1540              		.code	16
 1541              		.thumb_func
 1542              		.type	remove_chain, %function
 1543              	remove_chain:
 1544              	.LFB14:
1113:.\lib_Fat/ff.c **** 
1114:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
1115:.\lib_Fat/ff.c **** 
1116:.\lib_Fat/ff.c **** 
1117:.\lib_Fat/ff.c **** 
1118:.\lib_Fat/ff.c **** 
1119:.\lib_Fat/ff.c **** #if _FS_EXFAT && !_FS_READONLY
1120:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1121:.\lib_Fat/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1122:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1123:.\lib_Fat/ff.c **** 
1124:.\lib_Fat/ff.c **** /*---------------------------------------------*/
1125:.\lib_Fat/ff.c **** /* exFAT: Find a contiguous free cluster block */
1126:.\lib_Fat/ff.c **** /*---------------------------------------------*/
1127:.\lib_Fat/ff.c **** 
1128:.\lib_Fat/ff.c **** static
1129:.\lib_Fat/ff.c **** DWORD find_bitmap (	/* 0:No free cluster, 2..:Free cluster found, 0xFFFFFFFF:Disk error */
1130:.\lib_Fat/ff.c **** 	FATFS* fs,	/* File system object */
1131:.\lib_Fat/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1132:.\lib_Fat/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1133:.\lib_Fat/ff.c **** )
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 48


1134:.\lib_Fat/ff.c **** {
1135:.\lib_Fat/ff.c **** 	BYTE bm, bv;
1136:.\lib_Fat/ff.c **** 	UINT i;
1137:.\lib_Fat/ff.c **** 	DWORD val, scl, ctr;
1138:.\lib_Fat/ff.c **** 
1139:.\lib_Fat/ff.c **** 
1140:.\lib_Fat/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1141:.\lib_Fat/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1142:.\lib_Fat/ff.c **** 	scl = val = clst; ctr = 0;
1143:.\lib_Fat/ff.c **** 	for (;;) {
1144:.\lib_Fat/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1145:.\lib_Fat/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1146:.\lib_Fat/ff.c **** 		do {
1147:.\lib_Fat/ff.c **** 			do {
1148:.\lib_Fat/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1149:.\lib_Fat/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1150:.\lib_Fat/ff.c **** 					val = 0; bm = 0; i = 4096;
1151:.\lib_Fat/ff.c **** 				}
1152:.\lib_Fat/ff.c **** 				if (!bv) {	/* Is it a free cluster? */
1153:.\lib_Fat/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check run length */
1154:.\lib_Fat/ff.c **** 				} else {
1155:.\lib_Fat/ff.c **** 					scl = val; ctr = 0;		/* Encountered a live cluster, restart to scan */
1156:.\lib_Fat/ff.c **** 				}
1157:.\lib_Fat/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1158:.\lib_Fat/ff.c **** 			} while (bm);
1159:.\lib_Fat/ff.c **** 			bm = 1;
1160:.\lib_Fat/ff.c **** 		} while (++i < SS(fs));
1161:.\lib_Fat/ff.c **** 	}
1162:.\lib_Fat/ff.c **** }
1163:.\lib_Fat/ff.c **** 
1164:.\lib_Fat/ff.c **** 
1165:.\lib_Fat/ff.c **** /*------------------------------------*/
1166:.\lib_Fat/ff.c **** /* exFAT: Set/Clear a block of bitmap */
1167:.\lib_Fat/ff.c **** /*------------------------------------*/
1168:.\lib_Fat/ff.c **** 
1169:.\lib_Fat/ff.c **** static
1170:.\lib_Fat/ff.c **** FRESULT change_bitmap (
1171:.\lib_Fat/ff.c **** 	FATFS* fs,	/* File system object */
1172:.\lib_Fat/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1173:.\lib_Fat/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1174:.\lib_Fat/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1175:.\lib_Fat/ff.c **** )
1176:.\lib_Fat/ff.c **** {
1177:.\lib_Fat/ff.c **** 	BYTE bm;
1178:.\lib_Fat/ff.c **** 	UINT i;
1179:.\lib_Fat/ff.c **** 	DWORD sect;
1180:.\lib_Fat/ff.c **** 
1181:.\lib_Fat/ff.c **** 
1182:.\lib_Fat/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1183:.\lib_Fat/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address */
1184:.\lib_Fat/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1185:.\lib_Fat/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1186:.\lib_Fat/ff.c **** 	for (;;) {
1187:.\lib_Fat/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1188:.\lib_Fat/ff.c **** 		do {
1189:.\lib_Fat/ff.c **** 			do {
1190:.\lib_Fat/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 49


1191:.\lib_Fat/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1192:.\lib_Fat/ff.c **** 				fs->wflag = 1;
1193:.\lib_Fat/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1194:.\lib_Fat/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1195:.\lib_Fat/ff.c **** 			bm = 1;
1196:.\lib_Fat/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1197:.\lib_Fat/ff.c **** 	}
1198:.\lib_Fat/ff.c **** }
1199:.\lib_Fat/ff.c **** 
1200:.\lib_Fat/ff.c **** 
1201:.\lib_Fat/ff.c **** /*---------------------------------------------*/
1202:.\lib_Fat/ff.c **** /* Complement contiguous part of the FAT chain */
1203:.\lib_Fat/ff.c **** /*---------------------------------------------*/
1204:.\lib_Fat/ff.c **** 
1205:.\lib_Fat/ff.c **** static
1206:.\lib_Fat/ff.c **** FRESULT fill_fat_chain (
1207:.\lib_Fat/ff.c **** 	_FDID* obj	/* Pointer to the corresponding object */
1208:.\lib_Fat/ff.c **** )
1209:.\lib_Fat/ff.c **** {
1210:.\lib_Fat/ff.c **** 	FRESULT res;
1211:.\lib_Fat/ff.c **** 	DWORD cl, n;
1212:.\lib_Fat/ff.c **** 
1213:.\lib_Fat/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1214:.\lib_Fat/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1215:.\lib_Fat/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1216:.\lib_Fat/ff.c **** 			if (res != FR_OK) return res;
1217:.\lib_Fat/ff.c **** 		}
1218:.\lib_Fat/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1219:.\lib_Fat/ff.c **** 	}
1220:.\lib_Fat/ff.c **** 	return FR_OK;
1221:.\lib_Fat/ff.c **** }
1222:.\lib_Fat/ff.c **** 
1223:.\lib_Fat/ff.c **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1224:.\lib_Fat/ff.c **** 
1225:.\lib_Fat/ff.c **** 
1226:.\lib_Fat/ff.c **** 
1227:.\lib_Fat/ff.c **** #if !_FS_READONLY
1228:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1229:.\lib_Fat/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1230:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1231:.\lib_Fat/ff.c **** static
1232:.\lib_Fat/ff.c **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1233:.\lib_Fat/ff.c **** 	_FDID* obj,			/* Corresponding object */
1234:.\lib_Fat/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1235:.\lib_Fat/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1236:.\lib_Fat/ff.c **** )
1237:.\lib_Fat/ff.c **** {
 1545              		.loc 1 1237 0
 1546              		.cfi_startproc
 1547 0000 90B5     		push	{r4, r7, lr}
 1548              		.cfi_def_cfa_offset 12
 1549              		.cfi_offset 4, -12
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 89B0     		sub	sp, sp, #36
 1553              		.cfi_def_cfa_offset 48
 1554 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 50


 1555              		.cfi_def_cfa_register 7
 1556 0006 F860     		str	r0, [r7, #12]
 1557 0008 B960     		str	r1, [r7, #8]
 1558 000a 7A60     		str	r2, [r7, #4]
1238:.\lib_Fat/ff.c **** 	FRESULT res = FR_OK;
 1559              		.loc 1 1238 0
 1560 000c 1F23     		mov	r3, #31
 1561 000e FB18     		add	r3, r7, r3
 1562 0010 0022     		mov	r2, #0
 1563 0012 1A70     		strb	r2, [r3]
1239:.\lib_Fat/ff.c **** 	DWORD nxt;
1240:.\lib_Fat/ff.c **** 	FATFS *fs = obj->fs;
 1564              		.loc 1 1240 0
 1565 0014 FB68     		ldr	r3, [r7, #12]
 1566 0016 1B68     		ldr	r3, [r3]
 1567 0018 BB61     		str	r3, [r7, #24]
1241:.\lib_Fat/ff.c **** #if _FS_EXFAT || _USE_TRIM
1242:.\lib_Fat/ff.c **** 	DWORD scl = clst, ecl = clst;
1243:.\lib_Fat/ff.c **** #endif
1244:.\lib_Fat/ff.c **** #if _USE_TRIM
1245:.\lib_Fat/ff.c **** 	DWORD rt[2];
1246:.\lib_Fat/ff.c **** #endif
1247:.\lib_Fat/ff.c **** 
1248:.\lib_Fat/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 1568              		.loc 1 1248 0
 1569 001a BB68     		ldr	r3, [r7, #8]
 1570 001c 012B     		cmp	r3, #1
 1571 001e 04D9     		bls	.L71
 1572              		.loc 1 1248 0 is_stmt 0 discriminator 2
 1573 0020 BB69     		ldr	r3, [r7, #24]
 1574 0022 5A69     		ldr	r2, [r3, #20]
 1575 0024 BB68     		ldr	r3, [r7, #8]
 1576 0026 9A42     		cmp	r2, r3
 1577 0028 01D8     		bhi	.L72
 1578              	.L71:
 1579              		.loc 1 1248 0 discriminator 3
 1580 002a 0223     		mov	r3, #2
 1581 002c 5AE0     		b	.L73
 1582              	.L72:
1249:.\lib_Fat/ff.c **** 
1250:.\lib_Fat/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1251:.\lib_Fat/ff.c **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 1583              		.loc 1 1251 0 is_stmt 1
 1584 002e 7B68     		ldr	r3, [r7, #4]
 1585 0030 002B     		cmp	r3, #0
 1586 0032 15D0     		beq	.L74
1252:.\lib_Fat/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 1587              		.loc 1 1252 0
 1588 0034 1F23     		mov	r3, #31
 1589 0036 FC18     		add	r4, r7, r3
 1590 0038 B969     		ldr	r1, [r7, #24]
 1591 003a 7A68     		ldr	r2, [r7, #4]
 1592 003c 0123     		mov	r3, #1
 1593 003e 5B42     		neg	r3, r3
 1594 0040 081C     		mov	r0, r1
 1595 0042 111C     		mov	r1, r2
 1596 0044 1A1C     		mov	r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 51


 1597 0046 FFF7FEFF 		bl	put_fat
 1598 004a 031C     		mov	r3, r0
 1599 004c 2370     		strb	r3, [r4]
1253:.\lib_Fat/ff.c **** 		if (res != FR_OK) return res;
 1600              		.loc 1 1253 0
 1601 004e 1F23     		mov	r3, #31
 1602 0050 FB18     		add	r3, r7, r3
 1603 0052 1B78     		ldrb	r3, [r3]
 1604 0054 002B     		cmp	r3, #0
 1605 0056 03D0     		beq	.L74
 1606              		.loc 1 1253 0 is_stmt 0 discriminator 1
 1607 0058 1F23     		mov	r3, #31
 1608 005a FB18     		add	r3, r7, r3
 1609 005c 1B78     		ldrb	r3, [r3]
 1610 005e 41E0     		b	.L73
 1611              	.L74:
1254:.\lib_Fat/ff.c **** 	}
1255:.\lib_Fat/ff.c **** 
1256:.\lib_Fat/ff.c **** 	/* Remove the chain */
1257:.\lib_Fat/ff.c **** 	do {
1258:.\lib_Fat/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 1612              		.loc 1 1258 0 is_stmt 1
 1613 0060 FA68     		ldr	r2, [r7, #12]
 1614 0062 BB68     		ldr	r3, [r7, #8]
 1615 0064 101C     		mov	r0, r2
 1616 0066 191C     		mov	r1, r3
 1617 0068 FFF7FEFF 		bl	get_fat
 1618 006c 031C     		mov	r3, r0
 1619 006e 7B61     		str	r3, [r7, #20]
1259:.\lib_Fat/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 1620              		.loc 1 1259 0
 1621 0070 7B69     		ldr	r3, [r7, #20]
 1622 0072 002B     		cmp	r3, #0
 1623 0074 00D1     		bne	.L75
 1624 0076 34E0     		b	.L76
 1625              	.L75:
1260:.\lib_Fat/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 1626              		.loc 1 1260 0
 1627 0078 7B69     		ldr	r3, [r7, #20]
 1628 007a 012B     		cmp	r3, #1
 1629 007c 01D1     		bne	.L77
 1630              		.loc 1 1260 0 is_stmt 0 discriminator 1
 1631 007e 0223     		mov	r3, #2
 1632 0080 30E0     		b	.L73
 1633              	.L77:
1261:.\lib_Fat/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 1634              		.loc 1 1261 0 is_stmt 1
 1635 0082 7B69     		ldr	r3, [r7, #20]
 1636 0084 0133     		add	r3, r3, #1
 1637 0086 01D1     		bne	.L78
 1638              		.loc 1 1261 0 is_stmt 0 discriminator 1
 1639 0088 0123     		mov	r3, #1
 1640 008a 2BE0     		b	.L73
 1641              	.L78:
1262:.\lib_Fat/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1263:.\lib_Fat/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 1642              		.loc 1 1263 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 52


 1643 008c 1F23     		mov	r3, #31
 1644 008e FC18     		add	r4, r7, r3
 1645 0090 BA69     		ldr	r2, [r7, #24]
 1646 0092 BB68     		ldr	r3, [r7, #8]
 1647 0094 101C     		mov	r0, r2
 1648 0096 191C     		mov	r1, r3
 1649 0098 0022     		mov	r2, #0
 1650 009a FFF7FEFF 		bl	put_fat
 1651 009e 031C     		mov	r3, r0
 1652 00a0 2370     		strb	r3, [r4]
1264:.\lib_Fat/ff.c **** 			if (res != FR_OK) return res;
 1653              		.loc 1 1264 0
 1654 00a2 1F23     		mov	r3, #31
 1655 00a4 FB18     		add	r3, r7, r3
 1656 00a6 1B78     		ldrb	r3, [r3]
 1657 00a8 002B     		cmp	r3, #0
 1658 00aa 03D0     		beq	.L79
 1659              		.loc 1 1264 0 is_stmt 0 discriminator 1
 1660 00ac 1F23     		mov	r3, #31
 1661 00ae FB18     		add	r3, r7, r3
 1662 00b0 1B78     		ldrb	r3, [r3]
 1663 00b2 17E0     		b	.L73
 1664              	.L79:
1265:.\lib_Fat/ff.c **** 		}
1266:.\lib_Fat/ff.c **** 		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 1665              		.loc 1 1266 0 is_stmt 1
 1666 00b4 BB69     		ldr	r3, [r7, #24]
 1667 00b6 1B69     		ldr	r3, [r3, #16]
 1668 00b8 0133     		add	r3, r3, #1
 1669 00ba 0BD0     		beq	.L80
1267:.\lib_Fat/ff.c **** 			fs->free_clst++;
 1670              		.loc 1 1267 0
 1671 00bc BB69     		ldr	r3, [r7, #24]
 1672 00be 1B69     		ldr	r3, [r3, #16]
 1673 00c0 5A1C     		add	r2, r3, #1
 1674 00c2 BB69     		ldr	r3, [r7, #24]
 1675 00c4 1A61     		str	r2, [r3, #16]
1268:.\lib_Fat/ff.c **** 			fs->fsi_flag |= 1;
 1676              		.loc 1 1268 0
 1677 00c6 BB69     		ldr	r3, [r7, #24]
 1678 00c8 1B79     		ldrb	r3, [r3, #4]
 1679 00ca 0122     		mov	r2, #1
 1680 00cc 1343     		orr	r3, r2
 1681 00ce DAB2     		uxtb	r2, r3
 1682 00d0 BB69     		ldr	r3, [r7, #24]
 1683 00d2 1A71     		strb	r2, [r3, #4]
 1684              	.L80:
1269:.\lib_Fat/ff.c **** 		}
1270:.\lib_Fat/ff.c **** #if _FS_EXFAT || _USE_TRIM
1271:.\lib_Fat/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1272:.\lib_Fat/ff.c **** 			ecl = nxt;
1273:.\lib_Fat/ff.c **** 		} else {				/* End of contiguous cluster block */ 
1274:.\lib_Fat/ff.c **** #if _FS_EXFAT
1275:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1276:.\lib_Fat/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1277:.\lib_Fat/ff.c **** 				if (res != FR_OK) return res;
1278:.\lib_Fat/ff.c **** 			}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 53


1279:.\lib_Fat/ff.c **** #endif
1280:.\lib_Fat/ff.c **** #if _USE_TRIM
1281:.\lib_Fat/ff.c **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1282:.\lib_Fat/ff.c **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1283:.\lib_Fat/ff.c **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1284:.\lib_Fat/ff.c **** #endif
1285:.\lib_Fat/ff.c **** 			scl = ecl = nxt;
1286:.\lib_Fat/ff.c **** 		}
1287:.\lib_Fat/ff.c **** #endif
1288:.\lib_Fat/ff.c **** 		clst = nxt;					/* Next cluster */
 1685              		.loc 1 1288 0
 1686 00d4 7B69     		ldr	r3, [r7, #20]
 1687 00d6 BB60     		str	r3, [r7, #8]
1289:.\lib_Fat/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 1688              		.loc 1 1289 0
 1689 00d8 BB69     		ldr	r3, [r7, #24]
 1690 00da 5A69     		ldr	r2, [r3, #20]
 1691 00dc BB68     		ldr	r3, [r7, #8]
 1692 00de 9A42     		cmp	r2, r3
 1693 00e0 BED8     		bhi	.L74
 1694              	.L76:
1290:.\lib_Fat/ff.c **** 
1291:.\lib_Fat/ff.c **** #if _FS_EXFAT
1292:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1293:.\lib_Fat/ff.c **** 		if (pclst == 0) {	/* Does object have no chain? */
1294:.\lib_Fat/ff.c **** 			obj->stat = 0;		/* Change the object status 'initial' */
1295:.\lib_Fat/ff.c **** 		} else {
1296:.\lib_Fat/ff.c **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1297:.\lib_Fat/ff.c **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1298:.\lib_Fat/ff.c **** 			}
1299:.\lib_Fat/ff.c **** 		}
1300:.\lib_Fat/ff.c **** 	}
1301:.\lib_Fat/ff.c **** #endif
1302:.\lib_Fat/ff.c **** 	return FR_OK;
 1695              		.loc 1 1302 0
 1696 00e2 0023     		mov	r3, #0
 1697              	.L73:
1303:.\lib_Fat/ff.c **** }
 1698              		.loc 1 1303 0
 1699 00e4 181C     		mov	r0, r3
 1700 00e6 BD46     		mov	sp, r7
 1701 00e8 09B0     		add	sp, sp, #36
 1702              		@ sp needed
 1703 00ea 90BD     		pop	{r4, r7, pc}
 1704              		.cfi_endproc
 1705              	.LFE14:
 1706              		.size	remove_chain, .-remove_chain
 1707              		.section	.text.create_chain,"ax",%progbits
 1708              		.align	2
 1709              		.code	16
 1710              		.thumb_func
 1711              		.type	create_chain, %function
 1712              	create_chain:
 1713              	.LFB15:
1304:.\lib_Fat/ff.c **** 
1305:.\lib_Fat/ff.c **** 
1306:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 54


1307:.\lib_Fat/ff.c **** 
1308:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1309:.\lib_Fat/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1310:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1311:.\lib_Fat/ff.c **** static
1312:.\lib_Fat/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1313:.\lib_Fat/ff.c **** 	_FDID* obj,			/* Corresponding object */
1314:.\lib_Fat/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1315:.\lib_Fat/ff.c **** )
1316:.\lib_Fat/ff.c **** {
 1714              		.loc 1 1316 0
 1715              		.cfi_startproc
 1716 0000 90B5     		push	{r4, r7, lr}
 1717              		.cfi_def_cfa_offset 12
 1718              		.cfi_offset 4, -12
 1719              		.cfi_offset 7, -8
 1720              		.cfi_offset 14, -4
 1721 0002 89B0     		sub	sp, sp, #36
 1722              		.cfi_def_cfa_offset 48
 1723 0004 00AF     		add	r7, sp, #0
 1724              		.cfi_def_cfa_register 7
 1725 0006 7860     		str	r0, [r7, #4]
 1726 0008 3960     		str	r1, [r7]
1317:.\lib_Fat/ff.c **** 	DWORD cs, ncl, scl;
1318:.\lib_Fat/ff.c **** 	FRESULT res;
1319:.\lib_Fat/ff.c **** 	FATFS *fs = obj->fs;
 1727              		.loc 1 1319 0
 1728 000a 7B68     		ldr	r3, [r7, #4]
 1729 000c 1B68     		ldr	r3, [r3]
 1730 000e 3B61     		str	r3, [r7, #16]
1320:.\lib_Fat/ff.c **** 
1321:.\lib_Fat/ff.c **** 
1322:.\lib_Fat/ff.c **** 	if (clst == 0) {	/* Create a new chain */
 1731              		.loc 1 1322 0
 1732 0010 3B68     		ldr	r3, [r7]
 1733 0012 002B     		cmp	r3, #0
 1734 0014 0DD1     		bne	.L82
1323:.\lib_Fat/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start at */
 1735              		.loc 1 1323 0
 1736 0016 3B69     		ldr	r3, [r7, #16]
 1737 0018 DB68     		ldr	r3, [r3, #12]
 1738 001a BB61     		str	r3, [r7, #24]
1324:.\lib_Fat/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 1739              		.loc 1 1324 0
 1740 001c BB69     		ldr	r3, [r7, #24]
 1741 001e 002B     		cmp	r3, #0
 1742 0020 04D0     		beq	.L83
 1743              		.loc 1 1324 0 is_stmt 0 discriminator 2
 1744 0022 3B69     		ldr	r3, [r7, #16]
 1745 0024 5A69     		ldr	r2, [r3, #20]
 1746 0026 BB69     		ldr	r3, [r7, #24]
 1747 0028 9A42     		cmp	r2, r3
 1748 002a 1DD8     		bhi	.L85
 1749              	.L83:
 1750              		.loc 1 1324 0 discriminator 3
 1751 002c 0123     		mov	r3, #1
 1752 002e BB61     		str	r3, [r7, #24]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 55


 1753 0030 1AE0     		b	.L85
 1754              	.L82:
1325:.\lib_Fat/ff.c **** 	}
1326:.\lib_Fat/ff.c **** 	else {				/* Stretch current chain */
1327:.\lib_Fat/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
 1755              		.loc 1 1327 0 is_stmt 1
 1756 0032 7A68     		ldr	r2, [r7, #4]
 1757 0034 3B68     		ldr	r3, [r7]
 1758 0036 101C     		mov	r0, r2
 1759 0038 191C     		mov	r1, r3
 1760 003a FFF7FEFF 		bl	get_fat
 1761 003e 031C     		mov	r3, r0
 1762 0040 FB60     		str	r3, [r7, #12]
1328:.\lib_Fat/ff.c **** 		if (cs < 2) return 1;				/* Invalid value */
 1763              		.loc 1 1328 0
 1764 0042 FB68     		ldr	r3, [r7, #12]
 1765 0044 012B     		cmp	r3, #1
 1766 0046 01D8     		bhi	.L86
 1767              		.loc 1 1328 0 is_stmt 0 discriminator 1
 1768 0048 0123     		mov	r3, #1
 1769 004a 83E0     		b	.L87
 1770              	.L86:
1329:.\lib_Fat/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 1771              		.loc 1 1329 0 is_stmt 1
 1772 004c FB68     		ldr	r3, [r7, #12]
 1773 004e 0133     		add	r3, r3, #1
 1774 0050 01D1     		bne	.L88
 1775              		.loc 1 1329 0 is_stmt 0 discriminator 1
 1776 0052 FB68     		ldr	r3, [r7, #12]
 1777 0054 7EE0     		b	.L87
 1778              	.L88:
1330:.\lib_Fat/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1779              		.loc 1 1330 0 is_stmt 1
 1780 0056 3B69     		ldr	r3, [r7, #16]
 1781 0058 5A69     		ldr	r2, [r3, #20]
 1782 005a FB68     		ldr	r3, [r7, #12]
 1783 005c 9A42     		cmp	r2, r3
 1784 005e 01D9     		bls	.L89
 1785              		.loc 1 1330 0 is_stmt 0 discriminator 1
 1786 0060 FB68     		ldr	r3, [r7, #12]
 1787 0062 77E0     		b	.L87
 1788              	.L89:
1331:.\lib_Fat/ff.c **** 		scl = clst;
 1789              		.loc 1 1331 0 is_stmt 1
 1790 0064 3B68     		ldr	r3, [r7]
 1791 0066 BB61     		str	r3, [r7, #24]
 1792              	.L85:
1332:.\lib_Fat/ff.c **** 	}
1333:.\lib_Fat/ff.c **** 
1334:.\lib_Fat/ff.c **** #if _FS_EXFAT
1335:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
1336:.\lib_Fat/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1337:.\lib_Fat/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1338:.\lib_Fat/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1339:.\lib_Fat/ff.c **** 		if (res == FR_INT_ERR) return 1;
1340:.\lib_Fat/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1341:.\lib_Fat/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 56


1342:.\lib_Fat/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous chain' */
1343:.\lib_Fat/ff.c **** 		} else {									/* This is a stretched chain */
1344:.\lib_Fat/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1345:.\lib_Fat/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1346:.\lib_Fat/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1347:.\lib_Fat/ff.c **** 			}
1348:.\lib_Fat/ff.c **** 		}
1349:.\lib_Fat/ff.c **** 	} else
1350:.\lib_Fat/ff.c **** #endif
1351:.\lib_Fat/ff.c **** 	{	/* At the FAT12/16/32 */
1352:.\lib_Fat/ff.c **** 		ncl = scl;	/* Start cluster */
 1793              		.loc 1 1352 0
 1794 0068 BB69     		ldr	r3, [r7, #24]
 1795 006a FB61     		str	r3, [r7, #28]
 1796              	.L96:
1353:.\lib_Fat/ff.c **** 		for (;;) {
1354:.\lib_Fat/ff.c **** 			ncl++;							/* Next cluster */
 1797              		.loc 1 1354 0
 1798 006c FB69     		ldr	r3, [r7, #28]
 1799 006e 0133     		add	r3, r3, #1
 1800 0070 FB61     		str	r3, [r7, #28]
1355:.\lib_Fat/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 1801              		.loc 1 1355 0
 1802 0072 3B69     		ldr	r3, [r7, #16]
 1803 0074 5A69     		ldr	r2, [r3, #20]
 1804 0076 FB69     		ldr	r3, [r7, #28]
 1805 0078 9A42     		cmp	r2, r3
 1806 007a 07D8     		bhi	.L90
1356:.\lib_Fat/ff.c **** 				ncl = 2;
 1807              		.loc 1 1356 0
 1808 007c 0223     		mov	r3, #2
 1809 007e FB61     		str	r3, [r7, #28]
1357:.\lib_Fat/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
 1810              		.loc 1 1357 0
 1811 0080 FA69     		ldr	r2, [r7, #28]
 1812 0082 BB69     		ldr	r3, [r7, #24]
 1813 0084 9A42     		cmp	r2, r3
 1814 0086 01D9     		bls	.L90
 1815              		.loc 1 1357 0 is_stmt 0 discriminator 1
 1816 0088 0023     		mov	r3, #0
 1817 008a 63E0     		b	.L87
 1818              	.L90:
1358:.\lib_Fat/ff.c **** 			}
1359:.\lib_Fat/ff.c **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
 1819              		.loc 1 1359 0 is_stmt 1
 1820 008c 7A68     		ldr	r2, [r7, #4]
 1821 008e FB69     		ldr	r3, [r7, #28]
 1822 0090 101C     		mov	r0, r2
 1823 0092 191C     		mov	r1, r3
 1824 0094 FFF7FEFF 		bl	get_fat
 1825 0098 031C     		mov	r3, r0
 1826 009a FB60     		str	r3, [r7, #12]
1360:.\lib_Fat/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
 1827              		.loc 1 1360 0
 1828 009c FB68     		ldr	r3, [r7, #12]
 1829 009e 002B     		cmp	r3, #0
 1830 00a0 13D1     		bne	.L91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 57


 1831 00a2 C046     		mov	r8, r8
1361:.\lib_Fat/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1362:.\lib_Fat/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
1363:.\lib_Fat/ff.c **** 		}
1364:.\lib_Fat/ff.c **** 	}
1365:.\lib_Fat/ff.c **** 
1366:.\lib_Fat/ff.c **** 	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
1367:.\lib_Fat/ff.c **** 		res = FR_OK;						/* FAT does not need to be written */
1368:.\lib_Fat/ff.c **** 	} else {
1369:.\lib_Fat/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 1832              		.loc 1 1369 0
 1833 00a4 1723     		mov	r3, #23
 1834 00a6 FC18     		add	r4, r7, r3
 1835 00a8 3969     		ldr	r1, [r7, #16]
 1836 00aa FA69     		ldr	r2, [r7, #28]
 1837 00ac 0123     		mov	r3, #1
 1838 00ae 5B42     		neg	r3, r3
 1839 00b0 081C     		mov	r0, r1
 1840 00b2 111C     		mov	r1, r2
 1841 00b4 1A1C     		mov	r2, r3
 1842 00b6 FFF7FEFF 		bl	put_fat
 1843 00ba 031C     		mov	r3, r0
 1844 00bc 2370     		strb	r3, [r4]
1370:.\lib_Fat/ff.c **** 		if (res == FR_OK && clst) {
 1845              		.loc 1 1370 0
 1846 00be 1723     		mov	r3, #23
 1847 00c0 FB18     		add	r3, r7, r3
 1848 00c2 1B78     		ldrb	r3, [r3]
 1849 00c4 002B     		cmp	r3, #0
 1850 00c6 1ED1     		bne	.L97
 1851 00c8 0EE0     		b	.L103
 1852              	.L91:
1361:.\lib_Fat/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 1853              		.loc 1 1361 0
 1854 00ca FB68     		ldr	r3, [r7, #12]
 1855 00cc 012B     		cmp	r3, #1
 1856 00ce 02D0     		beq	.L93
1361:.\lib_Fat/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 1857              		.loc 1 1361 0 is_stmt 0 discriminator 2
 1858 00d0 FB68     		ldr	r3, [r7, #12]
 1859 00d2 0133     		add	r3, r3, #1
 1860 00d4 01D1     		bne	.L94
 1861              	.L93:
1361:.\lib_Fat/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 1862              		.loc 1 1361 0 discriminator 3
 1863 00d6 FB68     		ldr	r3, [r7, #12]
 1864 00d8 3CE0     		b	.L87
 1865              	.L94:
1362:.\lib_Fat/ff.c **** 		}
 1866              		.loc 1 1362 0 is_stmt 1
 1867 00da FA69     		ldr	r2, [r7, #28]
 1868 00dc BB69     		ldr	r3, [r7, #24]
 1869 00de 9A42     		cmp	r2, r3
 1870 00e0 01D1     		bne	.L95
1362:.\lib_Fat/ff.c **** 		}
 1871              		.loc 1 1362 0 is_stmt 0 discriminator 1
 1872 00e2 0023     		mov	r3, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 58


 1873 00e4 36E0     		b	.L87
 1874              	.L95:
1363:.\lib_Fat/ff.c **** 	}
 1875              		.loc 1 1363 0 is_stmt 1
 1876 00e6 C1E7     		b	.L96
 1877              	.L103:
 1878              		.loc 1 1370 0 discriminator 1
 1879 00e8 3B68     		ldr	r3, [r7]
 1880 00ea 002B     		cmp	r3, #0
 1881 00ec 0BD0     		beq	.L97
1371:.\lib_Fat/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 1882              		.loc 1 1371 0
 1883 00ee 1723     		mov	r3, #23
 1884 00f0 FC18     		add	r4, r7, r3
 1885 00f2 3969     		ldr	r1, [r7, #16]
 1886 00f4 3A68     		ldr	r2, [r7]
 1887 00f6 FB69     		ldr	r3, [r7, #28]
 1888 00f8 081C     		mov	r0, r1
 1889 00fa 111C     		mov	r1, r2
 1890 00fc 1A1C     		mov	r2, r3
 1891 00fe FFF7FEFF 		bl	put_fat
 1892 0102 031C     		mov	r3, r0
 1893 0104 2370     		strb	r3, [r4]
 1894              	.L97:
1372:.\lib_Fat/ff.c **** 		}
1373:.\lib_Fat/ff.c **** 	}
1374:.\lib_Fat/ff.c **** 
1375:.\lib_Fat/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 1895              		.loc 1 1375 0
 1896 0106 1723     		mov	r3, #23
 1897 0108 FB18     		add	r3, r7, r3
 1898 010a 1B78     		ldrb	r3, [r3]
 1899 010c 002B     		cmp	r3, #0
 1900 010e 16D1     		bne	.L98
1376:.\lib_Fat/ff.c **** 		fs->last_clst = ncl;
 1901              		.loc 1 1376 0
 1902 0110 3B69     		ldr	r3, [r7, #16]
 1903 0112 FA69     		ldr	r2, [r7, #28]
 1904 0114 DA60     		str	r2, [r3, #12]
1377:.\lib_Fat/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 1905              		.loc 1 1377 0
 1906 0116 3B69     		ldr	r3, [r7, #16]
 1907 0118 1A69     		ldr	r2, [r3, #16]
 1908 011a 3B69     		ldr	r3, [r7, #16]
 1909 011c 5B69     		ldr	r3, [r3, #20]
 1910 011e 023B     		sub	r3, r3, #2
 1911 0120 9A42     		cmp	r2, r3
 1912 0122 04D2     		bcs	.L99
 1913              		.loc 1 1377 0 is_stmt 0 discriminator 1
 1914 0124 3B69     		ldr	r3, [r7, #16]
 1915 0126 1B69     		ldr	r3, [r3, #16]
 1916 0128 5A1E     		sub	r2, r3, #1
 1917 012a 3B69     		ldr	r3, [r7, #16]
 1918 012c 1A61     		str	r2, [r3, #16]
 1919              	.L99:
1378:.\lib_Fat/ff.c **** 		fs->fsi_flag |= 1;
 1920              		.loc 1 1378 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 59


 1921 012e 3B69     		ldr	r3, [r7, #16]
 1922 0130 1B79     		ldrb	r3, [r3, #4]
 1923 0132 0122     		mov	r2, #1
 1924 0134 1343     		orr	r3, r2
 1925 0136 DAB2     		uxtb	r2, r3
 1926 0138 3B69     		ldr	r3, [r7, #16]
 1927 013a 1A71     		strb	r2, [r3, #4]
 1928 013c 09E0     		b	.L100
 1929              	.L98:
1379:.\lib_Fat/ff.c **** 	} else {
1380:.\lib_Fat/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 1930              		.loc 1 1380 0
 1931 013e 1723     		mov	r3, #23
 1932 0140 FB18     		add	r3, r7, r3
 1933 0142 1B78     		ldrb	r3, [r3]
 1934 0144 012B     		cmp	r3, #1
 1935 0146 02D1     		bne	.L101
 1936              		.loc 1 1380 0 is_stmt 0 discriminator 1
 1937 0148 0123     		mov	r3, #1
 1938 014a 5B42     		neg	r3, r3
 1939 014c 00E0     		b	.L102
 1940              	.L101:
 1941              		.loc 1 1380 0 discriminator 2
 1942 014e 0123     		mov	r3, #1
 1943              	.L102:
 1944              		.loc 1 1380 0 discriminator 4
 1945 0150 FB61     		str	r3, [r7, #28]
 1946              	.L100:
1381:.\lib_Fat/ff.c **** 	}
1382:.\lib_Fat/ff.c **** 
1383:.\lib_Fat/ff.c **** 	return ncl;		/* Return new cluster number or error status */
 1947              		.loc 1 1383 0 is_stmt 1
 1948 0152 FB69     		ldr	r3, [r7, #28]
 1949              	.L87:
1384:.\lib_Fat/ff.c **** }
 1950              		.loc 1 1384 0
 1951 0154 181C     		mov	r0, r3
 1952 0156 BD46     		mov	sp, r7
 1953 0158 09B0     		add	sp, sp, #36
 1954              		@ sp needed
 1955 015a 90BD     		pop	{r4, r7, pc}
 1956              		.cfi_endproc
 1957              	.LFE15:
 1958              		.size	create_chain, .-create_chain
 1959              		.section	.text.dir_sdi,"ax",%progbits
 1960              		.align	2
 1961              		.code	16
 1962              		.thumb_func
 1963              		.type	dir_sdi, %function
 1964              	dir_sdi:
 1965              	.LFB16:
1385:.\lib_Fat/ff.c **** 
1386:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
1387:.\lib_Fat/ff.c **** 
1388:.\lib_Fat/ff.c **** 
1389:.\lib_Fat/ff.c **** 
1390:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 60


1391:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
1392:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1393:.\lib_Fat/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1394:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1395:.\lib_Fat/ff.c **** 
1396:.\lib_Fat/ff.c **** static
1397:.\lib_Fat/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1398:.\lib_Fat/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1399:.\lib_Fat/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1400:.\lib_Fat/ff.c **** )
1401:.\lib_Fat/ff.c **** {
1402:.\lib_Fat/ff.c **** 	DWORD cl, ncl, *tbl;
1403:.\lib_Fat/ff.c **** 	FATFS *fs = fp->obj.fs;
1404:.\lib_Fat/ff.c **** 
1405:.\lib_Fat/ff.c **** 
1406:.\lib_Fat/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1407:.\lib_Fat/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1408:.\lib_Fat/ff.c **** 	for (;;) {
1409:.\lib_Fat/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1410:.\lib_Fat/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1411:.\lib_Fat/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1412:.\lib_Fat/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1413:.\lib_Fat/ff.c **** 	}
1414:.\lib_Fat/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1415:.\lib_Fat/ff.c **** }
1416:.\lib_Fat/ff.c **** 
1417:.\lib_Fat/ff.c **** #endif	/* _USE_FASTSEEK */
1418:.\lib_Fat/ff.c **** 
1419:.\lib_Fat/ff.c **** 
1420:.\lib_Fat/ff.c **** 
1421:.\lib_Fat/ff.c **** 
1422:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1423:.\lib_Fat/ff.c **** /* Directory handling - Set directory index                              */
1424:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1425:.\lib_Fat/ff.c **** 
1426:.\lib_Fat/ff.c **** static
1427:.\lib_Fat/ff.c **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1428:.\lib_Fat/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1429:.\lib_Fat/ff.c **** 	DWORD ofs		/* Offset of directory table */
1430:.\lib_Fat/ff.c **** )
1431:.\lib_Fat/ff.c **** {
 1966              		.loc 1 1431 0
 1967              		.cfi_startproc
 1968 0000 80B5     		push	{r7, lr}
 1969              		.cfi_def_cfa_offset 8
 1970              		.cfi_offset 7, -8
 1971              		.cfi_offset 14, -4
 1972 0002 86B0     		sub	sp, sp, #24
 1973              		.cfi_def_cfa_offset 32
 1974 0004 00AF     		add	r7, sp, #0
 1975              		.cfi_def_cfa_register 7
 1976 0006 7860     		str	r0, [r7, #4]
 1977 0008 3960     		str	r1, [r7]
1432:.\lib_Fat/ff.c **** 	DWORD csz, clst;
1433:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 1978              		.loc 1 1433 0
 1979 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 61


 1980 000c 1B68     		ldr	r3, [r3]
 1981 000e 3B61     		str	r3, [r7, #16]
1434:.\lib_Fat/ff.c **** 
1435:.\lib_Fat/ff.c **** 
1436:.\lib_Fat/ff.c **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
 1982              		.loc 1 1436 0
 1983 0010 3B68     		ldr	r3, [r7]
 1984 0012 394A     		ldr	r2, .L118
 1985 0014 9342     		cmp	r3, r2
 1986 0016 03D8     		bhi	.L105
 1987              		.loc 1 1436 0 is_stmt 0 discriminator 1
 1988 0018 3B68     		ldr	r3, [r7]
 1989 001a 1F22     		mov	r2, #31
 1990 001c 1340     		and	r3, r2
 1991 001e 01D0     		beq	.L106
 1992              	.L105:
1437:.\lib_Fat/ff.c **** 		return FR_INT_ERR;
 1993              		.loc 1 1437 0 is_stmt 1
 1994 0020 0223     		mov	r3, #2
 1995 0022 65E0     		b	.L107
 1996              	.L106:
1438:.\lib_Fat/ff.c **** 	}
1439:.\lib_Fat/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
 1997              		.loc 1 1439 0
 1998 0024 7B68     		ldr	r3, [r7, #4]
 1999 0026 3A68     		ldr	r2, [r7]
 2000 0028 1A61     		str	r2, [r3, #16]
1440:.\lib_Fat/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2001              		.loc 1 1440 0
 2002 002a 7B68     		ldr	r3, [r7, #4]
 2003 002c 9B68     		ldr	r3, [r3, #8]
 2004 002e 7B61     		str	r3, [r7, #20]
1441:.\lib_Fat/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2005              		.loc 1 1441 0
 2006 0030 7B69     		ldr	r3, [r7, #20]
 2007 0032 002B     		cmp	r3, #0
 2008 0034 06D1     		bne	.L108
 2009              		.loc 1 1441 0 is_stmt 0 discriminator 1
 2010 0036 3B69     		ldr	r3, [r7, #16]
 2011 0038 1B78     		ldrb	r3, [r3]
 2012 003a 022B     		cmp	r3, #2
 2013 003c 02D9     		bls	.L108
1442:.\lib_Fat/ff.c **** 		clst = fs->dirbase;
 2014              		.loc 1 1442 0 is_stmt 1
 2015 003e 3B69     		ldr	r3, [r7, #16]
 2016 0040 5B6A     		ldr	r3, [r3, #36]
 2017 0042 7B61     		str	r3, [r7, #20]
 2018              	.L108:
1443:.\lib_Fat/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1444:.\lib_Fat/ff.c **** 	}
1445:.\lib_Fat/ff.c **** 
1446:.\lib_Fat/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 2019              		.loc 1 1446 0
 2020 0044 7B69     		ldr	r3, [r7, #20]
 2021 0046 002B     		cmp	r3, #0
 2022 0048 0CD1     		bne	.L109
1447:.\lib_Fat/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 62


 2023              		.loc 1 1447 0
 2024 004a 3B68     		ldr	r3, [r7]
 2025 004c 5B09     		lsr	r3, r3, #5
 2026 004e 3A69     		ldr	r2, [r7, #16]
 2027 0050 1289     		ldrh	r2, [r2, #8]
 2028 0052 9342     		cmp	r3, r2
 2029 0054 01D3     		bcc	.L110
 2030              		.loc 1 1447 0 is_stmt 0 discriminator 1
 2031 0056 0223     		mov	r3, #2
 2032 0058 4AE0     		b	.L107
 2033              	.L110:
1448:.\lib_Fat/ff.c **** 		dp->sect = fs->dirbase;
 2034              		.loc 1 1448 0 is_stmt 1
 2035 005a 3B69     		ldr	r3, [r7, #16]
 2036 005c 5A6A     		ldr	r2, [r3, #36]
 2037 005e 7B68     		ldr	r3, [r7, #4]
 2038 0060 9A61     		str	r2, [r3, #24]
 2039 0062 2CE0     		b	.L111
 2040              	.L109:
1449:.\lib_Fat/ff.c **** 
1450:.\lib_Fat/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1451:.\lib_Fat/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 2041              		.loc 1 1451 0
 2042 0064 3B69     		ldr	r3, [r7, #16]
 2043 0066 5B89     		ldrh	r3, [r3, #10]
 2044 0068 5B02     		lsl	r3, r3, #9
 2045 006a FB60     		str	r3, [r7, #12]
1452:.\lib_Fat/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2046              		.loc 1 1452 0
 2047 006c 1AE0     		b	.L112
 2048              	.L116:
1453:.\lib_Fat/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2049              		.loc 1 1453 0
 2050 006e 7A68     		ldr	r2, [r7, #4]
 2051 0070 7B69     		ldr	r3, [r7, #20]
 2052 0072 101C     		mov	r0, r2
 2053 0074 191C     		mov	r1, r3
 2054 0076 FFF7FEFF 		bl	get_fat
 2055 007a 031C     		mov	r3, r0
 2056 007c 7B61     		str	r3, [r7, #20]
1454:.\lib_Fat/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2057              		.loc 1 1454 0
 2058 007e 7B69     		ldr	r3, [r7, #20]
 2059 0080 0133     		add	r3, r3, #1
 2060 0082 01D1     		bne	.L113
 2061              		.loc 1 1454 0 is_stmt 0 discriminator 1
 2062 0084 0123     		mov	r3, #1
 2063 0086 33E0     		b	.L107
 2064              	.L113:
1455:.\lib_Fat/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2065              		.loc 1 1455 0 is_stmt 1
 2066 0088 7B69     		ldr	r3, [r7, #20]
 2067 008a 012B     		cmp	r3, #1
 2068 008c 04D9     		bls	.L114
 2069              		.loc 1 1455 0 is_stmt 0 discriminator 2
 2070 008e 3B69     		ldr	r3, [r7, #16]
 2071 0090 5A69     		ldr	r2, [r3, #20]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 63


 2072 0092 7B69     		ldr	r3, [r7, #20]
 2073 0094 9A42     		cmp	r2, r3
 2074 0096 01D8     		bhi	.L115
 2075              	.L114:
 2076              		.loc 1 1455 0 discriminator 3
 2077 0098 0223     		mov	r3, #2
 2078 009a 29E0     		b	.L107
 2079              	.L115:
1456:.\lib_Fat/ff.c **** 			ofs -= csz;
 2080              		.loc 1 1456 0 is_stmt 1
 2081 009c 3A68     		ldr	r2, [r7]
 2082 009e FB68     		ldr	r3, [r7, #12]
 2083 00a0 D31A     		sub	r3, r2, r3
 2084 00a2 3B60     		str	r3, [r7]
 2085              	.L112:
1452:.\lib_Fat/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2086              		.loc 1 1452 0
 2087 00a4 3A68     		ldr	r2, [r7]
 2088 00a6 FB68     		ldr	r3, [r7, #12]
 2089 00a8 9A42     		cmp	r2, r3
 2090 00aa E0D2     		bcs	.L116
1457:.\lib_Fat/ff.c **** 		}
1458:.\lib_Fat/ff.c **** 		dp->sect = clust2sect(fs, clst);
 2091              		.loc 1 1458 0
 2092 00ac 3A69     		ldr	r2, [r7, #16]
 2093 00ae 7B69     		ldr	r3, [r7, #20]
 2094 00b0 101C     		mov	r0, r2
 2095 00b2 191C     		mov	r1, r3
 2096 00b4 FFF7FEFF 		bl	clust2sect
 2097 00b8 021C     		mov	r2, r0
 2098 00ba 7B68     		ldr	r3, [r7, #4]
 2099 00bc 9A61     		str	r2, [r3, #24]
 2100              	.L111:
1459:.\lib_Fat/ff.c **** 	}
1460:.\lib_Fat/ff.c **** 	dp->clust = clst;					/* Current cluster# */
 2101              		.loc 1 1460 0
 2102 00be 7B68     		ldr	r3, [r7, #4]
 2103 00c0 7A69     		ldr	r2, [r7, #20]
 2104 00c2 5A61     		str	r2, [r3, #20]
1461:.\lib_Fat/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
 2105              		.loc 1 1461 0
 2106 00c4 7B68     		ldr	r3, [r7, #4]
 2107 00c6 9B69     		ldr	r3, [r3, #24]
 2108 00c8 002B     		cmp	r3, #0
 2109 00ca 01D1     		bne	.L117
 2110              		.loc 1 1461 0 is_stmt 0 discriminator 1
 2111 00cc 0223     		mov	r3, #2
 2112 00ce 0FE0     		b	.L107
 2113              	.L117:
1462:.\lib_Fat/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2114              		.loc 1 1462 0 is_stmt 1
 2115 00d0 7B68     		ldr	r3, [r7, #4]
 2116 00d2 9A69     		ldr	r2, [r3, #24]
 2117 00d4 3B68     		ldr	r3, [r7]
 2118 00d6 5B0A     		lsr	r3, r3, #9
 2119 00d8 D218     		add	r2, r2, r3
 2120 00da 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 64


 2121 00dc 9A61     		str	r2, [r3, #24]
1463:.\lib_Fat/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2122              		.loc 1 1463 0
 2123 00de 3B68     		ldr	r3, [r7]
 2124 00e0 DB05     		lsl	r3, r3, #23
 2125 00e2 DB0D     		lsr	r3, r3, #23
 2126 00e4 3033     		add	r3, r3, #48
 2127 00e6 3A69     		ldr	r2, [r7, #16]
 2128 00e8 D218     		add	r2, r2, r3
 2129 00ea 7B68     		ldr	r3, [r7, #4]
 2130 00ec DA61     		str	r2, [r3, #28]
1464:.\lib_Fat/ff.c **** 
1465:.\lib_Fat/ff.c **** 	return FR_OK;
 2131              		.loc 1 1465 0
 2132 00ee 0023     		mov	r3, #0
 2133              	.L107:
1466:.\lib_Fat/ff.c **** }
 2134              		.loc 1 1466 0
 2135 00f0 181C     		mov	r0, r3
 2136 00f2 BD46     		mov	sp, r7
 2137 00f4 06B0     		add	sp, sp, #24
 2138              		@ sp needed
 2139 00f6 80BD     		pop	{r7, pc}
 2140              	.L119:
 2141              		.align	2
 2142              	.L118:
 2143 00f8 FFFF1F00 		.word	2097151
 2144              		.cfi_endproc
 2145              	.LFE16:
 2146              		.size	dir_sdi, .-dir_sdi
 2147              		.section	.text.dir_next,"ax",%progbits
 2148              		.align	2
 2149              		.code	16
 2150              		.thumb_func
 2151              		.type	dir_next, %function
 2152              	dir_next:
 2153              	.LFB17:
1467:.\lib_Fat/ff.c **** 
1468:.\lib_Fat/ff.c **** 
1469:.\lib_Fat/ff.c **** 
1470:.\lib_Fat/ff.c **** 
1471:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1472:.\lib_Fat/ff.c **** /* Directory handling - Move directory table index next                  */
1473:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1474:.\lib_Fat/ff.c **** 
1475:.\lib_Fat/ff.c **** static
1476:.\lib_Fat/ff.c **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1477:.\lib_Fat/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1478:.\lib_Fat/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1479:.\lib_Fat/ff.c **** )
1480:.\lib_Fat/ff.c **** {
 2154              		.loc 1 1480 0
 2155              		.cfi_startproc
 2156 0000 80B5     		push	{r7, lr}
 2157              		.cfi_def_cfa_offset 8
 2158              		.cfi_offset 7, -8
 2159              		.cfi_offset 14, -4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 65


 2160 0002 86B0     		sub	sp, sp, #24
 2161              		.cfi_def_cfa_offset 32
 2162 0004 00AF     		add	r7, sp, #0
 2163              		.cfi_def_cfa_register 7
 2164 0006 7860     		str	r0, [r7, #4]
 2165 0008 3960     		str	r1, [r7]
1481:.\lib_Fat/ff.c **** 	DWORD ofs, clst;
1482:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 2166              		.loc 1 1482 0
 2167 000a 7B68     		ldr	r3, [r7, #4]
 2168 000c 1B68     		ldr	r3, [r3]
 2169 000e FB60     		str	r3, [r7, #12]
1483:.\lib_Fat/ff.c **** #if !_FS_READONLY
1484:.\lib_Fat/ff.c **** 	UINT n;
1485:.\lib_Fat/ff.c **** #endif
1486:.\lib_Fat/ff.c **** 
1487:.\lib_Fat/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
 2170              		.loc 1 1487 0
 2171 0010 7B68     		ldr	r3, [r7, #4]
 2172 0012 1B69     		ldr	r3, [r3, #16]
 2173 0014 2033     		add	r3, r3, #32
 2174 0016 BB60     		str	r3, [r7, #8]
1488:.\lib_Fat/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 2175              		.loc 1 1488 0
 2176 0018 7B68     		ldr	r3, [r7, #4]
 2177 001a 9B69     		ldr	r3, [r3, #24]
 2178 001c 002B     		cmp	r3, #0
 2179 001e 03D0     		beq	.L121
 2180              		.loc 1 1488 0 is_stmt 0 discriminator 2
 2181 0020 BB68     		ldr	r3, [r7, #8]
 2182 0022 5C4A     		ldr	r2, .L137
 2183 0024 9342     		cmp	r3, r2
 2184 0026 01D9     		bls	.L122
 2185              	.L121:
 2186              		.loc 1 1488 0 discriminator 3
 2187 0028 0423     		mov	r3, #4
 2188 002a AEE0     		b	.L123
 2189              	.L122:
1489:.\lib_Fat/ff.c **** 
1490:.\lib_Fat/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 2190              		.loc 1 1490 0 is_stmt 1
 2191 002c BB68     		ldr	r3, [r7, #8]
 2192 002e DB05     		lsl	r3, r3, #23
 2193 0030 DB0D     		lsr	r3, r3, #23
 2194 0032 00D0     		beq	.LCB1879
 2195 0034 9DE0     		b	.L124	@long jump
 2196              	.LCB1879:
1491:.\lib_Fat/ff.c **** 		dp->sect++;				/* Next sector */
 2197              		.loc 1 1491 0
 2198 0036 7B68     		ldr	r3, [r7, #4]
 2199 0038 9B69     		ldr	r3, [r3, #24]
 2200 003a 5A1C     		add	r2, r3, #1
 2201 003c 7B68     		ldr	r3, [r7, #4]
 2202 003e 9A61     		str	r2, [r3, #24]
1492:.\lib_Fat/ff.c **** 
1493:.\lib_Fat/ff.c **** 		if (!dp->clust) {		/* Static table */
 2203              		.loc 1 1493 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 66


 2204 0040 7B68     		ldr	r3, [r7, #4]
 2205 0042 5B69     		ldr	r3, [r3, #20]
 2206 0044 002B     		cmp	r3, #0
 2207 0046 0BD1     		bne	.L125
1494:.\lib_Fat/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 2208              		.loc 1 1494 0
 2209 0048 BB68     		ldr	r3, [r7, #8]
 2210 004a 5B09     		lsr	r3, r3, #5
 2211 004c FA68     		ldr	r2, [r7, #12]
 2212 004e 1289     		ldrh	r2, [r2, #8]
 2213 0050 9342     		cmp	r3, r2
 2214 0052 00D2     		bcs	.LCB1894
 2215 0054 8DE0     		b	.L124	@long jump
 2216              	.LCB1894:
1495:.\lib_Fat/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 2217              		.loc 1 1495 0
 2218 0056 7B68     		ldr	r3, [r7, #4]
 2219 0058 0022     		mov	r2, #0
 2220 005a 9A61     		str	r2, [r3, #24]
 2221 005c 0423     		mov	r3, #4
 2222 005e 94E0     		b	.L123
 2223              	.L125:
1496:.\lib_Fat/ff.c **** 			}
1497:.\lib_Fat/ff.c **** 		}
1498:.\lib_Fat/ff.c **** 		else {					/* Dynamic table */
1499:.\lib_Fat/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 2224              		.loc 1 1499 0
 2225 0060 BB68     		ldr	r3, [r7, #8]
 2226 0062 5B0A     		lsr	r3, r3, #9
 2227 0064 FA68     		ldr	r2, [r7, #12]
 2228 0066 5289     		ldrh	r2, [r2, #10]
 2229 0068 013A     		sub	r2, r2, #1
 2230 006a 1340     		and	r3, r2
 2231 006c 00D0     		beq	.LCB1910
 2232 006e 80E0     		b	.L124	@long jump
 2233              	.LCB1910:
1500:.\lib_Fat/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 2234              		.loc 1 1500 0
 2235 0070 7A68     		ldr	r2, [r7, #4]
 2236 0072 7B68     		ldr	r3, [r7, #4]
 2237 0074 5B69     		ldr	r3, [r3, #20]
 2238 0076 101C     		mov	r0, r2
 2239 0078 191C     		mov	r1, r3
 2240 007a FFF7FEFF 		bl	get_fat
 2241 007e 031C     		mov	r3, r0
 2242 0080 7B61     		str	r3, [r7, #20]
1501:.\lib_Fat/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 2243              		.loc 1 1501 0
 2244 0082 7B69     		ldr	r3, [r7, #20]
 2245 0084 012B     		cmp	r3, #1
 2246 0086 01D8     		bhi	.L126
 2247              		.loc 1 1501 0 is_stmt 0 discriminator 1
 2248 0088 0223     		mov	r3, #2
 2249 008a 7EE0     		b	.L123
 2250              	.L126:
1502:.\lib_Fat/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 2251              		.loc 1 1502 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 67


 2252 008c 7B69     		ldr	r3, [r7, #20]
 2253 008e 0133     		add	r3, r3, #1
 2254 0090 01D1     		bne	.L127
 2255              		.loc 1 1502 0 is_stmt 0 discriminator 1
 2256 0092 0123     		mov	r3, #1
 2257 0094 79E0     		b	.L123
 2258              	.L127:
1503:.\lib_Fat/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 2259              		.loc 1 1503 0 is_stmt 1
 2260 0096 FB68     		ldr	r3, [r7, #12]
 2261 0098 5A69     		ldr	r2, [r3, #20]
 2262 009a 7B69     		ldr	r3, [r7, #20]
 2263 009c 9A42     		cmp	r2, r3
 2264 009e 5CD8     		bhi	.L128
1504:.\lib_Fat/ff.c **** #if !_FS_READONLY
1505:.\lib_Fat/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
 2265              		.loc 1 1505 0
 2266 00a0 3B68     		ldr	r3, [r7]
 2267 00a2 002B     		cmp	r3, #0
 2268 00a4 04D1     		bne	.L129
1506:.\lib_Fat/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 2269              		.loc 1 1506 0
 2270 00a6 7B68     		ldr	r3, [r7, #4]
 2271 00a8 0022     		mov	r2, #0
 2272 00aa 9A61     		str	r2, [r3, #24]
 2273 00ac 0423     		mov	r3, #4
 2274 00ae 6CE0     		b	.L123
 2275              	.L129:
1507:.\lib_Fat/ff.c **** 					}
1508:.\lib_Fat/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 2276              		.loc 1 1508 0
 2277 00b0 7A68     		ldr	r2, [r7, #4]
 2278 00b2 7B68     		ldr	r3, [r7, #4]
 2279 00b4 5B69     		ldr	r3, [r3, #20]
 2280 00b6 101C     		mov	r0, r2
 2281 00b8 191C     		mov	r1, r3
 2282 00ba FFF7FEFF 		bl	create_chain
 2283 00be 031C     		mov	r3, r0
 2284 00c0 7B61     		str	r3, [r7, #20]
1509:.\lib_Fat/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2285              		.loc 1 1509 0
 2286 00c2 7B69     		ldr	r3, [r7, #20]
 2287 00c4 002B     		cmp	r3, #0
 2288 00c6 01D1     		bne	.L130
 2289              		.loc 1 1509 0 is_stmt 0 discriminator 1
 2290 00c8 0723     		mov	r3, #7
 2291 00ca 5EE0     		b	.L123
 2292              	.L130:
1510:.\lib_Fat/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 2293              		.loc 1 1510 0 is_stmt 1
 2294 00cc 7B69     		ldr	r3, [r7, #20]
 2295 00ce 012B     		cmp	r3, #1
 2296 00d0 01D1     		bne	.L131
 2297              		.loc 1 1510 0 is_stmt 0 discriminator 1
 2298 00d2 0223     		mov	r3, #2
 2299 00d4 59E0     		b	.L123
 2300              	.L131:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 68


1511:.\lib_Fat/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2301              		.loc 1 1511 0 is_stmt 1
 2302 00d6 7B69     		ldr	r3, [r7, #20]
 2303 00d8 0133     		add	r3, r3, #1
 2304 00da 01D1     		bne	.L132
 2305              		.loc 1 1511 0 is_stmt 0 discriminator 1
 2306 00dc 0123     		mov	r3, #1
 2307 00de 54E0     		b	.L123
 2308              	.L132:
1512:.\lib_Fat/ff.c **** 					/* Clean-up the stretched table */
1513:.\lib_Fat/ff.c **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1514:.\lib_Fat/ff.c **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 2309              		.loc 1 1514 0 is_stmt 1
 2310 00e0 FB68     		ldr	r3, [r7, #12]
 2311 00e2 181C     		mov	r0, r3
 2312 00e4 FFF7FEFF 		bl	sync_window
 2313 00e8 031E     		sub	r3, r0, #0
 2314 00ea 01D0     		beq	.L133
 2315              		.loc 1 1514 0 is_stmt 0 discriminator 1
 2316 00ec 0123     		mov	r3, #1
 2317 00ee 4CE0     		b	.L123
 2318              	.L133:
1515:.\lib_Fat/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 2319              		.loc 1 1515 0 is_stmt 1
 2320 00f0 FB68     		ldr	r3, [r7, #12]
 2321 00f2 3033     		add	r3, r3, #48
 2322 00f4 1A1C     		mov	r2, r3
 2323 00f6 8023     		mov	r3, #128
 2324 00f8 9B00     		lsl	r3, r3, #2
 2325 00fa 101C     		mov	r0, r2
 2326 00fc 0021     		mov	r1, #0
 2327 00fe 1A1C     		mov	r2, r3
 2328 0100 FFF7FEFF 		bl	mem_set
1516:.\lib_Fat/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 2329              		.loc 1 1516 0
 2330 0104 0023     		mov	r3, #0
 2331 0106 3B61     		str	r3, [r7, #16]
 2332 0108 FA68     		ldr	r2, [r7, #12]
 2333 010a 7B69     		ldr	r3, [r7, #20]
 2334 010c 101C     		mov	r0, r2
 2335 010e 191C     		mov	r1, r3
 2336 0110 FFF7FEFF 		bl	clust2sect
 2337 0114 021C     		mov	r2, r0
 2338 0116 FB68     		ldr	r3, [r7, #12]
 2339 0118 DA62     		str	r2, [r3, #44]
 2340 011a 12E0     		b	.L134
 2341              	.L136:
1517:.\lib_Fat/ff.c **** 						fs->wflag = 1;
 2342              		.loc 1 1517 0
 2343 011c FB68     		ldr	r3, [r7, #12]
 2344 011e 0122     		mov	r2, #1
 2345 0120 DA70     		strb	r2, [r3, #3]
1518:.\lib_Fat/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 2346              		.loc 1 1518 0
 2347 0122 FB68     		ldr	r3, [r7, #12]
 2348 0124 181C     		mov	r0, r3
 2349 0126 FFF7FEFF 		bl	sync_window
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 69


 2350 012a 031E     		sub	r3, r0, #0
 2351 012c 01D0     		beq	.L135
 2352              		.loc 1 1518 0 is_stmt 0 discriminator 1
 2353 012e 0123     		mov	r3, #1
 2354 0130 2BE0     		b	.L123
 2355              	.L135:
1516:.\lib_Fat/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 2356              		.loc 1 1516 0 is_stmt 1 discriminator 2
 2357 0132 3B69     		ldr	r3, [r7, #16]
 2358 0134 0133     		add	r3, r3, #1
 2359 0136 3B61     		str	r3, [r7, #16]
 2360 0138 FB68     		ldr	r3, [r7, #12]
 2361 013a DB6A     		ldr	r3, [r3, #44]
 2362 013c 5A1C     		add	r2, r3, #1
 2363 013e FB68     		ldr	r3, [r7, #12]
 2364 0140 DA62     		str	r2, [r3, #44]
 2365              	.L134:
1516:.\lib_Fat/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 2366              		.loc 1 1516 0 is_stmt 0 discriminator 1
 2367 0142 FB68     		ldr	r3, [r7, #12]
 2368 0144 5B89     		ldrh	r3, [r3, #10]
 2369 0146 1A1E     		sub	r2, r3, #0
 2370 0148 3B69     		ldr	r3, [r7, #16]
 2371 014a 9A42     		cmp	r2, r3
 2372 014c E6D8     		bhi	.L136
1519:.\lib_Fat/ff.c **** 					}
1520:.\lib_Fat/ff.c **** 					fs->winsect -= n;							/* Restore window offset */
 2373              		.loc 1 1520 0 is_stmt 1
 2374 014e FB68     		ldr	r3, [r7, #12]
 2375 0150 DA6A     		ldr	r2, [r3, #44]
 2376 0152 3B69     		ldr	r3, [r7, #16]
 2377 0154 D21A     		sub	r2, r2, r3
 2378 0156 FB68     		ldr	r3, [r7, #12]
 2379 0158 DA62     		str	r2, [r3, #44]
 2380              	.L128:
1521:.\lib_Fat/ff.c **** #else
1522:.\lib_Fat/ff.c **** 					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
1523:.\lib_Fat/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1524:.\lib_Fat/ff.c **** #endif
1525:.\lib_Fat/ff.c **** 				}
1526:.\lib_Fat/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
 2381              		.loc 1 1526 0
 2382 015a 7B68     		ldr	r3, [r7, #4]
 2383 015c 7A69     		ldr	r2, [r7, #20]
 2384 015e 5A61     		str	r2, [r3, #20]
1527:.\lib_Fat/ff.c **** 				dp->sect = clust2sect(fs, clst);
 2385              		.loc 1 1527 0
 2386 0160 FA68     		ldr	r2, [r7, #12]
 2387 0162 7B69     		ldr	r3, [r7, #20]
 2388 0164 101C     		mov	r0, r2
 2389 0166 191C     		mov	r1, r3
 2390 0168 FFF7FEFF 		bl	clust2sect
 2391 016c 021C     		mov	r2, r0
 2392 016e 7B68     		ldr	r3, [r7, #4]
 2393 0170 9A61     		str	r2, [r3, #24]
 2394              	.L124:
1528:.\lib_Fat/ff.c **** 			}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 70


1529:.\lib_Fat/ff.c **** 		}
1530:.\lib_Fat/ff.c **** 	}
1531:.\lib_Fat/ff.c **** 	dp->dptr = ofs;						/* Current entry */
 2395              		.loc 1 1531 0
 2396 0172 7B68     		ldr	r3, [r7, #4]
 2397 0174 BA68     		ldr	r2, [r7, #8]
 2398 0176 1A61     		str	r2, [r3, #16]
1532:.\lib_Fat/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 2399              		.loc 1 1532 0
 2400 0178 BB68     		ldr	r3, [r7, #8]
 2401 017a DB05     		lsl	r3, r3, #23
 2402 017c DB0D     		lsr	r3, r3, #23
 2403 017e 3033     		add	r3, r3, #48
 2404 0180 FA68     		ldr	r2, [r7, #12]
 2405 0182 D218     		add	r2, r2, r3
 2406 0184 7B68     		ldr	r3, [r7, #4]
 2407 0186 DA61     		str	r2, [r3, #28]
1533:.\lib_Fat/ff.c **** 
1534:.\lib_Fat/ff.c **** 	return FR_OK;
 2408              		.loc 1 1534 0
 2409 0188 0023     		mov	r3, #0
 2410              	.L123:
1535:.\lib_Fat/ff.c **** }
 2411              		.loc 1 1535 0
 2412 018a 181C     		mov	r0, r3
 2413 018c BD46     		mov	sp, r7
 2414 018e 06B0     		add	sp, sp, #24
 2415              		@ sp needed
 2416 0190 80BD     		pop	{r7, pc}
 2417              	.L138:
 2418 0192 C046     		.align	2
 2419              	.L137:
 2420 0194 FFFF1F00 		.word	2097151
 2421              		.cfi_endproc
 2422              	.LFE17:
 2423              		.size	dir_next, .-dir_next
 2424              		.section	.text.dir_alloc,"ax",%progbits
 2425              		.align	2
 2426              		.code	16
 2427              		.thumb_func
 2428              		.type	dir_alloc, %function
 2429              	dir_alloc:
 2430              	.LFB18:
1536:.\lib_Fat/ff.c **** 
1537:.\lib_Fat/ff.c **** 
1538:.\lib_Fat/ff.c **** 
1539:.\lib_Fat/ff.c **** 
1540:.\lib_Fat/ff.c **** #if !_FS_READONLY
1541:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1542:.\lib_Fat/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1543:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1544:.\lib_Fat/ff.c **** 
1545:.\lib_Fat/ff.c **** static
1546:.\lib_Fat/ff.c **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1547:.\lib_Fat/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1548:.\lib_Fat/ff.c **** 	UINT nent		/* Number of contiguous entries to allocate */
1549:.\lib_Fat/ff.c **** )
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 71


1550:.\lib_Fat/ff.c **** {
 2431              		.loc 1 1550 0
 2432              		.cfi_startproc
 2433 0000 90B5     		push	{r4, r7, lr}
 2434              		.cfi_def_cfa_offset 12
 2435              		.cfi_offset 4, -12
 2436              		.cfi_offset 7, -8
 2437              		.cfi_offset 14, -4
 2438 0002 87B0     		sub	sp, sp, #28
 2439              		.cfi_def_cfa_offset 40
 2440 0004 00AF     		add	r7, sp, #0
 2441              		.cfi_def_cfa_register 7
 2442 0006 7860     		str	r0, [r7, #4]
 2443 0008 3960     		str	r1, [r7]
1551:.\lib_Fat/ff.c **** 	FRESULT res;
1552:.\lib_Fat/ff.c **** 	UINT n;
1553:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 2444              		.loc 1 1553 0
 2445 000a 7B68     		ldr	r3, [r7, #4]
 2446 000c 1B68     		ldr	r3, [r3]
 2447 000e FB60     		str	r3, [r7, #12]
1554:.\lib_Fat/ff.c **** 
1555:.\lib_Fat/ff.c **** 
1556:.\lib_Fat/ff.c **** 	res = dir_sdi(dp, 0);
 2448              		.loc 1 1556 0
 2449 0010 1723     		mov	r3, #23
 2450 0012 FC18     		add	r4, r7, r3
 2451 0014 7B68     		ldr	r3, [r7, #4]
 2452 0016 181C     		mov	r0, r3
 2453 0018 0021     		mov	r1, #0
 2454 001a FFF7FEFF 		bl	dir_sdi
 2455 001e 031C     		mov	r3, r0
 2456 0020 2370     		strb	r3, [r4]
1557:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 2457              		.loc 1 1557 0
 2458 0022 1723     		mov	r3, #23
 2459 0024 FB18     		add	r3, r7, r3
 2460 0026 1B78     		ldrb	r3, [r3]
 2461 0028 002B     		cmp	r3, #0
 2462 002a 35D1     		bne	.L140
1558:.\lib_Fat/ff.c **** 		n = 0;
 2463              		.loc 1 1558 0
 2464 002c 0023     		mov	r3, #0
 2465 002e 3B61     		str	r3, [r7, #16]
 2466              	.L146:
1559:.\lib_Fat/ff.c **** 		do {
1560:.\lib_Fat/ff.c **** 			res = move_window(fs, dp->sect);
 2467              		.loc 1 1560 0
 2468 0030 7B68     		ldr	r3, [r7, #4]
 2469 0032 9B69     		ldr	r3, [r3, #24]
 2470 0034 1722     		mov	r2, #23
 2471 0036 BC18     		add	r4, r7, r2
 2472 0038 FA68     		ldr	r2, [r7, #12]
 2473 003a 101C     		mov	r0, r2
 2474 003c 191C     		mov	r1, r3
 2475 003e FFF7FEFF 		bl	move_window
 2476 0042 031C     		mov	r3, r0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 72


 2477 0044 2370     		strb	r3, [r4]
1561:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 2478              		.loc 1 1561 0
 2479 0046 1723     		mov	r3, #23
 2480 0048 FB18     		add	r3, r7, r3
 2481 004a 1B78     		ldrb	r3, [r3]
 2482 004c 002B     		cmp	r3, #0
 2483 004e 00D0     		beq	.L141
 2484 0050 22E0     		b	.L140
 2485              	.L141:
1562:.\lib_Fat/ff.c **** #if _FS_EXFAT
1563:.\lib_Fat/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1564:.\lib_Fat/ff.c **** #else
1565:.\lib_Fat/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 2486              		.loc 1 1565 0
 2487 0052 7B68     		ldr	r3, [r7, #4]
 2488 0054 DB69     		ldr	r3, [r3, #28]
 2489 0056 1B78     		ldrb	r3, [r3]
 2490 0058 E52B     		cmp	r3, #229
 2491 005a 04D0     		beq	.L142
 2492              		.loc 1 1565 0 is_stmt 0 discriminator 1
 2493 005c 7B68     		ldr	r3, [r7, #4]
 2494 005e DB69     		ldr	r3, [r3, #28]
 2495 0060 1B78     		ldrb	r3, [r3]
 2496 0062 002B     		cmp	r3, #0
 2497 0064 08D1     		bne	.L143
 2498              	.L142:
1566:.\lib_Fat/ff.c **** #endif
1567:.\lib_Fat/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
 2499              		.loc 1 1567 0 is_stmt 1
 2500 0066 3B69     		ldr	r3, [r7, #16]
 2501 0068 0133     		add	r3, r3, #1
 2502 006a 3B61     		str	r3, [r7, #16]
 2503 006c 3A69     		ldr	r2, [r7, #16]
 2504 006e 3B68     		ldr	r3, [r7]
 2505 0070 9A42     		cmp	r2, r3
 2506 0072 00D1     		bne	.L144
 2507 0074 10E0     		b	.L140
 2508              	.L144:
 2509 0076 01E0     		b	.L145
 2510              	.L143:
1568:.\lib_Fat/ff.c **** 			} else {
1569:.\lib_Fat/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 2511              		.loc 1 1569 0
 2512 0078 0023     		mov	r3, #0
 2513 007a 3B61     		str	r3, [r7, #16]
 2514              	.L145:
1570:.\lib_Fat/ff.c **** 			}
1571:.\lib_Fat/ff.c **** 			res = dir_next(dp, 1);
 2515              		.loc 1 1571 0
 2516 007c 1723     		mov	r3, #23
 2517 007e FC18     		add	r4, r7, r3
 2518 0080 7B68     		ldr	r3, [r7, #4]
 2519 0082 181C     		mov	r0, r3
 2520 0084 0121     		mov	r1, #1
 2521 0086 FFF7FEFF 		bl	dir_next
 2522 008a 031C     		mov	r3, r0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 73


 2523 008c 2370     		strb	r3, [r4]
1572:.\lib_Fat/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 2524              		.loc 1 1572 0
 2525 008e 1723     		mov	r3, #23
 2526 0090 FB18     		add	r3, r7, r3
 2527 0092 1B78     		ldrb	r3, [r3]
 2528 0094 002B     		cmp	r3, #0
 2529 0096 CBD0     		beq	.L146
 2530              	.L140:
1573:.\lib_Fat/ff.c **** 	}
1574:.\lib_Fat/ff.c **** 
1575:.\lib_Fat/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 2531              		.loc 1 1575 0
 2532 0098 1723     		mov	r3, #23
 2533 009a FB18     		add	r3, r7, r3
 2534 009c 1B78     		ldrb	r3, [r3]
 2535 009e 042B     		cmp	r3, #4
 2536 00a0 03D1     		bne	.L147
 2537              		.loc 1 1575 0 is_stmt 0 discriminator 1
 2538 00a2 1723     		mov	r3, #23
 2539 00a4 FB18     		add	r3, r7, r3
 2540 00a6 0722     		mov	r2, #7
 2541 00a8 1A70     		strb	r2, [r3]
 2542              	.L147:
1576:.\lib_Fat/ff.c **** 	return res;
 2543              		.loc 1 1576 0 is_stmt 1
 2544 00aa 1723     		mov	r3, #23
 2545 00ac FB18     		add	r3, r7, r3
 2546 00ae 1B78     		ldrb	r3, [r3]
1577:.\lib_Fat/ff.c **** }
 2547              		.loc 1 1577 0
 2548 00b0 181C     		mov	r0, r3
 2549 00b2 BD46     		mov	sp, r7
 2550 00b4 07B0     		add	sp, sp, #28
 2551              		@ sp needed
 2552 00b6 90BD     		pop	{r4, r7, pc}
 2553              		.cfi_endproc
 2554              	.LFE18:
 2555              		.size	dir_alloc, .-dir_alloc
 2556              		.section	.text.ld_clust,"ax",%progbits
 2557              		.align	2
 2558              		.code	16
 2559              		.thumb_func
 2560              		.type	ld_clust, %function
 2561              	ld_clust:
 2562              	.LFB19:
1578:.\lib_Fat/ff.c **** 
1579:.\lib_Fat/ff.c **** #endif	/* !_FS_READONLY */
1580:.\lib_Fat/ff.c **** 
1581:.\lib_Fat/ff.c **** 
1582:.\lib_Fat/ff.c **** 
1583:.\lib_Fat/ff.c **** 
1584:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1585:.\lib_Fat/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1586:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1587:.\lib_Fat/ff.c **** 
1588:.\lib_Fat/ff.c **** static
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 74


1589:.\lib_Fat/ff.c **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1590:.\lib_Fat/ff.c **** 	FATFS* fs,		/* Pointer to the fs object */
1591:.\lib_Fat/ff.c **** 	const BYTE* dir	/* Pointer to the key entry */
1592:.\lib_Fat/ff.c **** )
1593:.\lib_Fat/ff.c **** {
 2563              		.loc 1 1593 0
 2564              		.cfi_startproc
 2565 0000 80B5     		push	{r7, lr}
 2566              		.cfi_def_cfa_offset 8
 2567              		.cfi_offset 7, -8
 2568              		.cfi_offset 14, -4
 2569 0002 84B0     		sub	sp, sp, #16
 2570              		.cfi_def_cfa_offset 24
 2571 0004 00AF     		add	r7, sp, #0
 2572              		.cfi_def_cfa_register 7
 2573 0006 7860     		str	r0, [r7, #4]
 2574 0008 3960     		str	r1, [r7]
1594:.\lib_Fat/ff.c **** 	DWORD cl;
1595:.\lib_Fat/ff.c **** 
1596:.\lib_Fat/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 2575              		.loc 1 1596 0
 2576 000a 3B68     		ldr	r3, [r7]
 2577 000c 1A33     		add	r3, r3, #26
 2578 000e 181C     		mov	r0, r3
 2579 0010 FFF7FEFF 		bl	ld_word
 2580 0014 031C     		mov	r3, r0
 2581 0016 FB60     		str	r3, [r7, #12]
1597:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 2582              		.loc 1 1597 0
 2583 0018 7B68     		ldr	r3, [r7, #4]
 2584 001a 1B78     		ldrb	r3, [r3]
 2585 001c 032B     		cmp	r3, #3
 2586 001e 09D1     		bne	.L150
1598:.\lib_Fat/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 2587              		.loc 1 1598 0
 2588 0020 3B68     		ldr	r3, [r7]
 2589 0022 1433     		add	r3, r3, #20
 2590 0024 181C     		mov	r0, r3
 2591 0026 FFF7FEFF 		bl	ld_word
 2592 002a 031C     		mov	r3, r0
 2593 002c 1B04     		lsl	r3, r3, #16
 2594 002e FA68     		ldr	r2, [r7, #12]
 2595 0030 1343     		orr	r3, r2
 2596 0032 FB60     		str	r3, [r7, #12]
 2597              	.L150:
1599:.\lib_Fat/ff.c **** 	}
1600:.\lib_Fat/ff.c **** 
1601:.\lib_Fat/ff.c **** 	return cl;
 2598              		.loc 1 1601 0
 2599 0034 FB68     		ldr	r3, [r7, #12]
1602:.\lib_Fat/ff.c **** }
 2600              		.loc 1 1602 0
 2601 0036 181C     		mov	r0, r3
 2602 0038 BD46     		mov	sp, r7
 2603 003a 04B0     		add	sp, sp, #16
 2604              		@ sp needed
 2605 003c 80BD     		pop	{r7, pc}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 75


 2606              		.cfi_endproc
 2607              	.LFE19:
 2608              		.size	ld_clust, .-ld_clust
 2609 003e C046     		.section	.text.st_clust,"ax",%progbits
 2610              		.align	2
 2611              		.code	16
 2612              		.thumb_func
 2613              		.type	st_clust, %function
 2614              	st_clust:
 2615              	.LFB20:
1603:.\lib_Fat/ff.c **** 
1604:.\lib_Fat/ff.c **** 
1605:.\lib_Fat/ff.c **** #if !_FS_READONLY
1606:.\lib_Fat/ff.c **** static
1607:.\lib_Fat/ff.c **** void st_clust (
1608:.\lib_Fat/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1609:.\lib_Fat/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1610:.\lib_Fat/ff.c **** 	DWORD cl	/* Value to be set */
1611:.\lib_Fat/ff.c **** )
1612:.\lib_Fat/ff.c **** {
 2616              		.loc 1 1612 0
 2617              		.cfi_startproc
 2618 0000 80B5     		push	{r7, lr}
 2619              		.cfi_def_cfa_offset 8
 2620              		.cfi_offset 7, -8
 2621              		.cfi_offset 14, -4
 2622 0002 84B0     		sub	sp, sp, #16
 2623              		.cfi_def_cfa_offset 24
 2624 0004 00AF     		add	r7, sp, #0
 2625              		.cfi_def_cfa_register 7
 2626 0006 F860     		str	r0, [r7, #12]
 2627 0008 B960     		str	r1, [r7, #8]
 2628 000a 7A60     		str	r2, [r7, #4]
1613:.\lib_Fat/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 2629              		.loc 1 1613 0
 2630 000c BB68     		ldr	r3, [r7, #8]
 2631 000e 1A33     		add	r3, r3, #26
 2632 0010 1A1C     		mov	r2, r3
 2633 0012 7B68     		ldr	r3, [r7, #4]
 2634 0014 9BB2     		uxth	r3, r3
 2635 0016 101C     		mov	r0, r2
 2636 0018 191C     		mov	r1, r3
 2637 001a FFF7FEFF 		bl	st_word
1614:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 2638              		.loc 1 1614 0
 2639 001e FB68     		ldr	r3, [r7, #12]
 2640 0020 1B78     		ldrb	r3, [r3]
 2641 0022 032B     		cmp	r3, #3
 2642 0024 09D1     		bne	.L152
1615:.\lib_Fat/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 2643              		.loc 1 1615 0
 2644 0026 BB68     		ldr	r3, [r7, #8]
 2645 0028 1433     		add	r3, r3, #20
 2646 002a 1A1C     		mov	r2, r3
 2647 002c 7B68     		ldr	r3, [r7, #4]
 2648 002e 1B0C     		lsr	r3, r3, #16
 2649 0030 9BB2     		uxth	r3, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 76


 2650 0032 101C     		mov	r0, r2
 2651 0034 191C     		mov	r1, r3
 2652 0036 FFF7FEFF 		bl	st_word
 2653              	.L152:
1616:.\lib_Fat/ff.c **** 	}
1617:.\lib_Fat/ff.c **** }
 2654              		.loc 1 1617 0
 2655 003a BD46     		mov	sp, r7
 2656 003c 04B0     		add	sp, sp, #16
 2657              		@ sp needed
 2658 003e 80BD     		pop	{r7, pc}
 2659              		.cfi_endproc
 2660              	.LFE20:
 2661              		.size	st_clust, .-st_clust
 2662              		.section	.text.dir_read,"ax",%progbits
 2663              		.align	2
 2664              		.code	16
 2665              		.thumb_func
 2666              		.type	dir_read, %function
 2667              	dir_read:
 2668              	.LFB21:
1618:.\lib_Fat/ff.c **** #endif
1619:.\lib_Fat/ff.c **** 
1620:.\lib_Fat/ff.c **** 
1621:.\lib_Fat/ff.c **** 
1622:.\lib_Fat/ff.c **** #if _USE_LFN != 0
1623:.\lib_Fat/ff.c **** /*------------------------------------------------------------------------*/
1624:.\lib_Fat/ff.c **** /* FAT-LFN: LFN handling                                                  */
1625:.\lib_Fat/ff.c **** /*------------------------------------------------------------------------*/
1626:.\lib_Fat/ff.c **** static
1627:.\lib_Fat/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1628:.\lib_Fat/ff.c **** 
1629:.\lib_Fat/ff.c **** 
1630:.\lib_Fat/ff.c **** /*--------------------------------------------------------*/
1631:.\lib_Fat/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1632:.\lib_Fat/ff.c **** /*--------------------------------------------------------*/
1633:.\lib_Fat/ff.c **** static
1634:.\lib_Fat/ff.c **** int cmp_lfn (				/* 1:matched, 0:not matched */
1635:.\lib_Fat/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1636:.\lib_Fat/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1637:.\lib_Fat/ff.c **** )
1638:.\lib_Fat/ff.c **** {
1639:.\lib_Fat/ff.c **** 	UINT i, s;
1640:.\lib_Fat/ff.c **** 	WCHAR wc, uc;
1641:.\lib_Fat/ff.c **** 
1642:.\lib_Fat/ff.c **** 
1643:.\lib_Fat/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1644:.\lib_Fat/ff.c **** 
1645:.\lib_Fat/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1646:.\lib_Fat/ff.c **** 
1647:.\lib_Fat/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1648:.\lib_Fat/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1649:.\lib_Fat/ff.c **** 		if (wc) {
1650:.\lib_Fat/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1651:.\lib_Fat/ff.c **** 				return 0;					/* Not matched */
1652:.\lib_Fat/ff.c **** 			}
1653:.\lib_Fat/ff.c **** 			wc = uc;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 77


1654:.\lib_Fat/ff.c **** 		} else {
1655:.\lib_Fat/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1656:.\lib_Fat/ff.c **** 		}
1657:.\lib_Fat/ff.c **** 	}
1658:.\lib_Fat/ff.c **** 
1659:.\lib_Fat/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1660:.\lib_Fat/ff.c **** 
1661:.\lib_Fat/ff.c **** 	return 1;		/* The part of LFN matched */
1662:.\lib_Fat/ff.c **** }
1663:.\lib_Fat/ff.c **** 
1664:.\lib_Fat/ff.c **** 
1665:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1666:.\lib_Fat/ff.c **** /*-----------------------------------------------------*/
1667:.\lib_Fat/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1668:.\lib_Fat/ff.c **** /*-----------------------------------------------------*/
1669:.\lib_Fat/ff.c **** static
1670:.\lib_Fat/ff.c **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1671:.\lib_Fat/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1672:.\lib_Fat/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1673:.\lib_Fat/ff.c **** )
1674:.\lib_Fat/ff.c **** {
1675:.\lib_Fat/ff.c **** 	UINT i, s;
1676:.\lib_Fat/ff.c **** 	WCHAR wc, uc;
1677:.\lib_Fat/ff.c **** 
1678:.\lib_Fat/ff.c **** 
1679:.\lib_Fat/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1680:.\lib_Fat/ff.c **** 
1681:.\lib_Fat/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1682:.\lib_Fat/ff.c **** 
1683:.\lib_Fat/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1684:.\lib_Fat/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1685:.\lib_Fat/ff.c **** 		if (wc) {
1686:.\lib_Fat/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1687:.\lib_Fat/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1688:.\lib_Fat/ff.c **** 		} else {
1689:.\lib_Fat/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1690:.\lib_Fat/ff.c **** 		}
1691:.\lib_Fat/ff.c **** 	}
1692:.\lib_Fat/ff.c **** 
1693:.\lib_Fat/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1694:.\lib_Fat/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1695:.\lib_Fat/ff.c **** 		lfnbuf[i] = 0;
1696:.\lib_Fat/ff.c **** 	}
1697:.\lib_Fat/ff.c **** 
1698:.\lib_Fat/ff.c **** 	return 1;		/* The part of LFN is valid */
1699:.\lib_Fat/ff.c **** }
1700:.\lib_Fat/ff.c **** #endif
1701:.\lib_Fat/ff.c **** 
1702:.\lib_Fat/ff.c **** 
1703:.\lib_Fat/ff.c **** #if !_FS_READONLY
1704:.\lib_Fat/ff.c **** /*-----------------------------------------*/
1705:.\lib_Fat/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1706:.\lib_Fat/ff.c **** /*-----------------------------------------*/
1707:.\lib_Fat/ff.c **** static
1708:.\lib_Fat/ff.c **** void put_lfn (
1709:.\lib_Fat/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1710:.\lib_Fat/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 78


1711:.\lib_Fat/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1712:.\lib_Fat/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1713:.\lib_Fat/ff.c **** )
1714:.\lib_Fat/ff.c **** {
1715:.\lib_Fat/ff.c **** 	UINT i, s;
1716:.\lib_Fat/ff.c **** 	WCHAR wc;
1717:.\lib_Fat/ff.c **** 
1718:.\lib_Fat/ff.c **** 
1719:.\lib_Fat/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1720:.\lib_Fat/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1721:.\lib_Fat/ff.c **** 	dir[LDIR_Type] = 0;
1722:.\lib_Fat/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1723:.\lib_Fat/ff.c **** 
1724:.\lib_Fat/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1725:.\lib_Fat/ff.c **** 	s = wc = 0;
1726:.\lib_Fat/ff.c **** 	do {
1727:.\lib_Fat/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1728:.\lib_Fat/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1729:.\lib_Fat/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1730:.\lib_Fat/ff.c **** 	} while (++s < 13);
1731:.\lib_Fat/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1732:.\lib_Fat/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1733:.\lib_Fat/ff.c **** }
1734:.\lib_Fat/ff.c **** 
1735:.\lib_Fat/ff.c **** #endif	/* !_FS_READONLY */
1736:.\lib_Fat/ff.c **** #endif	/* _USE_LFN != 0 */
1737:.\lib_Fat/ff.c **** 
1738:.\lib_Fat/ff.c **** 
1739:.\lib_Fat/ff.c **** 
1740:.\lib_Fat/ff.c **** #if _USE_LFN != 0 && !_FS_READONLY
1741:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1742:.\lib_Fat/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1743:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1744:.\lib_Fat/ff.c **** 
1745:.\lib_Fat/ff.c **** static
1746:.\lib_Fat/ff.c **** void gen_numname (
1747:.\lib_Fat/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1748:.\lib_Fat/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1749:.\lib_Fat/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1750:.\lib_Fat/ff.c **** 	UINT seq			/* Sequence number */
1751:.\lib_Fat/ff.c **** )
1752:.\lib_Fat/ff.c **** {
1753:.\lib_Fat/ff.c **** 	BYTE ns[8], c;
1754:.\lib_Fat/ff.c **** 	UINT i, j;
1755:.\lib_Fat/ff.c **** 	WCHAR wc;
1756:.\lib_Fat/ff.c **** 	DWORD sr;
1757:.\lib_Fat/ff.c **** 
1758:.\lib_Fat/ff.c **** 
1759:.\lib_Fat/ff.c **** 	mem_cpy(dst, src, 11);
1760:.\lib_Fat/ff.c **** 
1761:.\lib_Fat/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1762:.\lib_Fat/ff.c **** 		sr = seq;
1763:.\lib_Fat/ff.c **** 		while (*lfn) {	/* Create a CRC */
1764:.\lib_Fat/ff.c **** 			wc = *lfn++;
1765:.\lib_Fat/ff.c **** 			for (i = 0; i < 16; i++) {
1766:.\lib_Fat/ff.c **** 				sr = (sr << 1) + (wc & 1);
1767:.\lib_Fat/ff.c **** 				wc >>= 1;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 79


1768:.\lib_Fat/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1769:.\lib_Fat/ff.c **** 			}
1770:.\lib_Fat/ff.c **** 		}
1771:.\lib_Fat/ff.c **** 		seq = (UINT)sr;
1772:.\lib_Fat/ff.c **** 	}
1773:.\lib_Fat/ff.c **** 
1774:.\lib_Fat/ff.c **** 	/* itoa (hexdecimal) */
1775:.\lib_Fat/ff.c **** 	i = 7;
1776:.\lib_Fat/ff.c **** 	do {
1777:.\lib_Fat/ff.c **** 		c = (seq % 16) + '0';
1778:.\lib_Fat/ff.c **** 		if (c > '9') c += 7;
1779:.\lib_Fat/ff.c **** 		ns[i--] = c;
1780:.\lib_Fat/ff.c **** 		seq /= 16;
1781:.\lib_Fat/ff.c **** 	} while (seq);
1782:.\lib_Fat/ff.c **** 	ns[i] = '~';
1783:.\lib_Fat/ff.c **** 
1784:.\lib_Fat/ff.c **** 	/* Append the number */
1785:.\lib_Fat/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1786:.\lib_Fat/ff.c **** 		if (IsDBCS1(dst[j])) {
1787:.\lib_Fat/ff.c **** 			if (j == i - 1) break;
1788:.\lib_Fat/ff.c **** 			j++;
1789:.\lib_Fat/ff.c **** 		}
1790:.\lib_Fat/ff.c **** 	}
1791:.\lib_Fat/ff.c **** 	do {
1792:.\lib_Fat/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1793:.\lib_Fat/ff.c **** 	} while (j < 8);
1794:.\lib_Fat/ff.c **** }
1795:.\lib_Fat/ff.c **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1796:.\lib_Fat/ff.c **** 
1797:.\lib_Fat/ff.c **** 
1798:.\lib_Fat/ff.c **** 
1799:.\lib_Fat/ff.c **** #if _USE_LFN != 0
1800:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1801:.\lib_Fat/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1802:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1803:.\lib_Fat/ff.c **** 
1804:.\lib_Fat/ff.c **** static
1805:.\lib_Fat/ff.c **** BYTE sum_sfn (
1806:.\lib_Fat/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1807:.\lib_Fat/ff.c **** )
1808:.\lib_Fat/ff.c **** {
1809:.\lib_Fat/ff.c **** 	BYTE sum = 0;
1810:.\lib_Fat/ff.c **** 	UINT n = 11;
1811:.\lib_Fat/ff.c **** 
1812:.\lib_Fat/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1813:.\lib_Fat/ff.c **** 	return sum;
1814:.\lib_Fat/ff.c **** }
1815:.\lib_Fat/ff.c **** 
1816:.\lib_Fat/ff.c **** #endif	/* _USE_LFN != 0 */
1817:.\lib_Fat/ff.c **** 
1818:.\lib_Fat/ff.c **** 
1819:.\lib_Fat/ff.c **** 
1820:.\lib_Fat/ff.c **** #if _FS_EXFAT
1821:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1822:.\lib_Fat/ff.c **** /* exFAT: Checksum                                                       */
1823:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
1824:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 80


1825:.\lib_Fat/ff.c **** static
1826:.\lib_Fat/ff.c **** WORD xdir_sum (			/* Get checksum of the directoly block */
1827:.\lib_Fat/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
1828:.\lib_Fat/ff.c **** )
1829:.\lib_Fat/ff.c **** {
1830:.\lib_Fat/ff.c **** 	UINT i, szblk;
1831:.\lib_Fat/ff.c **** 	WORD sum;
1832:.\lib_Fat/ff.c **** 
1833:.\lib_Fat/ff.c **** 
1834:.\lib_Fat/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1835:.\lib_Fat/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
1836:.\lib_Fat/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1837:.\lib_Fat/ff.c **** 			i++;
1838:.\lib_Fat/ff.c **** 		} else {
1839:.\lib_Fat/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1840:.\lib_Fat/ff.c **** 		}
1841:.\lib_Fat/ff.c **** 	}
1842:.\lib_Fat/ff.c **** 	return sum;
1843:.\lib_Fat/ff.c **** }
1844:.\lib_Fat/ff.c **** 
1845:.\lib_Fat/ff.c **** 
1846:.\lib_Fat/ff.c **** 
1847:.\lib_Fat/ff.c **** static
1848:.\lib_Fat/ff.c **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1849:.\lib_Fat/ff.c **** 	const WCHAR* name	/* File name to be calculated */
1850:.\lib_Fat/ff.c **** )
1851:.\lib_Fat/ff.c **** {
1852:.\lib_Fat/ff.c **** 	WCHAR chr;
1853:.\lib_Fat/ff.c **** 	WORD sum = 0;
1854:.\lib_Fat/ff.c **** 
1855:.\lib_Fat/ff.c **** 
1856:.\lib_Fat/ff.c **** 	while ((chr = *name++) != 0) {
1857:.\lib_Fat/ff.c **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1858:.\lib_Fat/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1859:.\lib_Fat/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1860:.\lib_Fat/ff.c **** 	}
1861:.\lib_Fat/ff.c **** 	return sum;
1862:.\lib_Fat/ff.c **** }
1863:.\lib_Fat/ff.c **** 
1864:.\lib_Fat/ff.c **** 
1865:.\lib_Fat/ff.c **** #if !_FS_READONLY && _USE_MKFS
1866:.\lib_Fat/ff.c **** static
1867:.\lib_Fat/ff.c **** DWORD xsum32 (
1868:.\lib_Fat/ff.c **** 	BYTE  dat,	/* Data to be sumed */
1869:.\lib_Fat/ff.c **** 	DWORD sum	/* Previous value */
1870:.\lib_Fat/ff.c **** )
1871:.\lib_Fat/ff.c **** {
1872:.\lib_Fat/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1873:.\lib_Fat/ff.c **** 	return sum;
1874:.\lib_Fat/ff.c **** }
1875:.\lib_Fat/ff.c **** #endif
1876:.\lib_Fat/ff.c **** 
1877:.\lib_Fat/ff.c **** 
1878:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1879:.\lib_Fat/ff.c **** /*------------------------------------------------------*/
1880:.\lib_Fat/ff.c **** /* exFAT: Get object information from a directory block */
1881:.\lib_Fat/ff.c **** /*------------------------------------------------------*/
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 81


1882:.\lib_Fat/ff.c **** 
1883:.\lib_Fat/ff.c **** static
1884:.\lib_Fat/ff.c **** void get_xdir_info (
1885:.\lib_Fat/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1886:.\lib_Fat/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1887:.\lib_Fat/ff.c **** )
1888:.\lib_Fat/ff.c **** {
1889:.\lib_Fat/ff.c **** 	UINT di, si;
1890:.\lib_Fat/ff.c **** 	WCHAR w;
1891:.\lib_Fat/ff.c **** #if !_LFN_UNICODE
1892:.\lib_Fat/ff.c **** 	UINT nc;
1893:.\lib_Fat/ff.c **** #endif
1894:.\lib_Fat/ff.c **** 
1895:.\lib_Fat/ff.c **** 	/* Get file name */
1896:.\lib_Fat/ff.c **** #if _LFN_UNICODE
1897:.\lib_Fat/ff.c **** 	if (dirb[XDIR_NumName] <= _MAX_LFN) {
1898:.\lib_Fat/ff.c **** 		for (si = SZDIRE * 2, di = 0; di < dirb[XDIR_NumName]; si += 2, di++) {
1899:.\lib_Fat/ff.c **** 			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
1900:.\lib_Fat/ff.c **** 			w = ld_word(dirb + si);				/* Get a character */
1901:.\lib_Fat/ff.c **** 			fno->fname[di] = w;					/* Store it */
1902:.\lib_Fat/ff.c **** 		}
1903:.\lib_Fat/ff.c **** 	} else {
1904:.\lib_Fat/ff.c **** 		di = 0;	/* Buffer overflow and inaccessible object */
1905:.\lib_Fat/ff.c **** 	}
1906:.\lib_Fat/ff.c **** #else
1907:.\lib_Fat/ff.c **** 	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1908:.\lib_Fat/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
1909:.\lib_Fat/ff.c **** 		w = ld_word(dirb + si);				/* Get a character */
1910:.\lib_Fat/ff.c **** 		w = ff_convert(w, 0);				/* Unicode -> OEM */
1911:.\lib_Fat/ff.c **** 		if (w == 0) { di = 0; break; }		/* Could not be converted and inaccessible object */
1912:.\lib_Fat/ff.c **** 		if (_DF1S && w >= 0x100) {			/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
1913:.\lib_Fat/ff.c **** 			fno->fname[di++] = (char)(w >> 8);
1914:.\lib_Fat/ff.c **** 		}
1915:.\lib_Fat/ff.c **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow and inaccessible object */
1916:.\lib_Fat/ff.c **** 		fno->fname[di++] = (char)w;
1917:.\lib_Fat/ff.c **** 	}
1918:.\lib_Fat/ff.c **** #endif
1919:.\lib_Fat/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object? */
1920:.\lib_Fat/ff.c **** 	fno->fname[di] = 0;						/* Terminate file name */
1921:.\lib_Fat/ff.c **** 
1922:.\lib_Fat/ff.c **** 	fno->altname[0] = 0;							/* No SFN */
1923:.\lib_Fat/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1924:.\lib_Fat/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1925:.\lib_Fat/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1926:.\lib_Fat/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1927:.\lib_Fat/ff.c **** }
1928:.\lib_Fat/ff.c **** 
1929:.\lib_Fat/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1930:.\lib_Fat/ff.c **** 
1931:.\lib_Fat/ff.c **** 
1932:.\lib_Fat/ff.c **** /*-----------------------------------*/
1933:.\lib_Fat/ff.c **** /* exFAT: Get a directry entry block */
1934:.\lib_Fat/ff.c **** /*-----------------------------------*/
1935:.\lib_Fat/ff.c **** 
1936:.\lib_Fat/ff.c **** static
1937:.\lib_Fat/ff.c **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1938:.\lib_Fat/ff.c **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 82


1939:.\lib_Fat/ff.c **** )
1940:.\lib_Fat/ff.c **** {
1941:.\lib_Fat/ff.c **** 	FRESULT res;
1942:.\lib_Fat/ff.c **** 	UINT i, nent;
1943:.\lib_Fat/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1944:.\lib_Fat/ff.c **** 
1945:.\lib_Fat/ff.c **** 
1946:.\lib_Fat/ff.c **** 	/* Load 85 entry */
1947:.\lib_Fat/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1948:.\lib_Fat/ff.c **** 	if (res != FR_OK) return res;
1949:.\lib_Fat/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1950:.\lib_Fat/ff.c **** 	mem_cpy(dirb, dp->dir, SZDIRE);
1951:.\lib_Fat/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
1952:.\lib_Fat/ff.c **** 
1953:.\lib_Fat/ff.c **** 	/* Load C0 entry */
1954:.\lib_Fat/ff.c **** 	res = dir_next(dp, 0);
1955:.\lib_Fat/ff.c **** 	if (res != FR_OK) return res;
1956:.\lib_Fat/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1957:.\lib_Fat/ff.c **** 	if (res != FR_OK) return res;
1958:.\lib_Fat/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
1959:.\lib_Fat/ff.c **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
1960:.\lib_Fat/ff.c **** 
1961:.\lib_Fat/ff.c **** 	/* Load C1 entries */
1962:.\lib_Fat/ff.c **** 	if (nent < 3 || nent > 19) return FR_NO_FILE;
1963:.\lib_Fat/ff.c **** 	i = SZDIRE * 2; nent *= SZDIRE;
1964:.\lib_Fat/ff.c **** 	do {
1965:.\lib_Fat/ff.c **** 		res = dir_next(dp, 0);
1966:.\lib_Fat/ff.c **** 		if (res != FR_OK) return res;
1967:.\lib_Fat/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
1968:.\lib_Fat/ff.c **** 		if (res != FR_OK) return res;
1969:.\lib_Fat/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
1970:.\lib_Fat/ff.c **** 		mem_cpy(dirb + i, dp->dir, SZDIRE);
1971:.\lib_Fat/ff.c **** 		i += SZDIRE;
1972:.\lib_Fat/ff.c **** 	} while (i < nent);
1973:.\lib_Fat/ff.c **** 
1974:.\lib_Fat/ff.c **** 	/* Sanity check */
1975:.\lib_Fat/ff.c **** 	if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1976:.\lib_Fat/ff.c **** 
1977:.\lib_Fat/ff.c **** 	return FR_OK;
1978:.\lib_Fat/ff.c **** }
1979:.\lib_Fat/ff.c **** 
1980:.\lib_Fat/ff.c **** 
1981:.\lib_Fat/ff.c **** #if !_FS_READONLY || _FS_RPATH != 0 
1982:.\lib_Fat/ff.c **** /*------------------------------------------------*/
1983:.\lib_Fat/ff.c **** /* exFAT: Load the object's directory entry block */
1984:.\lib_Fat/ff.c **** /*------------------------------------------------*/
1985:.\lib_Fat/ff.c **** static
1986:.\lib_Fat/ff.c **** FRESULT load_obj_dir (	
1987:.\lib_Fat/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
1988:.\lib_Fat/ff.c **** 	const _FDID* obj	/* Object with containing directory information */
1989:.\lib_Fat/ff.c **** )
1990:.\lib_Fat/ff.c **** {
1991:.\lib_Fat/ff.c **** 	FRESULT res;
1992:.\lib_Fat/ff.c **** 
1993:.\lib_Fat/ff.c **** 
1994:.\lib_Fat/ff.c **** 	/* Open object containing directory */
1995:.\lib_Fat/ff.c **** 	dp->obj.fs = obj->fs;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 83


1996:.\lib_Fat/ff.c **** 	dp->obj.sclust = obj->c_scl;
1997:.\lib_Fat/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
1998:.\lib_Fat/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1999:.\lib_Fat/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2000:.\lib_Fat/ff.c **** 
2001:.\lib_Fat/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto the block location */
2002:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
2003:.\lib_Fat/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2004:.\lib_Fat/ff.c **** 	}
2005:.\lib_Fat/ff.c **** 	return res;
2006:.\lib_Fat/ff.c **** }
2007:.\lib_Fat/ff.c **** #endif
2008:.\lib_Fat/ff.c **** 
2009:.\lib_Fat/ff.c **** 
2010:.\lib_Fat/ff.c **** #if !_FS_READONLY
2011:.\lib_Fat/ff.c **** /*-----------------------------------------------*/
2012:.\lib_Fat/ff.c **** /* exFAT: Store the directory block to the media */
2013:.\lib_Fat/ff.c **** /*-----------------------------------------------*/
2014:.\lib_Fat/ff.c **** static
2015:.\lib_Fat/ff.c **** FRESULT store_xdir (
2016:.\lib_Fat/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2017:.\lib_Fat/ff.c **** )
2018:.\lib_Fat/ff.c **** {
2019:.\lib_Fat/ff.c **** 	FRESULT res;
2020:.\lib_Fat/ff.c **** 	UINT nent;
2021:.\lib_Fat/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2022:.\lib_Fat/ff.c **** 
2023:.\lib_Fat/ff.c **** 	/* Create set sum */
2024:.\lib_Fat/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2025:.\lib_Fat/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2026:.\lib_Fat/ff.c **** 
2027:.\lib_Fat/ff.c **** 	/* Store the set of directory to the volume */
2028:.\lib_Fat/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2029:.\lib_Fat/ff.c **** 	while (res == FR_OK) {
2030:.\lib_Fat/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2031:.\lib_Fat/ff.c **** 		if (res != FR_OK) break;
2032:.\lib_Fat/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2033:.\lib_Fat/ff.c **** 		dp->obj.fs->wflag = 1;
2034:.\lib_Fat/ff.c **** 		if (--nent == 0) break;
2035:.\lib_Fat/ff.c **** 		dirb += SZDIRE;
2036:.\lib_Fat/ff.c **** 		res = dir_next(dp, 0);
2037:.\lib_Fat/ff.c **** 	}
2038:.\lib_Fat/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2039:.\lib_Fat/ff.c **** }
2040:.\lib_Fat/ff.c **** 
2041:.\lib_Fat/ff.c **** 
2042:.\lib_Fat/ff.c **** 
2043:.\lib_Fat/ff.c **** /*-------------------------------------------*/
2044:.\lib_Fat/ff.c **** /* exFAT: Create a new directory enrty block */
2045:.\lib_Fat/ff.c **** /*-------------------------------------------*/
2046:.\lib_Fat/ff.c **** 
2047:.\lib_Fat/ff.c **** static
2048:.\lib_Fat/ff.c **** void create_xdir (
2049:.\lib_Fat/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2050:.\lib_Fat/ff.c **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2051:.\lib_Fat/ff.c **** )
2052:.\lib_Fat/ff.c **** {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 84


2053:.\lib_Fat/ff.c **** 	UINT i;
2054:.\lib_Fat/ff.c **** 	BYTE nb, nc;
2055:.\lib_Fat/ff.c **** 	WCHAR chr;
2056:.\lib_Fat/ff.c **** 
2057:.\lib_Fat/ff.c **** 
2058:.\lib_Fat/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);			/* Initialize 85+C0 entry */
2059:.\lib_Fat/ff.c **** 	dirb[XDIR_Type] = 0x85;
2060:.\lib_Fat/ff.c **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2061:.\lib_Fat/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2062:.\lib_Fat/ff.c **** 
2063:.\lib_Fat/ff.c **** 	i = SZDIRE * 2;	/* C1 offset */
2064:.\lib_Fat/ff.c **** 	nc = 0; nb = 1; chr = 1;
2065:.\lib_Fat/ff.c **** 	do {
2066:.\lib_Fat/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2067:.\lib_Fat/ff.c **** 		do {	/* Fill name field */
2068:.\lib_Fat/ff.c **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2069:.\lib_Fat/ff.c **** 			st_word(dirb + i, chr); i += 2;	/* Store it */
2070:.\lib_Fat/ff.c **** 		} while (i % SZDIRE);
2071:.\lib_Fat/ff.c **** 		nb++;
2072:.\lib_Fat/ff.c **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2073:.\lib_Fat/ff.c **** 
2074:.\lib_Fat/ff.c **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2075:.\lib_Fat/ff.c **** 	dirb[XDIR_NumSec] = nb;		/* Set number of C0+C1s */
2076:.\lib_Fat/ff.c **** }
2077:.\lib_Fat/ff.c **** 
2078:.\lib_Fat/ff.c **** #endif	/* !_FS_READONLY */
2079:.\lib_Fat/ff.c **** #endif	/* _FS_EXFAT */
2080:.\lib_Fat/ff.c **** 
2081:.\lib_Fat/ff.c **** 
2082:.\lib_Fat/ff.c **** 
2083:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2084:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2085:.\lib_Fat/ff.c **** /* Read an object from the directory                                     */
2086:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2087:.\lib_Fat/ff.c **** 
2088:.\lib_Fat/ff.c **** static
2089:.\lib_Fat/ff.c **** FRESULT dir_read (
2090:.\lib_Fat/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2091:.\lib_Fat/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2092:.\lib_Fat/ff.c **** )
2093:.\lib_Fat/ff.c **** {
 2669              		.loc 1 2093 0
 2670              		.cfi_startproc
 2671 0000 90B5     		push	{r4, r7, lr}
 2672              		.cfi_def_cfa_offset 12
 2673              		.cfi_offset 4, -12
 2674              		.cfi_offset 7, -8
 2675              		.cfi_offset 14, -4
 2676 0002 87B0     		sub	sp, sp, #28
 2677              		.cfi_def_cfa_offset 40
 2678 0004 00AF     		add	r7, sp, #0
 2679              		.cfi_def_cfa_register 7
 2680 0006 7860     		str	r0, [r7, #4]
 2681 0008 3960     		str	r1, [r7]
2094:.\lib_Fat/ff.c **** 	FRESULT res = FR_NO_FILE;
 2682              		.loc 1 2094 0
 2683 000a 1723     		mov	r3, #23
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 85


 2684 000c FB18     		add	r3, r7, r3
 2685 000e 0422     		mov	r2, #4
 2686 0010 1A70     		strb	r2, [r3]
2095:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 2687              		.loc 1 2095 0
 2688 0012 7B68     		ldr	r3, [r7, #4]
 2689 0014 1B68     		ldr	r3, [r3]
 2690 0016 3B61     		str	r3, [r7, #16]
2096:.\lib_Fat/ff.c **** 	BYTE a, c;
2097:.\lib_Fat/ff.c **** #if _USE_LFN != 0
2098:.\lib_Fat/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2099:.\lib_Fat/ff.c **** #endif
2100:.\lib_Fat/ff.c **** 
2101:.\lib_Fat/ff.c **** 	while (dp->sect) {
 2691              		.loc 1 2101 0
 2692 0018 5AE0     		b	.L155
 2693              	.L160:
2102:.\lib_Fat/ff.c **** 		res = move_window(fs, dp->sect);
 2694              		.loc 1 2102 0
 2695 001a 7B68     		ldr	r3, [r7, #4]
 2696 001c 9B69     		ldr	r3, [r3, #24]
 2697 001e 1722     		mov	r2, #23
 2698 0020 BC18     		add	r4, r7, r2
 2699 0022 3A69     		ldr	r2, [r7, #16]
 2700 0024 101C     		mov	r0, r2
 2701 0026 191C     		mov	r1, r3
 2702 0028 FFF7FEFF 		bl	move_window
 2703 002c 031C     		mov	r3, r0
 2704 002e 2370     		strb	r3, [r4]
2103:.\lib_Fat/ff.c **** 		if (res != FR_OK) break;
 2705              		.loc 1 2103 0
 2706 0030 1723     		mov	r3, #23
 2707 0032 FB18     		add	r3, r7, r3
 2708 0034 1B78     		ldrb	r3, [r3]
 2709 0036 002B     		cmp	r3, #0
 2710 0038 00D0     		beq	.L156
 2711 003a 4DE0     		b	.L157
 2712              	.L156:
2104:.\lib_Fat/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 2713              		.loc 1 2104 0
 2714 003c 7B68     		ldr	r3, [r7, #4]
 2715 003e DA69     		ldr	r2, [r3, #28]
 2716 0040 0F23     		mov	r3, #15
 2717 0042 FB18     		add	r3, r7, r3
 2718 0044 1278     		ldrb	r2, [r2]
 2719 0046 1A70     		strb	r2, [r3]
2105:.\lib_Fat/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 2720              		.loc 1 2105 0
 2721 0048 0F23     		mov	r3, #15
 2722 004a FB18     		add	r3, r7, r3
 2723 004c 1B78     		ldrb	r3, [r3]
 2724 004e 002B     		cmp	r3, #0
 2725 0050 04D1     		bne	.L158
 2726              		.loc 1 2105 0 is_stmt 0 discriminator 1
 2727 0052 1723     		mov	r3, #23
 2728 0054 FB18     		add	r3, r7, r3
 2729 0056 0422     		mov	r2, #4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 86


 2730 0058 1A70     		strb	r2, [r3]
 2731 005a 3DE0     		b	.L157
 2732              	.L158:
2106:.\lib_Fat/ff.c **** #if _FS_EXFAT
2107:.\lib_Fat/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
2108:.\lib_Fat/ff.c **** 			if (_USE_LABEL && vol) {
2109:.\lib_Fat/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2110:.\lib_Fat/ff.c **** 			} else {
2111:.\lib_Fat/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2112:.\lib_Fat/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2113:.\lib_Fat/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2114:.\lib_Fat/ff.c **** 					if (res == FR_OK) {
2115:.\lib_Fat/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2116:.\lib_Fat/ff.c **** 					}
2117:.\lib_Fat/ff.c **** 					break;
2118:.\lib_Fat/ff.c **** 				}
2119:.\lib_Fat/ff.c **** 			}
2120:.\lib_Fat/ff.c **** 		} else
2121:.\lib_Fat/ff.c **** #endif
2122:.\lib_Fat/ff.c **** 		{	/* At the FAT12/16/32 */
2123:.\lib_Fat/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 2733              		.loc 1 2123 0 is_stmt 1
 2734 005c 7B68     		ldr	r3, [r7, #4]
 2735 005e DB69     		ldr	r3, [r3, #28]
 2736 0060 0B33     		add	r3, r3, #11
 2737 0062 1A78     		ldrb	r2, [r3]
 2738 0064 0E23     		mov	r3, #14
 2739 0066 FB18     		add	r3, r7, r3
 2740 0068 3F21     		mov	r1, #63
 2741 006a 0A40     		and	r2, r1
 2742 006c 1A70     		strb	r2, [r3]
 2743 006e 7B68     		ldr	r3, [r7, #4]
 2744 0070 0E22     		mov	r2, #14
 2745 0072 BA18     		add	r2, r7, r2
 2746 0074 1278     		ldrb	r2, [r2]
 2747 0076 9A71     		strb	r2, [r3, #6]
2124:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2125:.\lib_Fat/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2126:.\lib_Fat/ff.c **** 				ord = 0xFF;
2127:.\lib_Fat/ff.c **** 			} else {
2128:.\lib_Fat/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2129:.\lib_Fat/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2130:.\lib_Fat/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2131:.\lib_Fat/ff.c **** 						c &= ~LLEF; ord = c;
2132:.\lib_Fat/ff.c **** 						dp->blk_ofs = dp->dptr;
2133:.\lib_Fat/ff.c **** 					}
2134:.\lib_Fat/ff.c **** 					/* Check LFN validity and capture it */
2135:.\lib_Fat/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2136:.\lib_Fat/ff.c **** 				} else {					/* An SFN entry is found */
2137:.\lib_Fat/ff.c **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2138:.\lib_Fat/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2139:.\lib_Fat/ff.c **** 					}
2140:.\lib_Fat/ff.c **** 					break;
2141:.\lib_Fat/ff.c **** 				}
2142:.\lib_Fat/ff.c **** 			}
2143:.\lib_Fat/ff.c **** #else		/* Non LFN configuration */
2144:.\lib_Fat/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 87


 2748              		.loc 1 2144 0
 2749 0078 0F23     		mov	r3, #15
 2750 007a FB18     		add	r3, r7, r3
 2751 007c 1B78     		ldrb	r3, [r3]
 2752 007e E52B     		cmp	r3, #229
 2753 0080 17D0     		beq	.L159
 2754              		.loc 1 2144 0 is_stmt 0 discriminator 1
 2755 0082 0F23     		mov	r3, #15
 2756 0084 FB18     		add	r3, r7, r3
 2757 0086 1B78     		ldrb	r3, [r3]
 2758 0088 2E2B     		cmp	r3, #46
 2759 008a 12D0     		beq	.L159
 2760              		.loc 1 2144 0 discriminator 2
 2761 008c 0E23     		mov	r3, #14
 2762 008e FB18     		add	r3, r7, r3
 2763 0090 1B78     		ldrb	r3, [r3]
 2764 0092 0F2B     		cmp	r3, #15
 2765 0094 0DD0     		beq	.L159
 2766              		.loc 1 2144 0 discriminator 3
 2767 0096 0E23     		mov	r3, #14
 2768 0098 FB18     		add	r3, r7, r3
 2769 009a 1B78     		ldrb	r3, [r3]
 2770 009c 2022     		mov	r2, #32
 2771 009e 9343     		bic	r3, r2
 2772 00a0 083B     		sub	r3, r3, #8
 2773 00a2 5A42     		neg	r2, r3
 2774 00a4 5341     		adc	r3, r3, r2
 2775 00a6 DBB2     		uxtb	r3, r3
 2776 00a8 1A1E     		sub	r2, r3, #0
 2777 00aa 3B68     		ldr	r3, [r7]
 2778 00ac 9A42     		cmp	r2, r3
 2779 00ae 00D1     		bne	.L159
2145:.\lib_Fat/ff.c **** 				break;
 2780              		.loc 1 2145 0 is_stmt 1
 2781 00b0 12E0     		b	.L157
 2782              	.L159:
2146:.\lib_Fat/ff.c **** 			}
2147:.\lib_Fat/ff.c **** #endif
2148:.\lib_Fat/ff.c **** 		}
2149:.\lib_Fat/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 2783              		.loc 1 2149 0
 2784 00b2 1723     		mov	r3, #23
 2785 00b4 FC18     		add	r4, r7, r3
 2786 00b6 7B68     		ldr	r3, [r7, #4]
 2787 00b8 181C     		mov	r0, r3
 2788 00ba 0021     		mov	r1, #0
 2789 00bc FFF7FEFF 		bl	dir_next
 2790 00c0 031C     		mov	r3, r0
 2791 00c2 2370     		strb	r3, [r4]
2150:.\lib_Fat/ff.c **** 		if (res != FR_OK) break;
 2792              		.loc 1 2150 0
 2793 00c4 1723     		mov	r3, #23
 2794 00c6 FB18     		add	r3, r7, r3
 2795 00c8 1B78     		ldrb	r3, [r3]
 2796 00ca 002B     		cmp	r3, #0
 2797 00cc 00D0     		beq	.L155
 2798 00ce 03E0     		b	.L157
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 88


 2799              	.L155:
2101:.\lib_Fat/ff.c **** 		res = move_window(fs, dp->sect);
 2800              		.loc 1 2101 0
 2801 00d0 7B68     		ldr	r3, [r7, #4]
 2802 00d2 9B69     		ldr	r3, [r3, #24]
 2803 00d4 002B     		cmp	r3, #0
 2804 00d6 A0D1     		bne	.L160
 2805              	.L157:
2151:.\lib_Fat/ff.c **** 	}
2152:.\lib_Fat/ff.c **** 
2153:.\lib_Fat/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 2806              		.loc 1 2153 0
 2807 00d8 1723     		mov	r3, #23
 2808 00da FB18     		add	r3, r7, r3
 2809 00dc 1B78     		ldrb	r3, [r3]
 2810 00de 002B     		cmp	r3, #0
 2811 00e0 02D0     		beq	.L161
 2812              		.loc 1 2153 0 is_stmt 0 discriminator 1
 2813 00e2 7B68     		ldr	r3, [r7, #4]
 2814 00e4 0022     		mov	r2, #0
 2815 00e6 9A61     		str	r2, [r3, #24]
 2816              	.L161:
2154:.\lib_Fat/ff.c **** 	return res;
 2817              		.loc 1 2154 0 is_stmt 1
 2818 00e8 1723     		mov	r3, #23
 2819 00ea FB18     		add	r3, r7, r3
 2820 00ec 1B78     		ldrb	r3, [r3]
2155:.\lib_Fat/ff.c **** }
 2821              		.loc 1 2155 0
 2822 00ee 181C     		mov	r0, r3
 2823 00f0 BD46     		mov	sp, r7
 2824 00f2 07B0     		add	sp, sp, #28
 2825              		@ sp needed
 2826 00f4 90BD     		pop	{r4, r7, pc}
 2827              		.cfi_endproc
 2828              	.LFE21:
 2829              		.size	dir_read, .-dir_read
 2830 00f6 C046     		.section	.text.dir_find,"ax",%progbits
 2831              		.align	2
 2832              		.code	16
 2833              		.thumb_func
 2834              		.type	dir_find, %function
 2835              	dir_find:
 2836              	.LFB22:
2156:.\lib_Fat/ff.c **** 
2157:.\lib_Fat/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2158:.\lib_Fat/ff.c **** 
2159:.\lib_Fat/ff.c **** 
2160:.\lib_Fat/ff.c **** 
2161:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2162:.\lib_Fat/ff.c **** /* Directory handling - Find an object in the directory                  */
2163:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2164:.\lib_Fat/ff.c **** 
2165:.\lib_Fat/ff.c **** static
2166:.\lib_Fat/ff.c **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2167:.\lib_Fat/ff.c **** 	DIR* dp			/* Pointer to the directory object with the file name */
2168:.\lib_Fat/ff.c **** )
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 89


2169:.\lib_Fat/ff.c **** {
 2837              		.loc 1 2169 0
 2838              		.cfi_startproc
 2839 0000 90B5     		push	{r4, r7, lr}
 2840              		.cfi_def_cfa_offset 12
 2841              		.cfi_offset 4, -12
 2842              		.cfi_offset 7, -8
 2843              		.cfi_offset 14, -4
 2844 0002 87B0     		sub	sp, sp, #28
 2845              		.cfi_def_cfa_offset 40
 2846 0004 00AF     		add	r7, sp, #0
 2847              		.cfi_def_cfa_register 7
 2848 0006 7860     		str	r0, [r7, #4]
2170:.\lib_Fat/ff.c **** 	FRESULT res;
2171:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 2849              		.loc 1 2171 0
 2850 0008 7B68     		ldr	r3, [r7, #4]
 2851 000a 1B68     		ldr	r3, [r3]
 2852 000c 3B61     		str	r3, [r7, #16]
2172:.\lib_Fat/ff.c **** 	BYTE c;
2173:.\lib_Fat/ff.c **** #if _USE_LFN != 0
2174:.\lib_Fat/ff.c **** 	BYTE a, ord, sum;
2175:.\lib_Fat/ff.c **** #endif
2176:.\lib_Fat/ff.c **** 
2177:.\lib_Fat/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 2853              		.loc 1 2177 0
 2854 000e 1723     		mov	r3, #23
 2855 0010 FC18     		add	r4, r7, r3
 2856 0012 7B68     		ldr	r3, [r7, #4]
 2857 0014 181C     		mov	r0, r3
 2858 0016 0021     		mov	r1, #0
 2859 0018 FFF7FEFF 		bl	dir_sdi
 2860 001c 031C     		mov	r3, r0
 2861 001e 2370     		strb	r3, [r4]
2178:.\lib_Fat/ff.c **** 	if (res != FR_OK) return res;
 2862              		.loc 1 2178 0
 2863 0020 1723     		mov	r3, #23
 2864 0022 FB18     		add	r3, r7, r3
 2865 0024 1B78     		ldrb	r3, [r3]
 2866 0026 002B     		cmp	r3, #0
 2867 0028 03D0     		beq	.L164
 2868              		.loc 1 2178 0 is_stmt 0 discriminator 1
 2869 002a 1723     		mov	r3, #23
 2870 002c FB18     		add	r3, r7, r3
 2871 002e 1B78     		ldrb	r3, [r3]
 2872 0030 4EE0     		b	.L165
 2873              	.L164:
2179:.\lib_Fat/ff.c **** #if _FS_EXFAT
2180:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
2181:.\lib_Fat/ff.c **** 		BYTE nc;
2182:.\lib_Fat/ff.c **** 		UINT di, ni;
2183:.\lib_Fat/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2184:.\lib_Fat/ff.c **** 
2185:.\lib_Fat/ff.c **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2186:.\lib_Fat/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value 
2187:.\lib_Fat/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2188:.\lib_Fat/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 90


2189:.\lib_Fat/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2190:.\lib_Fat/ff.c **** 			}
2191:.\lib_Fat/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2192:.\lib_Fat/ff.c **** 		}
2193:.\lib_Fat/ff.c **** 		return res;
2194:.\lib_Fat/ff.c **** 	}
2195:.\lib_Fat/ff.c **** #endif
2196:.\lib_Fat/ff.c **** 	/* At the FAT12/16/32 */
2197:.\lib_Fat/ff.c **** #if _USE_LFN != 0
2198:.\lib_Fat/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2199:.\lib_Fat/ff.c **** #endif
2200:.\lib_Fat/ff.c **** 	do {
2201:.\lib_Fat/ff.c **** 		res = move_window(fs, dp->sect);
 2874              		.loc 1 2201 0 is_stmt 1
 2875 0032 7B68     		ldr	r3, [r7, #4]
 2876 0034 9B69     		ldr	r3, [r3, #24]
 2877 0036 1722     		mov	r2, #23
 2878 0038 BC18     		add	r4, r7, r2
 2879 003a 3A69     		ldr	r2, [r7, #16]
 2880 003c 101C     		mov	r0, r2
 2881 003e 191C     		mov	r1, r3
 2882 0040 FFF7FEFF 		bl	move_window
 2883 0044 031C     		mov	r3, r0
 2884 0046 2370     		strb	r3, [r4]
2202:.\lib_Fat/ff.c **** 		if (res != FR_OK) break;
 2885              		.loc 1 2202 0
 2886 0048 1723     		mov	r3, #23
 2887 004a FB18     		add	r3, r7, r3
 2888 004c 1B78     		ldrb	r3, [r3]
 2889 004e 002B     		cmp	r3, #0
 2890 0050 00D0     		beq	.L166
 2891 0052 3AE0     		b	.L167
 2892              	.L166:
2203:.\lib_Fat/ff.c **** 		c = dp->dir[DIR_Name];
 2893              		.loc 1 2203 0
 2894 0054 7B68     		ldr	r3, [r7, #4]
 2895 0056 DA69     		ldr	r2, [r3, #28]
 2896 0058 0F23     		mov	r3, #15
 2897 005a FB18     		add	r3, r7, r3
 2898 005c 1278     		ldrb	r2, [r2]
 2899 005e 1A70     		strb	r2, [r3]
2204:.\lib_Fat/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2900              		.loc 1 2204 0
 2901 0060 0F23     		mov	r3, #15
 2902 0062 FB18     		add	r3, r7, r3
 2903 0064 1B78     		ldrb	r3, [r3]
 2904 0066 002B     		cmp	r3, #0
 2905 0068 04D1     		bne	.L168
 2906              		.loc 1 2204 0 is_stmt 0 discriminator 1
 2907 006a 1723     		mov	r3, #23
 2908 006c FB18     		add	r3, r7, r3
 2909 006e 0422     		mov	r2, #4
 2910 0070 1A70     		strb	r2, [r3]
 2911 0072 2AE0     		b	.L167
 2912              	.L168:
2205:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2206:.\lib_Fat/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 91


2207:.\lib_Fat/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2208:.\lib_Fat/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2209:.\lib_Fat/ff.c **** 		} else {
2210:.\lib_Fat/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2211:.\lib_Fat/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2212:.\lib_Fat/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2213:.\lib_Fat/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2214:.\lib_Fat/ff.c **** 						c &= ~LLEF; ord = c;	/* LFN start order */
2215:.\lib_Fat/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2216:.\lib_Fat/ff.c **** 					}
2217:.\lib_Fat/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2218:.\lib_Fat/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2219:.\lib_Fat/ff.c **** 				}
2220:.\lib_Fat/ff.c **** 			} else {					/* An SFN entry is found */
2221:.\lib_Fat/ff.c **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2222:.\lib_Fat/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2223:.\lib_Fat/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2224:.\lib_Fat/ff.c **** 			}
2225:.\lib_Fat/ff.c **** 		}
2226:.\lib_Fat/ff.c **** #else		/* Non LFN configuration */
2227:.\lib_Fat/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 2913              		.loc 1 2227 0 is_stmt 1
 2914 0074 7B68     		ldr	r3, [r7, #4]
 2915 0076 DB69     		ldr	r3, [r3, #28]
 2916 0078 0B33     		add	r3, r3, #11
 2917 007a 1B78     		ldrb	r3, [r3]
 2918 007c 3F22     		mov	r2, #63
 2919 007e 1340     		and	r3, r2
 2920 0080 DAB2     		uxtb	r2, r3
 2921 0082 7B68     		ldr	r3, [r7, #4]
 2922 0084 9A71     		strb	r2, [r3, #6]
2228:.\lib_Fat/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 2923              		.loc 1 2228 0
 2924 0086 7B68     		ldr	r3, [r7, #4]
 2925 0088 DB69     		ldr	r3, [r3, #28]
 2926 008a 0B33     		add	r3, r3, #11
 2927 008c 1B78     		ldrb	r3, [r3]
 2928 008e 1A1C     		mov	r2, r3
 2929 0090 0823     		mov	r3, #8
 2930 0092 1340     		and	r3, r2
 2931 0094 0BD1     		bne	.L169
 2932              		.loc 1 2228 0 is_stmt 0 discriminator 1
 2933 0096 7B68     		ldr	r3, [r7, #4]
 2934 0098 DA69     		ldr	r2, [r3, #28]
 2935 009a 7B68     		ldr	r3, [r7, #4]
 2936 009c 2033     		add	r3, r3, #32
 2937 009e 101C     		mov	r0, r2
 2938 00a0 191C     		mov	r1, r3
 2939 00a2 0B22     		mov	r2, #11
 2940 00a4 FFF7FEFF 		bl	mem_cmp
 2941 00a8 031E     		sub	r3, r0, #0
 2942 00aa 00D1     		bne	.L169
 2943              		.loc 1 2228 0
 2944 00ac 0DE0     		b	.L167
 2945              	.L169:
2229:.\lib_Fat/ff.c **** #endif
2230:.\lib_Fat/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 92


 2946              		.loc 1 2230 0 is_stmt 1
 2947 00ae 1723     		mov	r3, #23
 2948 00b0 FC18     		add	r4, r7, r3
 2949 00b2 7B68     		ldr	r3, [r7, #4]
 2950 00b4 181C     		mov	r0, r3
 2951 00b6 0021     		mov	r1, #0
 2952 00b8 FFF7FEFF 		bl	dir_next
 2953 00bc 031C     		mov	r3, r0
 2954 00be 2370     		strb	r3, [r4]
2231:.\lib_Fat/ff.c **** 	} while (res == FR_OK);
 2955              		.loc 1 2231 0
 2956 00c0 1723     		mov	r3, #23
 2957 00c2 FB18     		add	r3, r7, r3
 2958 00c4 1B78     		ldrb	r3, [r3]
 2959 00c6 002B     		cmp	r3, #0
 2960 00c8 B3D0     		beq	.L164
 2961              	.L167:
2232:.\lib_Fat/ff.c **** 
2233:.\lib_Fat/ff.c **** 	return res;
 2962              		.loc 1 2233 0
 2963 00ca 1723     		mov	r3, #23
 2964 00cc FB18     		add	r3, r7, r3
 2965 00ce 1B78     		ldrb	r3, [r3]
 2966              	.L165:
2234:.\lib_Fat/ff.c **** }
 2967              		.loc 1 2234 0
 2968 00d0 181C     		mov	r0, r3
 2969 00d2 BD46     		mov	sp, r7
 2970 00d4 07B0     		add	sp, sp, #28
 2971              		@ sp needed
 2972 00d6 90BD     		pop	{r4, r7, pc}
 2973              		.cfi_endproc
 2974              	.LFE22:
 2975              		.size	dir_find, .-dir_find
 2976              		.section	.text.dir_register,"ax",%progbits
 2977              		.align	2
 2978              		.code	16
 2979              		.thumb_func
 2980              		.type	dir_register, %function
 2981              	dir_register:
 2982              	.LFB23:
2235:.\lib_Fat/ff.c **** 
2236:.\lib_Fat/ff.c **** 
2237:.\lib_Fat/ff.c **** 
2238:.\lib_Fat/ff.c **** 
2239:.\lib_Fat/ff.c **** #if !_FS_READONLY
2240:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2241:.\lib_Fat/ff.c **** /* Register an object to the directory                                   */
2242:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2243:.\lib_Fat/ff.c **** 
2244:.\lib_Fat/ff.c **** static
2245:.\lib_Fat/ff.c **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2246:.\lib_Fat/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
2247:.\lib_Fat/ff.c **** )
2248:.\lib_Fat/ff.c **** {
 2983              		.loc 1 2248 0
 2984              		.cfi_startproc
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 93


 2985 0000 90B5     		push	{r4, r7, lr}
 2986              		.cfi_def_cfa_offset 12
 2987              		.cfi_offset 4, -12
 2988              		.cfi_offset 7, -8
 2989              		.cfi_offset 14, -4
 2990 0002 85B0     		sub	sp, sp, #20
 2991              		.cfi_def_cfa_offset 32
 2992 0004 00AF     		add	r7, sp, #0
 2993              		.cfi_def_cfa_register 7
 2994 0006 7860     		str	r0, [r7, #4]
2249:.\lib_Fat/ff.c **** 	FRESULT res;
2250:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 2995              		.loc 1 2250 0
 2996 0008 7B68     		ldr	r3, [r7, #4]
 2997 000a 1B68     		ldr	r3, [r3]
 2998 000c BB60     		str	r3, [r7, #8]
2251:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2252:.\lib_Fat/ff.c **** 	UINT n, nlen, nent;
2253:.\lib_Fat/ff.c **** 	BYTE sn[12], sum;
2254:.\lib_Fat/ff.c **** 
2255:.\lib_Fat/ff.c **** 
2256:.\lib_Fat/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2257:.\lib_Fat/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2258:.\lib_Fat/ff.c **** 
2259:.\lib_Fat/ff.c **** #if _FS_EXFAT
2260:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
2261:.\lib_Fat/ff.c **** 		DIR dj;
2262:.\lib_Fat/ff.c **** 
2263:.\lib_Fat/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2264:.\lib_Fat/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2265:.\lib_Fat/ff.c **** 		if (res != FR_OK) return res;
2266:.\lib_Fat/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);			/* Set block position */
2267:.\lib_Fat/ff.c **** 
2268:.\lib_Fat/ff.c **** 		if (dp->obj.stat & 4) {			/* Has the sub-directory been stretched? */
2269:.\lib_Fat/ff.c **** 			dp->obj.stat &= 3;
2270:.\lib_Fat/ff.c **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase object size by cluster size */
2271:.\lib_Fat/ff.c **** 			res = fill_fat_chain(&dp->obj);	/* Complement FAT chain if needed */
2272:.\lib_Fat/ff.c **** 			if (res != FR_OK) return res;
2273:.\lib_Fat/ff.c **** 			res = load_obj_dir(&dj, &dp->obj);
2274:.\lib_Fat/ff.c **** 			if (res != FR_OK) return res;	/* Load the object status */
2275:.\lib_Fat/ff.c **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2276:.\lib_Fat/ff.c **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2277:.\lib_Fat/ff.c **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2278:.\lib_Fat/ff.c **** 			res = store_xdir(&dj);			/* Store the object status */
2279:.\lib_Fat/ff.c **** 			if (res != FR_OK) return res;
2280:.\lib_Fat/ff.c **** 		}
2281:.\lib_Fat/ff.c **** 
2282:.\lib_Fat/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2283:.\lib_Fat/ff.c **** 		return FR_OK;
2284:.\lib_Fat/ff.c **** 	}
2285:.\lib_Fat/ff.c **** #endif
2286:.\lib_Fat/ff.c **** 	/* At the FAT12/16/32 */
2287:.\lib_Fat/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2288:.\lib_Fat/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2289:.\lib_Fat/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2290:.\lib_Fat/ff.c **** 		for (n = 1; n < 100; n++) {
2291:.\lib_Fat/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 94


2292:.\lib_Fat/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2293:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
2294:.\lib_Fat/ff.c **** 		}
2295:.\lib_Fat/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2296:.\lib_Fat/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2297:.\lib_Fat/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2298:.\lib_Fat/ff.c **** 	}
2299:.\lib_Fat/ff.c **** 
2300:.\lib_Fat/ff.c **** 	/* Create an SFN with/without LFNs. */
2301:.\lib_Fat/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2302:.\lib_Fat/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2303:.\lib_Fat/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2304:.\lib_Fat/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2305:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
2306:.\lib_Fat/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2307:.\lib_Fat/ff.c **** 			do {					/* Store LFN entries in bottom first */
2308:.\lib_Fat/ff.c **** 				res = move_window(fs, dp->sect);
2309:.\lib_Fat/ff.c **** 				if (res != FR_OK) break;
2310:.\lib_Fat/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2311:.\lib_Fat/ff.c **** 				fs->wflag = 1;
2312:.\lib_Fat/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2313:.\lib_Fat/ff.c **** 			} while (res == FR_OK && --nent);
2314:.\lib_Fat/ff.c **** 		}
2315:.\lib_Fat/ff.c **** 	}
2316:.\lib_Fat/ff.c **** 
2317:.\lib_Fat/ff.c **** #else	/* Non LFN configuration */
2318:.\lib_Fat/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 2999              		.loc 1 2318 0
 3000 000e 0F23     		mov	r3, #15
 3001 0010 FC18     		add	r4, r7, r3
 3002 0012 7B68     		ldr	r3, [r7, #4]
 3003 0014 181C     		mov	r0, r3
 3004 0016 0121     		mov	r1, #1
 3005 0018 FFF7FEFF 		bl	dir_alloc
 3006 001c 031C     		mov	r3, r0
 3007 001e 2370     		strb	r3, [r4]
2319:.\lib_Fat/ff.c **** 
2320:.\lib_Fat/ff.c **** #endif
2321:.\lib_Fat/ff.c **** 
2322:.\lib_Fat/ff.c **** 	/* Set SFN entry */
2323:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 3008              		.loc 1 2323 0
 3009 0020 0F23     		mov	r3, #15
 3010 0022 FB18     		add	r3, r7, r3
 3011 0024 1B78     		ldrb	r3, [r3]
 3012 0026 002B     		cmp	r3, #0
 3013 0028 22D1     		bne	.L171
2324:.\lib_Fat/ff.c **** 		res = move_window(fs, dp->sect);
 3014              		.loc 1 2324 0
 3015 002a 7B68     		ldr	r3, [r7, #4]
 3016 002c 9B69     		ldr	r3, [r3, #24]
 3017 002e 0F22     		mov	r2, #15
 3018 0030 BC18     		add	r4, r7, r2
 3019 0032 BA68     		ldr	r2, [r7, #8]
 3020 0034 101C     		mov	r0, r2
 3021 0036 191C     		mov	r1, r3
 3022 0038 FFF7FEFF 		bl	move_window
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 95


 3023 003c 031C     		mov	r3, r0
 3024 003e 2370     		strb	r3, [r4]
2325:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
 3025              		.loc 1 2325 0
 3026 0040 0F23     		mov	r3, #15
 3027 0042 FB18     		add	r3, r7, r3
 3028 0044 1B78     		ldrb	r3, [r3]
 3029 0046 002B     		cmp	r3, #0
 3030 0048 12D1     		bne	.L171
2326:.\lib_Fat/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3031              		.loc 1 2326 0
 3032 004a 7B68     		ldr	r3, [r7, #4]
 3033 004c DB69     		ldr	r3, [r3, #28]
 3034 004e 181C     		mov	r0, r3
 3035 0050 0021     		mov	r1, #0
 3036 0052 2022     		mov	r2, #32
 3037 0054 FFF7FEFF 		bl	mem_set
2327:.\lib_Fat/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3038              		.loc 1 2327 0
 3039 0058 7B68     		ldr	r3, [r7, #4]
 3040 005a DA69     		ldr	r2, [r3, #28]
 3041 005c 7B68     		ldr	r3, [r7, #4]
 3042 005e 2033     		add	r3, r3, #32
 3043 0060 101C     		mov	r0, r2
 3044 0062 191C     		mov	r1, r3
 3045 0064 0B22     		mov	r2, #11
 3046 0066 FFF7FEFF 		bl	mem_cpy
2328:.\lib_Fat/ff.c **** #if _USE_LFN != 0
2329:.\lib_Fat/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2330:.\lib_Fat/ff.c **** #endif
2331:.\lib_Fat/ff.c **** 			fs->wflag = 1;
 3047              		.loc 1 2331 0
 3048 006a BB68     		ldr	r3, [r7, #8]
 3049 006c 0122     		mov	r2, #1
 3050 006e DA70     		strb	r2, [r3, #3]
 3051              	.L171:
2332:.\lib_Fat/ff.c **** 		}
2333:.\lib_Fat/ff.c **** 	}
2334:.\lib_Fat/ff.c **** 
2335:.\lib_Fat/ff.c **** 	return res;
 3052              		.loc 1 2335 0
 3053 0070 0F23     		mov	r3, #15
 3054 0072 FB18     		add	r3, r7, r3
 3055 0074 1B78     		ldrb	r3, [r3]
2336:.\lib_Fat/ff.c **** }
 3056              		.loc 1 2336 0
 3057 0076 181C     		mov	r0, r3
 3058 0078 BD46     		mov	sp, r7
 3059 007a 05B0     		add	sp, sp, #20
 3060              		@ sp needed
 3061 007c 90BD     		pop	{r4, r7, pc}
 3062              		.cfi_endproc
 3063              	.LFE23:
 3064              		.size	dir_register, .-dir_register
 3065 007e C046     		.section	.text.dir_remove,"ax",%progbits
 3066              		.align	2
 3067              		.code	16
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 96


 3068              		.thumb_func
 3069              		.type	dir_remove, %function
 3070              	dir_remove:
 3071              	.LFB24:
2337:.\lib_Fat/ff.c **** 
2338:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
2339:.\lib_Fat/ff.c **** 
2340:.\lib_Fat/ff.c **** 
2341:.\lib_Fat/ff.c **** 
2342:.\lib_Fat/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2343:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2344:.\lib_Fat/ff.c **** /* Remove an object from the directory                                   */
2345:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2346:.\lib_Fat/ff.c **** 
2347:.\lib_Fat/ff.c **** static
2348:.\lib_Fat/ff.c **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2349:.\lib_Fat/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2350:.\lib_Fat/ff.c **** )
2351:.\lib_Fat/ff.c **** {
 3072              		.loc 1 2351 0
 3073              		.cfi_startproc
 3074 0000 90B5     		push	{r4, r7, lr}
 3075              		.cfi_def_cfa_offset 12
 3076              		.cfi_offset 4, -12
 3077              		.cfi_offset 7, -8
 3078              		.cfi_offset 14, -4
 3079 0002 85B0     		sub	sp, sp, #20
 3080              		.cfi_def_cfa_offset 32
 3081 0004 00AF     		add	r7, sp, #0
 3082              		.cfi_def_cfa_register 7
 3083 0006 7860     		str	r0, [r7, #4]
2352:.\lib_Fat/ff.c **** 	FRESULT res;
2353:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
 3084              		.loc 1 2353 0
 3085 0008 7B68     		ldr	r3, [r7, #4]
 3086 000a 1B68     		ldr	r3, [r3]
 3087 000c FB60     		str	r3, [r7, #12]
2354:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2355:.\lib_Fat/ff.c **** 	DWORD last = dp->dptr;
2356:.\lib_Fat/ff.c **** 
2357:.\lib_Fat/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2358:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
2359:.\lib_Fat/ff.c **** 		do {
2360:.\lib_Fat/ff.c **** 			res = move_window(fs, dp->sect);
2361:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
2362:.\lib_Fat/ff.c **** 			/* Mark an entry 'deleted' */
2363:.\lib_Fat/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* At the exFAT */
2364:.\lib_Fat/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;
2365:.\lib_Fat/ff.c **** 			} else {									/* At the FAT12/16/32 */
2366:.\lib_Fat/ff.c **** 				dp->dir[DIR_Name] = DDEM;
2367:.\lib_Fat/ff.c **** 			}
2368:.\lib_Fat/ff.c **** 			fs->wflag = 1;
2369:.\lib_Fat/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2370:.\lib_Fat/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2371:.\lib_Fat/ff.c **** 		} while (res == FR_OK);
2372:.\lib_Fat/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2373:.\lib_Fat/ff.c **** 	}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 97


2374:.\lib_Fat/ff.c **** #else			/* Non LFN configuration */
2375:.\lib_Fat/ff.c **** 
2376:.\lib_Fat/ff.c **** 	res = move_window(fs, dp->sect);
 3088              		.loc 1 2376 0
 3089 000e 7B68     		ldr	r3, [r7, #4]
 3090 0010 9B69     		ldr	r3, [r3, #24]
 3091 0012 0B22     		mov	r2, #11
 3092 0014 BC18     		add	r4, r7, r2
 3093 0016 FA68     		ldr	r2, [r7, #12]
 3094 0018 101C     		mov	r0, r2
 3095 001a 191C     		mov	r1, r3
 3096 001c FFF7FEFF 		bl	move_window
 3097 0020 031C     		mov	r3, r0
 3098 0022 2370     		strb	r3, [r4]
2377:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 3099              		.loc 1 2377 0
 3100 0024 0B23     		mov	r3, #11
 3101 0026 FB18     		add	r3, r7, r3
 3102 0028 1B78     		ldrb	r3, [r3]
 3103 002a 002B     		cmp	r3, #0
 3104 002c 06D1     		bne	.L174
2378:.\lib_Fat/ff.c **** 		dp->dir[DIR_Name] = DDEM;
 3105              		.loc 1 2378 0
 3106 002e 7B68     		ldr	r3, [r7, #4]
 3107 0030 DB69     		ldr	r3, [r3, #28]
 3108 0032 E522     		mov	r2, #229
 3109 0034 1A70     		strb	r2, [r3]
2379:.\lib_Fat/ff.c **** 		fs->wflag = 1;
 3110              		.loc 1 2379 0
 3111 0036 FB68     		ldr	r3, [r7, #12]
 3112 0038 0122     		mov	r2, #1
 3113 003a DA70     		strb	r2, [r3, #3]
 3114              	.L174:
2380:.\lib_Fat/ff.c **** 	}
2381:.\lib_Fat/ff.c **** #endif
2382:.\lib_Fat/ff.c **** 
2383:.\lib_Fat/ff.c **** 	return res;
 3115              		.loc 1 2383 0
 3116 003c 0B23     		mov	r3, #11
 3117 003e FB18     		add	r3, r7, r3
 3118 0040 1B78     		ldrb	r3, [r3]
2384:.\lib_Fat/ff.c **** }
 3119              		.loc 1 2384 0
 3120 0042 181C     		mov	r0, r3
 3121 0044 BD46     		mov	sp, r7
 3122 0046 05B0     		add	sp, sp, #20
 3123              		@ sp needed
 3124 0048 90BD     		pop	{r4, r7, pc}
 3125              		.cfi_endproc
 3126              	.LFE24:
 3127              		.size	dir_remove, .-dir_remove
 3128 004a C046     		.section	.text.get_fileinfo,"ax",%progbits
 3129              		.align	2
 3130              		.code	16
 3131              		.thumb_func
 3132              		.type	get_fileinfo, %function
 3133              	get_fileinfo:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 98


 3134              	.LFB25:
2385:.\lib_Fat/ff.c **** 
2386:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2387:.\lib_Fat/ff.c **** 
2388:.\lib_Fat/ff.c **** 
2389:.\lib_Fat/ff.c **** 
2390:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2391:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2392:.\lib_Fat/ff.c **** /* Get file information from directory entry                             */
2393:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2394:.\lib_Fat/ff.c **** 
2395:.\lib_Fat/ff.c **** static
2396:.\lib_Fat/ff.c **** void get_fileinfo (		/* No return code */
2397:.\lib_Fat/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2398:.\lib_Fat/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2399:.\lib_Fat/ff.c **** )
2400:.\lib_Fat/ff.c **** {
 3135              		.loc 1 2400 0
 3136              		.cfi_startproc
 3137 0000 80B5     		push	{r7, lr}
 3138              		.cfi_def_cfa_offset 8
 3139              		.cfi_offset 7, -8
 3140              		.cfi_offset 14, -4
 3141 0002 86B0     		sub	sp, sp, #24
 3142              		.cfi_def_cfa_offset 32
 3143 0004 00AF     		add	r7, sp, #0
 3144              		.cfi_def_cfa_register 7
 3145 0006 7860     		str	r0, [r7, #4]
 3146 0008 3960     		str	r1, [r7]
2401:.\lib_Fat/ff.c **** 	UINT i, j;
2402:.\lib_Fat/ff.c **** 	TCHAR c;
2403:.\lib_Fat/ff.c **** 	DWORD tm;
2404:.\lib_Fat/ff.c **** #if _USE_LFN != 0
2405:.\lib_Fat/ff.c **** 	WCHAR w, lfv;
2406:.\lib_Fat/ff.c **** 	FATFS *fs = dp->obj.fs;
2407:.\lib_Fat/ff.c **** #endif
2408:.\lib_Fat/ff.c **** 
2409:.\lib_Fat/ff.c **** 
2410:.\lib_Fat/ff.c **** 	fno->fname[0] = 0;		/* Invaidate file info */
 3147              		.loc 1 2410 0
 3148 000a 3B68     		ldr	r3, [r7]
 3149 000c 0022     		mov	r2, #0
 3150 000e 5A72     		strb	r2, [r3, #9]
2411:.\lib_Fat/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 3151              		.loc 1 2411 0
 3152 0010 7B68     		ldr	r3, [r7, #4]
 3153 0012 9B69     		ldr	r3, [r3, #24]
 3154 0014 002B     		cmp	r3, #0
 3155 0016 00D1     		bne	.L177
 3156 0018 58E0     		b	.L176
 3157              	.L177:
2412:.\lib_Fat/ff.c **** 
2413:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2414:.\lib_Fat/ff.c **** #if _FS_EXFAT
2415:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
2416:.\lib_Fat/ff.c **** 		get_xdir_info(fs->dirbuf, fno);
2417:.\lib_Fat/ff.c **** 		return;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 99


2418:.\lib_Fat/ff.c **** 	} else
2419:.\lib_Fat/ff.c **** #endif
2420:.\lib_Fat/ff.c **** 	{	/* At the FAT12/16/32 */
2421:.\lib_Fat/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2422:.\lib_Fat/ff.c **** 			i = j = 0;
2423:.\lib_Fat/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2424:.\lib_Fat/ff.c **** #if !_LFN_UNICODE
2425:.\lib_Fat/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2426:.\lib_Fat/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2427:.\lib_Fat/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2428:.\lib_Fat/ff.c **** 					fno->fname[i++] = (char)(w >> 8);
2429:.\lib_Fat/ff.c **** 				}
2430:.\lib_Fat/ff.c **** #endif
2431:.\lib_Fat/ff.c **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2432:.\lib_Fat/ff.c **** 				fno->fname[i++] = (char)w;
2433:.\lib_Fat/ff.c **** 			}
2434:.\lib_Fat/ff.c **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2435:.\lib_Fat/ff.c **** 		}
2436:.\lib_Fat/ff.c **** 	}
2437:.\lib_Fat/ff.c **** 
2438:.\lib_Fat/ff.c **** 	i = j = 0;
2439:.\lib_Fat/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2440:.\lib_Fat/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2441:.\lib_Fat/ff.c **** 		c = (TCHAR)dp->dir[i++];
2442:.\lib_Fat/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2443:.\lib_Fat/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2444:.\lib_Fat/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
2445:.\lib_Fat/ff.c **** 			if (!lfv) fno->fname[j] = '.';
2446:.\lib_Fat/ff.c **** 			fno->altname[j++] = '.';
2447:.\lib_Fat/ff.c **** 		}
2448:.\lib_Fat/ff.c **** #if _LFN_UNICODE
2449:.\lib_Fat/ff.c **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2450:.\lib_Fat/ff.c **** 			c = c << 8 | dp->dir[i++];
2451:.\lib_Fat/ff.c **** 		}
2452:.\lib_Fat/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2453:.\lib_Fat/ff.c **** 		if (!c) c = '?';
2454:.\lib_Fat/ff.c **** #endif
2455:.\lib_Fat/ff.c **** 		fno->altname[j] = c;
2456:.\lib_Fat/ff.c **** 		if (!lfv) {
2457:.\lib_Fat/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
2458:.\lib_Fat/ff.c **** 				c += 0x20;			/* To lower */
2459:.\lib_Fat/ff.c **** 			}
2460:.\lib_Fat/ff.c **** 			fno->fname[j] = c;
2461:.\lib_Fat/ff.c **** 		}
2462:.\lib_Fat/ff.c **** 		j++;
2463:.\lib_Fat/ff.c **** 	}
2464:.\lib_Fat/ff.c **** 	if (!lfv) {
2465:.\lib_Fat/ff.c **** 		fno->fname[j] = 0;
2466:.\lib_Fat/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2467:.\lib_Fat/ff.c **** 	}
2468:.\lib_Fat/ff.c **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2469:.\lib_Fat/ff.c **** 
2470:.\lib_Fat/ff.c **** #else	/* Non-LFN configuration */
2471:.\lib_Fat/ff.c **** 	i = j = 0;
 3158              		.loc 1 2471 0
 3159 001a 0023     		mov	r3, #0
 3160 001c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 100


 3161 001e 3B69     		ldr	r3, [r7, #16]
 3162 0020 7B61     		str	r3, [r7, #20]
2472:.\lib_Fat/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
 3163              		.loc 1 2472 0
 3164 0022 2BE0     		b	.L179
 3165              	.L183:
2473:.\lib_Fat/ff.c **** 		c = (TCHAR)dp->dir[i++];
 3166              		.loc 1 2473 0
 3167 0024 7B68     		ldr	r3, [r7, #4]
 3168 0026 DA69     		ldr	r2, [r3, #28]
 3169 0028 7B69     		ldr	r3, [r7, #20]
 3170 002a 591C     		add	r1, r3, #1
 3171 002c 7961     		str	r1, [r7, #20]
 3172 002e D218     		add	r2, r2, r3
 3173 0030 0F23     		mov	r3, #15
 3174 0032 FB18     		add	r3, r7, r3
 3175 0034 1278     		ldrb	r2, [r2]
 3176 0036 1A70     		strb	r2, [r3]
2474:.\lib_Fat/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
 3177              		.loc 1 2474 0
 3178 0038 0F23     		mov	r3, #15
 3179 003a FB18     		add	r3, r7, r3
 3180 003c 1B78     		ldrb	r3, [r3]
 3181 003e 202B     		cmp	r3, #32
 3182 0040 00D1     		bne	.L180
 3183              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3184 0042 1BE0     		b	.L179
 3185              	.L180:
2475:.\lib_Fat/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 3186              		.loc 1 2475 0 is_stmt 1
 3187 0044 0F23     		mov	r3, #15
 3188 0046 FB18     		add	r3, r7, r3
 3189 0048 1B78     		ldrb	r3, [r3]
 3190 004a 052B     		cmp	r3, #5
 3191 004c 03D1     		bne	.L181
 3192              		.loc 1 2475 0 is_stmt 0 discriminator 1
 3193 004e 0F23     		mov	r3, #15
 3194 0050 FB18     		add	r3, r7, r3
 3195 0052 E522     		mov	r2, #229
 3196 0054 1A70     		strb	r2, [r3]
 3197              	.L181:
2476:.\lib_Fat/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 3198              		.loc 1 2476 0 is_stmt 1
 3199 0056 7B69     		ldr	r3, [r7, #20]
 3200 0058 092B     		cmp	r3, #9
 3201 005a 06D1     		bne	.L182
 3202              		.loc 1 2476 0 is_stmt 0 discriminator 1
 3203 005c 3B69     		ldr	r3, [r7, #16]
 3204 005e 5A1C     		add	r2, r3, #1
 3205 0060 3A61     		str	r2, [r7, #16]
 3206 0062 3A68     		ldr	r2, [r7]
 3207 0064 D318     		add	r3, r2, r3
 3208 0066 2E22     		mov	r2, #46
 3209 0068 5A72     		strb	r2, [r3, #9]
 3210              	.L182:
2477:.\lib_Fat/ff.c **** 		fno->fname[j++] = c;
 3211              		.loc 1 2477 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 101


 3212 006a 3B69     		ldr	r3, [r7, #16]
 3213 006c 5A1C     		add	r2, r3, #1
 3214 006e 3A61     		str	r2, [r7, #16]
 3215 0070 3A68     		ldr	r2, [r7]
 3216 0072 D318     		add	r3, r2, r3
 3217 0074 0F22     		mov	r2, #15
 3218 0076 BA18     		add	r2, r7, r2
 3219 0078 1278     		ldrb	r2, [r2]
 3220 007a 5A72     		strb	r2, [r3, #9]
 3221              	.L179:
2472:.\lib_Fat/ff.c **** 		c = (TCHAR)dp->dir[i++];
 3222              		.loc 1 2472 0
 3223 007c 7B69     		ldr	r3, [r7, #20]
 3224 007e 0A2B     		cmp	r3, #10
 3225 0080 D0D9     		bls	.L183
2478:.\lib_Fat/ff.c **** 	}
2479:.\lib_Fat/ff.c **** 	fno->fname[j] = 0;
 3226              		.loc 1 2479 0
 3227 0082 3A68     		ldr	r2, [r7]
 3228 0084 3B69     		ldr	r3, [r7, #16]
 3229 0086 D318     		add	r3, r2, r3
 3230 0088 0833     		add	r3, r3, #8
 3231 008a 0022     		mov	r2, #0
 3232 008c 5A70     		strb	r2, [r3, #1]
2480:.\lib_Fat/ff.c **** #endif
2481:.\lib_Fat/ff.c **** 
2482:.\lib_Fat/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 3233              		.loc 1 2482 0
 3234 008e 7B68     		ldr	r3, [r7, #4]
 3235 0090 DB69     		ldr	r3, [r3, #28]
 3236 0092 DA7A     		ldrb	r2, [r3, #11]
 3237 0094 3B68     		ldr	r3, [r7]
 3238 0096 1A72     		strb	r2, [r3, #8]
2483:.\lib_Fat/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 3239              		.loc 1 2483 0
 3240 0098 7B68     		ldr	r3, [r7, #4]
 3241 009a DB69     		ldr	r3, [r3, #28]
 3242 009c 1C33     		add	r3, r3, #28
 3243 009e 181C     		mov	r0, r3
 3244 00a0 FFF7FEFF 		bl	ld_dword
 3245 00a4 021C     		mov	r2, r0
 3246 00a6 3B68     		ldr	r3, [r7]
 3247 00a8 1A60     		str	r2, [r3]
2484:.\lib_Fat/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 3248              		.loc 1 2484 0
 3249 00aa 7B68     		ldr	r3, [r7, #4]
 3250 00ac DB69     		ldr	r3, [r3, #28]
 3251 00ae 1633     		add	r3, r3, #22
 3252 00b0 181C     		mov	r0, r3
 3253 00b2 FFF7FEFF 		bl	ld_dword
 3254 00b6 031C     		mov	r3, r0
 3255 00b8 BB60     		str	r3, [r7, #8]
2485:.\lib_Fat/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 3256              		.loc 1 2485 0
 3257 00ba BB68     		ldr	r3, [r7, #8]
 3258 00bc 9AB2     		uxth	r2, r3
 3259 00be 3B68     		ldr	r3, [r7]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 102


 3260 00c0 DA80     		strh	r2, [r3, #6]
 3261 00c2 BB68     		ldr	r3, [r7, #8]
 3262 00c4 1B0C     		lsr	r3, r3, #16
 3263 00c6 9AB2     		uxth	r2, r3
 3264 00c8 3B68     		ldr	r3, [r7]
 3265 00ca 9A80     		strh	r2, [r3, #4]
 3266              	.L176:
2486:.\lib_Fat/ff.c **** }
 3267              		.loc 1 2486 0
 3268 00cc BD46     		mov	sp, r7
 3269 00ce 06B0     		add	sp, sp, #24
 3270              		@ sp needed
 3271 00d0 80BD     		pop	{r7, pc}
 3272              		.cfi_endproc
 3273              	.LFE25:
 3274              		.size	get_fileinfo, .-get_fileinfo
 3275 00d2 C046     		.section	.rodata
 3276              		.align	2
 3277              	.LC1:
 3278 0080 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 3278      3A3B3C3D 
 3278      3E3F5B5D 
 3278      7C7F00
 3279              		.section	.text.create_name,"ax",%progbits
 3280              		.align	2
 3281              		.code	16
 3282              		.thumb_func
 3283              		.type	create_name, %function
 3284              	create_name:
 3285              	.LFB26:
2487:.\lib_Fat/ff.c **** 
2488:.\lib_Fat/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2489:.\lib_Fat/ff.c **** 
2490:.\lib_Fat/ff.c **** 
2491:.\lib_Fat/ff.c **** 
2492:.\lib_Fat/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
2493:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2494:.\lib_Fat/ff.c **** /* Pattern matching                                                      */
2495:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2496:.\lib_Fat/ff.c **** 
2497:.\lib_Fat/ff.c **** static
2498:.\lib_Fat/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2499:.\lib_Fat/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
2500:.\lib_Fat/ff.c **** )
2501:.\lib_Fat/ff.c **** {
2502:.\lib_Fat/ff.c **** #if !_LFN_UNICODE
2503:.\lib_Fat/ff.c **** 	WCHAR chr;
2504:.\lib_Fat/ff.c **** 
2505:.\lib_Fat/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2506:.\lib_Fat/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2507:.\lib_Fat/ff.c **** #ifdef _EXCVT
2508:.\lib_Fat/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2509:.\lib_Fat/ff.c **** #else
2510:.\lib_Fat/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2511:.\lib_Fat/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2512:.\lib_Fat/ff.c **** 	}
2513:.\lib_Fat/ff.c **** #endif
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 103


2514:.\lib_Fat/ff.c **** 	return chr;
2515:.\lib_Fat/ff.c **** #else
2516:.\lib_Fat/ff.c **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2517:.\lib_Fat/ff.c **** #endif
2518:.\lib_Fat/ff.c **** }
2519:.\lib_Fat/ff.c **** 
2520:.\lib_Fat/ff.c **** 
2521:.\lib_Fat/ff.c **** static
2522:.\lib_Fat/ff.c **** int pattern_matching (	/* 0:not matched, 1:matched */
2523:.\lib_Fat/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2524:.\lib_Fat/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2525:.\lib_Fat/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2526:.\lib_Fat/ff.c **** 	int inf				/* Infinite search (* specified) */
2527:.\lib_Fat/ff.c **** )
2528:.\lib_Fat/ff.c **** {
2529:.\lib_Fat/ff.c **** 	const TCHAR *pp, *np;
2530:.\lib_Fat/ff.c **** 	WCHAR pc, nc;
2531:.\lib_Fat/ff.c **** 	int nm, nx;
2532:.\lib_Fat/ff.c **** 
2533:.\lib_Fat/ff.c **** 
2534:.\lib_Fat/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2535:.\lib_Fat/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2536:.\lib_Fat/ff.c **** 	}
2537:.\lib_Fat/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2538:.\lib_Fat/ff.c **** 
2539:.\lib_Fat/ff.c **** 	do {
2540:.\lib_Fat/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2541:.\lib_Fat/ff.c **** 		for (;;) {
2542:.\lib_Fat/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2543:.\lib_Fat/ff.c **** 				nm = nx = 0;
2544:.\lib_Fat/ff.c **** 				do {				/* Analyze the wildcard chars */
2545:.\lib_Fat/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2546:.\lib_Fat/ff.c **** 				} while (*pp == '?' || *pp == '*');
2547:.\lib_Fat/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2548:.\lib_Fat/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2549:.\lib_Fat/ff.c **** 			}
2550:.\lib_Fat/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2551:.\lib_Fat/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2552:.\lib_Fat/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2553:.\lib_Fat/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2554:.\lib_Fat/ff.c **** 		}
2555:.\lib_Fat/ff.c **** 		get_achar(&nam);			/* nam++ */
2556:.\lib_Fat/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2557:.\lib_Fat/ff.c **** 
2558:.\lib_Fat/ff.c **** 	return 0;
2559:.\lib_Fat/ff.c **** }
2560:.\lib_Fat/ff.c **** 
2561:.\lib_Fat/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2562:.\lib_Fat/ff.c **** 
2563:.\lib_Fat/ff.c **** 
2564:.\lib_Fat/ff.c **** 
2565:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2566:.\lib_Fat/ff.c **** /* Pick a top segment and create the object name in directory form       */
2567:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2568:.\lib_Fat/ff.c **** 
2569:.\lib_Fat/ff.c **** static
2570:.\lib_Fat/ff.c **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 104


2571:.\lib_Fat/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2572:.\lib_Fat/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2573:.\lib_Fat/ff.c **** )
2574:.\lib_Fat/ff.c **** {
 3286              		.loc 1 2574 0
 3287              		.cfi_startproc
 3288 0000 80B5     		push	{r7, lr}
 3289              		.cfi_def_cfa_offset 8
 3290              		.cfi_offset 7, -8
 3291              		.cfi_offset 14, -4
 3292 0002 88B0     		sub	sp, sp, #32
 3293              		.cfi_def_cfa_offset 40
 3294 0004 00AF     		add	r7, sp, #0
 3295              		.cfi_def_cfa_register 7
 3296 0006 7860     		str	r0, [r7, #4]
 3297 0008 3960     		str	r1, [r7]
2575:.\lib_Fat/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2576:.\lib_Fat/ff.c **** 	BYTE b, cf;
2577:.\lib_Fat/ff.c **** 	WCHAR w, *lfn;
2578:.\lib_Fat/ff.c **** 	UINT i, ni, si, di;
2579:.\lib_Fat/ff.c **** 	const TCHAR *p;
2580:.\lib_Fat/ff.c **** 
2581:.\lib_Fat/ff.c **** 	/* Create LFN in Unicode */
2582:.\lib_Fat/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2583:.\lib_Fat/ff.c **** 	for (;;) {
2584:.\lib_Fat/ff.c **** 		w = p[si++];					/* Get a character */
2585:.\lib_Fat/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
2586:.\lib_Fat/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2587:.\lib_Fat/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2588:.\lib_Fat/ff.c **** 			break;
2589:.\lib_Fat/ff.c **** 		}
2590:.\lib_Fat/ff.c **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2591:.\lib_Fat/ff.c **** #if !_LFN_UNICODE
2592:.\lib_Fat/ff.c **** 		w &= 0xFF;
2593:.\lib_Fat/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2594:.\lib_Fat/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
2595:.\lib_Fat/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
2596:.\lib_Fat/ff.c **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2597:.\lib_Fat/ff.c **** 		}
2598:.\lib_Fat/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2599:.\lib_Fat/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2600:.\lib_Fat/ff.c **** #endif
2601:.\lib_Fat/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2602:.\lib_Fat/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
2603:.\lib_Fat/ff.c **** 	}
2604:.\lib_Fat/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2605:.\lib_Fat/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2606:.\lib_Fat/ff.c **** #if _FS_RPATH != 0
2607:.\lib_Fat/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2608:.\lib_Fat/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2609:.\lib_Fat/ff.c **** 		lfn[di] = 0;
2610:.\lib_Fat/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2611:.\lib_Fat/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2612:.\lib_Fat/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2613:.\lib_Fat/ff.c **** 		return FR_OK;
2614:.\lib_Fat/ff.c **** 	}
2615:.\lib_Fat/ff.c **** #endif
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 105


2616:.\lib_Fat/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2617:.\lib_Fat/ff.c **** 		w = lfn[di - 1];
2618:.\lib_Fat/ff.c **** 		if (w != ' ' && w != '.') break;
2619:.\lib_Fat/ff.c **** 		di--;
2620:.\lib_Fat/ff.c **** 	}
2621:.\lib_Fat/ff.c **** 	lfn[di] = 0;						/* LFN is created */
2622:.\lib_Fat/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2623:.\lib_Fat/ff.c **** 
2624:.\lib_Fat/ff.c **** 	/* Create SFN in directory form */
2625:.\lib_Fat/ff.c **** 	mem_set(dp->fn, ' ', 11);
2626:.\lib_Fat/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2627:.\lib_Fat/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
2628:.\lib_Fat/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2629:.\lib_Fat/ff.c **** 
2630:.\lib_Fat/ff.c **** 	b = i = 0; ni = 8;
2631:.\lib_Fat/ff.c **** 	for (;;) {
2632:.\lib_Fat/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
2633:.\lib_Fat/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
2634:.\lib_Fat/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2635:.\lib_Fat/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
2636:.\lib_Fat/ff.c **** 		}
2637:.\lib_Fat/ff.c **** 
2638:.\lib_Fat/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2639:.\lib_Fat/ff.c **** 			if (ni == 11) {				/* Long extension */
2640:.\lib_Fat/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
2641:.\lib_Fat/ff.c **** 			}
2642:.\lib_Fat/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2643:.\lib_Fat/ff.c **** 			if (si > di) break;			/* No extension */
2644:.\lib_Fat/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
2645:.\lib_Fat/ff.c **** 			b <<= 2; continue;
2646:.\lib_Fat/ff.c **** 		}
2647:.\lib_Fat/ff.c **** 
2648:.\lib_Fat/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
2649:.\lib_Fat/ff.c **** #ifdef _EXCVT
2650:.\lib_Fat/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2651:.\lib_Fat/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2652:.\lib_Fat/ff.c **** #else
2653:.\lib_Fat/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2654:.\lib_Fat/ff.c **** #endif
2655:.\lib_Fat/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2656:.\lib_Fat/ff.c **** 		}
2657:.\lib_Fat/ff.c **** 
2658:.\lib_Fat/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2659:.\lib_Fat/ff.c **** 			if (i >= ni - 1) {
2660:.\lib_Fat/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2661:.\lib_Fat/ff.c **** 			}
2662:.\lib_Fat/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2663:.\lib_Fat/ff.c **** 		} else {						/* SBC */
2664:.\lib_Fat/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2665:.\lib_Fat/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2666:.\lib_Fat/ff.c **** 			} else {
2667:.\lib_Fat/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2668:.\lib_Fat/ff.c **** 					b |= 2;
2669:.\lib_Fat/ff.c **** 				} else {
2670:.\lib_Fat/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2671:.\lib_Fat/ff.c **** 						b |= 1; w -= 0x20;
2672:.\lib_Fat/ff.c **** 					}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 106


2673:.\lib_Fat/ff.c **** 				}
2674:.\lib_Fat/ff.c **** 			}
2675:.\lib_Fat/ff.c **** 		}
2676:.\lib_Fat/ff.c **** 		dp->fn[i++] = (BYTE)w;
2677:.\lib_Fat/ff.c **** 	}
2678:.\lib_Fat/ff.c **** 
2679:.\lib_Fat/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2680:.\lib_Fat/ff.c **** 
2681:.\lib_Fat/ff.c **** 	if (ni == 8) b <<= 2;
2682:.\lib_Fat/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
2683:.\lib_Fat/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2684:.\lib_Fat/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2685:.\lib_Fat/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2686:.\lib_Fat/ff.c **** 	}
2687:.\lib_Fat/ff.c **** 
2688:.\lib_Fat/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2689:.\lib_Fat/ff.c **** 
2690:.\lib_Fat/ff.c **** 	return FR_OK;
2691:.\lib_Fat/ff.c **** 
2692:.\lib_Fat/ff.c **** 
2693:.\lib_Fat/ff.c **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2694:.\lib_Fat/ff.c **** 	BYTE c, d, *sfn;
2695:.\lib_Fat/ff.c **** 	UINT ni, si, i;
2696:.\lib_Fat/ff.c **** 	const char *p;
2697:.\lib_Fat/ff.c **** 
2698:.\lib_Fat/ff.c **** 	/* Create file name in directory form */
2699:.\lib_Fat/ff.c **** 	p = *path; sfn = dp->fn;
 3298              		.loc 1 2699 0
 3299 000a 3B68     		ldr	r3, [r7]
 3300 000c 1B68     		ldr	r3, [r3]
 3301 000e FB60     		str	r3, [r7, #12]
 3302 0010 7B68     		ldr	r3, [r7, #4]
 3303 0012 2033     		add	r3, r3, #32
 3304 0014 BB60     		str	r3, [r7, #8]
2700:.\lib_Fat/ff.c **** 	mem_set(sfn, ' ', 11);
 3305              		.loc 1 2700 0
 3306 0016 BB68     		ldr	r3, [r7, #8]
 3307 0018 181C     		mov	r0, r3
 3308 001a 2021     		mov	r1, #32
 3309 001c 0B22     		mov	r2, #11
 3310 001e FFF7FEFF 		bl	mem_set
2701:.\lib_Fat/ff.c **** 	si = i = 0; ni = 8;
 3311              		.loc 1 2701 0
 3312 0022 0023     		mov	r3, #0
 3313 0024 3B61     		str	r3, [r7, #16]
 3314 0026 3B69     		ldr	r3, [r7, #16]
 3315 0028 7B61     		str	r3, [r7, #20]
 3316 002a 0823     		mov	r3, #8
 3317 002c BB61     		str	r3, [r7, #24]
 3318              	.L200:
2702:.\lib_Fat/ff.c **** #if _FS_RPATH != 0
2703:.\lib_Fat/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2704:.\lib_Fat/ff.c **** 		for (;;) {
2705:.\lib_Fat/ff.c **** 			c = (BYTE)p[si++];
2706:.\lib_Fat/ff.c **** 			if (c != '.' || si >= 3) break;
2707:.\lib_Fat/ff.c **** 			sfn[i++] = c;
2708:.\lib_Fat/ff.c **** 		}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 107


2709:.\lib_Fat/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2710:.\lib_Fat/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2711:.\lib_Fat/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2712:.\lib_Fat/ff.c **** 		return FR_OK;
2713:.\lib_Fat/ff.c **** 	}
2714:.\lib_Fat/ff.c **** #endif
2715:.\lib_Fat/ff.c **** 	for (;;) {
2716:.\lib_Fat/ff.c **** 		c = (BYTE)p[si++];
 3319              		.loc 1 2716 0
 3320 002e 7B69     		ldr	r3, [r7, #20]
 3321 0030 5A1C     		add	r2, r3, #1
 3322 0032 7A61     		str	r2, [r7, #20]
 3323 0034 FA68     		ldr	r2, [r7, #12]
 3324 0036 D218     		add	r2, r2, r3
 3325 0038 1F23     		mov	r3, #31
 3326 003a FB18     		add	r3, r7, r3
 3327 003c 1278     		ldrb	r2, [r2]
 3328 003e 1A70     		strb	r2, [r3]
2717:.\lib_Fat/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 3329              		.loc 1 2717 0
 3330 0040 1F23     		mov	r3, #31
 3331 0042 FB18     		add	r3, r7, r3
 3332 0044 1B78     		ldrb	r3, [r3]
 3333 0046 202B     		cmp	r3, #32
 3334 0048 00D8     		bhi	.L185
 3335 004a 69E0     		b	.L186
 3336              	.L185:
2718:.\lib_Fat/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 3337              		.loc 1 2718 0
 3338 004c 1F23     		mov	r3, #31
 3339 004e FB18     		add	r3, r7, r3
 3340 0050 1B78     		ldrb	r3, [r3]
 3341 0052 2F2B     		cmp	r3, #47
 3342 0054 04D0     		beq	.L187
 3343              		.loc 1 2718 0 is_stmt 0 discriminator 1
 3344 0056 1F23     		mov	r3, #31
 3345 0058 FB18     		add	r3, r7, r3
 3346 005a 1B78     		ldrb	r3, [r3]
 3347 005c 5C2B     		cmp	r3, #92
 3348 005e 10D1     		bne	.L188
 3349              	.L187:
2719:.\lib_Fat/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 3350              		.loc 1 2719 0 is_stmt 1
 3351 0060 02E0     		b	.L189
 3352              	.L190:
 3353              		.loc 1 2719 0 is_stmt 0 discriminator 4
 3354 0062 7B69     		ldr	r3, [r7, #20]
 3355 0064 0133     		add	r3, r3, #1
 3356 0066 7B61     		str	r3, [r7, #20]
 3357              	.L189:
 3358              		.loc 1 2719 0 discriminator 1
 3359 0068 FA68     		ldr	r2, [r7, #12]
 3360 006a 7B69     		ldr	r3, [r7, #20]
 3361 006c D318     		add	r3, r2, r3
 3362 006e 1B78     		ldrb	r3, [r3]
 3363 0070 2F2B     		cmp	r3, #47
 3364 0072 F6D0     		beq	.L190
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 108


 3365              		.loc 1 2719 0 discriminator 3
 3366 0074 FA68     		ldr	r2, [r7, #12]
 3367 0076 7B69     		ldr	r3, [r7, #20]
 3368 0078 D318     		add	r3, r2, r3
 3369 007a 1B78     		ldrb	r3, [r3]
 3370 007c 5C2B     		cmp	r3, #92
 3371 007e F0D0     		beq	.L190
2720:.\lib_Fat/ff.c **** 			break;
 3372              		.loc 1 2720 0 is_stmt 1
 3373 0080 4EE0     		b	.L186
 3374              	.L188:
2721:.\lib_Fat/ff.c **** 		}
2722:.\lib_Fat/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
 3375              		.loc 1 2722 0
 3376 0082 1F23     		mov	r3, #31
 3377 0084 FB18     		add	r3, r7, r3
 3378 0086 1B78     		ldrb	r3, [r3]
 3379 0088 2E2B     		cmp	r3, #46
 3380 008a 03D0     		beq	.L191
 3381              		.loc 1 2722 0 is_stmt 0 discriminator 1
 3382 008c 3A69     		ldr	r2, [r7, #16]
 3383 008e BB69     		ldr	r3, [r7, #24]
 3384 0090 9A42     		cmp	r2, r3
 3385 0092 0ED3     		bcc	.L192
 3386              	.L191:
2723:.\lib_Fat/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 3387              		.loc 1 2723 0 is_stmt 1
 3388 0094 BB69     		ldr	r3, [r7, #24]
 3389 0096 0B2B     		cmp	r3, #11
 3390 0098 04D0     		beq	.L193
 3391              		.loc 1 2723 0 is_stmt 0 discriminator 2
 3392 009a 1F23     		mov	r3, #31
 3393 009c FB18     		add	r3, r7, r3
 3394 009e 1B78     		ldrb	r3, [r3]
 3395 00a0 2E2B     		cmp	r3, #46
 3396 00a2 01D0     		beq	.L194
 3397              	.L193:
 3398              		.loc 1 2723 0 discriminator 3
 3399 00a4 0623     		mov	r3, #6
 3400 00a6 58E0     		b	.L195
 3401              	.L194:
2724:.\lib_Fat/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
 3402              		.loc 1 2724 0 is_stmt 1
 3403 00a8 0823     		mov	r3, #8
 3404 00aa 3B61     		str	r3, [r7, #16]
 3405 00ac 0B23     		mov	r3, #11
 3406 00ae BB61     		str	r3, [r7, #24]
2725:.\lib_Fat/ff.c **** 			continue;
 3407              		.loc 1 2725 0
 3408 00b0 35E0     		b	.L196
 3409              	.L192:
2726:.\lib_Fat/ff.c **** 		}
2727:.\lib_Fat/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
 3410              		.loc 1 2727 0
 3411 00b2 1F23     		mov	r3, #31
 3412 00b4 FB18     		add	r3, r7, r3
 3413 00b6 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 109


 3414 00b8 5BB2     		sxtb	r3, r3
 3415 00ba 002B     		cmp	r3, #0
 3416 00bc 09DA     		bge	.L205
2728:.\lib_Fat/ff.c **** #ifdef _EXCVT
2729:.\lib_Fat/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 3417              		.loc 1 2729 0
 3418 00be 1F23     		mov	r3, #31
 3419 00c0 FB18     		add	r3, r7, r3
 3420 00c2 1B78     		ldrb	r3, [r3]
 3421 00c4 803B     		sub	r3, r3, #128
 3422 00c6 1A1C     		mov	r2, r3
 3423 00c8 1F23     		mov	r3, #31
 3424 00ca FB18     		add	r3, r7, r3
 3425 00cc 2549     		ldr	r1, .L206
 3426 00ce 8A5C     		ldrb	r2, [r1, r2]
 3427 00d0 1A70     		strb	r2, [r3]
 3428              	.L205:
2730:.\lib_Fat/ff.c **** #else
2731:.\lib_Fat/ff.c **** #if !_DF1S
2732:.\lib_Fat/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2733:.\lib_Fat/ff.c **** #endif
2734:.\lib_Fat/ff.c **** #endif
2735:.\lib_Fat/ff.c **** 		}
2736:.\lib_Fat/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
2737:.\lib_Fat/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2738:.\lib_Fat/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2739:.\lib_Fat/ff.c **** 			sfn[i++] = c;
2740:.\lib_Fat/ff.c **** 			sfn[i++] = d;
2741:.\lib_Fat/ff.c **** 		} else {						/* SBC */
2742:.\lib_Fat/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 3429              		.loc 1 2742 0
 3430 00d2 1F23     		mov	r3, #31
 3431 00d4 FB18     		add	r3, r7, r3
 3432 00d6 1B78     		ldrb	r3, [r3]
 3433 00d8 234A     		ldr	r2, .L206+4
 3434 00da 101C     		mov	r0, r2
 3435 00dc 191C     		mov	r1, r3
 3436 00de FFF7FEFF 		bl	chk_chr
 3437 00e2 031E     		sub	r3, r0, #0
 3438 00e4 01D0     		beq	.L198
 3439              		.loc 1 2742 0 is_stmt 0 discriminator 1
 3440 00e6 0623     		mov	r3, #6
 3441 00e8 37E0     		b	.L195
 3442              	.L198:
2743:.\lib_Fat/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 3443              		.loc 1 2743 0 is_stmt 1
 3444 00ea 1F23     		mov	r3, #31
 3445 00ec FB18     		add	r3, r7, r3
 3446 00ee 1B78     		ldrb	r3, [r3]
 3447 00f0 602B     		cmp	r3, #96
 3448 00f2 0BD9     		bls	.L199
 3449              		.loc 1 2743 0 is_stmt 0 discriminator 1
 3450 00f4 1F23     		mov	r3, #31
 3451 00f6 FB18     		add	r3, r7, r3
 3452 00f8 1B78     		ldrb	r3, [r3]
 3453 00fa 7A2B     		cmp	r3, #122
 3454 00fc 06D8     		bhi	.L199
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 110


 3455              		.loc 1 2743 0 discriminator 2
 3456 00fe 1F23     		mov	r3, #31
 3457 0100 FB18     		add	r3, r7, r3
 3458 0102 1F22     		mov	r2, #31
 3459 0104 BA18     		add	r2, r7, r2
 3460 0106 1278     		ldrb	r2, [r2]
 3461 0108 203A     		sub	r2, r2, #32
 3462 010a 1A70     		strb	r2, [r3]
 3463              	.L199:
2744:.\lib_Fat/ff.c **** 			sfn[i++] = c;
 3464              		.loc 1 2744 0 is_stmt 1
 3465 010c 3B69     		ldr	r3, [r7, #16]
 3466 010e 5A1C     		add	r2, r3, #1
 3467 0110 3A61     		str	r2, [r7, #16]
 3468 0112 BA68     		ldr	r2, [r7, #8]
 3469 0114 D318     		add	r3, r2, r3
 3470 0116 1F22     		mov	r2, #31
 3471 0118 BA18     		add	r2, r7, r2
 3472 011a 1278     		ldrb	r2, [r2]
 3473 011c 1A70     		strb	r2, [r3]
 3474              	.L196:
2745:.\lib_Fat/ff.c **** 		}
2746:.\lib_Fat/ff.c **** 	}
 3475              		.loc 1 2746 0
 3476 011e 86E7     		b	.L200
 3477              	.L186:
2747:.\lib_Fat/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 3478              		.loc 1 2747 0
 3479 0120 FA68     		ldr	r2, [r7, #12]
 3480 0122 7B69     		ldr	r3, [r7, #20]
 3481 0124 D218     		add	r2, r2, r3
 3482 0126 3B68     		ldr	r3, [r7]
 3483 0128 1A60     		str	r2, [r3]
2748:.\lib_Fat/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 3484              		.loc 1 2748 0
 3485 012a 3B69     		ldr	r3, [r7, #16]
 3486 012c 002B     		cmp	r3, #0
 3487 012e 01D1     		bne	.L201
 3488              		.loc 1 2748 0 is_stmt 0 discriminator 1
 3489 0130 0623     		mov	r3, #6
 3490 0132 12E0     		b	.L195
 3491              	.L201:
2749:.\lib_Fat/ff.c **** 
2750:.\lib_Fat/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 3492              		.loc 1 2750 0 is_stmt 1
 3493 0134 BB68     		ldr	r3, [r7, #8]
 3494 0136 1B78     		ldrb	r3, [r3]
 3495 0138 E52B     		cmp	r3, #229
 3496 013a 02D1     		bne	.L202
 3497              		.loc 1 2750 0 is_stmt 0 discriminator 1
 3498 013c BB68     		ldr	r3, [r7, #8]
 3499 013e 0522     		mov	r2, #5
 3500 0140 1A70     		strb	r2, [r3]
 3501              	.L202:
2751:.\lib_Fat/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 3502              		.loc 1 2751 0 is_stmt 1
 3503 0142 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 111


 3504 0144 0B33     		add	r3, r3, #11
 3505 0146 1F22     		mov	r2, #31
 3506 0148 BA18     		add	r2, r7, r2
 3507 014a 1278     		ldrb	r2, [r2]
 3508 014c 202A     		cmp	r2, #32
 3509 014e 01D8     		bhi	.L203
 3510              		.loc 1 2751 0 is_stmt 0 discriminator 1
 3511 0150 0422     		mov	r2, #4
 3512 0152 00E0     		b	.L204
 3513              	.L203:
 3514              		.loc 1 2751 0 discriminator 2
 3515 0154 0022     		mov	r2, #0
 3516              	.L204:
 3517              		.loc 1 2751 0 discriminator 4
 3518 0156 1A70     		strb	r2, [r3]
2752:.\lib_Fat/ff.c **** 
2753:.\lib_Fat/ff.c **** 	return FR_OK;
 3519              		.loc 1 2753 0 is_stmt 1 discriminator 4
 3520 0158 0023     		mov	r3, #0
 3521              	.L195:
2754:.\lib_Fat/ff.c **** #endif /* _USE_LFN != 0 */
2755:.\lib_Fat/ff.c **** }
 3522              		.loc 1 2755 0
 3523 015a 181C     		mov	r0, r3
 3524 015c BD46     		mov	sp, r7
 3525 015e 08B0     		add	sp, sp, #32
 3526              		@ sp needed
 3527 0160 80BD     		pop	{r7, pc}
 3528              	.L207:
 3529 0162 C046     		.align	2
 3530              	.L206:
 3531 0164 00000000 		.word	ExCvt
 3532 0168 80000000 		.word	.LC1
 3533              		.cfi_endproc
 3534              	.LFE26:
 3535              		.size	create_name, .-create_name
 3536              		.section	.text.follow_path,"ax",%progbits
 3537              		.align	2
 3538              		.code	16
 3539              		.thumb_func
 3540              		.type	follow_path, %function
 3541              	follow_path:
 3542              	.LFB27:
2756:.\lib_Fat/ff.c **** 
2757:.\lib_Fat/ff.c **** 
2758:.\lib_Fat/ff.c **** 
2759:.\lib_Fat/ff.c **** 
2760:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2761:.\lib_Fat/ff.c **** /* Follow a file path                                                    */
2762:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2763:.\lib_Fat/ff.c **** 
2764:.\lib_Fat/ff.c **** static
2765:.\lib_Fat/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2766:.\lib_Fat/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2767:.\lib_Fat/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2768:.\lib_Fat/ff.c **** )
2769:.\lib_Fat/ff.c **** {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 112


 3543              		.loc 1 2769 0
 3544              		.cfi_startproc
 3545 0000 90B5     		push	{r4, r7, lr}
 3546              		.cfi_def_cfa_offset 12
 3547              		.cfi_offset 4, -12
 3548              		.cfi_offset 7, -8
 3549              		.cfi_offset 14, -4
 3550 0002 87B0     		sub	sp, sp, #28
 3551              		.cfi_def_cfa_offset 40
 3552 0004 00AF     		add	r7, sp, #0
 3553              		.cfi_def_cfa_register 7
 3554 0006 7860     		str	r0, [r7, #4]
 3555 0008 3960     		str	r1, [r7]
2770:.\lib_Fat/ff.c **** 	FRESULT res;
2771:.\lib_Fat/ff.c **** 	BYTE ns;
2772:.\lib_Fat/ff.c **** 	_FDID *obj = &dp->obj;
 3556              		.loc 1 2772 0
 3557 000a 7B68     		ldr	r3, [r7, #4]
 3558 000c 3B61     		str	r3, [r7, #16]
2773:.\lib_Fat/ff.c **** 	FATFS *fs = obj->fs;
 3559              		.loc 1 2773 0
 3560 000e 3B69     		ldr	r3, [r7, #16]
 3561 0010 1B68     		ldr	r3, [r3]
 3562 0012 FB60     		str	r3, [r7, #12]
2774:.\lib_Fat/ff.c **** 
2775:.\lib_Fat/ff.c **** 
2776:.\lib_Fat/ff.c **** #if _FS_RPATH != 0
2777:.\lib_Fat/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2778:.\lib_Fat/ff.c **** 		obj->sclust = fs->cdir;				/* Start from the current directory */
2779:.\lib_Fat/ff.c **** 	} else
2780:.\lib_Fat/ff.c **** #endif
2781:.\lib_Fat/ff.c **** 	{										/* With heading separator */
2782:.\lib_Fat/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 3563              		.loc 1 2782 0
 3564 0014 02E0     		b	.L209
 3565              	.L210:
 3566              		.loc 1 2782 0 is_stmt 0 discriminator 4
 3567 0016 3B68     		ldr	r3, [r7]
 3568 0018 0133     		add	r3, r3, #1
 3569 001a 3B60     		str	r3, [r7]
 3570              	.L209:
 3571              		.loc 1 2782 0 discriminator 1
 3572 001c 3B68     		ldr	r3, [r7]
 3573 001e 1B78     		ldrb	r3, [r3]
 3574 0020 2F2B     		cmp	r3, #47
 3575 0022 F8D0     		beq	.L210
 3576              		.loc 1 2782 0 discriminator 3
 3577 0024 3B68     		ldr	r3, [r7]
 3578 0026 1B78     		ldrb	r3, [r3]
 3579 0028 5C2B     		cmp	r3, #92
 3580 002a F4D0     		beq	.L210
2783:.\lib_Fat/ff.c **** 		obj->sclust = 0;					/* Start from the root directory */
 3581              		.loc 1 2783 0 is_stmt 1
 3582 002c 3B69     		ldr	r3, [r7, #16]
 3583 002e 0022     		mov	r2, #0
 3584 0030 9A60     		str	r2, [r3, #8]
2784:.\lib_Fat/ff.c **** 	}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 113


2785:.\lib_Fat/ff.c **** #if _FS_EXFAT && _FS_RPATH != 0
2786:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2787:.\lib_Fat/ff.c **** 		DIR dj;
2788:.\lib_Fat/ff.c **** 
2789:.\lib_Fat/ff.c **** 		obj->c_scl = fs->cdc_scl;
2790:.\lib_Fat/ff.c **** 		obj->c_size = fs->cdc_size;
2791:.\lib_Fat/ff.c **** 		obj->c_ofs = fs->cdc_ofs;
2792:.\lib_Fat/ff.c **** 		res = load_obj_dir(&dj, obj);
2793:.\lib_Fat/ff.c **** 		if (res != FR_OK) return res;
2794:.\lib_Fat/ff.c **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2795:.\lib_Fat/ff.c **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2796:.\lib_Fat/ff.c **** 	}
2797:.\lib_Fat/ff.c **** #endif
2798:.\lib_Fat/ff.c **** 
2799:.\lib_Fat/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 3585              		.loc 1 2799 0
 3586 0032 3B68     		ldr	r3, [r7]
 3587 0034 1B78     		ldrb	r3, [r3]
 3588 0036 1F2B     		cmp	r3, #31
 3589 0038 0DD8     		bhi	.L211
2800:.\lib_Fat/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 3590              		.loc 1 2800 0
 3591 003a 7B68     		ldr	r3, [r7, #4]
 3592 003c 2B22     		mov	r2, #43
 3593 003e 8021     		mov	r1, #128
 3594 0040 9954     		strb	r1, [r3, r2]
2801:.\lib_Fat/ff.c **** 		res = dir_sdi(dp, 0);
 3595              		.loc 1 2801 0
 3596 0042 1723     		mov	r3, #23
 3597 0044 FC18     		add	r4, r7, r3
 3598 0046 7B68     		ldr	r3, [r7, #4]
 3599 0048 181C     		mov	r0, r3
 3600 004a 0021     		mov	r1, #0
 3601 004c FFF7FEFF 		bl	dir_sdi
 3602 0050 031C     		mov	r3, r0
 3603 0052 2370     		strb	r3, [r4]
 3604 0054 55E0     		b	.L212
 3605              	.L211:
2802:.\lib_Fat/ff.c **** 
2803:.\lib_Fat/ff.c **** 	} else {								/* Follow path */
2804:.\lib_Fat/ff.c **** 		for (;;) {
2805:.\lib_Fat/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 3606              		.loc 1 2805 0
 3607 0056 1723     		mov	r3, #23
 3608 0058 FC18     		add	r4, r7, r3
 3609 005a 7A68     		ldr	r2, [r7, #4]
 3610 005c 3B1C     		mov	r3, r7
 3611 005e 101C     		mov	r0, r2
 3612 0060 191C     		mov	r1, r3
 3613 0062 FFF7FEFF 		bl	create_name
 3614 0066 031C     		mov	r3, r0
 3615 0068 2370     		strb	r3, [r4]
2806:.\lib_Fat/ff.c **** 			if (res != FR_OK) break;
 3616              		.loc 1 2806 0
 3617 006a 1723     		mov	r3, #23
 3618 006c FB18     		add	r3, r7, r3
 3619 006e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 114


 3620 0070 002B     		cmp	r3, #0
 3621 0072 00D0     		beq	.L213
 3622 0074 45E0     		b	.L212
 3623              	.L213:
2807:.\lib_Fat/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3624              		.loc 1 2807 0
 3625 0076 1723     		mov	r3, #23
 3626 0078 FC18     		add	r4, r7, r3
 3627 007a 7B68     		ldr	r3, [r7, #4]
 3628 007c 181C     		mov	r0, r3
 3629 007e FFF7FEFF 		bl	dir_find
 3630 0082 031C     		mov	r3, r0
 3631 0084 2370     		strb	r3, [r4]
2808:.\lib_Fat/ff.c **** 			ns = dp->fn[NSFLAG];
 3632              		.loc 1 2808 0
 3633 0086 0B23     		mov	r3, #11
 3634 0088 FB18     		add	r3, r7, r3
 3635 008a 7A68     		ldr	r2, [r7, #4]
 3636 008c 2B21     		mov	r1, #43
 3637 008e 525C     		ldrb	r2, [r2, r1]
 3638 0090 1A70     		strb	r2, [r3]
2809:.\lib_Fat/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3639              		.loc 1 2809 0
 3640 0092 1723     		mov	r3, #23
 3641 0094 FB18     		add	r3, r7, r3
 3642 0096 1B78     		ldrb	r3, [r3]
 3643 0098 002B     		cmp	r3, #0
 3644 009a 10D0     		beq	.L214
2810:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3645              		.loc 1 2810 0
 3646 009c 1723     		mov	r3, #23
 3647 009e FB18     		add	r3, r7, r3
 3648 00a0 1B78     		ldrb	r3, [r3]
 3649 00a2 042B     		cmp	r3, #4
 3650 00a4 0AD1     		bne	.L215
2811:.\lib_Fat/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2812:.\lib_Fat/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2813:.\lib_Fat/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
2814:.\lib_Fat/ff.c **** 						res = FR_OK;
2815:.\lib_Fat/ff.c **** 					} else {							/* Could not find the object */
2816:.\lib_Fat/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 3651              		.loc 1 2816 0
 3652 00a6 0B23     		mov	r3, #11
 3653 00a8 FB18     		add	r3, r7, r3
 3654 00aa 1B78     		ldrb	r3, [r3]
 3655 00ac 0422     		mov	r2, #4
 3656 00ae 1340     		and	r3, r2
 3657 00b0 04D1     		bne	.L215
 3658              		.loc 1 2816 0 is_stmt 0 discriminator 1
 3659 00b2 1723     		mov	r3, #23
 3660 00b4 FB18     		add	r3, r7, r3
 3661 00b6 0522     		mov	r2, #5
 3662 00b8 1A70     		strb	r2, [r3]
2817:.\lib_Fat/ff.c **** 					}
2818:.\lib_Fat/ff.c **** 				}
2819:.\lib_Fat/ff.c **** 				break;
 3663              		.loc 1 2819 0 is_stmt 1 discriminator 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 115


 3664 00ba 22E0     		b	.L212
 3665              	.L215:
 3666              		.loc 1 2819 0 is_stmt 0
 3667 00bc 21E0     		b	.L212
 3668              	.L214:
2820:.\lib_Fat/ff.c **** 			}
2821:.\lib_Fat/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 3669              		.loc 1 2821 0 is_stmt 1
 3670 00be 0B23     		mov	r3, #11
 3671 00c0 FB18     		add	r3, r7, r3
 3672 00c2 1B78     		ldrb	r3, [r3]
 3673 00c4 0422     		mov	r2, #4
 3674 00c6 1340     		and	r3, r2
 3675 00c8 00D0     		beq	.L216
 3676 00ca 1AE0     		b	.L212
 3677              	.L216:
2822:.\lib_Fat/ff.c **** 			/* Get into the sub-directory */
2823:.\lib_Fat/ff.c **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 3678              		.loc 1 2823 0
 3679 00cc 3B69     		ldr	r3, [r7, #16]
 3680 00ce 9B79     		ldrb	r3, [r3, #6]
 3681 00d0 1A1C     		mov	r2, r3
 3682 00d2 1023     		mov	r3, #16
 3683 00d4 1340     		and	r3, r2
 3684 00d6 04D1     		bne	.L217
2824:.\lib_Fat/ff.c **** 				res = FR_NO_PATH; break;
 3685              		.loc 1 2824 0
 3686 00d8 1723     		mov	r3, #23
 3687 00da FB18     		add	r3, r7, r3
 3688 00dc 0522     		mov	r2, #5
 3689 00de 1A70     		strb	r2, [r3]
 3690 00e0 0FE0     		b	.L212
 3691              	.L217:
2825:.\lib_Fat/ff.c **** 			}
2826:.\lib_Fat/ff.c **** #if _FS_EXFAT
2827:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
2828:.\lib_Fat/ff.c **** 				obj->c_scl = obj->sclust;		/* Save containing directory information for next dir */
2829:.\lib_Fat/ff.c **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2830:.\lib_Fat/ff.c **** 				obj->c_ofs = dp->blk_ofs;
2831:.\lib_Fat/ff.c **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2832:.\lib_Fat/ff.c **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2833:.\lib_Fat/ff.c **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2834:.\lib_Fat/ff.c **** 			} else
2835:.\lib_Fat/ff.c **** #endif
2836:.\lib_Fat/ff.c **** 			{
2837:.\lib_Fat/ff.c **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 3692              		.loc 1 2837 0
 3693 00e2 7B68     		ldr	r3, [r7, #4]
 3694 00e4 1B69     		ldr	r3, [r3, #16]
 3695 00e6 DB05     		lsl	r3, r3, #23
 3696 00e8 DB0D     		lsr	r3, r3, #23
 3697 00ea 3033     		add	r3, r3, #48
 3698 00ec FA68     		ldr	r2, [r7, #12]
 3699 00ee D318     		add	r3, r2, r3
 3700 00f0 FA68     		ldr	r2, [r7, #12]
 3701 00f2 101C     		mov	r0, r2
 3702 00f4 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 116


 3703 00f6 FFF7FEFF 		bl	ld_clust
 3704 00fa 021C     		mov	r2, r0
 3705 00fc 3B69     		ldr	r3, [r7, #16]
 3706 00fe 9A60     		str	r2, [r3, #8]
2838:.\lib_Fat/ff.c **** 			}
2839:.\lib_Fat/ff.c **** 		}
 3707              		.loc 1 2839 0
 3708 0100 A9E7     		b	.L211
 3709              	.L212:
2840:.\lib_Fat/ff.c **** 	}
2841:.\lib_Fat/ff.c **** 
2842:.\lib_Fat/ff.c **** 	return res;
 3710              		.loc 1 2842 0
 3711 0102 1723     		mov	r3, #23
 3712 0104 FB18     		add	r3, r7, r3
 3713 0106 1B78     		ldrb	r3, [r3]
2843:.\lib_Fat/ff.c **** }
 3714              		.loc 1 2843 0
 3715 0108 181C     		mov	r0, r3
 3716 010a BD46     		mov	sp, r7
 3717 010c 07B0     		add	sp, sp, #28
 3718              		@ sp needed
 3719 010e 90BD     		pop	{r4, r7, pc}
 3720              		.cfi_endproc
 3721              	.LFE27:
 3722              		.size	follow_path, .-follow_path
 3723              		.section	.text.get_ldnumber,"ax",%progbits
 3724              		.align	2
 3725              		.code	16
 3726              		.thumb_func
 3727              		.type	get_ldnumber, %function
 3728              	get_ldnumber:
 3729              	.LFB28:
2844:.\lib_Fat/ff.c **** 
2845:.\lib_Fat/ff.c **** 
2846:.\lib_Fat/ff.c **** 
2847:.\lib_Fat/ff.c **** 
2848:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2849:.\lib_Fat/ff.c **** /* Get logical drive number from path name                               */
2850:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2851:.\lib_Fat/ff.c **** 
2852:.\lib_Fat/ff.c **** static
2853:.\lib_Fat/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2854:.\lib_Fat/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2855:.\lib_Fat/ff.c **** )
2856:.\lib_Fat/ff.c **** {
 3730              		.loc 1 2856 0
 3731              		.cfi_startproc
 3732 0000 80B5     		push	{r7, lr}
 3733              		.cfi_def_cfa_offset 8
 3734              		.cfi_offset 7, -8
 3735              		.cfi_offset 14, -4
 3736 0002 86B0     		sub	sp, sp, #24
 3737              		.cfi_def_cfa_offset 32
 3738 0004 00AF     		add	r7, sp, #0
 3739              		.cfi_def_cfa_register 7
 3740 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 117


2857:.\lib_Fat/ff.c **** 	const TCHAR *tp, *tt;
2858:.\lib_Fat/ff.c **** 	UINT i;
2859:.\lib_Fat/ff.c **** 	int vol = -1;
 3741              		.loc 1 2859 0
 3742 0008 0123     		mov	r3, #1
 3743 000a 5B42     		neg	r3, r3
 3744 000c 3B61     		str	r3, [r7, #16]
2860:.\lib_Fat/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2861:.\lib_Fat/ff.c **** 	static const char* const str[] = {_VOLUME_STRS};
2862:.\lib_Fat/ff.c **** 	const char *sp;
2863:.\lib_Fat/ff.c **** 	char c;
2864:.\lib_Fat/ff.c **** 	TCHAR tc;
2865:.\lib_Fat/ff.c **** #endif
2866:.\lib_Fat/ff.c **** 
2867:.\lib_Fat/ff.c **** 
2868:.\lib_Fat/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 3745              		.loc 1 2868 0
 3746 000e 7B68     		ldr	r3, [r7, #4]
 3747 0010 1B68     		ldr	r3, [r3]
 3748 0012 002B     		cmp	r3, #0
 3749 0014 31D0     		beq	.L220
2869:.\lib_Fat/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 3750              		.loc 1 2869 0
 3751 0016 7B68     		ldr	r3, [r7, #4]
 3752 0018 1B68     		ldr	r3, [r3]
 3753 001a 7B61     		str	r3, [r7, #20]
 3754 001c 02E0     		b	.L221
 3755              	.L223:
 3756              		.loc 1 2869 0 is_stmt 0 discriminator 4
 3757 001e 7B69     		ldr	r3, [r7, #20]
 3758 0020 0133     		add	r3, r3, #1
 3759 0022 7B61     		str	r3, [r7, #20]
 3760              	.L221:
 3761              		.loc 1 2869 0 discriminator 1
 3762 0024 7B69     		ldr	r3, [r7, #20]
 3763 0026 1B78     		ldrb	r3, [r3]
 3764 0028 202B     		cmp	r3, #32
 3765 002a 03D9     		bls	.L222
 3766              		.loc 1 2869 0 discriminator 3
 3767 002c 7B69     		ldr	r3, [r7, #20]
 3768 002e 1B78     		ldrb	r3, [r3]
 3769 0030 3A2B     		cmp	r3, #58
 3770 0032 F4D1     		bne	.L223
 3771              	.L222:
2870:.\lib_Fat/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 3772              		.loc 1 2870 0 is_stmt 1
 3773 0034 7B69     		ldr	r3, [r7, #20]
 3774 0036 1B78     		ldrb	r3, [r3]
 3775 0038 3A2B     		cmp	r3, #58
 3776 003a 1CD1     		bne	.L224
2871:.\lib_Fat/ff.c **** 			tp = *path;
 3777              		.loc 1 2871 0
 3778 003c 7B68     		ldr	r3, [r7, #4]
 3779 003e 1B68     		ldr	r3, [r3]
 3780 0040 FB60     		str	r3, [r7, #12]
2872:.\lib_Fat/ff.c **** 			i = *tp++ - '0'; 
 3781              		.loc 1 2872 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 118


 3782 0042 FB68     		ldr	r3, [r7, #12]
 3783 0044 5A1C     		add	r2, r3, #1
 3784 0046 FA60     		str	r2, [r7, #12]
 3785 0048 1B78     		ldrb	r3, [r3]
 3786 004a 303B     		sub	r3, r3, #48
 3787 004c BB60     		str	r3, [r7, #8]
2873:.\lib_Fat/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 3788              		.loc 1 2873 0
 3789 004e BB68     		ldr	r3, [r7, #8]
 3790 0050 092B     		cmp	r3, #9
 3791 0052 0ED8     		bhi	.L225
 3792              		.loc 1 2873 0 is_stmt 0 discriminator 1
 3793 0054 FA68     		ldr	r2, [r7, #12]
 3794 0056 7B69     		ldr	r3, [r7, #20]
 3795 0058 9A42     		cmp	r2, r3
 3796 005a 0AD1     		bne	.L225
2874:.\lib_Fat/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 3797              		.loc 1 2874 0 is_stmt 1
 3798 005c BB68     		ldr	r3, [r7, #8]
 3799 005e 002B     		cmp	r3, #0
 3800 0060 07D1     		bne	.L225
2875:.\lib_Fat/ff.c **** 					vol = (int)i;
 3801              		.loc 1 2875 0
 3802 0062 BB68     		ldr	r3, [r7, #8]
 3803 0064 3B61     		str	r3, [r7, #16]
2876:.\lib_Fat/ff.c **** 					*path = ++tt;
 3804              		.loc 1 2876 0
 3805 0066 7B69     		ldr	r3, [r7, #20]
 3806 0068 0133     		add	r3, r3, #1
 3807 006a 7B61     		str	r3, [r7, #20]
 3808 006c 7B68     		ldr	r3, [r7, #4]
 3809 006e 7A69     		ldr	r2, [r7, #20]
 3810 0070 1A60     		str	r2, [r3]
 3811              	.L225:
2877:.\lib_Fat/ff.c **** 				}
2878:.\lib_Fat/ff.c **** 			}
2879:.\lib_Fat/ff.c **** #if _STR_VOLUME_ID
2880:.\lib_Fat/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2881:.\lib_Fat/ff.c **** 				i = 0; tt++;
2882:.\lib_Fat/ff.c **** 				do {
2883:.\lib_Fat/ff.c **** 					sp = str[i]; tp = *path;
2884:.\lib_Fat/ff.c **** 					do {	/* Compare a string drive id with path name */
2885:.\lib_Fat/ff.c **** 						c = *sp++; tc = *tp++;
2886:.\lib_Fat/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2887:.\lib_Fat/ff.c **** 					} while (c && (TCHAR)c == tc);
2888:.\lib_Fat/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2889:.\lib_Fat/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2890:.\lib_Fat/ff.c **** 					vol = (int)i;
2891:.\lib_Fat/ff.c **** 					*path = tt;
2892:.\lib_Fat/ff.c **** 				}
2893:.\lib_Fat/ff.c **** 			}
2894:.\lib_Fat/ff.c **** #endif
2895:.\lib_Fat/ff.c **** 			return vol;
 3812              		.loc 1 2895 0
 3813 0072 3B69     		ldr	r3, [r7, #16]
 3814 0074 02E0     		b	.L226
 3815              	.L224:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 119


2896:.\lib_Fat/ff.c **** 		}
2897:.\lib_Fat/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2898:.\lib_Fat/ff.c **** 		vol = CurrVol;	/* Current drive */
2899:.\lib_Fat/ff.c **** #else
2900:.\lib_Fat/ff.c **** 		vol = 0;		/* Drive 0 */
 3816              		.loc 1 2900 0
 3817 0076 0023     		mov	r3, #0
 3818 0078 3B61     		str	r3, [r7, #16]
 3819              	.L220:
2901:.\lib_Fat/ff.c **** #endif
2902:.\lib_Fat/ff.c **** 	}
2903:.\lib_Fat/ff.c **** 	return vol;
 3820              		.loc 1 2903 0
 3821 007a 3B69     		ldr	r3, [r7, #16]
 3822              	.L226:
2904:.\lib_Fat/ff.c **** }
 3823              		.loc 1 2904 0
 3824 007c 181C     		mov	r0, r3
 3825 007e BD46     		mov	sp, r7
 3826 0080 06B0     		add	sp, sp, #24
 3827              		@ sp needed
 3828 0082 80BD     		pop	{r7, pc}
 3829              		.cfi_endproc
 3830              	.LFE28:
 3831              		.size	get_ldnumber, .-get_ldnumber
 3832              		.section	.text.check_fs,"ax",%progbits
 3833              		.align	2
 3834              		.code	16
 3835              		.thumb_func
 3836              		.type	check_fs, %function
 3837              	check_fs:
 3838              	.LFB29:
2905:.\lib_Fat/ff.c **** 
2906:.\lib_Fat/ff.c **** 
2907:.\lib_Fat/ff.c **** 
2908:.\lib_Fat/ff.c **** 
2909:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2910:.\lib_Fat/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2911:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2912:.\lib_Fat/ff.c **** 
2913:.\lib_Fat/ff.c **** static
2914:.\lib_Fat/ff.c **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2915:.\lib_Fat/ff.c **** 	FATFS* fs,	/* File system object */
2916:.\lib_Fat/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
2917:.\lib_Fat/ff.c **** )
2918:.\lib_Fat/ff.c **** {
 3839              		.loc 1 2918 0
 3840              		.cfi_startproc
 3841 0000 80B5     		push	{r7, lr}
 3842              		.cfi_def_cfa_offset 8
 3843              		.cfi_offset 7, -8
 3844              		.cfi_offset 14, -4
 3845 0002 82B0     		sub	sp, sp, #8
 3846              		.cfi_def_cfa_offset 16
 3847 0004 00AF     		add	r7, sp, #0
 3848              		.cfi_def_cfa_register 7
 3849 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 120


 3850 0008 3960     		str	r1, [r7]
2919:.\lib_Fat/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 3851              		.loc 1 2919 0
 3852 000a 7B68     		ldr	r3, [r7, #4]
 3853 000c 0022     		mov	r2, #0
 3854 000e DA70     		strb	r2, [r3, #3]
 3855 0010 7B68     		ldr	r3, [r7, #4]
 3856 0012 0122     		mov	r2, #1
 3857 0014 5242     		neg	r2, r2
 3858 0016 DA62     		str	r2, [r3, #44]
2920:.\lib_Fat/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 3859              		.loc 1 2920 0
 3860 0018 7A68     		ldr	r2, [r7, #4]
 3861 001a 3B68     		ldr	r3, [r7]
 3862 001c 101C     		mov	r0, r2
 3863 001e 191C     		mov	r1, r3
 3864 0020 FFF7FEFF 		bl	move_window
 3865 0024 031E     		sub	r3, r0, #0
 3866 0026 01D0     		beq	.L228
 3867              		.loc 1 2920 0 is_stmt 0 discriminator 1
 3868 0028 0423     		mov	r3, #4
 3869 002a 35E0     		b	.L229
 3870              	.L228:
2921:.\lib_Fat/ff.c **** 
2922:.\lib_Fat/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
 3871              		.loc 1 2922 0 is_stmt 1
 3872 002c 7B68     		ldr	r3, [r7, #4]
 3873 002e 1C4A     		ldr	r2, .L234
 3874 0030 9446     		mov	ip, r2
 3875 0032 6344     		add	r3, r3, ip
 3876 0034 181C     		mov	r0, r3
 3877 0036 FFF7FEFF 		bl	ld_word
 3878 003a 031C     		mov	r3, r0
 3879 003c 1A1E     		sub	r2, r3, #0
 3880 003e 194B     		ldr	r3, .L234+4
 3881 0040 9A42     		cmp	r2, r3
 3882 0042 01D0     		beq	.L230
 3883              		.loc 1 2922 0 is_stmt 0 discriminator 1
 3884 0044 0323     		mov	r3, #3
 3885 0046 27E0     		b	.L229
 3886              	.L230:
2923:.\lib_Fat/ff.c **** 
2924:.\lib_Fat/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
 3887              		.loc 1 2924 0 is_stmt 1
 3888 0048 7B68     		ldr	r3, [r7, #4]
 3889 004a 3022     		mov	r2, #48
 3890 004c 9B5C     		ldrb	r3, [r3, r2]
 3891 004e E92B     		cmp	r3, #233
 3892 0050 09D0     		beq	.L231
 3893              		.loc 1 2924 0 is_stmt 0 discriminator 1
 3894 0052 7B68     		ldr	r3, [r7, #4]
 3895 0054 3022     		mov	r2, #48
 3896 0056 9B5C     		ldrb	r3, [r3, r2]
 3897 0058 EB2B     		cmp	r3, #235
 3898 005a 1CD1     		bne	.L232
 3899              		.loc 1 2924 0 discriminator 2
 3900 005c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 121


 3901 005e 3222     		mov	r2, #50
 3902 0060 9B5C     		ldrb	r3, [r3, r2]
 3903 0062 902B     		cmp	r3, #144
 3904 0064 17D1     		bne	.L232
 3905              	.L231:
2925:.\lib_Fat/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 3906              		.loc 1 2925 0 is_stmt 1
 3907 0066 7B68     		ldr	r3, [r7, #4]
 3908 0068 6633     		add	r3, r3, #102
 3909 006a 181C     		mov	r0, r3
 3910 006c FFF7FEFF 		bl	ld_dword
 3911 0070 031C     		mov	r3, r0
 3912 0072 1B02     		lsl	r3, r3, #8
 3913 0074 1B0A     		lsr	r3, r3, #8
 3914 0076 0C4A     		ldr	r2, .L234+8
 3915 0078 9342     		cmp	r3, r2
 3916 007a 01D1     		bne	.L233
 3917              		.loc 1 2925 0 is_stmt 0 discriminator 1
 3918 007c 0023     		mov	r3, #0
 3919 007e 0BE0     		b	.L229
 3920              	.L233:
2926:.\lib_Fat/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 3921              		.loc 1 2926 0 is_stmt 1
 3922 0080 7B68     		ldr	r3, [r7, #4]
 3923 0082 8233     		add	r3, r3, #130
 3924 0084 181C     		mov	r0, r3
 3925 0086 FFF7FEFF 		bl	ld_dword
 3926 008a 021E     		sub	r2, r0, #0
 3927 008c 074B     		ldr	r3, .L234+12
 3928 008e 9A42     		cmp	r2, r3
 3929 0090 01D1     		bne	.L232
 3930              		.loc 1 2926 0 is_stmt 0 discriminator 1
 3931 0092 0023     		mov	r3, #0
 3932 0094 00E0     		b	.L229
 3933              	.L232:
2927:.\lib_Fat/ff.c **** 	}
2928:.\lib_Fat/ff.c **** #if _FS_EXFAT
2929:.\lib_Fat/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2930:.\lib_Fat/ff.c **** #endif
2931:.\lib_Fat/ff.c **** 	return 2;
 3934              		.loc 1 2931 0 is_stmt 1
 3935 0096 0223     		mov	r3, #2
 3936              	.L229:
2932:.\lib_Fat/ff.c **** }
 3937              		.loc 1 2932 0
 3938 0098 181C     		mov	r0, r3
 3939 009a BD46     		mov	sp, r7
 3940 009c 02B0     		add	sp, sp, #8
 3941              		@ sp needed
 3942 009e 80BD     		pop	{r7, pc}
 3943              	.L235:
 3944              		.align	2
 3945              	.L234:
 3946 00a0 2E020000 		.word	558
 3947 00a4 55AA0000 		.word	43605
 3948 00a8 46415400 		.word	5521734
 3949 00ac 46415433 		.word	861159750
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 122


 3950              		.cfi_endproc
 3951              	.LFE29:
 3952              		.size	check_fs, .-check_fs
 3953              		.global	__aeabi_uidiv
 3954              		.section	.text.find_volume,"ax",%progbits
 3955              		.align	2
 3956              		.code	16
 3957              		.thumb_func
 3958              		.type	find_volume, %function
 3959              	find_volume:
 3960              	.LFB30:
2933:.\lib_Fat/ff.c **** 
2934:.\lib_Fat/ff.c **** 
2935:.\lib_Fat/ff.c **** 
2936:.\lib_Fat/ff.c **** 
2937:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2938:.\lib_Fat/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2939:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
2940:.\lib_Fat/ff.c **** 
2941:.\lib_Fat/ff.c **** static
2942:.\lib_Fat/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2943:.\lib_Fat/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2944:.\lib_Fat/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2945:.\lib_Fat/ff.c **** 	BYTE mode			/* !=0: Check write protection for write access */
2946:.\lib_Fat/ff.c **** )
2947:.\lib_Fat/ff.c **** {
 3961              		.loc 1 2947 0
 3962              		.cfi_startproc
 3963 0000 90B5     		push	{r4, r7, lr}
 3964              		.cfi_def_cfa_offset 12
 3965              		.cfi_offset 4, -12
 3966              		.cfi_offset 7, -8
 3967              		.cfi_offset 14, -4
 3968 0002 97B0     		sub	sp, sp, #92
 3969              		.cfi_def_cfa_offset 104
 3970 0004 00AF     		add	r7, sp, #0
 3971              		.cfi_def_cfa_register 7
 3972 0006 F860     		str	r0, [r7, #12]
 3973 0008 B960     		str	r1, [r7, #8]
 3974 000a FB1D     		add	r3, r7, #7
 3975 000c 1A70     		strb	r2, [r3]
2948:.\lib_Fat/ff.c **** 	BYTE fmt, *pt;
2949:.\lib_Fat/ff.c **** 	int vol;
2950:.\lib_Fat/ff.c **** 	DSTATUS stat;
2951:.\lib_Fat/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
2952:.\lib_Fat/ff.c **** 	WORD nrsv;
2953:.\lib_Fat/ff.c **** 	FATFS *fs;
2954:.\lib_Fat/ff.c **** 	UINT i;
2955:.\lib_Fat/ff.c **** 
2956:.\lib_Fat/ff.c **** 
2957:.\lib_Fat/ff.c **** 	/* Get logical drive number from the path name */
2958:.\lib_Fat/ff.c **** 	*rfs = 0;
 3976              		.loc 1 2958 0
 3977 000e BB68     		ldr	r3, [r7, #8]
 3978 0010 0022     		mov	r2, #0
 3979 0012 1A60     		str	r2, [r3]
2959:.\lib_Fat/ff.c **** 	vol = get_ldnumber(path);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 123


 3980              		.loc 1 2959 0
 3981 0014 FB68     		ldr	r3, [r7, #12]
 3982 0016 181C     		mov	r0, r3
 3983 0018 FFF7FEFF 		bl	get_ldnumber
 3984 001c 031C     		mov	r3, r0
 3985 001e FB63     		str	r3, [r7, #60]
2960:.\lib_Fat/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 3986              		.loc 1 2960 0
 3987 0020 FB6B     		ldr	r3, [r7, #60]
 3988 0022 002B     		cmp	r3, #0
 3989 0024 01DA     		bge	.L237
 3990              		.loc 1 2960 0 is_stmt 0 discriminator 1
 3991 0026 0B23     		mov	r3, #11
 3992 0028 46E2     		b	.L275
 3993              	.L237:
2961:.\lib_Fat/ff.c **** 
2962:.\lib_Fat/ff.c **** 	/* Check if the file system object is valid or not */
2963:.\lib_Fat/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
 3994              		.loc 1 2963 0 is_stmt 1
 3995 002a CB4B     		ldr	r3, .L276
 3996 002c FA6B     		ldr	r2, [r7, #60]
 3997 002e 9200     		lsl	r2, r2, #2
 3998 0030 D358     		ldr	r3, [r2, r3]
 3999 0032 BB63     		str	r3, [r7, #56]
2964:.\lib_Fat/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 4000              		.loc 1 2964 0
 4001 0034 BB6B     		ldr	r3, [r7, #56]
 4002 0036 002B     		cmp	r3, #0
 4003 0038 01D1     		bne	.L239
 4004              		.loc 1 2964 0 is_stmt 0 discriminator 1
 4005 003a 0C23     		mov	r3, #12
 4006 003c 3CE2     		b	.L275
 4007              	.L239:
2965:.\lib_Fat/ff.c **** 
2966:.\lib_Fat/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
2967:.\lib_Fat/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 4008              		.loc 1 2967 0 is_stmt 1
 4009 003e BB68     		ldr	r3, [r7, #8]
 4010 0040 BA6B     		ldr	r2, [r7, #56]
 4011 0042 1A60     		str	r2, [r3]
2968:.\lib_Fat/ff.c **** 
2969:.\lib_Fat/ff.c **** 	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 4012              		.loc 1 2969 0
 4013 0044 FB1D     		add	r3, r7, #7
 4014 0046 FA1D     		add	r2, r7, #7
 4015 0048 1278     		ldrb	r2, [r2]
 4016 004a 0121     		mov	r1, #1
 4017 004c 8A43     		bic	r2, r1
 4018 004e 1A70     		strb	r2, [r3]
2970:.\lib_Fat/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 4019              		.loc 1 2970 0
 4020 0050 BB6B     		ldr	r3, [r7, #56]
 4021 0052 1B78     		ldrb	r3, [r3]
 4022 0054 002B     		cmp	r3, #0
 4023 0056 1CD0     		beq	.L240
2971:.\lib_Fat/ff.c **** 		stat = disk_status(fs->drv);
 4024              		.loc 1 2971 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 124


 4025 0058 BB6B     		ldr	r3, [r7, #56]
 4026 005a 5B78     		ldrb	r3, [r3, #1]
 4027 005c 3722     		mov	r2, #55
 4028 005e BC18     		add	r4, r7, r2
 4029 0060 181C     		mov	r0, r3
 4030 0062 FFF7FEFF 		bl	disk_status
 4031 0066 031C     		mov	r3, r0
 4032 0068 2370     		strb	r3, [r4]
2972:.\lib_Fat/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 4033              		.loc 1 2972 0
 4034 006a 3723     		mov	r3, #55
 4035 006c FB18     		add	r3, r7, r3
 4036 006e 1B78     		ldrb	r3, [r3]
 4037 0070 0122     		mov	r2, #1
 4038 0072 1340     		and	r3, r2
 4039 0074 0DD1     		bne	.L240
2973:.\lib_Fat/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 4040              		.loc 1 2973 0
 4041 0076 FB1D     		add	r3, r7, #7
 4042 0078 1B78     		ldrb	r3, [r3]
 4043 007a 002B     		cmp	r3, #0
 4044 007c 07D0     		beq	.L241
 4045              		.loc 1 2973 0 is_stmt 0 discriminator 1
 4046 007e 3723     		mov	r3, #55
 4047 0080 FB18     		add	r3, r7, r3
 4048 0082 1B78     		ldrb	r3, [r3]
 4049 0084 0422     		mov	r2, #4
 4050 0086 1340     		and	r3, r2
 4051 0088 01D0     		beq	.L241
2974:.\lib_Fat/ff.c **** 				return FR_WRITE_PROTECTED;
 4052              		.loc 1 2974 0 is_stmt 1
 4053 008a 0A23     		mov	r3, #10
 4054 008c 14E2     		b	.L275
 4055              	.L241:
2975:.\lib_Fat/ff.c **** 			}
2976:.\lib_Fat/ff.c **** 			return FR_OK;				/* The file system object is valid */
 4056              		.loc 1 2976 0
 4057 008e 0023     		mov	r3, #0
 4058 0090 12E2     		b	.L275
 4059              	.L240:
2977:.\lib_Fat/ff.c **** 		}
2978:.\lib_Fat/ff.c **** 	}
2979:.\lib_Fat/ff.c **** 
2980:.\lib_Fat/ff.c **** 	/* The file system object is not valid. */
2981:.\lib_Fat/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2982:.\lib_Fat/ff.c **** 
2983:.\lib_Fat/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 4060              		.loc 1 2983 0
 4061 0092 BB6B     		ldr	r3, [r7, #56]
 4062 0094 0022     		mov	r2, #0
 4063 0096 1A70     		strb	r2, [r3]
2984:.\lib_Fat/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 4064              		.loc 1 2984 0
 4065 0098 FB6B     		ldr	r3, [r7, #60]
 4066 009a DAB2     		uxtb	r2, r3
 4067 009c BB6B     		ldr	r3, [r7, #56]
 4068 009e 5A70     		strb	r2, [r3, #1]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 125


2985:.\lib_Fat/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 4069              		.loc 1 2985 0
 4070 00a0 BB6B     		ldr	r3, [r7, #56]
 4071 00a2 5B78     		ldrb	r3, [r3, #1]
 4072 00a4 3722     		mov	r2, #55
 4073 00a6 BC18     		add	r4, r7, r2
 4074 00a8 181C     		mov	r0, r3
 4075 00aa FFF7FEFF 		bl	disk_initialize
 4076 00ae 031C     		mov	r3, r0
 4077 00b0 2370     		strb	r3, [r4]
2986:.\lib_Fat/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 4078              		.loc 1 2986 0
 4079 00b2 3723     		mov	r3, #55
 4080 00b4 FB18     		add	r3, r7, r3
 4081 00b6 1B78     		ldrb	r3, [r3]
 4082 00b8 0122     		mov	r2, #1
 4083 00ba 1340     		and	r3, r2
 4084 00bc 01D0     		beq	.L242
2987:.\lib_Fat/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 4085              		.loc 1 2987 0
 4086 00be 0323     		mov	r3, #3
 4087 00c0 FAE1     		b	.L275
 4088              	.L242:
2988:.\lib_Fat/ff.c **** 	}
2989:.\lib_Fat/ff.c **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 4089              		.loc 1 2989 0
 4090 00c2 FB1D     		add	r3, r7, #7
 4091 00c4 1B78     		ldrb	r3, [r3]
 4092 00c6 002B     		cmp	r3, #0
 4093 00c8 07D0     		beq	.L243
 4094              		.loc 1 2989 0 is_stmt 0 discriminator 1
 4095 00ca 3723     		mov	r3, #55
 4096 00cc FB18     		add	r3, r7, r3
 4097 00ce 1B78     		ldrb	r3, [r3]
 4098 00d0 0422     		mov	r2, #4
 4099 00d2 1340     		and	r3, r2
 4100 00d4 01D0     		beq	.L243
2990:.\lib_Fat/ff.c **** 		return FR_WRITE_PROTECTED;
 4101              		.loc 1 2990 0 is_stmt 1
 4102 00d6 0A23     		mov	r3, #10
 4103 00d8 EEE1     		b	.L275
 4104              	.L243:
2991:.\lib_Fat/ff.c **** 	}
2992:.\lib_Fat/ff.c **** #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
2993:.\lib_Fat/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
2994:.\lib_Fat/ff.c **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
2995:.\lib_Fat/ff.c **** #endif
2996:.\lib_Fat/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2997:.\lib_Fat/ff.c **** 	bsect = 0;
 4105              		.loc 1 2997 0
 4106 00da 0023     		mov	r3, #0
 4107 00dc 3B65     		str	r3, [r7, #80]
2998:.\lib_Fat/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 4108              		.loc 1 2998 0
 4109 00de 5723     		mov	r3, #87
 4110 00e0 FC18     		add	r4, r7, r3
 4111 00e2 BA6B     		ldr	r2, [r7, #56]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 126


 4112 00e4 3B6D     		ldr	r3, [r7, #80]
 4113 00e6 101C     		mov	r0, r2
 4114 00e8 191C     		mov	r1, r3
 4115 00ea FFF7FEFF 		bl	check_fs
 4116 00ee 031C     		mov	r3, r0
 4117 00f0 2370     		strb	r3, [r4]
2999:.\lib_Fat/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 4118              		.loc 1 2999 0
 4119 00f2 5723     		mov	r3, #87
 4120 00f4 FB18     		add	r3, r7, r3
 4121 00f6 1B78     		ldrb	r3, [r3]
 4122 00f8 022B     		cmp	r3, #2
 4123 00fa 4BD1     		bne	.L244
3000:.\lib_Fat/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 4124              		.loc 1 3000 0
 4125 00fc 0023     		mov	r3, #0
 4126 00fe 3B64     		str	r3, [r7, #64]
 4127 0100 1CE0     		b	.L245
 4128              	.L248:
3001:.\lib_Fat/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 4129              		.loc 1 3001 0
 4130 0102 3B6C     		ldr	r3, [r7, #64]
 4131 0104 1B01     		lsl	r3, r3, #4
 4132 0106 BF33     		add	r3, r3, #191
 4133 0108 FF33     		add	r3, r3, #255
 4134 010a 3033     		add	r3, r3, #48
 4135 010c BA6B     		ldr	r2, [r7, #56]
 4136 010e D318     		add	r3, r2, r3
 4137 0110 3B63     		str	r3, [r7, #48]
3002:.\lib_Fat/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 4138              		.loc 1 3002 0
 4139 0112 3B6B     		ldr	r3, [r7, #48]
 4140 0114 0433     		add	r3, r3, #4
 4141 0116 1B78     		ldrb	r3, [r3]
 4142 0118 002B     		cmp	r3, #0
 4143 011a 06D0     		beq	.L246
 4144              		.loc 1 3002 0 is_stmt 0 discriminator 1
 4145 011c 3B6B     		ldr	r3, [r7, #48]
 4146 011e 0833     		add	r3, r3, #8
 4147 0120 181C     		mov	r0, r3
 4148 0122 FFF7FEFF 		bl	ld_dword
 4149 0126 011C     		mov	r1, r0
 4150 0128 00E0     		b	.L247
 4151              	.L246:
 4152              		.loc 1 3002 0 discriminator 2
 4153 012a 0021     		mov	r1, #0
 4154              	.L247:
 4155              		.loc 1 3002 0 discriminator 4
 4156 012c 1423     		mov	r3, #20
 4157 012e FB18     		add	r3, r7, r3
 4158 0130 3A6C     		ldr	r2, [r7, #64]
 4159 0132 9200     		lsl	r2, r2, #2
 4160 0134 D150     		str	r1, [r2, r3]
3000:.\lib_Fat/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 4161              		.loc 1 3000 0 is_stmt 1 discriminator 4
 4162 0136 3B6C     		ldr	r3, [r7, #64]
 4163 0138 0133     		add	r3, r3, #1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 127


 4164 013a 3B64     		str	r3, [r7, #64]
 4165              	.L245:
3000:.\lib_Fat/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 4166              		.loc 1 3000 0 is_stmt 0 discriminator 2
 4167 013c 3B6C     		ldr	r3, [r7, #64]
 4168 013e 032B     		cmp	r3, #3
 4169 0140 DFD9     		bls	.L248
3003:.\lib_Fat/ff.c **** 		}
3004:.\lib_Fat/ff.c **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 4170              		.loc 1 3004 0 is_stmt 1
 4171 0142 0023     		mov	r3, #0
 4172 0144 3B64     		str	r3, [r7, #64]
3005:.\lib_Fat/ff.c **** 		if (i) i--;
 4173              		.loc 1 3005 0
 4174 0146 3B6C     		ldr	r3, [r7, #64]
 4175 0148 002B     		cmp	r3, #0
 4176 014a 02D0     		beq	.L249
 4177              		.loc 1 3005 0 is_stmt 0 discriminator 1
 4178 014c 3B6C     		ldr	r3, [r7, #64]
 4179 014e 013B     		sub	r3, r3, #1
 4180 0150 3B64     		str	r3, [r7, #64]
 4181              	.L249:
3006:.\lib_Fat/ff.c **** 		do {								/* Find an FAT volume */
3007:.\lib_Fat/ff.c **** 			bsect = br[i];
 4182              		.loc 1 3007 0 is_stmt 1
 4183 0152 1423     		mov	r3, #20
 4184 0154 FB18     		add	r3, r7, r3
 4185 0156 3A6C     		ldr	r2, [r7, #64]
 4186 0158 9200     		lsl	r2, r2, #2
 4187 015a D358     		ldr	r3, [r2, r3]
 4188 015c 3B65     		str	r3, [r7, #80]
3008:.\lib_Fat/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 4189              		.loc 1 3008 0
 4190 015e 3B6D     		ldr	r3, [r7, #80]
 4191 0160 002B     		cmp	r3, #0
 4192 0162 08D0     		beq	.L250
 4193              		.loc 1 3008 0 is_stmt 0 discriminator 1
 4194 0164 BA6B     		ldr	r2, [r7, #56]
 4195 0166 3B6D     		ldr	r3, [r7, #80]
 4196 0168 101C     		mov	r0, r2
 4197 016a 191C     		mov	r1, r3
 4198 016c FFF7FEFF 		bl	check_fs
 4199 0170 031C     		mov	r3, r0
 4200 0172 1A1C     		mov	r2, r3
 4201 0174 00E0     		b	.L251
 4202              	.L250:
 4203              		.loc 1 3008 0 discriminator 2
 4204 0176 0322     		mov	r2, #3
 4205              	.L251:
 4206              		.loc 1 3008 0 discriminator 4
 4207 0178 5723     		mov	r3, #87
 4208 017a FB18     		add	r3, r7, r3
 4209 017c 1A70     		strb	r2, [r3]
3009:.\lib_Fat/ff.c **** 		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 4210              		.loc 1 3009 0 is_stmt 1 discriminator 4
 4211 017e 5723     		mov	r3, #87
 4212 0180 FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 128


 4213 0182 1B78     		ldrb	r3, [r3]
 4214 0184 012B     		cmp	r3, #1
 4215 0186 05D9     		bls	.L244
 4216              		.loc 1 3009 0 is_stmt 0 discriminator 1
 4217 0188 3B6C     		ldr	r3, [r7, #64]
 4218 018a 0133     		add	r3, r3, #1
 4219 018c 3B64     		str	r3, [r7, #64]
 4220 018e 3B6C     		ldr	r3, [r7, #64]
 4221 0190 032B     		cmp	r3, #3
 4222 0192 DED9     		bls	.L249
 4223              	.L244:
3010:.\lib_Fat/ff.c **** 	}
3011:.\lib_Fat/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 4224              		.loc 1 3011 0 is_stmt 1
 4225 0194 5723     		mov	r3, #87
 4226 0196 FB18     		add	r3, r7, r3
 4227 0198 1B78     		ldrb	r3, [r3]
 4228 019a 042B     		cmp	r3, #4
 4229 019c 01D1     		bne	.L252
 4230              		.loc 1 3011 0 is_stmt 0 discriminator 1
 4231 019e 0123     		mov	r3, #1
 4232 01a0 8AE1     		b	.L275
 4233              	.L252:
3012:.\lib_Fat/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 4234              		.loc 1 3012 0 is_stmt 1
 4235 01a2 5723     		mov	r3, #87
 4236 01a4 FB18     		add	r3, r7, r3
 4237 01a6 1B78     		ldrb	r3, [r3]
 4238 01a8 012B     		cmp	r3, #1
 4239 01aa 01D9     		bls	.L253
 4240              		.loc 1 3012 0 is_stmt 0 discriminator 1
 4241 01ac 0D23     		mov	r3, #13
 4242 01ae 83E1     		b	.L275
 4243              	.L253:
3013:.\lib_Fat/ff.c **** 
3014:.\lib_Fat/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
3015:.\lib_Fat/ff.c **** 
3016:.\lib_Fat/ff.c **** #if _FS_EXFAT
3017:.\lib_Fat/ff.c **** 	if (fmt == 1) {
3018:.\lib_Fat/ff.c **** 		QWORD maxlba;
3019:.\lib_Fat/ff.c **** 
3020:.\lib_Fat/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3021:.\lib_Fat/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3022:.\lib_Fat/ff.c **** 
3023:.\lib_Fat/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3024:.\lib_Fat/ff.c **** 
3025:.\lib_Fat/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs))	/* (BPB_BytsPerSecEx must be equal to the physical 
3026:.\lib_Fat/ff.c **** 			return FR_NO_FILESYSTEM;
3027:.\lib_Fat/ff.c **** 
3028:.\lib_Fat/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3029:.\lib_Fat/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3030:.\lib_Fat/ff.c **** 
3031:.\lib_Fat/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3032:.\lib_Fat/ff.c **** 
3033:.\lib_Fat/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3034:.\lib_Fat/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3035:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 129


3036:.\lib_Fat/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3037:.\lib_Fat/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3038:.\lib_Fat/ff.c **** 
3039:.\lib_Fat/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3040:.\lib_Fat/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3041:.\lib_Fat/ff.c **** 		fs->n_fatent = nclst + 2;
3042:.\lib_Fat/ff.c **** 
3043:.\lib_Fat/ff.c **** 		/* Boundaries and Limits */
3044:.\lib_Fat/ff.c **** 		fs->volbase = bsect;
3045:.\lib_Fat/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3046:.\lib_Fat/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3047:.\lib_Fat/ff.c **** 		if (maxlba < fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not 
3048:.\lib_Fat/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3049:.\lib_Fat/ff.c **** 
3050:.\lib_Fat/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3051:.\lib_Fat/ff.c **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3052:.\lib_Fat/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3053:.\lib_Fat/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3054:.\lib_Fat/ff.c **** 		}
3055:.\lib_Fat/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3056:.\lib_Fat/ff.c **** #if !_FS_READONLY
3057:.\lib_Fat/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3058:.\lib_Fat/ff.c **** #endif
3059:.\lib_Fat/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3060:.\lib_Fat/ff.c **** 	} else
3061:.\lib_Fat/ff.c **** #endif	/* _FS_EXFAT */
3062:.\lib_Fat/ff.c **** 	{
3063:.\lib_Fat/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
 4244              		.loc 1 3063 0 is_stmt 1
 4245 01b0 BB6B     		ldr	r3, [r7, #56]
 4246 01b2 3B33     		add	r3, r3, #59
 4247 01b4 181C     		mov	r0, r3
 4248 01b6 FFF7FEFF 		bl	ld_word
 4249 01ba 031C     		mov	r3, r0
 4250 01bc 1A1C     		mov	r2, r3
 4251 01be 8023     		mov	r3, #128
 4252 01c0 9B00     		lsl	r3, r3, #2
 4253 01c2 9A42     		cmp	r2, r3
 4254 01c4 01D0     		beq	.L254
 4255              		.loc 1 3063 0 is_stmt 0 discriminator 1
 4256 01c6 0D23     		mov	r3, #13
 4257 01c8 76E1     		b	.L275
 4258              	.L254:
3064:.\lib_Fat/ff.c **** 
3065:.\lib_Fat/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 4259              		.loc 1 3065 0 is_stmt 1
 4260 01ca BB6B     		ldr	r3, [r7, #56]
 4261 01cc 4633     		add	r3, r3, #70
 4262 01ce 181C     		mov	r0, r3
 4263 01d0 FFF7FEFF 		bl	ld_word
 4264 01d4 031C     		mov	r3, r0
 4265 01d6 FB64     		str	r3, [r7, #76]
3066:.\lib_Fat/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 4266              		.loc 1 3066 0
 4267 01d8 FB6C     		ldr	r3, [r7, #76]
 4268 01da 002B     		cmp	r3, #0
 4269 01dc 06D1     		bne	.L255
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 130


 4270              		.loc 1 3066 0 is_stmt 0 discriminator 1
 4271 01de BB6B     		ldr	r3, [r7, #56]
 4272 01e0 5433     		add	r3, r3, #84
 4273 01e2 181C     		mov	r0, r3
 4274 01e4 FFF7FEFF 		bl	ld_dword
 4275 01e8 031C     		mov	r3, r0
 4276 01ea FB64     		str	r3, [r7, #76]
 4277              	.L255:
3067:.\lib_Fat/ff.c **** 		fs->fsize = fasize;
 4278              		.loc 1 3067 0 is_stmt 1
 4279 01ec BB6B     		ldr	r3, [r7, #56]
 4280 01ee FA6C     		ldr	r2, [r7, #76]
 4281 01f0 9A61     		str	r2, [r3, #24]
3068:.\lib_Fat/ff.c **** 
3069:.\lib_Fat/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 4282              		.loc 1 3069 0
 4283 01f2 BB6B     		ldr	r3, [r7, #56]
 4284 01f4 4022     		mov	r2, #64
 4285 01f6 9A5C     		ldrb	r2, [r3, r2]
 4286 01f8 BB6B     		ldr	r3, [r7, #56]
 4287 01fa 9A70     		strb	r2, [r3, #2]
3070:.\lib_Fat/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 4288              		.loc 1 3070 0
 4289 01fc BB6B     		ldr	r3, [r7, #56]
 4290 01fe 9B78     		ldrb	r3, [r3, #2]
 4291 0200 012B     		cmp	r3, #1
 4292 0202 05D0     		beq	.L256
 4293              		.loc 1 3070 0 is_stmt 0 discriminator 1
 4294 0204 BB6B     		ldr	r3, [r7, #56]
 4295 0206 9B78     		ldrb	r3, [r3, #2]
 4296 0208 022B     		cmp	r3, #2
 4297 020a 01D0     		beq	.L256
 4298              		.loc 1 3070 0 discriminator 2
 4299 020c 0D23     		mov	r3, #13
 4300 020e 53E1     		b	.L275
 4301              	.L256:
3071:.\lib_Fat/ff.c **** 		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 4302              		.loc 1 3071 0 is_stmt 1
 4303 0210 BB6B     		ldr	r3, [r7, #56]
 4304 0212 9B78     		ldrb	r3, [r3, #2]
 4305 0214 1A1C     		mov	r2, r3
 4306 0216 FB6C     		ldr	r3, [r7, #76]
 4307 0218 5343     		mul	r3, r2
 4308 021a FB64     		str	r3, [r7, #76]
3072:.\lib_Fat/ff.c **** 
3073:.\lib_Fat/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 4309              		.loc 1 3073 0
 4310 021c BB6B     		ldr	r3, [r7, #56]
 4311 021e 3D22     		mov	r2, #61
 4312 0220 9B5C     		ldrb	r3, [r3, r2]
 4313 0222 9AB2     		uxth	r2, r3
 4314 0224 BB6B     		ldr	r3, [r7, #56]
 4315 0226 5A81     		strh	r2, [r3, #10]
3074:.\lib_Fat/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 4316              		.loc 1 3074 0
 4317 0228 BB6B     		ldr	r3, [r7, #56]
 4318 022a 5B89     		ldrh	r3, [r3, #10]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 131


 4319 022c 002B     		cmp	r3, #0
 4320 022e 07D0     		beq	.L257
 4321              		.loc 1 3074 0 is_stmt 0 discriminator 2
 4322 0230 BB6B     		ldr	r3, [r7, #56]
 4323 0232 5B89     		ldrh	r3, [r3, #10]
 4324 0234 1A1C     		mov	r2, r3
 4325 0236 BB6B     		ldr	r3, [r7, #56]
 4326 0238 5B89     		ldrh	r3, [r3, #10]
 4327 023a 013B     		sub	r3, r3, #1
 4328 023c 1340     		and	r3, r2
 4329 023e 01D0     		beq	.L258
 4330              	.L257:
 4331              		.loc 1 3074 0 discriminator 3
 4332 0240 0D23     		mov	r3, #13
 4333 0242 39E1     		b	.L275
 4334              	.L258:
3075:.\lib_Fat/ff.c **** 
3076:.\lib_Fat/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 4335              		.loc 1 3076 0 is_stmt 1
 4336 0244 BB6B     		ldr	r3, [r7, #56]
 4337 0246 4133     		add	r3, r3, #65
 4338 0248 181C     		mov	r0, r3
 4339 024a FFF7FEFF 		bl	ld_word
 4340 024e 031C     		mov	r3, r0
 4341 0250 1A1C     		mov	r2, r3
 4342 0252 BB6B     		ldr	r3, [r7, #56]
 4343 0254 1A81     		strh	r2, [r3, #8]
3077:.\lib_Fat/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 4344              		.loc 1 3077 0
 4345 0256 BB6B     		ldr	r3, [r7, #56]
 4346 0258 1B89     		ldrh	r3, [r3, #8]
 4347 025a 0F22     		mov	r2, #15
 4348 025c 1340     		and	r3, r2
 4349 025e 9BB2     		uxth	r3, r3
 4350 0260 002B     		cmp	r3, #0
 4351 0262 01D0     		beq	.L259
 4352              		.loc 1 3077 0 is_stmt 0 discriminator 1
 4353 0264 0D23     		mov	r3, #13
 4354 0266 27E1     		b	.L275
 4355              	.L259:
3078:.\lib_Fat/ff.c **** 
3079:.\lib_Fat/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 4356              		.loc 1 3079 0 is_stmt 1
 4357 0268 BB6B     		ldr	r3, [r7, #56]
 4358 026a 4333     		add	r3, r3, #67
 4359 026c 181C     		mov	r0, r3
 4360 026e FFF7FEFF 		bl	ld_word
 4361 0272 031C     		mov	r3, r0
 4362 0274 BB64     		str	r3, [r7, #72]
3080:.\lib_Fat/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 4363              		.loc 1 3080 0
 4364 0276 BB6C     		ldr	r3, [r7, #72]
 4365 0278 002B     		cmp	r3, #0
 4366 027a 06D1     		bne	.L260
 4367              		.loc 1 3080 0 is_stmt 0 discriminator 1
 4368 027c BB6B     		ldr	r3, [r7, #56]
 4369 027e 5033     		add	r3, r3, #80
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 132


 4370 0280 181C     		mov	r0, r3
 4371 0282 FFF7FEFF 		bl	ld_dword
 4372 0286 031C     		mov	r3, r0
 4373 0288 BB64     		str	r3, [r7, #72]
 4374              	.L260:
3081:.\lib_Fat/ff.c **** 
3082:.\lib_Fat/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 4375              		.loc 1 3082 0 is_stmt 1
 4376 028a BB6B     		ldr	r3, [r7, #56]
 4377 028c 3E33     		add	r3, r3, #62
 4378 028e 2E22     		mov	r2, #46
 4379 0290 BC18     		add	r4, r7, r2
 4380 0292 181C     		mov	r0, r3
 4381 0294 FFF7FEFF 		bl	ld_word
 4382 0298 031C     		mov	r3, r0
 4383 029a 2380     		strh	r3, [r4]
3083:.\lib_Fat/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 4384              		.loc 1 3083 0
 4385 029c 2E23     		mov	r3, #46
 4386 029e FB18     		add	r3, r7, r3
 4387 02a0 1B88     		ldrh	r3, [r3]
 4388 02a2 002B     		cmp	r3, #0
 4389 02a4 01D1     		bne	.L261
 4390              		.loc 1 3083 0 is_stmt 0 discriminator 1
 4391 02a6 0D23     		mov	r3, #13
 4392 02a8 06E1     		b	.L275
 4393              	.L261:
3084:.\lib_Fat/ff.c **** 
3085:.\lib_Fat/ff.c **** 		/* Determine the FAT sub type */
3086:.\lib_Fat/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 4394              		.loc 1 3086 0 is_stmt 1
 4395 02aa 2E23     		mov	r3, #46
 4396 02ac FB18     		add	r3, r7, r3
 4397 02ae 1A88     		ldrh	r2, [r3]
 4398 02b0 FB6C     		ldr	r3, [r7, #76]
 4399 02b2 D318     		add	r3, r2, r3
 4400 02b4 BA6B     		ldr	r2, [r7, #56]
 4401 02b6 1289     		ldrh	r2, [r2, #8]
 4402 02b8 1209     		lsr	r2, r2, #4
 4403 02ba 92B2     		uxth	r2, r2
 4404 02bc 9B18     		add	r3, r3, r2
 4405 02be BB62     		str	r3, [r7, #40]
3087:.\lib_Fat/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 4406              		.loc 1 3087 0
 4407 02c0 BA6C     		ldr	r2, [r7, #72]
 4408 02c2 BB6A     		ldr	r3, [r7, #40]
 4409 02c4 9A42     		cmp	r2, r3
 4410 02c6 01D2     		bcs	.L262
 4411              		.loc 1 3087 0 is_stmt 0 discriminator 1
 4412 02c8 0D23     		mov	r3, #13
 4413 02ca F5E0     		b	.L275
 4414              	.L262:
3088:.\lib_Fat/ff.c **** 		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 4415              		.loc 1 3088 0 is_stmt 1
 4416 02cc BA6C     		ldr	r2, [r7, #72]
 4417 02ce BB6A     		ldr	r3, [r7, #40]
 4418 02d0 D21A     		sub	r2, r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 133


 4419 02d2 BB6B     		ldr	r3, [r7, #56]
 4420 02d4 5B89     		ldrh	r3, [r3, #10]
 4421 02d6 101C     		mov	r0, r2
 4422 02d8 191C     		mov	r1, r3
 4423 02da FFF7FEFF 		bl	__aeabi_uidiv
 4424 02de 031C     		mov	r3, r0
 4425 02e0 7B62     		str	r3, [r7, #36]
3089:.\lib_Fat/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 4426              		.loc 1 3089 0
 4427 02e2 7B6A     		ldr	r3, [r7, #36]
 4428 02e4 002B     		cmp	r3, #0
 4429 02e6 01D1     		bne	.L263
 4430              		.loc 1 3089 0 is_stmt 0 discriminator 1
 4431 02e8 0D23     		mov	r3, #13
 4432 02ea E5E0     		b	.L275
 4433              	.L263:
3090:.\lib_Fat/ff.c **** 		fmt = FS_FAT32;
 4434              		.loc 1 3090 0 is_stmt 1
 4435 02ec 5723     		mov	r3, #87
 4436 02ee FB18     		add	r3, r7, r3
 4437 02f0 0322     		mov	r2, #3
 4438 02f2 1A70     		strb	r2, [r3]
3091:.\lib_Fat/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 4439              		.loc 1 3091 0
 4440 02f4 7B6A     		ldr	r3, [r7, #36]
 4441 02f6 194A     		ldr	r2, .L276+4
 4442 02f8 9342     		cmp	r3, r2
 4443 02fa 03D8     		bhi	.L264
 4444              		.loc 1 3091 0 is_stmt 0 discriminator 1
 4445 02fc 5723     		mov	r3, #87
 4446 02fe FB18     		add	r3, r7, r3
 4447 0300 0222     		mov	r2, #2
 4448 0302 1A70     		strb	r2, [r3]
 4449              	.L264:
3092:.\lib_Fat/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 4450              		.loc 1 3092 0 is_stmt 1
 4451 0304 7B6A     		ldr	r3, [r7, #36]
 4452 0306 164A     		ldr	r2, .L276+8
 4453 0308 9342     		cmp	r3, r2
 4454 030a 03D8     		bhi	.L265
 4455              		.loc 1 3092 0 is_stmt 0 discriminator 1
 4456 030c 5723     		mov	r3, #87
 4457 030e FB18     		add	r3, r7, r3
 4458 0310 0122     		mov	r2, #1
 4459 0312 1A70     		strb	r2, [r3]
 4460              	.L265:
3093:.\lib_Fat/ff.c **** 
3094:.\lib_Fat/ff.c **** 		/* Boundaries and Limits */
3095:.\lib_Fat/ff.c **** 		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 4461              		.loc 1 3095 0 is_stmt 1
 4462 0314 7B6A     		ldr	r3, [r7, #36]
 4463 0316 9A1C     		add	r2, r3, #2
 4464 0318 BB6B     		ldr	r3, [r7, #56]
 4465 031a 5A61     		str	r2, [r3, #20]
3096:.\lib_Fat/ff.c **** 		fs->volbase = bsect;								/* Volume start sector */
 4466              		.loc 1 3096 0
 4467 031c BB6B     		ldr	r3, [r7, #56]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 134


 4468 031e 3A6D     		ldr	r2, [r7, #80]
 4469 0320 DA61     		str	r2, [r3, #28]
3097:.\lib_Fat/ff.c **** 		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 4470              		.loc 1 3097 0
 4471 0322 2E23     		mov	r3, #46
 4472 0324 FB18     		add	r3, r7, r3
 4473 0326 1A88     		ldrh	r2, [r3]
 4474 0328 3B6D     		ldr	r3, [r7, #80]
 4475 032a D218     		add	r2, r2, r3
 4476 032c BB6B     		ldr	r3, [r7, #56]
 4477 032e 1A62     		str	r2, [r3, #32]
3098:.\lib_Fat/ff.c **** 		fs->database = bsect + sysect;						/* Data start sector */
 4478              		.loc 1 3098 0
 4479 0330 3A6D     		ldr	r2, [r7, #80]
 4480 0332 BB6A     		ldr	r3, [r7, #40]
 4481 0334 D218     		add	r2, r2, r3
 4482 0336 BB6B     		ldr	r3, [r7, #56]
 4483 0338 9A62     		str	r2, [r3, #40]
3099:.\lib_Fat/ff.c **** 		if (fmt == FS_FAT32) {
 4484              		.loc 1 3099 0
 4485 033a 5723     		mov	r3, #87
 4486 033c FB18     		add	r3, r7, r3
 4487 033e 1B78     		ldrb	r3, [r3]
 4488 0340 032B     		cmp	r3, #3
 4489 0342 22D1     		bne	.L266
3100:.\lib_Fat/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 4490              		.loc 1 3100 0
 4491 0344 BB6B     		ldr	r3, [r7, #56]
 4492 0346 5A33     		add	r3, r3, #90
 4493 0348 181C     		mov	r0, r3
 4494 034a FFF7FEFF 		bl	ld_word
 4495 034e 031E     		sub	r3, r0, #0
 4496 0350 08D0     		beq	.L267
 4497              		.loc 1 3100 0 is_stmt 0 discriminator 1
 4498 0352 0D23     		mov	r3, #13
 4499 0354 B0E0     		b	.L275
 4500              	.L277:
 4501 0356 C046     		.align	2
 4502              	.L276:
 4503 0358 00000000 		.word	FatFs
 4504 035c F5FF0000 		.word	65525
 4505 0360 F50F0000 		.word	4085
 4506              	.L267:
3101:.\lib_Fat/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 4507              		.loc 1 3101 0 is_stmt 1
 4508 0364 BB6B     		ldr	r3, [r7, #56]
 4509 0366 1B89     		ldrh	r3, [r3, #8]
 4510 0368 002B     		cmp	r3, #0
 4511 036a 01D0     		beq	.L268
 4512              		.loc 1 3101 0 is_stmt 0 discriminator 1
 4513 036c 0D23     		mov	r3, #13
 4514 036e A3E0     		b	.L275
 4515              	.L268:
3102:.\lib_Fat/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 4516              		.loc 1 3102 0 is_stmt 1
 4517 0370 BB6B     		ldr	r3, [r7, #56]
 4518 0372 5C33     		add	r3, r3, #92
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 135


 4519 0374 181C     		mov	r0, r3
 4520 0376 FFF7FEFF 		bl	ld_dword
 4521 037a 021C     		mov	r2, r0
 4522 037c BB6B     		ldr	r3, [r7, #56]
 4523 037e 5A62     		str	r2, [r3, #36]
3103:.\lib_Fat/ff.c **** 			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 4524              		.loc 1 3103 0
 4525 0380 BB6B     		ldr	r3, [r7, #56]
 4526 0382 5B69     		ldr	r3, [r3, #20]
 4527 0384 9B00     		lsl	r3, r3, #2
 4528 0386 7B64     		str	r3, [r7, #68]
 4529 0388 20E0     		b	.L269
 4530              	.L266:
3104:.\lib_Fat/ff.c **** 		} else {
3105:.\lib_Fat/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 4531              		.loc 1 3105 0
 4532 038a BB6B     		ldr	r3, [r7, #56]
 4533 038c 1B89     		ldrh	r3, [r3, #8]
 4534 038e 002B     		cmp	r3, #0
 4535 0390 01D1     		bne	.L270
 4536              		.loc 1 3105 0 is_stmt 0 discriminator 1
 4537 0392 0D23     		mov	r3, #13
 4538 0394 90E0     		b	.L275
 4539              	.L270:
3106:.\lib_Fat/ff.c **** 			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 4540              		.loc 1 3106 0 is_stmt 1
 4541 0396 BB6B     		ldr	r3, [r7, #56]
 4542 0398 1A6A     		ldr	r2, [r3, #32]
 4543 039a FB6C     		ldr	r3, [r7, #76]
 4544 039c D218     		add	r2, r2, r3
 4545 039e BB6B     		ldr	r3, [r7, #56]
 4546 03a0 5A62     		str	r2, [r3, #36]
3107:.\lib_Fat/ff.c **** 			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
3108:.\lib_Fat/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 4547              		.loc 1 3108 0
 4548 03a2 5723     		mov	r3, #87
 4549 03a4 FB18     		add	r3, r7, r3
 4550 03a6 1B78     		ldrb	r3, [r3]
 4551 03a8 022B     		cmp	r3, #2
 4552 03aa 03D1     		bne	.L271
 4553              		.loc 1 3108 0 is_stmt 0 discriminator 1
 4554 03ac BB6B     		ldr	r3, [r7, #56]
 4555 03ae 5B69     		ldr	r3, [r3, #20]
 4556 03b0 5B00     		lsl	r3, r3, #1
 4557 03b2 0AE0     		b	.L272
 4558              	.L271:
 4559              		.loc 1 3108 0 discriminator 2
 4560 03b4 BB6B     		ldr	r3, [r7, #56]
 4561 03b6 5A69     		ldr	r2, [r3, #20]
 4562 03b8 131C     		mov	r3, r2
 4563 03ba 5B00     		lsl	r3, r3, #1
 4564 03bc 9B18     		add	r3, r3, r2
 4565 03be 5A08     		lsr	r2, r3, #1
 4566 03c0 BB6B     		ldr	r3, [r7, #56]
 4567 03c2 5B69     		ldr	r3, [r3, #20]
 4568 03c4 0121     		mov	r1, #1
 4569 03c6 0B40     		and	r3, r1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 136


 4570 03c8 D318     		add	r3, r2, r3
 4571              	.L272:
3107:.\lib_Fat/ff.c **** 			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 4572              		.loc 1 3107 0 is_stmt 1
 4573 03ca 7B64     		str	r3, [r7, #68]
 4574              	.L269:
3109:.\lib_Fat/ff.c **** 		}
3110:.\lib_Fat/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
 4575              		.loc 1 3110 0
 4576 03cc BB6B     		ldr	r3, [r7, #56]
 4577 03ce 9A69     		ldr	r2, [r3, #24]
 4578 03d0 7B6C     		ldr	r3, [r7, #68]
 4579 03d2 3B49     		ldr	r1, .L278
 4580 03d4 8C46     		mov	ip, r1
 4581 03d6 6344     		add	r3, r3, ip
 4582 03d8 5B0A     		lsr	r3, r3, #9
 4583 03da 9A42     		cmp	r2, r3
 4584 03dc 01D2     		bcs	.L273
 4585              		.loc 1 3110 0 is_stmt 0 discriminator 1
 4586 03de 0D23     		mov	r3, #13
 4587 03e0 6AE0     		b	.L275
 4588              	.L273:
3111:.\lib_Fat/ff.c **** 
3112:.\lib_Fat/ff.c **** #if !_FS_READONLY
3113:.\lib_Fat/ff.c **** 		/* Get FSINFO if available */
3114:.\lib_Fat/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 4589              		.loc 1 3114 0 is_stmt 1
 4590 03e2 BB6B     		ldr	r3, [r7, #56]
 4591 03e4 0122     		mov	r2, #1
 4592 03e6 5242     		neg	r2, r2
 4593 03e8 1A61     		str	r2, [r3, #16]
 4594 03ea BB6B     		ldr	r3, [r7, #56]
 4595 03ec 1A69     		ldr	r2, [r3, #16]
 4596 03ee BB6B     		ldr	r3, [r7, #56]
 4597 03f0 DA60     		str	r2, [r3, #12]
3115:.\lib_Fat/ff.c **** 		fs->fsi_flag = 0x80;
 4598              		.loc 1 3115 0
 4599 03f2 BB6B     		ldr	r3, [r7, #56]
 4600 03f4 8022     		mov	r2, #128
 4601 03f6 1A71     		strb	r2, [r3, #4]
3116:.\lib_Fat/ff.c **** #if (_FS_NOFSINFO & 3) != 3
3117:.\lib_Fat/ff.c **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 4602              		.loc 1 3117 0
 4603 03f8 5723     		mov	r3, #87
 4604 03fa FB18     		add	r3, r7, r3
 4605 03fc 1B78     		ldrb	r3, [r3]
 4606 03fe 032B     		cmp	r3, #3
 4607 0400 4AD1     		bne	.L274
3118:.\lib_Fat/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 4608              		.loc 1 3118 0
 4609 0402 BB6B     		ldr	r3, [r7, #56]
 4610 0404 6033     		add	r3, r3, #96
 4611 0406 181C     		mov	r0, r3
 4612 0408 FFF7FEFF 		bl	ld_word
 4613 040c 031E     		sub	r3, r0, #0
 4614 040e 012B     		cmp	r3, #1
 4615 0410 42D1     		bne	.L274
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 137


3119:.\lib_Fat/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 4616              		.loc 1 3119 0
 4617 0412 3B6D     		ldr	r3, [r7, #80]
 4618 0414 0133     		add	r3, r3, #1
 4619 0416 BA6B     		ldr	r2, [r7, #56]
 4620 0418 101C     		mov	r0, r2
 4621 041a 191C     		mov	r1, r3
 4622 041c FFF7FEFF 		bl	move_window
 4623 0420 031E     		sub	r3, r0, #0
 4624 0422 39D1     		bne	.L274
3120:.\lib_Fat/ff.c **** 		{
3121:.\lib_Fat/ff.c **** 			fs->fsi_flag = 0;
 4625              		.loc 1 3121 0
 4626 0424 BB6B     		ldr	r3, [r7, #56]
 4627 0426 0022     		mov	r2, #0
 4628 0428 1A71     		strb	r2, [r3, #4]
3122:.\lib_Fat/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 4629              		.loc 1 3122 0
 4630 042a BB6B     		ldr	r3, [r7, #56]
 4631 042c 254A     		ldr	r2, .L278+4
 4632 042e 9446     		mov	ip, r2
 4633 0430 6344     		add	r3, r3, ip
 4634 0432 181C     		mov	r0, r3
 4635 0434 FFF7FEFF 		bl	ld_word
 4636 0438 031C     		mov	r3, r0
 4637 043a 1A1E     		sub	r2, r3, #0
 4638 043c 224B     		ldr	r3, .L278+8
 4639 043e 9A42     		cmp	r2, r3
 4640 0440 2AD1     		bne	.L274
3123:.\lib_Fat/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 4641              		.loc 1 3123 0
 4642 0442 BB6B     		ldr	r3, [r7, #56]
 4643 0444 3033     		add	r3, r3, #48
 4644 0446 181C     		mov	r0, r3
 4645 0448 FFF7FEFF 		bl	ld_dword
 4646 044c 021E     		sub	r2, r0, #0
 4647 044e 1F4B     		ldr	r3, .L278+12
 4648 0450 9A42     		cmp	r2, r3
 4649 0452 21D1     		bne	.L274
3124:.\lib_Fat/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 4650              		.loc 1 3124 0
 4651 0454 BB6B     		ldr	r3, [r7, #56]
 4652 0456 8522     		mov	r2, #133
 4653 0458 9200     		lsl	r2, r2, #2
 4654 045a 9446     		mov	ip, r2
 4655 045c 6344     		add	r3, r3, ip
 4656 045e 181C     		mov	r0, r3
 4657 0460 FFF7FEFF 		bl	ld_dword
 4658 0464 021E     		sub	r2, r0, #0
 4659 0466 1A4B     		ldr	r3, .L278+16
 4660 0468 9A42     		cmp	r2, r3
 4661 046a 15D1     		bne	.L274
3125:.\lib_Fat/ff.c **** 			{
3126:.\lib_Fat/ff.c **** #if (_FS_NOFSINFO & 1) == 0
3127:.\lib_Fat/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 4662              		.loc 1 3127 0
 4663 046c BB6B     		ldr	r3, [r7, #56]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 138


 4664 046e 8622     		mov	r2, #134
 4665 0470 9200     		lsl	r2, r2, #2
 4666 0472 9446     		mov	ip, r2
 4667 0474 6344     		add	r3, r3, ip
 4668 0476 181C     		mov	r0, r3
 4669 0478 FFF7FEFF 		bl	ld_dword
 4670 047c 021C     		mov	r2, r0
 4671 047e BB6B     		ldr	r3, [r7, #56]
 4672 0480 1A61     		str	r2, [r3, #16]
3128:.\lib_Fat/ff.c **** #endif
3129:.\lib_Fat/ff.c **** #if (_FS_NOFSINFO & 2) == 0
3130:.\lib_Fat/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 4673              		.loc 1 3130 0
 4674 0482 BB6B     		ldr	r3, [r7, #56]
 4675 0484 8722     		mov	r2, #135
 4676 0486 9200     		lsl	r2, r2, #2
 4677 0488 9446     		mov	ip, r2
 4678 048a 6344     		add	r3, r3, ip
 4679 048c 181C     		mov	r0, r3
 4680 048e FFF7FEFF 		bl	ld_dword
 4681 0492 021C     		mov	r2, r0
 4682 0494 BB6B     		ldr	r3, [r7, #56]
 4683 0496 DA60     		str	r2, [r3, #12]
 4684              	.L274:
3131:.\lib_Fat/ff.c **** #endif
3132:.\lib_Fat/ff.c **** 			}
3133:.\lib_Fat/ff.c **** 		}
3134:.\lib_Fat/ff.c **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3135:.\lib_Fat/ff.c **** #endif	/* !_FS_READONLY */
3136:.\lib_Fat/ff.c **** 	}
3137:.\lib_Fat/ff.c **** 
3138:.\lib_Fat/ff.c **** 	fs->fs_type = fmt;	/* FAT sub-type */
 4685              		.loc 1 3138 0
 4686 0498 BB6B     		ldr	r3, [r7, #56]
 4687 049a 5722     		mov	r2, #87
 4688 049c BA18     		add	r2, r7, r2
 4689 049e 1278     		ldrb	r2, [r2]
 4690 04a0 1A70     		strb	r2, [r3]
3139:.\lib_Fat/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 4691              		.loc 1 3139 0
 4692 04a2 0C4B     		ldr	r3, .L278+20
 4693 04a4 1B88     		ldrh	r3, [r3]
 4694 04a6 0133     		add	r3, r3, #1
 4695 04a8 9AB2     		uxth	r2, r3
 4696 04aa 0A4B     		ldr	r3, .L278+20
 4697 04ac 1A80     		strh	r2, [r3]
 4698 04ae 094B     		ldr	r3, .L278+20
 4699 04b0 1A88     		ldrh	r2, [r3]
 4700 04b2 BB6B     		ldr	r3, [r7, #56]
 4701 04b4 DA80     		strh	r2, [r3, #6]
3140:.\lib_Fat/ff.c **** #if _USE_LFN == 1
3141:.\lib_Fat/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3142:.\lib_Fat/ff.c **** #if _FS_EXFAT
3143:.\lib_Fat/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block working buuffer */
3144:.\lib_Fat/ff.c **** #endif
3145:.\lib_Fat/ff.c **** #endif
3146:.\lib_Fat/ff.c **** #if _FS_RPATH != 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 139


3147:.\lib_Fat/ff.c **** 	fs->cdir = 0;		/* Initialize current directory */
3148:.\lib_Fat/ff.c **** #endif
3149:.\lib_Fat/ff.c **** #if _FS_LOCK != 0		/* Clear file lock semaphores */
3150:.\lib_Fat/ff.c **** 	clear_lock(fs);
3151:.\lib_Fat/ff.c **** #endif
3152:.\lib_Fat/ff.c **** 	return FR_OK;
 4702              		.loc 1 3152 0
 4703 04b6 0023     		mov	r3, #0
 4704              	.L275:
3153:.\lib_Fat/ff.c **** }
 4705              		.loc 1 3153 0 discriminator 1
 4706 04b8 181C     		mov	r0, r3
 4707 04ba BD46     		mov	sp, r7
 4708 04bc 17B0     		add	sp, sp, #92
 4709              		@ sp needed
 4710 04be 90BD     		pop	{r4, r7, pc}
 4711              	.L279:
 4712              		.align	2
 4713              	.L278:
 4714 04c0 FF010000 		.word	511
 4715 04c4 2E020000 		.word	558
 4716 04c8 55AA0000 		.word	43605
 4717 04cc 52526141 		.word	1096897106
 4718 04d0 72724161 		.word	1631679090
 4719 04d4 04000000 		.word	Fsid
 4720              		.cfi_endproc
 4721              	.LFE30:
 4722              		.size	find_volume, .-find_volume
 4723              		.section	.text.validate,"ax",%progbits
 4724              		.align	2
 4725              		.code	16
 4726              		.thumb_func
 4727              		.type	validate, %function
 4728              	validate:
 4729              	.LFB31:
3154:.\lib_Fat/ff.c **** 
3155:.\lib_Fat/ff.c **** 
3156:.\lib_Fat/ff.c **** 
3157:.\lib_Fat/ff.c **** 
3158:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3159:.\lib_Fat/ff.c **** /* Check if the file/directory object is valid or not                    */
3160:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3161:.\lib_Fat/ff.c **** 
3162:.\lib_Fat/ff.c **** static
3163:.\lib_Fat/ff.c **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3164:.\lib_Fat/ff.c **** 	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
3165:.\lib_Fat/ff.c **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3166:.\lib_Fat/ff.c **** )
3167:.\lib_Fat/ff.c **** {
 4730              		.loc 1 3167 0
 4731              		.cfi_startproc
 4732 0000 80B5     		push	{r7, lr}
 4733              		.cfi_def_cfa_offset 8
 4734              		.cfi_offset 7, -8
 4735              		.cfi_offset 14, -4
 4736 0002 84B0     		sub	sp, sp, #16
 4737              		.cfi_def_cfa_offset 24
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 140


 4738 0004 00AF     		add	r7, sp, #0
 4739              		.cfi_def_cfa_register 7
 4740 0006 7860     		str	r0, [r7, #4]
 4741 0008 3960     		str	r1, [r7]
3168:.\lib_Fat/ff.c **** 	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
 4742              		.loc 1 3168 0
 4743 000a 7B68     		ldr	r3, [r7, #4]
 4744 000c BB60     		str	r3, [r7, #8]
3169:.\lib_Fat/ff.c **** 	FRESULT res;
3170:.\lib_Fat/ff.c **** 
3171:.\lib_Fat/ff.c **** 
3172:.\lib_Fat/ff.c **** 	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) 
 4745              		.loc 1 3172 0
 4746 000e 7B68     		ldr	r3, [r7, #4]
 4747 0010 002B     		cmp	r3, #0
 4748 0012 1AD0     		beq	.L281
 4749              		.loc 1 3172 0 is_stmt 0 discriminator 1
 4750 0014 BB68     		ldr	r3, [r7, #8]
 4751 0016 1B68     		ldr	r3, [r3]
 4752 0018 002B     		cmp	r3, #0
 4753 001a 16D0     		beq	.L281
 4754              		.loc 1 3172 0 discriminator 2
 4755 001c BB68     		ldr	r3, [r7, #8]
 4756 001e 1B68     		ldr	r3, [r3]
 4757 0020 1B78     		ldrb	r3, [r3]
 4758 0022 002B     		cmp	r3, #0
 4759 0024 11D0     		beq	.L281
 4760              		.loc 1 3172 0 discriminator 3
 4761 0026 BB68     		ldr	r3, [r7, #8]
 4762 0028 1B68     		ldr	r3, [r3]
 4763 002a DA88     		ldrh	r2, [r3, #6]
 4764 002c BB68     		ldr	r3, [r7, #8]
 4765 002e 9B88     		ldrh	r3, [r3, #4]
 4766 0030 9A42     		cmp	r2, r3
 4767 0032 0AD1     		bne	.L281
 4768              		.loc 1 3172 0 discriminator 4
 4769 0034 BB68     		ldr	r3, [r7, #8]
 4770 0036 1B68     		ldr	r3, [r3]
 4771 0038 5B78     		ldrb	r3, [r3, #1]
 4772 003a 181C     		mov	r0, r3
 4773 003c FFF7FEFF 		bl	disk_status
 4774 0040 031C     		mov	r3, r0
 4775 0042 1A1C     		mov	r2, r3
 4776 0044 0123     		mov	r3, #1
 4777 0046 1340     		and	r3, r2
 4778 0048 07D0     		beq	.L282
 4779              	.L281:
3173:.\lib_Fat/ff.c **** 		*fs = 0;				/* The object is invalid */
 4780              		.loc 1 3173 0 is_stmt 1
 4781 004a 3B68     		ldr	r3, [r7]
 4782 004c 0022     		mov	r2, #0
 4783 004e 1A60     		str	r2, [r3]
3174:.\lib_Fat/ff.c **** 		res = FR_INVALID_OBJECT;
 4784              		.loc 1 3174 0
 4785 0050 0F23     		mov	r3, #15
 4786 0052 FB18     		add	r3, r7, r3
 4787 0054 0922     		mov	r2, #9
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 141


 4788 0056 1A70     		strb	r2, [r3]
 4789 0058 07E0     		b	.L283
 4790              	.L282:
3175:.\lib_Fat/ff.c **** 	} else {
3176:.\lib_Fat/ff.c **** 		*fs = obj->fs;			/* Owner file sytem object */
 4791              		.loc 1 3176 0
 4792 005a BB68     		ldr	r3, [r7, #8]
 4793 005c 1A68     		ldr	r2, [r3]
 4794 005e 3B68     		ldr	r3, [r7]
 4795 0060 1A60     		str	r2, [r3]
3177:.\lib_Fat/ff.c **** 		ENTER_FF(obj->fs);		/* Lock file system */
3178:.\lib_Fat/ff.c **** 		res = FR_OK;
 4796              		.loc 1 3178 0
 4797 0062 0F23     		mov	r3, #15
 4798 0064 FB18     		add	r3, r7, r3
 4799 0066 0022     		mov	r2, #0
 4800 0068 1A70     		strb	r2, [r3]
 4801              	.L283:
3179:.\lib_Fat/ff.c **** 	}
3180:.\lib_Fat/ff.c **** 	return res;
 4802              		.loc 1 3180 0
 4803 006a 0F23     		mov	r3, #15
 4804 006c FB18     		add	r3, r7, r3
 4805 006e 1B78     		ldrb	r3, [r3]
3181:.\lib_Fat/ff.c **** }
 4806              		.loc 1 3181 0
 4807 0070 181C     		mov	r0, r3
 4808 0072 BD46     		mov	sp, r7
 4809 0074 04B0     		add	sp, sp, #16
 4810              		@ sp needed
 4811 0076 80BD     		pop	{r7, pc}
 4812              		.cfi_endproc
 4813              	.LFE31:
 4814              		.size	validate, .-validate
 4815              		.section	.text.f_mount,"ax",%progbits
 4816              		.align	2
 4817              		.global	f_mount
 4818              		.code	16
 4819              		.thumb_func
 4820              		.type	f_mount, %function
 4821              	f_mount:
 4822              	.LFB32:
3182:.\lib_Fat/ff.c **** 
3183:.\lib_Fat/ff.c **** 
3184:.\lib_Fat/ff.c **** 
3185:.\lib_Fat/ff.c **** 
3186:.\lib_Fat/ff.c **** /*---------------------------------------------------------------------------
3187:.\lib_Fat/ff.c **** 
3188:.\lib_Fat/ff.c ****    Public Functions (FatFs API)
3189:.\lib_Fat/ff.c **** 
3190:.\lib_Fat/ff.c **** ----------------------------------------------------------------------------*/
3191:.\lib_Fat/ff.c **** 
3192:.\lib_Fat/ff.c **** 
3193:.\lib_Fat/ff.c **** 
3194:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3195:.\lib_Fat/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3196:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 142


3197:.\lib_Fat/ff.c **** 
3198:.\lib_Fat/ff.c **** FRESULT f_mount (
3199:.\lib_Fat/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3200:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3201:.\lib_Fat/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3202:.\lib_Fat/ff.c **** )
3203:.\lib_Fat/ff.c **** {
 4823              		.loc 1 3203 0
 4824              		.cfi_startproc
 4825 0000 90B5     		push	{r4, r7, lr}
 4826              		.cfi_def_cfa_offset 12
 4827              		.cfi_offset 4, -12
 4828              		.cfi_offset 7, -8
 4829              		.cfi_offset 14, -4
 4830 0002 89B0     		sub	sp, sp, #36
 4831              		.cfi_def_cfa_offset 48
 4832 0004 00AF     		add	r7, sp, #0
 4833              		.cfi_def_cfa_register 7
 4834 0006 F860     		str	r0, [r7, #12]
 4835 0008 B960     		str	r1, [r7, #8]
 4836 000a FB1D     		add	r3, r7, #7
 4837 000c 1A70     		strb	r2, [r3]
3204:.\lib_Fat/ff.c **** 	FATFS *cfs;
3205:.\lib_Fat/ff.c **** 	int vol;
3206:.\lib_Fat/ff.c **** 	FRESULT res;
3207:.\lib_Fat/ff.c **** 	const TCHAR *rp = path;
 4838              		.loc 1 3207 0
 4839 000e BB68     		ldr	r3, [r7, #8]
 4840 0010 3B61     		str	r3, [r7, #16]
3208:.\lib_Fat/ff.c **** 
3209:.\lib_Fat/ff.c **** 
3210:.\lib_Fat/ff.c **** 	vol = get_ldnumber(&rp);
 4841              		.loc 1 3210 0
 4842 0012 1023     		mov	r3, #16
 4843 0014 FB18     		add	r3, r7, r3
 4844 0016 181C     		mov	r0, r3
 4845 0018 FFF7FEFF 		bl	get_ldnumber
 4846 001c 031C     		mov	r3, r0
 4847 001e FB61     		str	r3, [r7, #28]
3211:.\lib_Fat/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4848              		.loc 1 3211 0
 4849 0020 FB69     		ldr	r3, [r7, #28]
 4850 0022 002B     		cmp	r3, #0
 4851 0024 01DA     		bge	.L286
 4852              		.loc 1 3211 0 is_stmt 0 discriminator 1
 4853 0026 0B23     		mov	r3, #11
 4854 0028 2EE0     		b	.L292
 4855              	.L286:
3212:.\lib_Fat/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4856              		.loc 1 3212 0 is_stmt 1
 4857 002a 194B     		ldr	r3, .L293
 4858 002c FA69     		ldr	r2, [r7, #28]
 4859 002e 9200     		lsl	r2, r2, #2
 4860 0030 D358     		ldr	r3, [r2, r3]
 4861 0032 BB61     		str	r3, [r7, #24]
3213:.\lib_Fat/ff.c **** 
3214:.\lib_Fat/ff.c **** 	if (cfs) {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 143


 4862              		.loc 1 3214 0
 4863 0034 BB69     		ldr	r3, [r7, #24]
 4864 0036 002B     		cmp	r3, #0
 4865 0038 02D0     		beq	.L288
3215:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
3216:.\lib_Fat/ff.c **** 		clear_lock(cfs);
3217:.\lib_Fat/ff.c **** #endif
3218:.\lib_Fat/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3219:.\lib_Fat/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3220:.\lib_Fat/ff.c **** #endif
3221:.\lib_Fat/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 4866              		.loc 1 3221 0
 4867 003a BB69     		ldr	r3, [r7, #24]
 4868 003c 0022     		mov	r2, #0
 4869 003e 1A70     		strb	r2, [r3]
 4870              	.L288:
3222:.\lib_Fat/ff.c **** 	}
3223:.\lib_Fat/ff.c **** 
3224:.\lib_Fat/ff.c **** 	if (fs) {
 4871              		.loc 1 3224 0
 4872 0040 FB68     		ldr	r3, [r7, #12]
 4873 0042 002B     		cmp	r3, #0
 4874 0044 02D0     		beq	.L289
3225:.\lib_Fat/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 4875              		.loc 1 3225 0
 4876 0046 FB68     		ldr	r3, [r7, #12]
 4877 0048 0022     		mov	r2, #0
 4878 004a 1A70     		strb	r2, [r3]
 4879              	.L289:
3226:.\lib_Fat/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3227:.\lib_Fat/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3228:.\lib_Fat/ff.c **** #endif
3229:.\lib_Fat/ff.c **** 	}
3230:.\lib_Fat/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 4880              		.loc 1 3230 0
 4881 004c F968     		ldr	r1, [r7, #12]
 4882 004e 104B     		ldr	r3, .L293
 4883 0050 FA69     		ldr	r2, [r7, #28]
 4884 0052 9200     		lsl	r2, r2, #2
 4885 0054 D150     		str	r1, [r2, r3]
3231:.\lib_Fat/ff.c **** 
3232:.\lib_Fat/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 4886              		.loc 1 3232 0
 4887 0056 FB68     		ldr	r3, [r7, #12]
 4888 0058 002B     		cmp	r3, #0
 4889 005a 03D0     		beq	.L290
 4890              		.loc 1 3232 0 is_stmt 0 discriminator 2
 4891 005c FB1D     		add	r3, r7, #7
 4892 005e 1B78     		ldrb	r3, [r3]
 4893 0060 012B     		cmp	r3, #1
 4894 0062 01D0     		beq	.L291
 4895              	.L290:
 4896              		.loc 1 3232 0 discriminator 3
 4897 0064 0023     		mov	r3, #0
 4898 0066 0FE0     		b	.L292
 4899              	.L291:
3233:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 144


3234:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 4900              		.loc 1 3234 0 is_stmt 1
 4901 0068 1723     		mov	r3, #23
 4902 006a FC18     		add	r4, r7, r3
 4903 006c 0823     		mov	r3, #8
 4904 006e FA18     		add	r2, r7, r3
 4905 0070 0C23     		mov	r3, #12
 4906 0072 FB18     		add	r3, r7, r3
 4907 0074 101C     		mov	r0, r2
 4908 0076 191C     		mov	r1, r3
 4909 0078 0022     		mov	r2, #0
 4910 007a FFF7FEFF 		bl	find_volume
 4911 007e 031C     		mov	r3, r0
 4912 0080 2370     		strb	r3, [r4]
3235:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 4913              		.loc 1 3235 0
 4914 0082 1723     		mov	r3, #23
 4915 0084 FB18     		add	r3, r7, r3
 4916 0086 1B78     		ldrb	r3, [r3]
 4917              	.L292:
3236:.\lib_Fat/ff.c **** }
 4918              		.loc 1 3236 0 discriminator 1
 4919 0088 181C     		mov	r0, r3
 4920 008a BD46     		mov	sp, r7
 4921 008c 09B0     		add	sp, sp, #36
 4922              		@ sp needed
 4923 008e 90BD     		pop	{r4, r7, pc}
 4924              	.L294:
 4925              		.align	2
 4926              	.L293:
 4927 0090 00000000 		.word	FatFs
 4928              		.cfi_endproc
 4929              	.LFE32:
 4930              		.size	f_mount, .-f_mount
 4931              		.section	.text.f_open,"ax",%progbits
 4932              		.align	2
 4933              		.global	f_open
 4934              		.code	16
 4935              		.thumb_func
 4936              		.type	f_open, %function
 4937              	f_open:
 4938              	.LFB33:
3237:.\lib_Fat/ff.c **** 
3238:.\lib_Fat/ff.c **** 
3239:.\lib_Fat/ff.c **** 
3240:.\lib_Fat/ff.c **** 
3241:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3242:.\lib_Fat/ff.c **** /* Open or Create a File                                                 */
3243:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3244:.\lib_Fat/ff.c **** 
3245:.\lib_Fat/ff.c **** FRESULT f_open (
3246:.\lib_Fat/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3247:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3248:.\lib_Fat/ff.c **** 	BYTE mode,			/* Access mode and file open mode flags */
3249:.\lib_Fat/ff.c ****     DWORD *flag
3250:.\lib_Fat/ff.c **** )
3251:.\lib_Fat/ff.c **** {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 145


 4939              		.loc 1 3251 0
 4940              		.cfi_startproc
 4941 0000 90B5     		push	{r4, r7, lr}
 4942              		.cfi_def_cfa_offset 12
 4943              		.cfi_offset 4, -12
 4944              		.cfi_offset 7, -8
 4945              		.cfi_offset 14, -4
 4946 0002 99B0     		sub	sp, sp, #100
 4947              		.cfi_def_cfa_offset 112
 4948 0004 00AF     		add	r7, sp, #0
 4949              		.cfi_def_cfa_register 7
 4950 0006 F860     		str	r0, [r7, #12]
 4951 0008 B960     		str	r1, [r7, #8]
 4952 000a 3B60     		str	r3, [r7]
 4953 000c FB1D     		add	r3, r7, #7
 4954 000e 1A70     		strb	r2, [r3]
3252:.\lib_Fat/ff.c **** 	FRESULT res;
3253:.\lib_Fat/ff.c **** 	DIR dj;
3254:.\lib_Fat/ff.c **** 	FATFS *fs;
3255:.\lib_Fat/ff.c **** #if !_FS_READONLY
3256:.\lib_Fat/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3257:.\lib_Fat/ff.c **** 	FSIZE_t ofs;
3258:.\lib_Fat/ff.c **** #endif
3259:.\lib_Fat/ff.c **** 	DEF_NAMBUF
3260:.\lib_Fat/ff.c **** 
3261:.\lib_Fat/ff.c **** 
3262:.\lib_Fat/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 4955              		.loc 1 3262 0
 4956 0010 FB68     		ldr	r3, [r7, #12]
 4957 0012 002B     		cmp	r3, #0
 4958 0014 01D1     		bne	.L296
 4959              		.loc 1 3262 0 is_stmt 0 discriminator 1
 4960 0016 0923     		mov	r3, #9
 4961 0018 CDE1     		b	.L317
 4962              	.L296:
3263:.\lib_Fat/ff.c **** 
3264:.\lib_Fat/ff.c **** 	/* Get logical drive number */
3265:.\lib_Fat/ff.c **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
 4963              		.loc 1 3265 0 is_stmt 1
 4964 001a FB1D     		add	r3, r7, #7
 4965 001c FA1D     		add	r2, r7, #7
 4966 001e 1278     		ldrb	r2, [r2]
 4967 0020 3F21     		mov	r1, #63
 4968 0022 0A40     		and	r2, r1
 4969 0024 1A70     		strb	r2, [r3]
3266:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, mode);
 4970              		.loc 1 3266 0
 4971 0026 5F23     		mov	r3, #95
 4972 0028 FC18     		add	r4, r7, r3
 4973 002a 0823     		mov	r3, #8
 4974 002c F918     		add	r1, r7, r3
 4975 002e 1423     		mov	r3, #20
 4976 0030 FA18     		add	r2, r7, r3
 4977 0032 FB1D     		add	r3, r7, #7
 4978 0034 1B78     		ldrb	r3, [r3]
 4979 0036 081C     		mov	r0, r1
 4980 0038 111C     		mov	r1, r2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 146


 4981 003a 1A1C     		mov	r2, r3
 4982 003c FFF7FEFF 		bl	find_volume
 4983 0040 031C     		mov	r3, r0
 4984 0042 2370     		strb	r3, [r4]
3267:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 4985              		.loc 1 3267 0
 4986 0044 5F23     		mov	r3, #95
 4987 0046 FB18     		add	r3, r7, r3
 4988 0048 1B78     		ldrb	r3, [r3]
 4989 004a 002B     		cmp	r3, #0
 4990 004c 00D0     		beq	.LCB4480
 4991 004e A7E1     		b	.L298	@long jump
 4992              	.LCB4480:
3268:.\lib_Fat/ff.c **** 		dj.obj.fs = fs;
 4993              		.loc 1 3268 0
 4994 0050 7A69     		ldr	r2, [r7, #20]
 4995 0052 1823     		mov	r3, #24
 4996 0054 FB18     		add	r3, r7, r3
 4997 0056 1A60     		str	r2, [r3]
3269:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
3270:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4998              		.loc 1 3270 0
 4999 0058 BB68     		ldr	r3, [r7, #8]
 5000 005a 5F22     		mov	r2, #95
 5001 005c BC18     		add	r4, r7, r2
 5002 005e 1822     		mov	r2, #24
 5003 0060 BA18     		add	r2, r7, r2
 5004 0062 101C     		mov	r0, r2
 5005 0064 191C     		mov	r1, r3
 5006 0066 FFF7FEFF 		bl	follow_path
 5007 006a 031C     		mov	r3, r0
 5008 006c 2370     		strb	r3, [r4]
3271:.\lib_Fat/ff.c **** #if !_FS_READONLY	/* R/W configuration */
3272:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
 5009              		.loc 1 3272 0
 5010 006e 5F23     		mov	r3, #95
 5011 0070 FB18     		add	r3, r7, r3
 5012 0072 1B78     		ldrb	r3, [r3]
 5013 0074 002B     		cmp	r3, #0
 5014 0076 0BD1     		bne	.L299
3273:.\lib_Fat/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 5015              		.loc 1 3273 0
 5016 0078 1823     		mov	r3, #24
 5017 007a FB18     		add	r3, r7, r3
 5018 007c 2B22     		mov	r2, #43
 5019 007e 9B5C     		ldrb	r3, [r3, r2]
 5020 0080 DBB2     		uxtb	r3, r3
 5021 0082 5BB2     		sxtb	r3, r3
 5022 0084 002B     		cmp	r3, #0
 5023 0086 03DA     		bge	.L299
3274:.\lib_Fat/ff.c **** 				res = FR_INVALID_NAME;
 5024              		.loc 1 3274 0
 5025 0088 5F23     		mov	r3, #95
 5026 008a FB18     		add	r3, r7, r3
 5027 008c 0622     		mov	r2, #6
 5028 008e 1A70     		strb	r2, [r3]
 5029              	.L299:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 147


3275:.\lib_Fat/ff.c **** 			}
3276:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
3277:.\lib_Fat/ff.c **** 			else {
3278:.\lib_Fat/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3279:.\lib_Fat/ff.c **** 			}
3280:.\lib_Fat/ff.c **** #endif
3281:.\lib_Fat/ff.c **** 		}
3282:.\lib_Fat/ff.c **** 		/* Create or Open a file */
3283:.\lib_Fat/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 5030              		.loc 1 3283 0
 5031 0090 FB1D     		add	r3, r7, #7
 5032 0092 1B78     		ldrb	r3, [r3]
 5033 0094 1C22     		mov	r2, #28
 5034 0096 1340     		and	r3, r2
 5035 0098 00D1     		bne	.LCB4519
 5036 009a 9DE0     		b	.L300	@long jump
 5037              	.LCB4519:
3284:.\lib_Fat/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 5038              		.loc 1 3284 0
 5039 009c 5F23     		mov	r3, #95
 5040 009e FB18     		add	r3, r7, r3
 5041 00a0 1B78     		ldrb	r3, [r3]
 5042 00a2 002B     		cmp	r3, #0
 5043 00a4 17D0     		beq	.L301
3285:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 5044              		.loc 1 3285 0
 5045 00a6 5F23     		mov	r3, #95
 5046 00a8 FB18     		add	r3, r7, r3
 5047 00aa 1B78     		ldrb	r3, [r3]
 5048 00ac 042B     		cmp	r3, #4
 5049 00ae 08D1     		bne	.L302
3286:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
3287:.\lib_Fat/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3288:.\lib_Fat/ff.c **** #else
3289:.\lib_Fat/ff.c **** 					res = dir_register(&dj);
 5050              		.loc 1 3289 0
 5051 00b0 5F23     		mov	r3, #95
 5052 00b2 FC18     		add	r4, r7, r3
 5053 00b4 1823     		mov	r3, #24
 5054 00b6 FB18     		add	r3, r7, r3
 5055 00b8 181C     		mov	r0, r3
 5056 00ba FFF7FEFF 		bl	dir_register
 5057 00be 031C     		mov	r3, r0
 5058 00c0 2370     		strb	r3, [r4]
 5059              	.L302:
3290:.\lib_Fat/ff.c ****                     *flag = 1;
 5060              		.loc 1 3290 0
 5061 00c2 3B68     		ldr	r3, [r7]
 5062 00c4 0122     		mov	r2, #1
 5063 00c6 1A60     		str	r2, [r3]
3291:.\lib_Fat/ff.c **** #endif
3292:.\lib_Fat/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 5064              		.loc 1 3292 0
 5065 00c8 FB1D     		add	r3, r7, #7
 5066 00ca FA1D     		add	r2, r7, #7
 5067 00cc 1278     		ldrb	r2, [r2]
 5068 00ce 0821     		mov	r1, #8
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 148


 5069 00d0 0A43     		orr	r2, r1
 5070 00d2 1A70     		strb	r2, [r3]
 5071 00d4 14E0     		b	.L303
 5072              	.L301:
3293:.\lib_Fat/ff.c **** 			}
3294:.\lib_Fat/ff.c **** 			else {								/* Any object is already existing */
3295:.\lib_Fat/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 5073              		.loc 1 3295 0
 5074 00d6 1823     		mov	r3, #24
 5075 00d8 FB18     		add	r3, r7, r3
 5076 00da 9B79     		ldrb	r3, [r3, #6]
 5077 00dc 1A1C     		mov	r2, r3
 5078 00de 1123     		mov	r3, #17
 5079 00e0 1340     		and	r3, r2
 5080 00e2 04D0     		beq	.L304
3296:.\lib_Fat/ff.c **** 					res = FR_DENIED;
 5081              		.loc 1 3296 0
 5082 00e4 5F23     		mov	r3, #95
 5083 00e6 FB18     		add	r3, r7, r3
 5084 00e8 0722     		mov	r2, #7
 5085 00ea 1A70     		strb	r2, [r3]
 5086 00ec 08E0     		b	.L303
 5087              	.L304:
3297:.\lib_Fat/ff.c **** 				} else {
3298:.\lib_Fat/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 5088              		.loc 1 3298 0
 5089 00ee FB1D     		add	r3, r7, #7
 5090 00f0 1B78     		ldrb	r3, [r3]
 5091 00f2 0422     		mov	r2, #4
 5092 00f4 1340     		and	r3, r2
 5093 00f6 03D0     		beq	.L303
 5094              		.loc 1 3298 0 is_stmt 0 discriminator 1
 5095 00f8 5F23     		mov	r3, #95
 5096 00fa FB18     		add	r3, r7, r3
 5097 00fc 0822     		mov	r2, #8
 5098 00fe 1A70     		strb	r2, [r3]
 5099              	.L303:
3299:.\lib_Fat/ff.c **** 				}
3300:.\lib_Fat/ff.c **** 			}
3301:.\lib_Fat/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 5100              		.loc 1 3301 0 is_stmt 1
 5101 0100 5F23     		mov	r3, #95
 5102 0102 FB18     		add	r3, r7, r3
 5103 0104 1B78     		ldrb	r3, [r3]
 5104 0106 002B     		cmp	r3, #0
 5105 0108 00D0     		beq	.LCB4585
 5106 010a 86E0     		b	.L306	@long jump
 5107              	.LCB4585:
 5108              		.loc 1 3301 0 is_stmt 0 discriminator 1
 5109 010c FB1D     		add	r3, r7, #7
 5110 010e 1B78     		ldrb	r3, [r3]
 5111 0110 0822     		mov	r2, #8
 5112 0112 1340     		and	r3, r2
 5113 0114 00D1     		bne	.LCB4591
 5114 0116 80E0     		b	.L306	@long jump
 5115              	.LCB4591:
3302:.\lib_Fat/ff.c **** 				dw = GET_FATTIME();
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 149


 5116              		.loc 1 3302 0 is_stmt 1
 5117 0118 0023     		mov	r3, #0
 5118 011a 3B65     		str	r3, [r7, #80]
3303:.\lib_Fat/ff.c **** #if _FS_EXFAT
3304:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3305:.\lib_Fat/ff.c **** 					/* Get current allocation info */
3306:.\lib_Fat/ff.c **** 					fp->obj.fs = fs;
3307:.\lib_Fat/ff.c **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3308:.\lib_Fat/ff.c **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3309:.\lib_Fat/ff.c **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3310:.\lib_Fat/ff.c **** 					/* Initialize directory entry block */
3311:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3312:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3313:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3314:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3315:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3316:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3317:.\lib_Fat/ff.c **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3318:.\lib_Fat/ff.c **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3319:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3320:.\lib_Fat/ff.c **** 					res = store_xdir(&dj);
3321:.\lib_Fat/ff.c **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3322:.\lib_Fat/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3323:.\lib_Fat/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3324:.\lib_Fat/ff.c **** 					}
3325:.\lib_Fat/ff.c **** 				} else
3326:.\lib_Fat/ff.c **** #endif
3327:.\lib_Fat/ff.c **** 				{
3328:.\lib_Fat/ff.c **** 					/* Clean directory info */
3329:.\lib_Fat/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 5119              		.loc 1 3329 0
 5120 011c 1823     		mov	r3, #24
 5121 011e FB18     		add	r3, r7, r3
 5122 0120 DB69     		ldr	r3, [r3, #28]
 5123 0122 0E33     		add	r3, r3, #14
 5124 0124 1A1C     		mov	r2, r3
 5125 0126 3B6D     		ldr	r3, [r7, #80]
 5126 0128 101C     		mov	r0, r2
 5127 012a 191C     		mov	r1, r3
 5128 012c FFF7FEFF 		bl	st_dword
3330:.\lib_Fat/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 5129              		.loc 1 3330 0
 5130 0130 1823     		mov	r3, #24
 5131 0132 FB18     		add	r3, r7, r3
 5132 0134 DB69     		ldr	r3, [r3, #28]
 5133 0136 1633     		add	r3, r3, #22
 5134 0138 1A1C     		mov	r2, r3
 5135 013a 3B6D     		ldr	r3, [r7, #80]
 5136 013c 101C     		mov	r0, r2
 5137 013e 191C     		mov	r1, r3
 5138 0140 FFF7FEFF 		bl	st_dword
3331:.\lib_Fat/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 5139              		.loc 1 3331 0
 5140 0144 1823     		mov	r3, #24
 5141 0146 FB18     		add	r3, r7, r3
 5142 0148 DB69     		ldr	r3, [r3, #28]
 5143 014a 0B33     		add	r3, r3, #11
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 150


 5144 014c 2022     		mov	r2, #32
 5145 014e 1A70     		strb	r2, [r3]
3332:.\lib_Fat/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 5146              		.loc 1 3332 0
 5147 0150 7A69     		ldr	r2, [r7, #20]
 5148 0152 1823     		mov	r3, #24
 5149 0154 FB18     		add	r3, r7, r3
 5150 0156 DB69     		ldr	r3, [r3, #28]
 5151 0158 101C     		mov	r0, r2
 5152 015a 191C     		mov	r1, r3
 5153 015c FFF7FEFF 		bl	ld_clust
 5154 0160 031C     		mov	r3, r0
 5155 0162 FB64     		str	r3, [r7, #76]
3333:.\lib_Fat/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 5156              		.loc 1 3333 0
 5157 0164 7A69     		ldr	r2, [r7, #20]
 5158 0166 1823     		mov	r3, #24
 5159 0168 FB18     		add	r3, r7, r3
 5160 016a DB69     		ldr	r3, [r3, #28]
 5161 016c 101C     		mov	r0, r2
 5162 016e 191C     		mov	r1, r3
 5163 0170 0022     		mov	r2, #0
 5164 0172 FFF7FEFF 		bl	st_clust
3334:.\lib_Fat/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 5165              		.loc 1 3334 0
 5166 0176 1823     		mov	r3, #24
 5167 0178 FB18     		add	r3, r7, r3
 5168 017a DB69     		ldr	r3, [r3, #28]
 5169 017c 1C33     		add	r3, r3, #28
 5170 017e 181C     		mov	r0, r3
 5171 0180 0021     		mov	r1, #0
 5172 0182 FFF7FEFF 		bl	st_dword
3335:.\lib_Fat/ff.c **** 					fs->wflag = 1;
 5173              		.loc 1 3335 0
 5174 0186 7B69     		ldr	r3, [r7, #20]
 5175 0188 0122     		mov	r2, #1
 5176 018a DA70     		strb	r2, [r3, #3]
3336:.\lib_Fat/ff.c **** 
3337:.\lib_Fat/ff.c **** 					if (cl) {							/* Remove the cluster chain if exist */
 5177              		.loc 1 3337 0
 5178 018c FB6C     		ldr	r3, [r7, #76]
 5179 018e 002B     		cmp	r3, #0
 5180 0190 43D0     		beq	.L306
3338:.\lib_Fat/ff.c **** 						dw = fs->winsect;
 5181              		.loc 1 3338 0
 5182 0192 7B69     		ldr	r3, [r7, #20]
 5183 0194 DB6A     		ldr	r3, [r3, #44]
 5184 0196 3B65     		str	r3, [r7, #80]
3339:.\lib_Fat/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 5185              		.loc 1 3339 0
 5186 0198 5F23     		mov	r3, #95
 5187 019a FC18     		add	r4, r7, r3
 5188 019c 1823     		mov	r3, #24
 5189 019e FA18     		add	r2, r7, r3
 5190 01a0 FB6C     		ldr	r3, [r7, #76]
 5191 01a2 101C     		mov	r0, r2
 5192 01a4 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 151


 5193 01a6 0022     		mov	r2, #0
 5194 01a8 FFF7FEFF 		bl	remove_chain
 5195 01ac 031C     		mov	r3, r0
 5196 01ae 2370     		strb	r3, [r4]
3340:.\lib_Fat/ff.c **** 						if (res == FR_OK) {
 5197              		.loc 1 3340 0
 5198 01b0 5F23     		mov	r3, #95
 5199 01b2 FB18     		add	r3, r7, r3
 5200 01b4 1B78     		ldrb	r3, [r3]
 5201 01b6 002B     		cmp	r3, #0
 5202 01b8 2FD1     		bne	.L306
3341:.\lib_Fat/ff.c **** 							res = move_window(fs, dw);
 5203              		.loc 1 3341 0
 5204 01ba 7A69     		ldr	r2, [r7, #20]
 5205 01bc 5F23     		mov	r3, #95
 5206 01be FC18     		add	r4, r7, r3
 5207 01c0 3B6D     		ldr	r3, [r7, #80]
 5208 01c2 101C     		mov	r0, r2
 5209 01c4 191C     		mov	r1, r3
 5210 01c6 FFF7FEFF 		bl	move_window
 5211 01ca 031C     		mov	r3, r0
 5212 01cc 2370     		strb	r3, [r4]
3342:.\lib_Fat/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 5213              		.loc 1 3342 0
 5214 01ce 7B69     		ldr	r3, [r7, #20]
 5215 01d0 FA6C     		ldr	r2, [r7, #76]
 5216 01d2 013A     		sub	r2, r2, #1
 5217 01d4 DA60     		str	r2, [r3, #12]
 5218 01d6 20E0     		b	.L306
 5219              	.L300:
3343:.\lib_Fat/ff.c **** 						}
3344:.\lib_Fat/ff.c **** 					}
3345:.\lib_Fat/ff.c **** 				}
3346:.\lib_Fat/ff.c **** 			}
3347:.\lib_Fat/ff.c **** 		}
3348:.\lib_Fat/ff.c **** 		else {	/* Open an existing file */
3349:.\lib_Fat/ff.c **** 			if (res == FR_OK) {					/* Following succeeded */
 5220              		.loc 1 3349 0
 5221 01d8 5F23     		mov	r3, #95
 5222 01da FB18     		add	r3, r7, r3
 5223 01dc 1B78     		ldrb	r3, [r3]
 5224 01de 002B     		cmp	r3, #0
 5225 01e0 1BD1     		bne	.L306
3350:.\lib_Fat/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 5226              		.loc 1 3350 0
 5227 01e2 1823     		mov	r3, #24
 5228 01e4 FB18     		add	r3, r7, r3
 5229 01e6 9B79     		ldrb	r3, [r3, #6]
 5230 01e8 1A1C     		mov	r2, r3
 5231 01ea 1023     		mov	r3, #16
 5232 01ec 1340     		and	r3, r2
 5233 01ee 04D0     		beq	.L307
3351:.\lib_Fat/ff.c **** 					res = FR_NO_FILE;
 5234              		.loc 1 3351 0
 5235 01f0 5F23     		mov	r3, #95
 5236 01f2 FB18     		add	r3, r7, r3
 5237 01f4 0422     		mov	r2, #4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 152


 5238 01f6 1A70     		strb	r2, [r3]
 5239 01f8 0FE0     		b	.L306
 5240              	.L307:
3352:.\lib_Fat/ff.c **** 				} else {
3353:.\lib_Fat/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 5241              		.loc 1 3353 0
 5242 01fa FB1D     		add	r3, r7, #7
 5243 01fc 1B78     		ldrb	r3, [r3]
 5244 01fe 0222     		mov	r2, #2
 5245 0200 1340     		and	r3, r2
 5246 0202 0AD0     		beq	.L306
 5247              		.loc 1 3353 0 is_stmt 0 discriminator 1
 5248 0204 1823     		mov	r3, #24
 5249 0206 FB18     		add	r3, r7, r3
 5250 0208 9B79     		ldrb	r3, [r3, #6]
 5251 020a 1A1C     		mov	r2, r3
 5252 020c 0123     		mov	r3, #1
 5253 020e 1340     		and	r3, r2
 5254 0210 03D0     		beq	.L306
3354:.\lib_Fat/ff.c **** 						res = FR_DENIED;
 5255              		.loc 1 3354 0 is_stmt 1
 5256 0212 5F23     		mov	r3, #95
 5257 0214 FB18     		add	r3, r7, r3
 5258 0216 0722     		mov	r2, #7
 5259 0218 1A70     		strb	r2, [r3]
 5260              	.L306:
3355:.\lib_Fat/ff.c **** 					}
3356:.\lib_Fat/ff.c **** 				}
3357:.\lib_Fat/ff.c **** 			}
3358:.\lib_Fat/ff.c **** 		}
3359:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
 5261              		.loc 1 3359 0
 5262 021a 5F23     		mov	r3, #95
 5263 021c FB18     		add	r3, r7, r3
 5264 021e 1B78     		ldrb	r3, [r3]
 5265 0220 002B     		cmp	r3, #0
 5266 0222 13D1     		bne	.L308
3360:.\lib_Fat/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 5267              		.loc 1 3360 0
 5268 0224 FB1D     		add	r3, r7, #7
 5269 0226 1B78     		ldrb	r3, [r3]
 5270 0228 0822     		mov	r2, #8
 5271 022a 1340     		and	r3, r2
 5272 022c 05D0     		beq	.L309
3361:.\lib_Fat/ff.c **** 				mode |= FA_MODIFIED;
 5273              		.loc 1 3361 0
 5274 022e FB1D     		add	r3, r7, #7
 5275 0230 FA1D     		add	r2, r7, #7
 5276 0232 1278     		ldrb	r2, [r2]
 5277 0234 4021     		mov	r1, #64
 5278 0236 0A43     		orr	r2, r1
 5279 0238 1A70     		strb	r2, [r3]
 5280              	.L309:
3362:.\lib_Fat/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 5281              		.loc 1 3362 0
 5282 023a 7B69     		ldr	r3, [r7, #20]
 5283 023c DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 153


 5284 023e FB68     		ldr	r3, [r7, #12]
 5285 0240 1A62     		str	r2, [r3, #32]
3363:.\lib_Fat/ff.c **** 			fp->dir_ptr = dj.dir;
 5286              		.loc 1 3363 0
 5287 0242 1823     		mov	r3, #24
 5288 0244 FB18     		add	r3, r7, r3
 5289 0246 DA69     		ldr	r2, [r3, #28]
 5290 0248 FB68     		ldr	r3, [r7, #12]
 5291 024a 5A62     		str	r2, [r3, #36]
 5292              	.L308:
3364:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
3365:.\lib_Fat/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3366:.\lib_Fat/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
3367:.\lib_Fat/ff.c **** #endif
3368:.\lib_Fat/ff.c **** 		}
3369:.\lib_Fat/ff.c **** #else		/* R/O configuration */
3370:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
3371:.\lib_Fat/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3372:.\lib_Fat/ff.c **** 				res = FR_INVALID_NAME;
3373:.\lib_Fat/ff.c **** 			} else {
3374:.\lib_Fat/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3375:.\lib_Fat/ff.c **** 					res = FR_NO_FILE;
3376:.\lib_Fat/ff.c **** 				}
3377:.\lib_Fat/ff.c **** 			}
3378:.\lib_Fat/ff.c **** 		}
3379:.\lib_Fat/ff.c **** #endif
3380:.\lib_Fat/ff.c **** 
3381:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
 5293              		.loc 1 3381 0
 5294 024c 5F23     		mov	r3, #95
 5295 024e FB18     		add	r3, r7, r3
 5296 0250 1B78     		ldrb	r3, [r3]
 5297 0252 002B     		cmp	r3, #0
 5298 0254 00D0     		beq	.LCB4759
 5299 0256 A3E0     		b	.L298	@long jump
 5300              	.LCB4759:
3382:.\lib_Fat/ff.c **** #if _FS_EXFAT
3383:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3384:.\lib_Fat/ff.c **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Get allocation info */
3385:.\lib_Fat/ff.c **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3386:.\lib_Fat/ff.c **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3387:.\lib_Fat/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;
3388:.\lib_Fat/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3389:.\lib_Fat/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3390:.\lib_Fat/ff.c **** 			} else
3391:.\lib_Fat/ff.c **** #endif
3392:.\lib_Fat/ff.c **** 			{
3393:.\lib_Fat/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 5301              		.loc 1 3393 0
 5302 0258 7A69     		ldr	r2, [r7, #20]
 5303 025a 1823     		mov	r3, #24
 5304 025c FB18     		add	r3, r7, r3
 5305 025e DB69     		ldr	r3, [r3, #28]
 5306 0260 101C     		mov	r0, r2
 5307 0262 191C     		mov	r1, r3
 5308 0264 FFF7FEFF 		bl	ld_clust
 5309 0268 021C     		mov	r2, r0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 154


 5310 026a FB68     		ldr	r3, [r7, #12]
 5311 026c 9A60     		str	r2, [r3, #8]
3394:.\lib_Fat/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 5312              		.loc 1 3394 0
 5313 026e 1823     		mov	r3, #24
 5314 0270 FB18     		add	r3, r7, r3
 5315 0272 DB69     		ldr	r3, [r3, #28]
 5316 0274 1C33     		add	r3, r3, #28
 5317 0276 181C     		mov	r0, r3
 5318 0278 FFF7FEFF 		bl	ld_dword
 5319 027c 021C     		mov	r2, r0
 5320 027e FB68     		ldr	r3, [r7, #12]
 5321 0280 DA60     		str	r2, [r3, #12]
3395:.\lib_Fat/ff.c **** 			}
3396:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
3397:.\lib_Fat/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3398:.\lib_Fat/ff.c **** #endif
3399:.\lib_Fat/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
 5322              		.loc 1 3399 0
 5323 0282 7A69     		ldr	r2, [r7, #20]
 5324 0284 FB68     		ldr	r3, [r7, #12]
 5325 0286 1A60     		str	r2, [r3]
3400:.\lib_Fat/ff.c **** 			fp->obj.id = fs->id;
 5326              		.loc 1 3400 0
 5327 0288 7B69     		ldr	r3, [r7, #20]
 5328 028a DA88     		ldrh	r2, [r3, #6]
 5329 028c FB68     		ldr	r3, [r7, #12]
 5330 028e 9A80     		strh	r2, [r3, #4]
3401:.\lib_Fat/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 5331              		.loc 1 3401 0
 5332 0290 FB68     		ldr	r3, [r7, #12]
 5333 0292 FA1D     		add	r2, r7, #7
 5334 0294 1278     		ldrb	r2, [r2]
 5335 0296 1A74     		strb	r2, [r3, #16]
3402:.\lib_Fat/ff.c **** 			fp->err = 0;			/* Clear error flag */
 5336              		.loc 1 3402 0
 5337 0298 FB68     		ldr	r3, [r7, #12]
 5338 029a 0022     		mov	r2, #0
 5339 029c 5A74     		strb	r2, [r3, #17]
3403:.\lib_Fat/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 5340              		.loc 1 3403 0
 5341 029e FB68     		ldr	r3, [r7, #12]
 5342 02a0 0022     		mov	r2, #0
 5343 02a2 DA61     		str	r2, [r3, #28]
3404:.\lib_Fat/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 5344              		.loc 1 3404 0
 5345 02a4 FB68     		ldr	r3, [r7, #12]
 5346 02a6 0022     		mov	r2, #0
 5347 02a8 5A61     		str	r2, [r3, #20]
3405:.\lib_Fat/ff.c **** #if !_FS_READONLY
3406:.\lib_Fat/ff.c **** #if !_FS_TINY
3407:.\lib_Fat/ff.c **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 5348              		.loc 1 3407 0
 5349 02aa FB68     		ldr	r3, [r7, #12]
 5350 02ac 2833     		add	r3, r3, #40
 5351 02ae 1A1C     		mov	r2, r3
 5352 02b0 8023     		mov	r3, #128
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 155


 5353 02b2 9B00     		lsl	r3, r3, #2
 5354 02b4 101C     		mov	r0, r2
 5355 02b6 0021     		mov	r1, #0
 5356 02b8 1A1C     		mov	r2, r3
 5357 02ba FFF7FEFF 		bl	mem_set
3408:.\lib_Fat/ff.c **** #endif
3409:.\lib_Fat/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 5358              		.loc 1 3409 0
 5359 02be FB1D     		add	r3, r7, #7
 5360 02c0 1B78     		ldrb	r3, [r3]
 5361 02c2 2022     		mov	r2, #32
 5362 02c4 1340     		and	r3, r2
 5363 02c6 00D1     		bne	.LCB4813
 5364 02c8 6AE0     		b	.L298	@long jump
 5365              	.LCB4813:
 5366              		.loc 1 3409 0 is_stmt 0 discriminator 1
 5367 02ca FB68     		ldr	r3, [r7, #12]
 5368 02cc DB68     		ldr	r3, [r3, #12]
 5369 02ce 002B     		cmp	r3, #0
 5370 02d0 66D0     		beq	.L298
3410:.\lib_Fat/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 5371              		.loc 1 3410 0 is_stmt 1
 5372 02d2 FB68     		ldr	r3, [r7, #12]
 5373 02d4 DA68     		ldr	r2, [r3, #12]
 5374 02d6 FB68     		ldr	r3, [r7, #12]
 5375 02d8 5A61     		str	r2, [r3, #20]
3411:.\lib_Fat/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 5376              		.loc 1 3411 0
 5377 02da 7B69     		ldr	r3, [r7, #20]
 5378 02dc 5B89     		ldrh	r3, [r3, #10]
 5379 02de 5B02     		lsl	r3, r3, #9
 5380 02e0 BB64     		str	r3, [r7, #72]
3412:.\lib_Fat/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 5381              		.loc 1 3412 0
 5382 02e2 FB68     		ldr	r3, [r7, #12]
 5383 02e4 9B68     		ldr	r3, [r3, #8]
 5384 02e6 BB65     		str	r3, [r7, #88]
3413:.\lib_Fat/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 5385              		.loc 1 3413 0
 5386 02e8 FB68     		ldr	r3, [r7, #12]
 5387 02ea DB68     		ldr	r3, [r3, #12]
 5388 02ec 7B65     		str	r3, [r7, #84]
 5389 02ee 19E0     		b	.L310
 5390              	.L314:
3414:.\lib_Fat/ff.c **** 					clst = get_fat(&fp->obj, clst);
 5391              		.loc 1 3414 0
 5392 02f0 FA68     		ldr	r2, [r7, #12]
 5393 02f2 BB6D     		ldr	r3, [r7, #88]
 5394 02f4 101C     		mov	r0, r2
 5395 02f6 191C     		mov	r1, r3
 5396 02f8 FFF7FEFF 		bl	get_fat
 5397 02fc 031C     		mov	r3, r0
 5398 02fe BB65     		str	r3, [r7, #88]
3415:.\lib_Fat/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 5399              		.loc 1 3415 0
 5400 0300 BB6D     		ldr	r3, [r7, #88]
 5401 0302 012B     		cmp	r3, #1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 156


 5402 0304 03D8     		bhi	.L311
 5403              		.loc 1 3415 0 is_stmt 0 discriminator 1
 5404 0306 5F23     		mov	r3, #95
 5405 0308 FB18     		add	r3, r7, r3
 5406 030a 0222     		mov	r2, #2
 5407 030c 1A70     		strb	r2, [r3]
 5408              	.L311:
3416:.\lib_Fat/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 5409              		.loc 1 3416 0 is_stmt 1
 5410 030e BB6D     		ldr	r3, [r7, #88]
 5411 0310 0133     		add	r3, r3, #1
 5412 0312 03D1     		bne	.L312
 5413              		.loc 1 3416 0 is_stmt 0 discriminator 1
 5414 0314 5F23     		mov	r3, #95
 5415 0316 FB18     		add	r3, r7, r3
 5416 0318 0122     		mov	r2, #1
 5417 031a 1A70     		strb	r2, [r3]
 5418              	.L312:
3413:.\lib_Fat/ff.c **** 					clst = get_fat(&fp->obj, clst);
 5419              		.loc 1 3413 0 is_stmt 1 discriminator 2
 5420 031c 7A6D     		ldr	r2, [r7, #84]
 5421 031e BB6C     		ldr	r3, [r7, #72]
 5422 0320 D31A     		sub	r3, r2, r3
 5423 0322 7B65     		str	r3, [r7, #84]
 5424              	.L310:
3413:.\lib_Fat/ff.c **** 					clst = get_fat(&fp->obj, clst);
 5425              		.loc 1 3413 0 is_stmt 0 discriminator 1
 5426 0324 5F23     		mov	r3, #95
 5427 0326 FB18     		add	r3, r7, r3
 5428 0328 1B78     		ldrb	r3, [r3]
 5429 032a 002B     		cmp	r3, #0
 5430 032c 03D1     		bne	.L313
3413:.\lib_Fat/ff.c **** 					clst = get_fat(&fp->obj, clst);
 5431              		.loc 1 3413 0 discriminator 3
 5432 032e 7A6D     		ldr	r2, [r7, #84]
 5433 0330 BB6C     		ldr	r3, [r7, #72]
 5434 0332 9A42     		cmp	r2, r3
 5435 0334 DCD8     		bhi	.L314
 5436              	.L313:
3417:.\lib_Fat/ff.c **** 				}
3418:.\lib_Fat/ff.c **** 				fp->clust = clst;
 5437              		.loc 1 3418 0 is_stmt 1
 5438 0336 FB68     		ldr	r3, [r7, #12]
 5439 0338 BA6D     		ldr	r2, [r7, #88]
 5440 033a 9A61     		str	r2, [r3, #24]
3419:.\lib_Fat/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 5441              		.loc 1 3419 0
 5442 033c 5F23     		mov	r3, #95
 5443 033e FB18     		add	r3, r7, r3
 5444 0340 1B78     		ldrb	r3, [r3]
 5445 0342 002B     		cmp	r3, #0
 5446 0344 2CD1     		bne	.L298
 5447              		.loc 1 3419 0 is_stmt 0 discriminator 1
 5448 0346 7B6D     		ldr	r3, [r7, #84]
 5449 0348 DB05     		lsl	r3, r3, #23
 5450 034a DB0D     		lsr	r3, r3, #23
 5451 034c 28D0     		beq	.L298
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 157


3420:.\lib_Fat/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 5452              		.loc 1 3420 0 is_stmt 1
 5453 034e 7A69     		ldr	r2, [r7, #20]
 5454 0350 BB6D     		ldr	r3, [r7, #88]
 5455 0352 101C     		mov	r0, r2
 5456 0354 191C     		mov	r1, r3
 5457 0356 FFF7FEFF 		bl	clust2sect
 5458 035a 031C     		mov	r3, r0
 5459 035c 7B64     		str	r3, [r7, #68]
 5460 035e 7B6C     		ldr	r3, [r7, #68]
 5461 0360 002B     		cmp	r3, #0
 5462 0362 04D1     		bne	.L315
3421:.\lib_Fat/ff.c **** 						res = FR_INT_ERR;
 5463              		.loc 1 3421 0
 5464 0364 5F23     		mov	r3, #95
 5465 0366 FB18     		add	r3, r7, r3
 5466 0368 0222     		mov	r2, #2
 5467 036a 1A70     		strb	r2, [r3]
 5468 036c 18E0     		b	.L298
 5469              	.L315:
3422:.\lib_Fat/ff.c **** 					} else {
3423:.\lib_Fat/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 5470              		.loc 1 3423 0
 5471 036e 7B6D     		ldr	r3, [r7, #84]
 5472 0370 5A0A     		lsr	r2, r3, #9
 5473 0372 7B6C     		ldr	r3, [r7, #68]
 5474 0374 D218     		add	r2, r2, r3
 5475 0376 FB68     		ldr	r3, [r7, #12]
 5476 0378 DA61     		str	r2, [r3, #28]
3424:.\lib_Fat/ff.c **** #if !_FS_TINY
3425:.\lib_Fat/ff.c **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 5477              		.loc 1 3425 0
 5478 037a 7B69     		ldr	r3, [r7, #20]
 5479 037c 5978     		ldrb	r1, [r3, #1]
 5480 037e FB68     		ldr	r3, [r7, #12]
 5481 0380 2833     		add	r3, r3, #40
 5482 0382 1A1C     		mov	r2, r3
 5483 0384 FB68     		ldr	r3, [r7, #12]
 5484 0386 DB69     		ldr	r3, [r3, #28]
 5485 0388 081C     		mov	r0, r1
 5486 038a 111C     		mov	r1, r2
 5487 038c 1A1C     		mov	r2, r3
 5488 038e 0123     		mov	r3, #1
 5489 0390 FFF7FEFF 		bl	disk_read
 5490 0394 031E     		sub	r3, r0, #0
 5491 0396 03D0     		beq	.L298
 5492              		.loc 1 3425 0 is_stmt 0 discriminator 1
 5493 0398 5F23     		mov	r3, #95
 5494 039a FB18     		add	r3, r7, r3
 5495 039c 0122     		mov	r2, #1
 5496 039e 1A70     		strb	r2, [r3]
 5497              	.L298:
3426:.\lib_Fat/ff.c **** #endif
3427:.\lib_Fat/ff.c **** 					}
3428:.\lib_Fat/ff.c **** 				}
3429:.\lib_Fat/ff.c **** 			}
3430:.\lib_Fat/ff.c **** #endif
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 158


3431:.\lib_Fat/ff.c **** 		}
3432:.\lib_Fat/ff.c **** 
3433:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
3434:.\lib_Fat/ff.c **** 	}
3435:.\lib_Fat/ff.c **** 
3436:.\lib_Fat/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 5498              		.loc 1 3436 0 is_stmt 1
 5499 03a0 5F23     		mov	r3, #95
 5500 03a2 FB18     		add	r3, r7, r3
 5501 03a4 1B78     		ldrb	r3, [r3]
 5502 03a6 002B     		cmp	r3, #0
 5503 03a8 02D0     		beq	.L316
 5504              		.loc 1 3436 0 is_stmt 0 discriminator 1
 5505 03aa FB68     		ldr	r3, [r7, #12]
 5506 03ac 0022     		mov	r2, #0
 5507 03ae 1A60     		str	r2, [r3]
 5508              	.L316:
3437:.\lib_Fat/ff.c **** 
3438:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 5509              		.loc 1 3438 0 is_stmt 1
 5510 03b0 5F23     		mov	r3, #95
 5511 03b2 FB18     		add	r3, r7, r3
 5512 03b4 1B78     		ldrb	r3, [r3]
 5513              	.L317:
3439:.\lib_Fat/ff.c **** }
 5514              		.loc 1 3439 0 discriminator 1
 5515 03b6 181C     		mov	r0, r3
 5516 03b8 BD46     		mov	sp, r7
 5517 03ba 19B0     		add	sp, sp, #100
 5518              		@ sp needed
 5519 03bc 90BD     		pop	{r4, r7, pc}
 5520              		.cfi_endproc
 5521              	.LFE33:
 5522              		.size	f_open, .-f_open
 5523 03be C046     		.section	.text.f_read,"ax",%progbits
 5524              		.align	2
 5525              		.global	f_read
 5526              		.code	16
 5527              		.thumb_func
 5528              		.type	f_read, %function
 5529              	f_read:
 5530              	.LFB34:
3440:.\lib_Fat/ff.c **** 
3441:.\lib_Fat/ff.c **** 
3442:.\lib_Fat/ff.c **** 
3443:.\lib_Fat/ff.c **** 
3444:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3445:.\lib_Fat/ff.c **** /* Read File                                                             */
3446:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3447:.\lib_Fat/ff.c **** 
3448:.\lib_Fat/ff.c **** FRESULT f_read (
3449:.\lib_Fat/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3450:.\lib_Fat/ff.c **** 	void* buff,	/* Pointer to data buffer */
3451:.\lib_Fat/ff.c **** 	UINT btr,	/* Number of bytes to read */
3452:.\lib_Fat/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3453:.\lib_Fat/ff.c **** )
3454:.\lib_Fat/ff.c **** {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 159


 5531              		.loc 1 3454 0
 5532              		.cfi_startproc
 5533 0000 90B5     		push	{r4, r7, lr}
 5534              		.cfi_def_cfa_offset 12
 5535              		.cfi_offset 4, -12
 5536              		.cfi_offset 7, -8
 5537              		.cfi_offset 14, -4
 5538 0002 8FB0     		sub	sp, sp, #60
 5539              		.cfi_def_cfa_offset 72
 5540 0004 00AF     		add	r7, sp, #0
 5541              		.cfi_def_cfa_register 7
 5542 0006 F860     		str	r0, [r7, #12]
 5543 0008 B960     		str	r1, [r7, #8]
 5544 000a 7A60     		str	r2, [r7, #4]
 5545 000c 3B60     		str	r3, [r7]
3455:.\lib_Fat/ff.c **** 	FRESULT res;
3456:.\lib_Fat/ff.c **** 	FATFS *fs;
3457:.\lib_Fat/ff.c **** 	DWORD clst, sect;
3458:.\lib_Fat/ff.c **** 	FSIZE_t remain;
3459:.\lib_Fat/ff.c **** 	UINT rcnt, cc, csect;
3460:.\lib_Fat/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
 5546              		.loc 1 3460 0
 5547 000e BB68     		ldr	r3, [r7, #8]
 5548 0010 7B62     		str	r3, [r7, #36]
3461:.\lib_Fat/ff.c **** 
3462:.\lib_Fat/ff.c **** 
3463:.\lib_Fat/ff.c **** 	*br = 0;	/* Clear read byte counter */
 5549              		.loc 1 3463 0
 5550 0012 3B68     		ldr	r3, [r7]
 5551 0014 0022     		mov	r2, #0
 5552 0016 1A60     		str	r2, [r3]
3464:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);
 5553              		.loc 1 3464 0
 5554 0018 3723     		mov	r3, #55
 5555 001a FC18     		add	r4, r7, r3
 5556 001c FA68     		ldr	r2, [r7, #12]
 5557 001e 1423     		mov	r3, #20
 5558 0020 FB18     		add	r3, r7, r3
 5559 0022 101C     		mov	r0, r2
 5560 0024 191C     		mov	r1, r3
 5561 0026 FFF7FEFF 		bl	validate
 5562 002a 031C     		mov	r3, r0
 5563 002c 2370     		strb	r3, [r4]
3465:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 5564              		.loc 1 3465 0
 5565 002e 3723     		mov	r3, #55
 5566 0030 FB18     		add	r3, r7, r3
 5567 0032 1B78     		ldrb	r3, [r3]
 5568 0034 002B     		cmp	r3, #0
 5569 0036 09D1     		bne	.L319
 5570              		.loc 1 3465 0 is_stmt 0 discriminator 2
 5571 0038 3723     		mov	r3, #55
 5572 003a FB18     		add	r3, r7, r3
 5573 003c FA68     		ldr	r2, [r7, #12]
 5574 003e 527C     		ldrb	r2, [r2, #17]
 5575 0040 1A70     		strb	r2, [r3]
 5576 0042 3723     		mov	r3, #55
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 160


 5577 0044 FB18     		add	r3, r7, r3
 5578 0046 1B78     		ldrb	r3, [r3]
 5579 0048 002B     		cmp	r3, #0
 5580 004a 03D0     		beq	.L320
 5581              	.L319:
 5582              		.loc 1 3465 0 discriminator 3
 5583 004c 3723     		mov	r3, #55
 5584 004e FB18     		add	r3, r7, r3
 5585 0050 1B78     		ldrb	r3, [r3]
 5586 0052 12E1     		b	.L342
 5587              	.L320:
3466:.\lib_Fat/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 5588              		.loc 1 3466 0 is_stmt 1
 5589 0054 FB68     		ldr	r3, [r7, #12]
 5590 0056 1B7C     		ldrb	r3, [r3, #16]
 5591 0058 1A1C     		mov	r2, r3
 5592 005a 0123     		mov	r3, #1
 5593 005c 1340     		and	r3, r2
 5594 005e 01D1     		bne	.L322
 5595              		.loc 1 3466 0 is_stmt 0 discriminator 1
 5596 0060 0723     		mov	r3, #7
 5597 0062 0AE1     		b	.L342
 5598              	.L322:
3467:.\lib_Fat/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 5599              		.loc 1 3467 0 is_stmt 1
 5600 0064 FB68     		ldr	r3, [r7, #12]
 5601 0066 DA68     		ldr	r2, [r3, #12]
 5602 0068 FB68     		ldr	r3, [r7, #12]
 5603 006a 5B69     		ldr	r3, [r3, #20]
 5604 006c D31A     		sub	r3, r2, r3
 5605 006e 3B62     		str	r3, [r7, #32]
3468:.\lib_Fat/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 5606              		.loc 1 3468 0
 5607 0070 7A68     		ldr	r2, [r7, #4]
 5608 0072 3B6A     		ldr	r3, [r7, #32]
 5609 0074 9A42     		cmp	r2, r3
 5610 0076 01D9     		bls	.L323
 5611              		.loc 1 3468 0 is_stmt 0 discriminator 1
 5612 0078 3B6A     		ldr	r3, [r7, #32]
 5613 007a 7B60     		str	r3, [r7, #4]
 5614              	.L323:
3469:.\lib_Fat/ff.c **** 
3470:.\lib_Fat/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 5615              		.loc 1 3470 0 is_stmt 1
 5616 007c F8E0     		b	.L324
 5617              	.L341:
3471:.\lib_Fat/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3472:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 5618              		.loc 1 3472 0
 5619 007e FB68     		ldr	r3, [r7, #12]
 5620 0080 5B69     		ldr	r3, [r3, #20]
 5621 0082 DB05     		lsl	r3, r3, #23
 5622 0084 DB0D     		lsr	r3, r3, #23
 5623 0086 00D0     		beq	.LCB5052
 5624 0088 C2E0     		b	.L325	@long jump
 5625              	.LCB5052:
3473:.\lib_Fat/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 161


 5626              		.loc 1 3473 0
 5627 008a FB68     		ldr	r3, [r7, #12]
 5628 008c 5B69     		ldr	r3, [r3, #20]
 5629 008e 5B0A     		lsr	r3, r3, #9
 5630 0090 7A69     		ldr	r2, [r7, #20]
 5631 0092 5289     		ldrh	r2, [r2, #10]
 5632 0094 013A     		sub	r2, r2, #1
 5633 0096 1340     		and	r3, r2
 5634 0098 FB61     		str	r3, [r7, #28]
3474:.\lib_Fat/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 5635              		.loc 1 3474 0
 5636 009a FB69     		ldr	r3, [r7, #28]
 5637 009c 002B     		cmp	r3, #0
 5638 009e 23D1     		bne	.L326
3475:.\lib_Fat/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 5639              		.loc 1 3475 0
 5640 00a0 FB68     		ldr	r3, [r7, #12]
 5641 00a2 5B69     		ldr	r3, [r3, #20]
 5642 00a4 002B     		cmp	r3, #0
 5643 00a6 03D1     		bne	.L327
3476:.\lib_Fat/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 5644              		.loc 1 3476 0
 5645 00a8 FB68     		ldr	r3, [r7, #12]
 5646 00aa 9B68     		ldr	r3, [r3, #8]
 5647 00ac 3B63     		str	r3, [r7, #48]
 5648 00ae 08E0     		b	.L328
 5649              	.L327:
3477:.\lib_Fat/ff.c **** 				} else {						/* Middle or end of the file */
3478:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
3479:.\lib_Fat/ff.c **** 					if (fp->cltbl) {
3480:.\lib_Fat/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3481:.\lib_Fat/ff.c **** 					} else
3482:.\lib_Fat/ff.c **** #endif
3483:.\lib_Fat/ff.c **** 					{
3484:.\lib_Fat/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 5650              		.loc 1 3484 0
 5651 00b0 FA68     		ldr	r2, [r7, #12]
 5652 00b2 FB68     		ldr	r3, [r7, #12]
 5653 00b4 9B69     		ldr	r3, [r3, #24]
 5654 00b6 101C     		mov	r0, r2
 5655 00b8 191C     		mov	r1, r3
 5656 00ba FFF7FEFF 		bl	get_fat
 5657 00be 031C     		mov	r3, r0
 5658 00c0 3B63     		str	r3, [r7, #48]
 5659              	.L328:
3485:.\lib_Fat/ff.c **** 					}
3486:.\lib_Fat/ff.c **** 				}
3487:.\lib_Fat/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 5660              		.loc 1 3487 0
 5661 00c2 3B6B     		ldr	r3, [r7, #48]
 5662 00c4 012B     		cmp	r3, #1
 5663 00c6 04D8     		bhi	.L329
 5664              		.loc 1 3487 0 is_stmt 0 discriminator 1
 5665 00c8 FB68     		ldr	r3, [r7, #12]
 5666 00ca 0222     		mov	r2, #2
 5667 00cc 5A74     		strb	r2, [r3, #17]
 5668 00ce 0223     		mov	r3, #2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 162


 5669 00d0 D3E0     		b	.L342
 5670              	.L329:
3488:.\lib_Fat/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5671              		.loc 1 3488 0 is_stmt 1
 5672 00d2 3B6B     		ldr	r3, [r7, #48]
 5673 00d4 0133     		add	r3, r3, #1
 5674 00d6 04D1     		bne	.L330
 5675              		.loc 1 3488 0 is_stmt 0 discriminator 1
 5676 00d8 FB68     		ldr	r3, [r7, #12]
 5677 00da 0122     		mov	r2, #1
 5678 00dc 5A74     		strb	r2, [r3, #17]
 5679 00de 0123     		mov	r3, #1
 5680 00e0 CBE0     		b	.L342
 5681              	.L330:
3489:.\lib_Fat/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 5682              		.loc 1 3489 0 is_stmt 1
 5683 00e2 FB68     		ldr	r3, [r7, #12]
 5684 00e4 3A6B     		ldr	r2, [r7, #48]
 5685 00e6 9A61     		str	r2, [r3, #24]
 5686              	.L326:
3490:.\lib_Fat/ff.c **** 			}
3491:.\lib_Fat/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 5687              		.loc 1 3491 0
 5688 00e8 7A69     		ldr	r2, [r7, #20]
 5689 00ea FB68     		ldr	r3, [r7, #12]
 5690 00ec 9B69     		ldr	r3, [r3, #24]
 5691 00ee 101C     		mov	r0, r2
 5692 00f0 191C     		mov	r1, r3
 5693 00f2 FFF7FEFF 		bl	clust2sect
 5694 00f6 031C     		mov	r3, r0
 5695 00f8 BB61     		str	r3, [r7, #24]
3492:.\lib_Fat/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 5696              		.loc 1 3492 0
 5697 00fa BB69     		ldr	r3, [r7, #24]
 5698 00fc 002B     		cmp	r3, #0
 5699 00fe 04D1     		bne	.L331
 5700              		.loc 1 3492 0 is_stmt 0 discriminator 1
 5701 0100 FB68     		ldr	r3, [r7, #12]
 5702 0102 0222     		mov	r2, #2
 5703 0104 5A74     		strb	r2, [r3, #17]
 5704 0106 0223     		mov	r3, #2
 5705 0108 B7E0     		b	.L342
 5706              	.L331:
3493:.\lib_Fat/ff.c **** 			sect += csect;
 5707              		.loc 1 3493 0 is_stmt 1
 5708 010a BA69     		ldr	r2, [r7, #24]
 5709 010c FB69     		ldr	r3, [r7, #28]
 5710 010e D318     		add	r3, r2, r3
 5711 0110 BB61     		str	r3, [r7, #24]
3494:.\lib_Fat/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 5712              		.loc 1 3494 0
 5713 0112 7B68     		ldr	r3, [r7, #4]
 5714 0114 5B0A     		lsr	r3, r3, #9
 5715 0116 BB62     		str	r3, [r7, #40]
3495:.\lib_Fat/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 5716              		.loc 1 3495 0
 5717 0118 BB6A     		ldr	r3, [r7, #40]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 163


 5718 011a 002B     		cmp	r3, #0
 5719 011c 3CD0     		beq	.L332
3496:.\lib_Fat/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 5720              		.loc 1 3496 0
 5721 011e FA69     		ldr	r2, [r7, #28]
 5722 0120 BB6A     		ldr	r3, [r7, #40]
 5723 0122 D318     		add	r3, r2, r3
 5724 0124 7A69     		ldr	r2, [r7, #20]
 5725 0126 5289     		ldrh	r2, [r2, #10]
 5726 0128 9342     		cmp	r3, r2
 5727 012a 05D9     		bls	.L333
3497:.\lib_Fat/ff.c **** 					cc = fs->csize - csect;
 5728              		.loc 1 3497 0
 5729 012c 7B69     		ldr	r3, [r7, #20]
 5730 012e 5B89     		ldrh	r3, [r3, #10]
 5731 0130 1A1C     		mov	r2, r3
 5732 0132 FB69     		ldr	r3, [r7, #28]
 5733 0134 D31A     		sub	r3, r2, r3
 5734 0136 BB62     		str	r3, [r7, #40]
 5735              	.L333:
3498:.\lib_Fat/ff.c **** 				}
3499:.\lib_Fat/ff.c **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 5736              		.loc 1 3499 0
 5737 0138 7B69     		ldr	r3, [r7, #20]
 5738 013a 5878     		ldrb	r0, [r3, #1]
 5739 013c 796A     		ldr	r1, [r7, #36]
 5740 013e BA69     		ldr	r2, [r7, #24]
 5741 0140 BB6A     		ldr	r3, [r7, #40]
 5742 0142 FFF7FEFF 		bl	disk_read
 5743 0146 031E     		sub	r3, r0, #0
 5744 0148 04D0     		beq	.L334
3500:.\lib_Fat/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 5745              		.loc 1 3500 0
 5746 014a FB68     		ldr	r3, [r7, #12]
 5747 014c 0122     		mov	r2, #1
 5748 014e 5A74     		strb	r2, [r3, #17]
 5749 0150 0123     		mov	r3, #1
 5750 0152 92E0     		b	.L342
 5751              	.L334:
3501:.\lib_Fat/ff.c **** 				}
3502:.\lib_Fat/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3503:.\lib_Fat/ff.c **** #if _FS_TINY
3504:.\lib_Fat/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3505:.\lib_Fat/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3506:.\lib_Fat/ff.c **** 				}
3507:.\lib_Fat/ff.c **** #else
3508:.\lib_Fat/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 5752              		.loc 1 3508 0
 5753 0154 FB68     		ldr	r3, [r7, #12]
 5754 0156 1B7C     		ldrb	r3, [r3, #16]
 5755 0158 DBB2     		uxtb	r3, r3
 5756 015a 5BB2     		sxtb	r3, r3
 5757 015c 002B     		cmp	r3, #0
 5758 015e 17DA     		bge	.L335
 5759              		.loc 1 3508 0 is_stmt 0 discriminator 1
 5760 0160 FB68     		ldr	r3, [r7, #12]
 5761 0162 DA69     		ldr	r2, [r3, #28]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 164


 5762 0164 BB69     		ldr	r3, [r7, #24]
 5763 0166 D21A     		sub	r2, r2, r3
 5764 0168 BB6A     		ldr	r3, [r7, #40]
 5765 016a 9A42     		cmp	r2, r3
 5766 016c 10D2     		bcs	.L335
3509:.\lib_Fat/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 5767              		.loc 1 3509 0 is_stmt 1
 5768 016e FB68     		ldr	r3, [r7, #12]
 5769 0170 DA69     		ldr	r2, [r3, #28]
 5770 0172 BB69     		ldr	r3, [r7, #24]
 5771 0174 D31A     		sub	r3, r2, r3
 5772 0176 5B02     		lsl	r3, r3, #9
 5773 0178 7A6A     		ldr	r2, [r7, #36]
 5774 017a D118     		add	r1, r2, r3
 5775 017c FB68     		ldr	r3, [r7, #12]
 5776 017e 2833     		add	r3, r3, #40
 5777 0180 1A1C     		mov	r2, r3
 5778 0182 8023     		mov	r3, #128
 5779 0184 9B00     		lsl	r3, r3, #2
 5780 0186 081C     		mov	r0, r1
 5781 0188 111C     		mov	r1, r2
 5782 018a 1A1C     		mov	r2, r3
 5783 018c FFF7FEFF 		bl	mem_cpy
 5784              	.L335:
3510:.\lib_Fat/ff.c **** 				}
3511:.\lib_Fat/ff.c **** #endif
3512:.\lib_Fat/ff.c **** #endif
3513:.\lib_Fat/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 5785              		.loc 1 3513 0
 5786 0190 BB6A     		ldr	r3, [r7, #40]
 5787 0192 5B02     		lsl	r3, r3, #9
 5788 0194 FB62     		str	r3, [r7, #44]
3514:.\lib_Fat/ff.c **** 				continue;
 5789              		.loc 1 3514 0
 5790 0196 57E0     		b	.L336
 5791              	.L332:
3515:.\lib_Fat/ff.c **** 			}
3516:.\lib_Fat/ff.c **** #if !_FS_TINY
3517:.\lib_Fat/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 5792              		.loc 1 3517 0
 5793 0198 FB68     		ldr	r3, [r7, #12]
 5794 019a DA69     		ldr	r2, [r3, #28]
 5795 019c BB69     		ldr	r3, [r7, #24]
 5796 019e 9A42     		cmp	r2, r3
 5797 01a0 33D0     		beq	.L337
3518:.\lib_Fat/ff.c **** #if !_FS_READONLY
3519:.\lib_Fat/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 5798              		.loc 1 3519 0
 5799 01a2 FB68     		ldr	r3, [r7, #12]
 5800 01a4 1B7C     		ldrb	r3, [r3, #16]
 5801 01a6 DBB2     		uxtb	r3, r3
 5802 01a8 5BB2     		sxtb	r3, r3
 5803 01aa 002B     		cmp	r3, #0
 5804 01ac 1ADA     		bge	.L338
3520:.\lib_Fat/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5805              		.loc 1 3520 0
 5806 01ae 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 165


 5807 01b0 5978     		ldrb	r1, [r3, #1]
 5808 01b2 FB68     		ldr	r3, [r7, #12]
 5809 01b4 2833     		add	r3, r3, #40
 5810 01b6 1A1C     		mov	r2, r3
 5811 01b8 FB68     		ldr	r3, [r7, #12]
 5812 01ba DB69     		ldr	r3, [r3, #28]
 5813 01bc 081C     		mov	r0, r1
 5814 01be 111C     		mov	r1, r2
 5815 01c0 1A1C     		mov	r2, r3
 5816 01c2 0123     		mov	r3, #1
 5817 01c4 FFF7FEFF 		bl	disk_write
 5818 01c8 031E     		sub	r3, r0, #0
 5819 01ca 04D0     		beq	.L339
 5820              		.loc 1 3520 0 is_stmt 0 discriminator 1
 5821 01cc FB68     		ldr	r3, [r7, #12]
 5822 01ce 0122     		mov	r2, #1
 5823 01d0 5A74     		strb	r2, [r3, #17]
 5824 01d2 0123     		mov	r3, #1
 5825 01d4 51E0     		b	.L342
 5826              	.L339:
3521:.\lib_Fat/ff.c **** 					fp->flag &= ~FA_DIRTY;
 5827              		.loc 1 3521 0 is_stmt 1
 5828 01d6 FB68     		ldr	r3, [r7, #12]
 5829 01d8 1B7C     		ldrb	r3, [r3, #16]
 5830 01da 7F22     		mov	r2, #127
 5831 01dc 1340     		and	r3, r2
 5832 01de DAB2     		uxtb	r2, r3
 5833 01e0 FB68     		ldr	r3, [r7, #12]
 5834 01e2 1A74     		strb	r2, [r3, #16]
 5835              	.L338:
3522:.\lib_Fat/ff.c **** 				}
3523:.\lib_Fat/ff.c **** #endif
3524:.\lib_Fat/ff.c **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 5836              		.loc 1 3524 0
 5837 01e4 7B69     		ldr	r3, [r7, #20]
 5838 01e6 5978     		ldrb	r1, [r3, #1]
 5839 01e8 FB68     		ldr	r3, [r7, #12]
 5840 01ea 2833     		add	r3, r3, #40
 5841 01ec 1A1C     		mov	r2, r3
 5842 01ee BB69     		ldr	r3, [r7, #24]
 5843 01f0 081C     		mov	r0, r1
 5844 01f2 111C     		mov	r1, r2
 5845 01f4 1A1C     		mov	r2, r3
 5846 01f6 0123     		mov	r3, #1
 5847 01f8 FFF7FEFF 		bl	disk_read
 5848 01fc 031E     		sub	r3, r0, #0
 5849 01fe 04D0     		beq	.L337
3525:.\lib_Fat/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 5850              		.loc 1 3525 0
 5851 0200 FB68     		ldr	r3, [r7, #12]
 5852 0202 0122     		mov	r2, #1
 5853 0204 5A74     		strb	r2, [r3, #17]
 5854 0206 0123     		mov	r3, #1
 5855 0208 37E0     		b	.L342
 5856              	.L337:
3526:.\lib_Fat/ff.c **** 				}
3527:.\lib_Fat/ff.c **** 			}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 166


3528:.\lib_Fat/ff.c **** #endif
3529:.\lib_Fat/ff.c **** 			fp->sect = sect;
 5857              		.loc 1 3529 0
 5858 020a FB68     		ldr	r3, [r7, #12]
 5859 020c BA69     		ldr	r2, [r7, #24]
 5860 020e DA61     		str	r2, [r3, #28]
 5861              	.L325:
3530:.\lib_Fat/ff.c **** 		}
3531:.\lib_Fat/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 5862              		.loc 1 3531 0
 5863 0210 FB68     		ldr	r3, [r7, #12]
 5864 0212 5B69     		ldr	r3, [r3, #20]
 5865 0214 DB05     		lsl	r3, r3, #23
 5866 0216 DB0D     		lsr	r3, r3, #23
 5867 0218 8022     		mov	r2, #128
 5868 021a 9200     		lsl	r2, r2, #2
 5869 021c D31A     		sub	r3, r2, r3
 5870 021e FB62     		str	r3, [r7, #44]
3532:.\lib_Fat/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 5871              		.loc 1 3532 0
 5872 0220 FA6A     		ldr	r2, [r7, #44]
 5873 0222 7B68     		ldr	r3, [r7, #4]
 5874 0224 9A42     		cmp	r2, r3
 5875 0226 01D9     		bls	.L340
 5876              		.loc 1 3532 0 is_stmt 0 discriminator 1
 5877 0228 7B68     		ldr	r3, [r7, #4]
 5878 022a FB62     		str	r3, [r7, #44]
 5879              	.L340:
3533:.\lib_Fat/ff.c **** #if _FS_TINY
3534:.\lib_Fat/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3535:.\lib_Fat/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3536:.\lib_Fat/ff.c **** #else
3537:.\lib_Fat/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 5880              		.loc 1 3537 0 is_stmt 1
 5881 022c FB68     		ldr	r3, [r7, #12]
 5882 022e 5B69     		ldr	r3, [r3, #20]
 5883 0230 DB05     		lsl	r3, r3, #23
 5884 0232 DB0D     		lsr	r3, r3, #23
 5885 0234 2833     		add	r3, r3, #40
 5886 0236 FA68     		ldr	r2, [r7, #12]
 5887 0238 D218     		add	r2, r2, r3
 5888 023a 796A     		ldr	r1, [r7, #36]
 5889 023c FB6A     		ldr	r3, [r7, #44]
 5890 023e 081C     		mov	r0, r1
 5891 0240 111C     		mov	r1, r2
 5892 0242 1A1C     		mov	r2, r3
 5893 0244 FFF7FEFF 		bl	mem_cpy
 5894              	.L336:
3471:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 5895              		.loc 1 3471 0
 5896 0248 7A6A     		ldr	r2, [r7, #36]
 5897 024a FB6A     		ldr	r3, [r7, #44]
 5898 024c D318     		add	r3, r2, r3
 5899 024e 7B62     		str	r3, [r7, #36]
 5900 0250 FB68     		ldr	r3, [r7, #12]
 5901 0252 5A69     		ldr	r2, [r3, #20]
 5902 0254 FB6A     		ldr	r3, [r7, #44]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 167


 5903 0256 D218     		add	r2, r2, r3
 5904 0258 FB68     		ldr	r3, [r7, #12]
 5905 025a 5A61     		str	r2, [r3, #20]
 5906 025c 3B68     		ldr	r3, [r7]
 5907 025e 1A68     		ldr	r2, [r3]
 5908 0260 FB6A     		ldr	r3, [r7, #44]
 5909 0262 D218     		add	r2, r2, r3
 5910 0264 3B68     		ldr	r3, [r7]
 5911 0266 1A60     		str	r2, [r3]
 5912 0268 7A68     		ldr	r2, [r7, #4]
 5913 026a FB6A     		ldr	r3, [r7, #44]
 5914 026c D31A     		sub	r3, r2, r3
 5915 026e 7B60     		str	r3, [r7, #4]
 5916              	.L324:
3470:.\lib_Fat/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 5917              		.loc 1 3470 0
 5918 0270 7B68     		ldr	r3, [r7, #4]
 5919 0272 002B     		cmp	r3, #0
 5920 0274 00D0     		beq	.LCB5336
 5921 0276 02E7     		b	.L341	@long jump
 5922              	.LCB5336:
3538:.\lib_Fat/ff.c **** #endif
3539:.\lib_Fat/ff.c **** 	}
3540:.\lib_Fat/ff.c **** 
3541:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, FR_OK);
 5923              		.loc 1 3541 0
 5924 0278 0023     		mov	r3, #0
 5925              	.L342:
3542:.\lib_Fat/ff.c **** }
 5926              		.loc 1 3542 0 discriminator 1
 5927 027a 181C     		mov	r0, r3
 5928 027c BD46     		mov	sp, r7
 5929 027e 0FB0     		add	sp, sp, #60
 5930              		@ sp needed
 5931 0280 90BD     		pop	{r4, r7, pc}
 5932              		.cfi_endproc
 5933              	.LFE34:
 5934              		.size	f_read, .-f_read
 5935 0282 C046     		.section	.text.f_write,"ax",%progbits
 5936              		.align	2
 5937              		.global	f_write
 5938              		.code	16
 5939              		.thumb_func
 5940              		.type	f_write, %function
 5941              	f_write:
 5942              	.LFB35:
3543:.\lib_Fat/ff.c **** 
3544:.\lib_Fat/ff.c **** 
3545:.\lib_Fat/ff.c **** 
3546:.\lib_Fat/ff.c **** 
3547:.\lib_Fat/ff.c **** #if !_FS_READONLY
3548:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3549:.\lib_Fat/ff.c **** /* Write File                                                            */
3550:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3551:.\lib_Fat/ff.c **** 
3552:.\lib_Fat/ff.c **** FRESULT f_write (
3553:.\lib_Fat/ff.c **** 	FIL* fp,			/* Pointer to the file object */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 168


3554:.\lib_Fat/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3555:.\lib_Fat/ff.c **** 	UINT btw,			/* Number of bytes to write */
3556:.\lib_Fat/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3557:.\lib_Fat/ff.c **** )
3558:.\lib_Fat/ff.c **** {
 5943              		.loc 1 3558 0
 5944              		.cfi_startproc
 5945 0000 90B5     		push	{r4, r7, lr}
 5946              		.cfi_def_cfa_offset 12
 5947              		.cfi_offset 4, -12
 5948              		.cfi_offset 7, -8
 5949              		.cfi_offset 14, -4
 5950 0002 8DB0     		sub	sp, sp, #52
 5951              		.cfi_def_cfa_offset 64
 5952 0004 00AF     		add	r7, sp, #0
 5953              		.cfi_def_cfa_register 7
 5954 0006 F860     		str	r0, [r7, #12]
 5955 0008 B960     		str	r1, [r7, #8]
 5956 000a 7A60     		str	r2, [r7, #4]
 5957 000c 3B60     		str	r3, [r7]
3559:.\lib_Fat/ff.c **** 	FRESULT res;
3560:.\lib_Fat/ff.c **** 	FATFS *fs;
3561:.\lib_Fat/ff.c **** 	DWORD clst, sect;
3562:.\lib_Fat/ff.c **** 	UINT wcnt, cc, csect;
3563:.\lib_Fat/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 5958              		.loc 1 3563 0
 5959 000e BB68     		ldr	r3, [r7, #8]
 5960 0010 FB61     		str	r3, [r7, #28]
3564:.\lib_Fat/ff.c **** 
3565:.\lib_Fat/ff.c **** 
3566:.\lib_Fat/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 5961              		.loc 1 3566 0
 5962 0012 3B68     		ldr	r3, [r7]
 5963 0014 0022     		mov	r2, #0
 5964 0016 1A60     		str	r2, [r3]
3567:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);
 5965              		.loc 1 3567 0
 5966 0018 2F23     		mov	r3, #47
 5967 001a FC18     		add	r4, r7, r3
 5968 001c FA68     		ldr	r2, [r7, #12]
 5969 001e 1023     		mov	r3, #16
 5970 0020 FB18     		add	r3, r7, r3
 5971 0022 101C     		mov	r0, r2
 5972 0024 191C     		mov	r1, r3
 5973 0026 FFF7FEFF 		bl	validate
 5974 002a 031C     		mov	r3, r0
 5975 002c 2370     		strb	r3, [r4]
3568:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 5976              		.loc 1 3568 0
 5977 002e 2F23     		mov	r3, #47
 5978 0030 FB18     		add	r3, r7, r3
 5979 0032 1B78     		ldrb	r3, [r3]
 5980 0034 002B     		cmp	r3, #0
 5981 0036 09D1     		bne	.L344
 5982              		.loc 1 3568 0 is_stmt 0 discriminator 2
 5983 0038 2F23     		mov	r3, #47
 5984 003a FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 169


 5985 003c FA68     		ldr	r2, [r7, #12]
 5986 003e 527C     		ldrb	r2, [r2, #17]
 5987 0040 1A70     		strb	r2, [r3]
 5988 0042 2F23     		mov	r3, #47
 5989 0044 FB18     		add	r3, r7, r3
 5990 0046 1B78     		ldrb	r3, [r3]
 5991 0048 002B     		cmp	r3, #0
 5992 004a 03D0     		beq	.L345
 5993              	.L344:
 5994              		.loc 1 3568 0 discriminator 3
 5995 004c 2F23     		mov	r3, #47
 5996 004e FB18     		add	r3, r7, r3
 5997 0050 1B78     		ldrb	r3, [r3]
 5998 0052 47E1     		b	.L371
 5999              	.L345:
3569:.\lib_Fat/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6000              		.loc 1 3569 0 is_stmt 1
 6001 0054 FB68     		ldr	r3, [r7, #12]
 6002 0056 1B7C     		ldrb	r3, [r3, #16]
 6003 0058 1A1C     		mov	r2, r3
 6004 005a 0223     		mov	r3, #2
 6005 005c 1340     		and	r3, r2
 6006 005e 01D1     		bne	.L347
 6007              		.loc 1 3569 0 is_stmt 0 discriminator 1
 6008 0060 0723     		mov	r3, #7
 6009 0062 3FE1     		b	.L371
 6010              	.L347:
3570:.\lib_Fat/ff.c **** 
3571:.\lib_Fat/ff.c **** 	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
3572:.\lib_Fat/ff.c **** 	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
3573:.\lib_Fat/ff.c **** 		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 6011              		.loc 1 3573 0 is_stmt 1
 6012 0064 FB68     		ldr	r3, [r7, #12]
 6013 0066 5A69     		ldr	r2, [r3, #20]
 6014 0068 7B68     		ldr	r3, [r7, #4]
 6015 006a D218     		add	r2, r2, r3
 6016 006c FB68     		ldr	r3, [r7, #12]
 6017 006e 5B69     		ldr	r3, [r3, #20]
3572:.\lib_Fat/ff.c **** 		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 6018              		.loc 1 3572 0
 6019 0070 9A42     		cmp	r2, r3
 6020 0072 03D2     		bcs	.L348
3574:.\lib_Fat/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6021              		.loc 1 3574 0
 6022 0074 FB68     		ldr	r3, [r7, #12]
 6023 0076 5B69     		ldr	r3, [r3, #20]
 6024 0078 DB43     		mvn	r3, r3
 6025 007a 7B60     		str	r3, [r7, #4]
 6026              	.L348:
3575:.\lib_Fat/ff.c **** 	}
3576:.\lib_Fat/ff.c **** 
3577:.\lib_Fat/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 6027              		.loc 1 3577 0
 6028 007c 26E1     		b	.L349
 6029              	.L370:
3578:.\lib_Fat/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3579:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 170


 6030              		.loc 1 3579 0
 6031 007e FB68     		ldr	r3, [r7, #12]
 6032 0080 5B69     		ldr	r3, [r3, #20]
 6033 0082 DB05     		lsl	r3, r3, #23
 6034 0084 DB0D     		lsr	r3, r3, #23
 6035 0086 00D0     		beq	.LCB5442
 6036 0088 DEE0     		b	.L350	@long jump
 6037              	.LCB5442:
3580:.\lib_Fat/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 6038              		.loc 1 3580 0
 6039 008a FB68     		ldr	r3, [r7, #12]
 6040 008c 5B69     		ldr	r3, [r3, #20]
 6041 008e 5B0A     		lsr	r3, r3, #9
 6042 0090 3A69     		ldr	r2, [r7, #16]
 6043 0092 5289     		ldrh	r2, [r2, #10]
 6044 0094 013A     		sub	r2, r2, #1
 6045 0096 1340     		and	r3, r2
 6046 0098 BB61     		str	r3, [r7, #24]
3581:.\lib_Fat/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 6047              		.loc 1 3581 0
 6048 009a BB69     		ldr	r3, [r7, #24]
 6049 009c 002B     		cmp	r3, #0
 6050 009e 38D1     		bne	.L351
3582:.\lib_Fat/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6051              		.loc 1 3582 0
 6052 00a0 FB68     		ldr	r3, [r7, #12]
 6053 00a2 5B69     		ldr	r3, [r3, #20]
 6054 00a4 002B     		cmp	r3, #0
 6055 00a6 0DD1     		bne	.L352
3583:.\lib_Fat/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 6056              		.loc 1 3583 0
 6057 00a8 FB68     		ldr	r3, [r7, #12]
 6058 00aa 9B68     		ldr	r3, [r3, #8]
 6059 00ac BB62     		str	r3, [r7, #40]
3584:.\lib_Fat/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 6060              		.loc 1 3584 0
 6061 00ae BB6A     		ldr	r3, [r7, #40]
 6062 00b0 002B     		cmp	r3, #0
 6063 00b2 10D1     		bne	.L354
3585:.\lib_Fat/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 6064              		.loc 1 3585 0
 6065 00b4 FB68     		ldr	r3, [r7, #12]
 6066 00b6 181C     		mov	r0, r3
 6067 00b8 0021     		mov	r1, #0
 6068 00ba FFF7FEFF 		bl	create_chain
 6069 00be 031C     		mov	r3, r0
 6070 00c0 BB62     		str	r3, [r7, #40]
 6071 00c2 08E0     		b	.L354
 6072              	.L352:
3586:.\lib_Fat/ff.c **** 					}
3587:.\lib_Fat/ff.c **** 				} else {					/* On the middle or end of the file */
3588:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
3589:.\lib_Fat/ff.c **** 					if (fp->cltbl) {
3590:.\lib_Fat/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3591:.\lib_Fat/ff.c **** 					} else
3592:.\lib_Fat/ff.c **** #endif
3593:.\lib_Fat/ff.c **** 					{
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 171


3594:.\lib_Fat/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 6073              		.loc 1 3594 0
 6074 00c4 FA68     		ldr	r2, [r7, #12]
 6075 00c6 FB68     		ldr	r3, [r7, #12]
 6076 00c8 9B69     		ldr	r3, [r3, #24]
 6077 00ca 101C     		mov	r0, r2
 6078 00cc 191C     		mov	r1, r3
 6079 00ce FFF7FEFF 		bl	create_chain
 6080 00d2 031C     		mov	r3, r0
 6081 00d4 BB62     		str	r3, [r7, #40]
 6082              	.L354:
3595:.\lib_Fat/ff.c **** 					}
3596:.\lib_Fat/ff.c **** 				}
3597:.\lib_Fat/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 6083              		.loc 1 3597 0
 6084 00d6 BB6A     		ldr	r3, [r7, #40]
 6085 00d8 002B     		cmp	r3, #0
 6086 00da 00D1     		bne	.L355
 6087 00dc FAE0     		b	.L356
 6088              	.L355:
3598:.\lib_Fat/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 6089              		.loc 1 3598 0
 6090 00de BB6A     		ldr	r3, [r7, #40]
 6091 00e0 012B     		cmp	r3, #1
 6092 00e2 04D1     		bne	.L357
 6093              		.loc 1 3598 0 is_stmt 0 discriminator 1
 6094 00e4 FB68     		ldr	r3, [r7, #12]
 6095 00e6 0222     		mov	r2, #2
 6096 00e8 5A74     		strb	r2, [r3, #17]
 6097 00ea 0223     		mov	r3, #2
 6098 00ec FAE0     		b	.L371
 6099              	.L357:
3599:.\lib_Fat/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6100              		.loc 1 3599 0 is_stmt 1
 6101 00ee BB6A     		ldr	r3, [r7, #40]
 6102 00f0 0133     		add	r3, r3, #1
 6103 00f2 04D1     		bne	.L358
 6104              		.loc 1 3599 0 is_stmt 0 discriminator 1
 6105 00f4 FB68     		ldr	r3, [r7, #12]
 6106 00f6 0122     		mov	r2, #1
 6107 00f8 5A74     		strb	r2, [r3, #17]
 6108 00fa 0123     		mov	r3, #1
 6109 00fc F2E0     		b	.L371
 6110              	.L358:
3600:.\lib_Fat/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 6111              		.loc 1 3600 0 is_stmt 1
 6112 00fe FB68     		ldr	r3, [r7, #12]
 6113 0100 BA6A     		ldr	r2, [r7, #40]
 6114 0102 9A61     		str	r2, [r3, #24]
3601:.\lib_Fat/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 6115              		.loc 1 3601 0
 6116 0104 FB68     		ldr	r3, [r7, #12]
 6117 0106 9B68     		ldr	r3, [r3, #8]
 6118 0108 002B     		cmp	r3, #0
 6119 010a 02D1     		bne	.L351
 6120              		.loc 1 3601 0 is_stmt 0 discriminator 1
 6121 010c FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 172


 6122 010e BA6A     		ldr	r2, [r7, #40]
 6123 0110 9A60     		str	r2, [r3, #8]
 6124              	.L351:
3602:.\lib_Fat/ff.c **** 			}
3603:.\lib_Fat/ff.c **** #if _FS_TINY
3604:.\lib_Fat/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3605:.\lib_Fat/ff.c **** #else
3606:.\lib_Fat/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 6125              		.loc 1 3606 0 is_stmt 1
 6126 0112 FB68     		ldr	r3, [r7, #12]
 6127 0114 1B7C     		ldrb	r3, [r3, #16]
 6128 0116 DBB2     		uxtb	r3, r3
 6129 0118 5BB2     		sxtb	r3, r3
 6130 011a 002B     		cmp	r3, #0
 6131 011c 1ADA     		bge	.L359
3607:.\lib_Fat/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6132              		.loc 1 3607 0
 6133 011e 3B69     		ldr	r3, [r7, #16]
 6134 0120 5978     		ldrb	r1, [r3, #1]
 6135 0122 FB68     		ldr	r3, [r7, #12]
 6136 0124 2833     		add	r3, r3, #40
 6137 0126 1A1C     		mov	r2, r3
 6138 0128 FB68     		ldr	r3, [r7, #12]
 6139 012a DB69     		ldr	r3, [r3, #28]
 6140 012c 081C     		mov	r0, r1
 6141 012e 111C     		mov	r1, r2
 6142 0130 1A1C     		mov	r2, r3
 6143 0132 0123     		mov	r3, #1
 6144 0134 FFF7FEFF 		bl	disk_write
 6145 0138 031E     		sub	r3, r0, #0
 6146 013a 04D0     		beq	.L360
 6147              		.loc 1 3607 0 is_stmt 0 discriminator 1
 6148 013c FB68     		ldr	r3, [r7, #12]
 6149 013e 0122     		mov	r2, #1
 6150 0140 5A74     		strb	r2, [r3, #17]
 6151 0142 0123     		mov	r3, #1
 6152 0144 CEE0     		b	.L371
 6153              	.L360:
3608:.\lib_Fat/ff.c **** 				fp->flag &= ~FA_DIRTY;
 6154              		.loc 1 3608 0 is_stmt 1
 6155 0146 FB68     		ldr	r3, [r7, #12]
 6156 0148 1B7C     		ldrb	r3, [r3, #16]
 6157 014a 7F22     		mov	r2, #127
 6158 014c 1340     		and	r3, r2
 6159 014e DAB2     		uxtb	r2, r3
 6160 0150 FB68     		ldr	r3, [r7, #12]
 6161 0152 1A74     		strb	r2, [r3, #16]
 6162              	.L359:
3609:.\lib_Fat/ff.c **** 			}
3610:.\lib_Fat/ff.c **** #endif
3611:.\lib_Fat/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 6163              		.loc 1 3611 0
 6164 0154 3A69     		ldr	r2, [r7, #16]
 6165 0156 FB68     		ldr	r3, [r7, #12]
 6166 0158 9B69     		ldr	r3, [r3, #24]
 6167 015a 101C     		mov	r0, r2
 6168 015c 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 173


 6169 015e FFF7FEFF 		bl	clust2sect
 6170 0162 031C     		mov	r3, r0
 6171 0164 7B61     		str	r3, [r7, #20]
3612:.\lib_Fat/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 6172              		.loc 1 3612 0
 6173 0166 7B69     		ldr	r3, [r7, #20]
 6174 0168 002B     		cmp	r3, #0
 6175 016a 04D1     		bne	.L361
 6176              		.loc 1 3612 0 is_stmt 0 discriminator 1
 6177 016c FB68     		ldr	r3, [r7, #12]
 6178 016e 0222     		mov	r2, #2
 6179 0170 5A74     		strb	r2, [r3, #17]
 6180 0172 0223     		mov	r3, #2
 6181 0174 B6E0     		b	.L371
 6182              	.L361:
3613:.\lib_Fat/ff.c **** 			sect += csect;
 6183              		.loc 1 3613 0 is_stmt 1
 6184 0176 7A69     		ldr	r2, [r7, #20]
 6185 0178 BB69     		ldr	r3, [r7, #24]
 6186 017a D318     		add	r3, r2, r3
 6187 017c 7B61     		str	r3, [r7, #20]
3614:.\lib_Fat/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 6188              		.loc 1 3614 0
 6189 017e 7B68     		ldr	r3, [r7, #4]
 6190 0180 5B0A     		lsr	r3, r3, #9
 6191 0182 3B62     		str	r3, [r7, #32]
3615:.\lib_Fat/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 6192              		.loc 1 3615 0
 6193 0184 3B6A     		ldr	r3, [r7, #32]
 6194 0186 002B     		cmp	r3, #0
 6195 0188 3DD0     		beq	.L362
3616:.\lib_Fat/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6196              		.loc 1 3616 0
 6197 018a BA69     		ldr	r2, [r7, #24]
 6198 018c 3B6A     		ldr	r3, [r7, #32]
 6199 018e D318     		add	r3, r2, r3
 6200 0190 3A69     		ldr	r2, [r7, #16]
 6201 0192 5289     		ldrh	r2, [r2, #10]
 6202 0194 9342     		cmp	r3, r2
 6203 0196 05D9     		bls	.L363
3617:.\lib_Fat/ff.c **** 					cc = fs->csize - csect;
 6204              		.loc 1 3617 0
 6205 0198 3B69     		ldr	r3, [r7, #16]
 6206 019a 5B89     		ldrh	r3, [r3, #10]
 6207 019c 1A1C     		mov	r2, r3
 6208 019e BB69     		ldr	r3, [r7, #24]
 6209 01a0 D31A     		sub	r3, r2, r3
 6210 01a2 3B62     		str	r3, [r7, #32]
 6211              	.L363:
3618:.\lib_Fat/ff.c **** 				}
3619:.\lib_Fat/ff.c **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 6212              		.loc 1 3619 0
 6213 01a4 3B69     		ldr	r3, [r7, #16]
 6214 01a6 5878     		ldrb	r0, [r3, #1]
 6215 01a8 F969     		ldr	r1, [r7, #28]
 6216 01aa 7A69     		ldr	r2, [r7, #20]
 6217 01ac 3B6A     		ldr	r3, [r7, #32]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 174


 6218 01ae FFF7FEFF 		bl	disk_write
 6219 01b2 031E     		sub	r3, r0, #0
 6220 01b4 04D0     		beq	.L364
3620:.\lib_Fat/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 6221              		.loc 1 3620 0
 6222 01b6 FB68     		ldr	r3, [r7, #12]
 6223 01b8 0122     		mov	r2, #1
 6224 01ba 5A74     		strb	r2, [r3, #17]
 6225 01bc 0123     		mov	r3, #1
 6226 01be 91E0     		b	.L371
 6227              	.L364:
3621:.\lib_Fat/ff.c **** 				}
3622:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 2
3623:.\lib_Fat/ff.c **** #if _FS_TINY
3624:.\lib_Fat/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3625:.\lib_Fat/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3626:.\lib_Fat/ff.c **** 					fs->wflag = 0;
3627:.\lib_Fat/ff.c **** 				}
3628:.\lib_Fat/ff.c **** #else
3629:.\lib_Fat/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 6228              		.loc 1 3629 0
 6229 01c0 FB68     		ldr	r3, [r7, #12]
 6230 01c2 DA69     		ldr	r2, [r3, #28]
 6231 01c4 7B69     		ldr	r3, [r7, #20]
 6232 01c6 D21A     		sub	r2, r2, r3
 6233 01c8 3B6A     		ldr	r3, [r7, #32]
 6234 01ca 9A42     		cmp	r2, r3
 6235 01cc 17D2     		bcs	.L365
3630:.\lib_Fat/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 6236              		.loc 1 3630 0
 6237 01ce FB68     		ldr	r3, [r7, #12]
 6238 01d0 2833     		add	r3, r3, #40
 6239 01d2 191C     		mov	r1, r3
 6240 01d4 FB68     		ldr	r3, [r7, #12]
 6241 01d6 DA69     		ldr	r2, [r3, #28]
 6242 01d8 7B69     		ldr	r3, [r7, #20]
 6243 01da D31A     		sub	r3, r2, r3
 6244 01dc 5B02     		lsl	r3, r3, #9
 6245 01de FA69     		ldr	r2, [r7, #28]
 6246 01e0 D218     		add	r2, r2, r3
 6247 01e2 8023     		mov	r3, #128
 6248 01e4 9B00     		lsl	r3, r3, #2
 6249 01e6 081C     		mov	r0, r1
 6250 01e8 111C     		mov	r1, r2
 6251 01ea 1A1C     		mov	r2, r3
 6252 01ec FFF7FEFF 		bl	mem_cpy
3631:.\lib_Fat/ff.c **** 					fp->flag &= ~FA_DIRTY;
 6253              		.loc 1 3631 0
 6254 01f0 FB68     		ldr	r3, [r7, #12]
 6255 01f2 1B7C     		ldrb	r3, [r3, #16]
 6256 01f4 7F22     		mov	r2, #127
 6257 01f6 1340     		and	r3, r2
 6258 01f8 DAB2     		uxtb	r2, r3
 6259 01fa FB68     		ldr	r3, [r7, #12]
 6260 01fc 1A74     		strb	r2, [r3, #16]
 6261              	.L365:
3632:.\lib_Fat/ff.c **** 				}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 175


3633:.\lib_Fat/ff.c **** #endif
3634:.\lib_Fat/ff.c **** #endif
3635:.\lib_Fat/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 6262              		.loc 1 3635 0
 6263 01fe 3B6A     		ldr	r3, [r7, #32]
 6264 0200 5B02     		lsl	r3, r3, #9
 6265 0202 7B62     		str	r3, [r7, #36]
3636:.\lib_Fat/ff.c **** 				continue;
 6266              		.loc 1 3636 0
 6267 0204 44E0     		b	.L366
 6268              	.L362:
3637:.\lib_Fat/ff.c **** 			}
3638:.\lib_Fat/ff.c **** #if _FS_TINY
3639:.\lib_Fat/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
3640:.\lib_Fat/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3641:.\lib_Fat/ff.c **** 				fs->winsect = sect;
3642:.\lib_Fat/ff.c **** 			}
3643:.\lib_Fat/ff.c **** #else
3644:.\lib_Fat/ff.c **** 			if (fp->sect != sect) {		/* Fill sector cache with file data */
 6269              		.loc 1 3644 0
 6270 0206 FB68     		ldr	r3, [r7, #12]
 6271 0208 DA69     		ldr	r2, [r3, #28]
 6272 020a 7B69     		ldr	r3, [r7, #20]
 6273 020c 9A42     		cmp	r2, r3
 6274 020e 18D0     		beq	.L367
3645:.\lib_Fat/ff.c **** 				if (fp->fptr < fp->obj.objsize &&
 6275              		.loc 1 3645 0
 6276 0210 FB68     		ldr	r3, [r7, #12]
 6277 0212 5A69     		ldr	r2, [r3, #20]
 6278 0214 FB68     		ldr	r3, [r7, #12]
 6279 0216 DB68     		ldr	r3, [r3, #12]
 6280 0218 9A42     		cmp	r2, r3
 6281 021a 12D2     		bcs	.L367
3646:.\lib_Fat/ff.c **** 					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 6282              		.loc 1 3646 0 discriminator 1
 6283 021c 3B69     		ldr	r3, [r7, #16]
 6284 021e 5978     		ldrb	r1, [r3, #1]
 6285 0220 FB68     		ldr	r3, [r7, #12]
 6286 0222 2833     		add	r3, r3, #40
 6287 0224 1A1C     		mov	r2, r3
 6288 0226 7B69     		ldr	r3, [r7, #20]
 6289 0228 081C     		mov	r0, r1
 6290 022a 111C     		mov	r1, r2
 6291 022c 1A1C     		mov	r2, r3
 6292 022e 0123     		mov	r3, #1
 6293 0230 FFF7FEFF 		bl	disk_read
 6294 0234 031E     		sub	r3, r0, #0
3645:.\lib_Fat/ff.c **** 				if (fp->fptr < fp->obj.objsize &&
 6295              		.loc 1 3645 0 discriminator 1
 6296 0236 04D0     		beq	.L367
3647:.\lib_Fat/ff.c **** 						ABORT(fs, FR_DISK_ERR);
 6297              		.loc 1 3647 0
 6298 0238 FB68     		ldr	r3, [r7, #12]
 6299 023a 0122     		mov	r2, #1
 6300 023c 5A74     		strb	r2, [r3, #17]
 6301 023e 0123     		mov	r3, #1
 6302 0240 50E0     		b	.L371
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 176


 6303              	.L367:
3648:.\lib_Fat/ff.c **** 				}
3649:.\lib_Fat/ff.c **** 			}
3650:.\lib_Fat/ff.c **** #endif
3651:.\lib_Fat/ff.c **** 			fp->sect = sect;
 6304              		.loc 1 3651 0
 6305 0242 FB68     		ldr	r3, [r7, #12]
 6306 0244 7A69     		ldr	r2, [r7, #20]
 6307 0246 DA61     		str	r2, [r3, #28]
 6308              	.L350:
3652:.\lib_Fat/ff.c **** 		}
3653:.\lib_Fat/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 6309              		.loc 1 3653 0
 6310 0248 FB68     		ldr	r3, [r7, #12]
 6311 024a 5B69     		ldr	r3, [r3, #20]
 6312 024c DB05     		lsl	r3, r3, #23
 6313 024e DB0D     		lsr	r3, r3, #23
 6314 0250 8022     		mov	r2, #128
 6315 0252 9200     		lsl	r2, r2, #2
 6316 0254 D31A     		sub	r3, r2, r3
 6317 0256 7B62     		str	r3, [r7, #36]
3654:.\lib_Fat/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 6318              		.loc 1 3654 0
 6319 0258 7A6A     		ldr	r2, [r7, #36]
 6320 025a 7B68     		ldr	r3, [r7, #4]
 6321 025c 9A42     		cmp	r2, r3
 6322 025e 01D9     		bls	.L368
 6323              		.loc 1 3654 0 is_stmt 0 discriminator 1
 6324 0260 7B68     		ldr	r3, [r7, #4]
 6325 0262 7B62     		str	r3, [r7, #36]
 6326              	.L368:
3655:.\lib_Fat/ff.c **** #if _FS_TINY
3656:.\lib_Fat/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3657:.\lib_Fat/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3658:.\lib_Fat/ff.c **** 		fs->wflag = 1;
3659:.\lib_Fat/ff.c **** #else
3660:.\lib_Fat/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 6327              		.loc 1 3660 0 is_stmt 1
 6328 0264 FB68     		ldr	r3, [r7, #12]
 6329 0266 5B69     		ldr	r3, [r3, #20]
 6330 0268 DB05     		lsl	r3, r3, #23
 6331 026a DB0D     		lsr	r3, r3, #23
 6332 026c 2833     		add	r3, r3, #40
 6333 026e FA68     		ldr	r2, [r7, #12]
 6334 0270 D118     		add	r1, r2, r3
 6335 0272 FA69     		ldr	r2, [r7, #28]
 6336 0274 7B6A     		ldr	r3, [r7, #36]
 6337 0276 081C     		mov	r0, r1
 6338 0278 111C     		mov	r1, r2
 6339 027a 1A1C     		mov	r2, r3
 6340 027c FFF7FEFF 		bl	mem_cpy
3661:.\lib_Fat/ff.c **** 		fp->flag |= FA_DIRTY;
 6341              		.loc 1 3661 0
 6342 0280 FB68     		ldr	r3, [r7, #12]
 6343 0282 1B7C     		ldrb	r3, [r3, #16]
 6344 0284 8022     		mov	r2, #128
 6345 0286 5242     		neg	r2, r2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 177


 6346 0288 1343     		orr	r3, r2
 6347 028a DAB2     		uxtb	r2, r3
 6348 028c FB68     		ldr	r3, [r7, #12]
 6349 028e 1A74     		strb	r2, [r3, #16]
 6350              	.L366:
3578:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 6351              		.loc 1 3578 0
 6352 0290 FA69     		ldr	r2, [r7, #28]
 6353 0292 7B6A     		ldr	r3, [r7, #36]
 6354 0294 D318     		add	r3, r2, r3
 6355 0296 FB61     		str	r3, [r7, #28]
 6356 0298 FB68     		ldr	r3, [r7, #12]
 6357 029a 5A69     		ldr	r2, [r3, #20]
 6358 029c 7B6A     		ldr	r3, [r7, #36]
 6359 029e D218     		add	r2, r2, r3
 6360 02a0 FB68     		ldr	r3, [r7, #12]
 6361 02a2 5A61     		str	r2, [r3, #20]
 6362 02a4 FB68     		ldr	r3, [r7, #12]
 6363 02a6 D968     		ldr	r1, [r3, #12]
 6364 02a8 FB68     		ldr	r3, [r7, #12]
 6365 02aa 5A69     		ldr	r2, [r3, #20]
 6366 02ac 0B1E     		sub	r3, r1, #0
 6367 02ae 9342     		cmp	r3, r2
 6368 02b0 00D2     		bcs	.L369
 6369 02b2 131C     		mov	r3, r2
 6370              	.L369:
 6371 02b4 FA68     		ldr	r2, [r7, #12]
 6372 02b6 D360     		str	r3, [r2, #12]
 6373 02b8 3B68     		ldr	r3, [r7]
 6374 02ba 1A68     		ldr	r2, [r3]
 6375 02bc 7B6A     		ldr	r3, [r7, #36]
 6376 02be D218     		add	r2, r2, r3
 6377 02c0 3B68     		ldr	r3, [r7]
 6378 02c2 1A60     		str	r2, [r3]
 6379 02c4 7A68     		ldr	r2, [r7, #4]
 6380 02c6 7B6A     		ldr	r3, [r7, #36]
 6381 02c8 D31A     		sub	r3, r2, r3
 6382 02ca 7B60     		str	r3, [r7, #4]
 6383              	.L349:
3577:.\lib_Fat/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 6384              		.loc 1 3577 0
 6385 02cc 7B68     		ldr	r3, [r7, #4]
 6386 02ce 002B     		cmp	r3, #0
 6387 02d0 00D0     		beq	.LCB5776
 6388 02d2 D4E6     		b	.L370	@long jump
 6389              	.LCB5776:
 6390              	.L356:
3662:.\lib_Fat/ff.c **** #endif
3663:.\lib_Fat/ff.c **** 	}
3664:.\lib_Fat/ff.c **** 
3665:.\lib_Fat/ff.c **** 	fp->flag |= FA_MODIFIED;						/* Set file change flag */
 6391              		.loc 1 3665 0
 6392 02d4 FB68     		ldr	r3, [r7, #12]
 6393 02d6 1B7C     		ldrb	r3, [r3, #16]
 6394 02d8 4022     		mov	r2, #64
 6395 02da 1343     		orr	r3, r2
 6396 02dc DAB2     		uxtb	r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 178


 6397 02de FB68     		ldr	r3, [r7, #12]
 6398 02e0 1A74     		strb	r2, [r3, #16]
3666:.\lib_Fat/ff.c **** 
3667:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, FR_OK);
 6399              		.loc 1 3667 0
 6400 02e2 0023     		mov	r3, #0
 6401              	.L371:
3668:.\lib_Fat/ff.c **** }
 6402              		.loc 1 3668 0 discriminator 1
 6403 02e4 181C     		mov	r0, r3
 6404 02e6 BD46     		mov	sp, r7
 6405 02e8 0DB0     		add	sp, sp, #52
 6406              		@ sp needed
 6407 02ea 90BD     		pop	{r4, r7, pc}
 6408              		.cfi_endproc
 6409              	.LFE35:
 6410              		.size	f_write, .-f_write
 6411              		.section	.text.f_sync,"ax",%progbits
 6412              		.align	2
 6413              		.global	f_sync
 6414              		.code	16
 6415              		.thumb_func
 6416              		.type	f_sync, %function
 6417              	f_sync:
 6418              	.LFB36:
3669:.\lib_Fat/ff.c **** 
3670:.\lib_Fat/ff.c **** 
3671:.\lib_Fat/ff.c **** 
3672:.\lib_Fat/ff.c **** 
3673:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3674:.\lib_Fat/ff.c **** /* Synchronize the File                                                  */
3675:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3676:.\lib_Fat/ff.c **** 
3677:.\lib_Fat/ff.c **** FRESULT f_sync (
3678:.\lib_Fat/ff.c **** 	FIL* fp		/* Pointer to the file object */
3679:.\lib_Fat/ff.c **** )
3680:.\lib_Fat/ff.c **** {
 6419              		.loc 1 3680 0
 6420              		.cfi_startproc
 6421 0000 90B5     		push	{r4, r7, lr}
 6422              		.cfi_def_cfa_offset 12
 6423              		.cfi_offset 4, -12
 6424              		.cfi_offset 7, -8
 6425              		.cfi_offset 14, -4
 6426 0002 87B0     		sub	sp, sp, #28
 6427              		.cfi_def_cfa_offset 40
 6428 0004 00AF     		add	r7, sp, #0
 6429              		.cfi_def_cfa_register 7
 6430 0006 7860     		str	r0, [r7, #4]
3681:.\lib_Fat/ff.c **** 	FRESULT res;
3682:.\lib_Fat/ff.c **** 	FATFS *fs;
3683:.\lib_Fat/ff.c **** 	DWORD tm;
3684:.\lib_Fat/ff.c **** 	BYTE *dir;
3685:.\lib_Fat/ff.c **** 	DEF_NAMBUF
3686:.\lib_Fat/ff.c **** 
3687:.\lib_Fat/ff.c **** 
3688:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);	/* Check validity of the object */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 179


 6431              		.loc 1 3688 0
 6432 0008 1723     		mov	r3, #23
 6433 000a FC18     		add	r4, r7, r3
 6434 000c 7A68     		ldr	r2, [r7, #4]
 6435 000e 0823     		mov	r3, #8
 6436 0010 FB18     		add	r3, r7, r3
 6437 0012 101C     		mov	r0, r2
 6438 0014 191C     		mov	r1, r3
 6439 0016 FFF7FEFF 		bl	validate
 6440 001a 031C     		mov	r3, r0
 6441 001c 2370     		strb	r3, [r4]
3689:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 6442              		.loc 1 3689 0
 6443 001e 1723     		mov	r3, #23
 6444 0020 FB18     		add	r3, r7, r3
 6445 0022 1B78     		ldrb	r3, [r3]
 6446 0024 002B     		cmp	r3, #0
 6447 0026 74D1     		bne	.L373
3690:.\lib_Fat/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 6448              		.loc 1 3690 0
 6449 0028 7B68     		ldr	r3, [r7, #4]
 6450 002a 1B7C     		ldrb	r3, [r3, #16]
 6451 002c 1A1C     		mov	r2, r3
 6452 002e 4023     		mov	r3, #64
 6453 0030 1340     		and	r3, r2
 6454 0032 6ED0     		beq	.L373
3691:.\lib_Fat/ff.c **** #if !_FS_TINY
3692:.\lib_Fat/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 6455              		.loc 1 3692 0
 6456 0034 7B68     		ldr	r3, [r7, #4]
 6457 0036 1B7C     		ldrb	r3, [r3, #16]
 6458 0038 DBB2     		uxtb	r3, r3
 6459 003a 5BB2     		sxtb	r3, r3
 6460 003c 002B     		cmp	r3, #0
 6461 003e 17DA     		bge	.L374
3693:.\lib_Fat/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 6462              		.loc 1 3693 0
 6463 0040 BB68     		ldr	r3, [r7, #8]
 6464 0042 5978     		ldrb	r1, [r3, #1]
 6465 0044 7B68     		ldr	r3, [r7, #4]
 6466 0046 2833     		add	r3, r3, #40
 6467 0048 1A1C     		mov	r2, r3
 6468 004a 7B68     		ldr	r3, [r7, #4]
 6469 004c DB69     		ldr	r3, [r3, #28]
 6470 004e 081C     		mov	r0, r1
 6471 0050 111C     		mov	r1, r2
 6472 0052 1A1C     		mov	r2, r3
 6473 0054 0123     		mov	r3, #1
 6474 0056 FFF7FEFF 		bl	disk_write
 6475 005a 031E     		sub	r3, r0, #0
 6476 005c 01D0     		beq	.L375
 6477              		.loc 1 3693 0 is_stmt 0 discriminator 1
 6478 005e 0123     		mov	r3, #1
 6479 0060 5AE0     		b	.L377
 6480              	.L375:
3694:.\lib_Fat/ff.c **** 				fp->flag &= ~FA_DIRTY;
 6481              		.loc 1 3694 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 180


 6482 0062 7B68     		ldr	r3, [r7, #4]
 6483 0064 1B7C     		ldrb	r3, [r3, #16]
 6484 0066 7F22     		mov	r2, #127
 6485 0068 1340     		and	r3, r2
 6486 006a DAB2     		uxtb	r2, r3
 6487 006c 7B68     		ldr	r3, [r7, #4]
 6488 006e 1A74     		strb	r2, [r3, #16]
 6489              	.L374:
3695:.\lib_Fat/ff.c **** 			}
3696:.\lib_Fat/ff.c **** #endif
3697:.\lib_Fat/ff.c **** 			/* Update the directory entry */
3698:.\lib_Fat/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
 6490              		.loc 1 3698 0
 6491 0070 0023     		mov	r3, #0
 6492 0072 3B61     		str	r3, [r7, #16]
3699:.\lib_Fat/ff.c **** #if _FS_EXFAT
3700:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3701:.\lib_Fat/ff.c **** 				res = fill_fat_chain(&fp->obj);	/* Create FAT chain if needed */
3702:.\lib_Fat/ff.c **** 				if (res == FR_OK) {
3703:.\lib_Fat/ff.c **** 					DIR dj;
3704:.\lib_Fat/ff.c **** 
3705:.\lib_Fat/ff.c **** 					INIT_NAMBUF(fs);
3706:.\lib_Fat/ff.c **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3707:.\lib_Fat/ff.c **** 					if (res == FR_OK) {
3708:.\lib_Fat/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3709:.\lib_Fat/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3710:.\lib_Fat/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3711:.\lib_Fat/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3712:.\lib_Fat/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3713:.\lib_Fat/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3714:.\lib_Fat/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3715:.\lib_Fat/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3716:.\lib_Fat/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3717:.\lib_Fat/ff.c **** 						if (res == FR_OK) {
3718:.\lib_Fat/ff.c **** 							res = sync_fs(fs);
3719:.\lib_Fat/ff.c **** 							fp->flag &= ~FA_MODIFIED;
3720:.\lib_Fat/ff.c **** 						}
3721:.\lib_Fat/ff.c **** 					}
3722:.\lib_Fat/ff.c **** 					FREE_NAMBUF();
3723:.\lib_Fat/ff.c **** 				}
3724:.\lib_Fat/ff.c **** 			} else
3725:.\lib_Fat/ff.c **** #endif
3726:.\lib_Fat/ff.c **** 			{
3727:.\lib_Fat/ff.c **** 				res = move_window(fs, fp->dir_sect);
 6493              		.loc 1 3727 0
 6494 0074 BA68     		ldr	r2, [r7, #8]
 6495 0076 7B68     		ldr	r3, [r7, #4]
 6496 0078 1B6A     		ldr	r3, [r3, #32]
 6497 007a 1721     		mov	r1, #23
 6498 007c 7C18     		add	r4, r7, r1
 6499 007e 101C     		mov	r0, r2
 6500 0080 191C     		mov	r1, r3
 6501 0082 FFF7FEFF 		bl	move_window
 6502 0086 031C     		mov	r3, r0
 6503 0088 2370     		strb	r3, [r4]
3728:.\lib_Fat/ff.c **** 				if (res == FR_OK) {
 6504              		.loc 1 3728 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 181


 6505 008a 1723     		mov	r3, #23
 6506 008c FB18     		add	r3, r7, r3
 6507 008e 1B78     		ldrb	r3, [r3]
 6508 0090 002B     		cmp	r3, #0
 6509 0092 3ED1     		bne	.L373
3729:.\lib_Fat/ff.c **** 					dir = fp->dir_ptr;
 6510              		.loc 1 3729 0
 6511 0094 7B68     		ldr	r3, [r7, #4]
 6512 0096 5B6A     		ldr	r3, [r3, #36]
 6513 0098 FB60     		str	r3, [r7, #12]
3730:.\lib_Fat/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 6514              		.loc 1 3730 0
 6515 009a FB68     		ldr	r3, [r7, #12]
 6516 009c 0B33     		add	r3, r3, #11
 6517 009e FA68     		ldr	r2, [r7, #12]
 6518 00a0 0B32     		add	r2, r2, #11
 6519 00a2 1278     		ldrb	r2, [r2]
 6520 00a4 2021     		mov	r1, #32
 6521 00a6 0A43     		orr	r2, r1
 6522 00a8 D2B2     		uxtb	r2, r2
 6523 00aa 1A70     		strb	r2, [r3]
3731:.\lib_Fat/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 6524              		.loc 1 3731 0
 6525 00ac 7B68     		ldr	r3, [r7, #4]
 6526 00ae 1968     		ldr	r1, [r3]
 6527 00b0 7B68     		ldr	r3, [r7, #4]
 6528 00b2 9B68     		ldr	r3, [r3, #8]
 6529 00b4 FA68     		ldr	r2, [r7, #12]
 6530 00b6 081C     		mov	r0, r1
 6531 00b8 111C     		mov	r1, r2
 6532 00ba 1A1C     		mov	r2, r3
 6533 00bc FFF7FEFF 		bl	st_clust
3732:.\lib_Fat/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 6534              		.loc 1 3732 0
 6535 00c0 FB68     		ldr	r3, [r7, #12]
 6536 00c2 1C33     		add	r3, r3, #28
 6537 00c4 1A1C     		mov	r2, r3
 6538 00c6 7B68     		ldr	r3, [r7, #4]
 6539 00c8 DB68     		ldr	r3, [r3, #12]
 6540 00ca 101C     		mov	r0, r2
 6541 00cc 191C     		mov	r1, r3
 6542 00ce FFF7FEFF 		bl	st_dword
3733:.\lib_Fat/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 6543              		.loc 1 3733 0
 6544 00d2 FB68     		ldr	r3, [r7, #12]
 6545 00d4 1633     		add	r3, r3, #22
 6546 00d6 1A1C     		mov	r2, r3
 6547 00d8 3B69     		ldr	r3, [r7, #16]
 6548 00da 101C     		mov	r0, r2
 6549 00dc 191C     		mov	r1, r3
 6550 00de FFF7FEFF 		bl	st_dword
3734:.\lib_Fat/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 6551              		.loc 1 3734 0
 6552 00e2 FB68     		ldr	r3, [r7, #12]
 6553 00e4 1233     		add	r3, r3, #18
 6554 00e6 181C     		mov	r0, r3
 6555 00e8 0021     		mov	r1, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 182


 6556 00ea FFF7FEFF 		bl	st_word
3735:.\lib_Fat/ff.c **** 					fs->wflag = 1;
 6557              		.loc 1 3735 0
 6558 00ee BB68     		ldr	r3, [r7, #8]
 6559 00f0 0122     		mov	r2, #1
 6560 00f2 DA70     		strb	r2, [r3, #3]
3736:.\lib_Fat/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 6561              		.loc 1 3736 0
 6562 00f4 BB68     		ldr	r3, [r7, #8]
 6563 00f6 1722     		mov	r2, #23
 6564 00f8 BC18     		add	r4, r7, r2
 6565 00fa 181C     		mov	r0, r3
 6566 00fc FFF7FEFF 		bl	sync_fs
 6567 0100 031C     		mov	r3, r0
 6568 0102 2370     		strb	r3, [r4]
3737:.\lib_Fat/ff.c **** 					fp->flag &= ~FA_MODIFIED;
 6569              		.loc 1 3737 0
 6570 0104 7B68     		ldr	r3, [r7, #4]
 6571 0106 1B7C     		ldrb	r3, [r3, #16]
 6572 0108 4022     		mov	r2, #64
 6573 010a 9343     		bic	r3, r2
 6574 010c DAB2     		uxtb	r2, r3
 6575 010e 7B68     		ldr	r3, [r7, #4]
 6576 0110 1A74     		strb	r2, [r3, #16]
 6577              	.L373:
3738:.\lib_Fat/ff.c **** 				}
3739:.\lib_Fat/ff.c **** 			}
3740:.\lib_Fat/ff.c **** 		}
3741:.\lib_Fat/ff.c **** 	}
3742:.\lib_Fat/ff.c **** 
3743:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 6578              		.loc 1 3743 0
 6579 0112 1723     		mov	r3, #23
 6580 0114 FB18     		add	r3, r7, r3
 6581 0116 1B78     		ldrb	r3, [r3]
 6582              	.L377:
3744:.\lib_Fat/ff.c **** }
 6583              		.loc 1 3744 0 discriminator 1
 6584 0118 181C     		mov	r0, r3
 6585 011a BD46     		mov	sp, r7
 6586 011c 07B0     		add	sp, sp, #28
 6587              		@ sp needed
 6588 011e 90BD     		pop	{r4, r7, pc}
 6589              		.cfi_endproc
 6590              	.LFE36:
 6591              		.size	f_sync, .-f_sync
 6592              		.section	.text.f_close,"ax",%progbits
 6593              		.align	2
 6594              		.global	f_close
 6595              		.code	16
 6596              		.thumb_func
 6597              		.type	f_close, %function
 6598              	f_close:
 6599              	.LFB37:
3745:.\lib_Fat/ff.c **** 
3746:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
3747:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 183


3748:.\lib_Fat/ff.c **** 
3749:.\lib_Fat/ff.c **** 
3750:.\lib_Fat/ff.c **** 
3751:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3752:.\lib_Fat/ff.c **** /* Close File                                                            */
3753:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3754:.\lib_Fat/ff.c **** 
3755:.\lib_Fat/ff.c **** FRESULT f_close (
3756:.\lib_Fat/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
3757:.\lib_Fat/ff.c **** )
3758:.\lib_Fat/ff.c **** {
 6600              		.loc 1 3758 0
 6601              		.cfi_startproc
 6602 0000 90B5     		push	{r4, r7, lr}
 6603              		.cfi_def_cfa_offset 12
 6604              		.cfi_offset 4, -12
 6605              		.cfi_offset 7, -8
 6606              		.cfi_offset 14, -4
 6607 0002 85B0     		sub	sp, sp, #20
 6608              		.cfi_def_cfa_offset 32
 6609 0004 00AF     		add	r7, sp, #0
 6610              		.cfi_def_cfa_register 7
 6611 0006 7860     		str	r0, [r7, #4]
3759:.\lib_Fat/ff.c **** 	FRESULT res;
3760:.\lib_Fat/ff.c **** 	FATFS *fs;
3761:.\lib_Fat/ff.c **** 
3762:.\lib_Fat/ff.c **** #if !_FS_READONLY
3763:.\lib_Fat/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 6612              		.loc 1 3763 0
 6613 0008 0F23     		mov	r3, #15
 6614 000a FC18     		add	r4, r7, r3
 6615 000c 7B68     		ldr	r3, [r7, #4]
 6616 000e 181C     		mov	r0, r3
 6617 0010 FFF7FEFF 		bl	f_sync
 6618 0014 031C     		mov	r3, r0
 6619 0016 2370     		strb	r3, [r4]
3764:.\lib_Fat/ff.c **** 	if (res == FR_OK)
 6620              		.loc 1 3764 0
 6621 0018 0F23     		mov	r3, #15
 6622 001a FB18     		add	r3, r7, r3
 6623 001c 1B78     		ldrb	r3, [r3]
 6624 001e 002B     		cmp	r3, #0
 6625 0020 12D1     		bne	.L379
3765:.\lib_Fat/ff.c **** #endif
3766:.\lib_Fat/ff.c **** 	{
3767:.\lib_Fat/ff.c **** 		res = validate(fp, &fs);	/* Lock volume */
 6626              		.loc 1 3767 0
 6627 0022 0F23     		mov	r3, #15
 6628 0024 FC18     		add	r4, r7, r3
 6629 0026 7A68     		ldr	r2, [r7, #4]
 6630 0028 0823     		mov	r3, #8
 6631 002a FB18     		add	r3, r7, r3
 6632 002c 101C     		mov	r0, r2
 6633 002e 191C     		mov	r1, r3
 6634 0030 FFF7FEFF 		bl	validate
 6635 0034 031C     		mov	r3, r0
 6636 0036 2370     		strb	r3, [r4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 184


3768:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
 6637              		.loc 1 3768 0
 6638 0038 0F23     		mov	r3, #15
 6639 003a FB18     		add	r3, r7, r3
 6640 003c 1B78     		ldrb	r3, [r3]
 6641 003e 002B     		cmp	r3, #0
 6642 0040 02D1     		bne	.L379
3769:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
3770:.\lib_Fat/ff.c **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
3771:.\lib_Fat/ff.c **** 			if (res == FR_OK)
3772:.\lib_Fat/ff.c **** #endif
3773:.\lib_Fat/ff.c **** 			{
3774:.\lib_Fat/ff.c **** 				fp->obj.fs = 0;			/* Invalidate file object */
 6643              		.loc 1 3774 0
 6644 0042 7B68     		ldr	r3, [r7, #4]
 6645 0044 0022     		mov	r2, #0
 6646 0046 1A60     		str	r2, [r3]
 6647              	.L379:
3775:.\lib_Fat/ff.c **** 			}
3776:.\lib_Fat/ff.c **** #if _FS_REENTRANT
3777:.\lib_Fat/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
3778:.\lib_Fat/ff.c **** #endif
3779:.\lib_Fat/ff.c **** 		}
3780:.\lib_Fat/ff.c **** 	}
3781:.\lib_Fat/ff.c **** 	return res;
 6648              		.loc 1 3781 0
 6649 0048 0F23     		mov	r3, #15
 6650 004a FB18     		add	r3, r7, r3
 6651 004c 1B78     		ldrb	r3, [r3]
3782:.\lib_Fat/ff.c **** }
 6652              		.loc 1 3782 0
 6653 004e 181C     		mov	r0, r3
 6654 0050 BD46     		mov	sp, r7
 6655 0052 05B0     		add	sp, sp, #20
 6656              		@ sp needed
 6657 0054 90BD     		pop	{r4, r7, pc}
 6658              		.cfi_endproc
 6659              	.LFE37:
 6660              		.size	f_close, .-f_close
 6661 0056 C046     		.section	.text.f_lseek,"ax",%progbits
 6662              		.align	2
 6663              		.global	f_lseek
 6664              		.code	16
 6665              		.thumb_func
 6666              		.type	f_lseek, %function
 6667              	f_lseek:
 6668              	.LFB38:
3783:.\lib_Fat/ff.c **** 
3784:.\lib_Fat/ff.c **** 
3785:.\lib_Fat/ff.c **** 
3786:.\lib_Fat/ff.c **** 
3787:.\lib_Fat/ff.c **** #if _FS_RPATH >= 1
3788:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3789:.\lib_Fat/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
3790:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3791:.\lib_Fat/ff.c **** 
3792:.\lib_Fat/ff.c **** #if _VOLUMES >= 2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 185


3793:.\lib_Fat/ff.c **** FRESULT f_chdrive (
3794:.\lib_Fat/ff.c **** 	const TCHAR* path		/* Drive number */
3795:.\lib_Fat/ff.c **** )
3796:.\lib_Fat/ff.c **** {
3797:.\lib_Fat/ff.c **** 	int vol;
3798:.\lib_Fat/ff.c **** 
3799:.\lib_Fat/ff.c **** 
3800:.\lib_Fat/ff.c **** 	vol = get_ldnumber(&path);
3801:.\lib_Fat/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3802:.\lib_Fat/ff.c **** 
3803:.\lib_Fat/ff.c **** 	CurrVol = (BYTE)vol;
3804:.\lib_Fat/ff.c **** 
3805:.\lib_Fat/ff.c **** 	return FR_OK;
3806:.\lib_Fat/ff.c **** }
3807:.\lib_Fat/ff.c **** #endif
3808:.\lib_Fat/ff.c **** 
3809:.\lib_Fat/ff.c **** 
3810:.\lib_Fat/ff.c **** FRESULT f_chdir (
3811:.\lib_Fat/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3812:.\lib_Fat/ff.c **** )
3813:.\lib_Fat/ff.c **** {
3814:.\lib_Fat/ff.c **** 	FRESULT res;
3815:.\lib_Fat/ff.c **** 	DIR dj;
3816:.\lib_Fat/ff.c **** 	FATFS *fs;
3817:.\lib_Fat/ff.c **** 	DEF_NAMBUF
3818:.\lib_Fat/ff.c **** 
3819:.\lib_Fat/ff.c **** 	/* Get logical drive number */
3820:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, 0);
3821:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
3822:.\lib_Fat/ff.c **** 		dj.obj.fs = fs;
3823:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
3824:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3825:.\lib_Fat/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3826:.\lib_Fat/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3827:.\lib_Fat/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3828:.\lib_Fat/ff.c **** #if _FS_EXFAT
3829:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3830:.\lib_Fat/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
3831:.\lib_Fat/ff.c **** 					fs->cdc_size = dj.obj.c_size;
3832:.\lib_Fat/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
3833:.\lib_Fat/ff.c **** 				}
3834:.\lib_Fat/ff.c **** #endif
3835:.\lib_Fat/ff.c **** 			} else {
3836:.\lib_Fat/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3837:.\lib_Fat/ff.c **** #if _FS_EXFAT
3838:.\lib_Fat/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
3839:.\lib_Fat/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3840:.\lib_Fat/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3841:.\lib_Fat/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3842:.\lib_Fat/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
3843:.\lib_Fat/ff.c **** 					} else
3844:.\lib_Fat/ff.c **** #endif
3845:.\lib_Fat/ff.c **** 					{
3846:.\lib_Fat/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3847:.\lib_Fat/ff.c **** 					}
3848:.\lib_Fat/ff.c **** 				} else {
3849:.\lib_Fat/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 186


3850:.\lib_Fat/ff.c **** 				}
3851:.\lib_Fat/ff.c **** 			}
3852:.\lib_Fat/ff.c **** 		}
3853:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
3854:.\lib_Fat/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3855:.\lib_Fat/ff.c **** 	}
3856:.\lib_Fat/ff.c **** 
3857:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
3858:.\lib_Fat/ff.c **** }
3859:.\lib_Fat/ff.c **** 
3860:.\lib_Fat/ff.c **** 
3861:.\lib_Fat/ff.c **** #if _FS_RPATH >= 2
3862:.\lib_Fat/ff.c **** FRESULT f_getcwd (
3863:.\lib_Fat/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3864:.\lib_Fat/ff.c **** 	UINT len		/* Size of path */
3865:.\lib_Fat/ff.c **** )
3866:.\lib_Fat/ff.c **** {
3867:.\lib_Fat/ff.c **** 	FRESULT res;
3868:.\lib_Fat/ff.c **** 	DIR dj;
3869:.\lib_Fat/ff.c **** 	FATFS *fs;
3870:.\lib_Fat/ff.c **** 	UINT i, n;
3871:.\lib_Fat/ff.c **** 	DWORD ccl;
3872:.\lib_Fat/ff.c **** 	TCHAR *tp;
3873:.\lib_Fat/ff.c **** 	FILINFO fno;
3874:.\lib_Fat/ff.c **** 	DEF_NAMBUF
3875:.\lib_Fat/ff.c **** 
3876:.\lib_Fat/ff.c **** 
3877:.\lib_Fat/ff.c **** 	*buff = 0;
3878:.\lib_Fat/ff.c **** 	/* Get logical drive number */
3879:.\lib_Fat/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3880:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
3881:.\lib_Fat/ff.c **** 		dj.obj.fs = fs;
3882:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
3883:.\lib_Fat/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3884:.\lib_Fat/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3885:.\lib_Fat/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3886:.\lib_Fat/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3887:.\lib_Fat/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3888:.\lib_Fat/ff.c **** 				if (res != FR_OK) break;
3889:.\lib_Fat/ff.c **** 				res = move_window(fs, dj.sect);
3890:.\lib_Fat/ff.c **** 				if (res != FR_OK) break;
3891:.\lib_Fat/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3892:.\lib_Fat/ff.c **** 				res = dir_sdi(&dj, 0);
3893:.\lib_Fat/ff.c **** 				if (res != FR_OK) break;
3894:.\lib_Fat/ff.c **** 				do {							/* Find the entry links to the child directory */
3895:.\lib_Fat/ff.c **** 					res = dir_read(&dj, 0);
3896:.\lib_Fat/ff.c **** 					if (res != FR_OK) break;
3897:.\lib_Fat/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3898:.\lib_Fat/ff.c **** 					res = dir_next(&dj, 0);
3899:.\lib_Fat/ff.c **** 				} while (res == FR_OK);
3900:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3901:.\lib_Fat/ff.c **** 				if (res != FR_OK) break;
3902:.\lib_Fat/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3903:.\lib_Fat/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;
3904:.\lib_Fat/ff.c **** 				if (i < n + 3) {
3905:.\lib_Fat/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
3906:.\lib_Fat/ff.c **** 				}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 187


3907:.\lib_Fat/ff.c **** 				while (n) buff[--i] = fno.fname[--n];
3908:.\lib_Fat/ff.c **** 				buff[--i] = '/';
3909:.\lib_Fat/ff.c **** 			}
3910:.\lib_Fat/ff.c **** 		}
3911:.\lib_Fat/ff.c **** 		tp = buff;
3912:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
3913:.\lib_Fat/ff.c **** #if _VOLUMES >= 2
3914:.\lib_Fat/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3915:.\lib_Fat/ff.c **** 			*tp++ = ':';
3916:.\lib_Fat/ff.c **** #endif
3917:.\lib_Fat/ff.c **** 			if (i == len) {					/* Root-directory */
3918:.\lib_Fat/ff.c **** 				*tp++ = '/';
3919:.\lib_Fat/ff.c **** 			} else {						/* Sub-directroy */
3920:.\lib_Fat/ff.c **** 				do		/* Add stacked path str */
3921:.\lib_Fat/ff.c **** 					*tp++ = buff[i++];
3922:.\lib_Fat/ff.c **** 				while (i < len);
3923:.\lib_Fat/ff.c **** 			}
3924:.\lib_Fat/ff.c **** 		}
3925:.\lib_Fat/ff.c **** 		*tp = 0;
3926:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
3927:.\lib_Fat/ff.c **** 	}
3928:.\lib_Fat/ff.c **** 
3929:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
3930:.\lib_Fat/ff.c **** }
3931:.\lib_Fat/ff.c **** 
3932:.\lib_Fat/ff.c **** #endif /* _FS_RPATH >= 2 */
3933:.\lib_Fat/ff.c **** #endif /* _FS_RPATH >= 1 */
3934:.\lib_Fat/ff.c **** 
3935:.\lib_Fat/ff.c **** 
3936:.\lib_Fat/ff.c **** 
3937:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 2
3938:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3939:.\lib_Fat/ff.c **** /* Seek File R/W Pointer                                                 */
3940:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
3941:.\lib_Fat/ff.c **** 
3942:.\lib_Fat/ff.c **** FRESULT f_lseek (
3943:.\lib_Fat/ff.c **** 	FIL* fp,		/* Pointer to the file object */
3944:.\lib_Fat/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
3945:.\lib_Fat/ff.c **** )
3946:.\lib_Fat/ff.c **** {
 6669              		.loc 1 3946 0
 6670              		.cfi_startproc
 6671 0000 90B5     		push	{r4, r7, lr}
 6672              		.cfi_def_cfa_offset 12
 6673              		.cfi_offset 4, -12
 6674              		.cfi_offset 7, -8
 6675              		.cfi_offset 14, -4
 6676 0002 89B0     		sub	sp, sp, #36
 6677              		.cfi_def_cfa_offset 48
 6678 0004 00AF     		add	r7, sp, #0
 6679              		.cfi_def_cfa_register 7
 6680 0006 7860     		str	r0, [r7, #4]
 6681 0008 3960     		str	r1, [r7]
3947:.\lib_Fat/ff.c **** 	FRESULT res;
3948:.\lib_Fat/ff.c **** 	FATFS *fs;
3949:.\lib_Fat/ff.c **** 	DWORD clst, bcs, nsect;
3950:.\lib_Fat/ff.c **** 	FSIZE_t ifptr;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 188


3951:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
3952:.\lib_Fat/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
3953:.\lib_Fat/ff.c **** #endif
3954:.\lib_Fat/ff.c **** 
3955:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);		/* Check validity of the object */
 6682              		.loc 1 3955 0
 6683 000a 1F23     		mov	r3, #31
 6684 000c FC18     		add	r4, r7, r3
 6685 000e 7A68     		ldr	r2, [r7, #4]
 6686 0010 0823     		mov	r3, #8
 6687 0012 FB18     		add	r3, r7, r3
 6688 0014 101C     		mov	r0, r2
 6689 0016 191C     		mov	r1, r3
 6690 0018 FFF7FEFF 		bl	validate
 6691 001c 031C     		mov	r3, r0
 6692 001e 2370     		strb	r3, [r4]
3956:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6693              		.loc 1 3956 0
 6694 0020 1F23     		mov	r3, #31
 6695 0022 FB18     		add	r3, r7, r3
 6696 0024 1B78     		ldrb	r3, [r3]
 6697 0026 002B     		cmp	r3, #0
 6698 0028 09D1     		bne	.L382
 6699              		.loc 1 3956 0 is_stmt 0 discriminator 2
 6700 002a 1F23     		mov	r3, #31
 6701 002c FB18     		add	r3, r7, r3
 6702 002e 7A68     		ldr	r2, [r7, #4]
 6703 0030 527C     		ldrb	r2, [r2, #17]
 6704 0032 1A70     		strb	r2, [r3]
 6705 0034 1F23     		mov	r3, #31
 6706 0036 FB18     		add	r3, r7, r3
 6707 0038 1B78     		ldrb	r3, [r3]
 6708 003a 002B     		cmp	r3, #0
 6709 003c 03D0     		beq	.L383
 6710              	.L382:
 6711              		.loc 1 3956 0 discriminator 3
 6712 003e 1F23     		mov	r3, #31
 6713 0040 FB18     		add	r3, r7, r3
 6714 0042 1B78     		ldrb	r3, [r3]
 6715 0044 1EE1     		b	.L406
 6716              	.L383:
3957:.\lib_Fat/ff.c **** #if _USE_FASTSEEK
3958:.\lib_Fat/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
3959:.\lib_Fat/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
3960:.\lib_Fat/ff.c **** 			tbl = fp->cltbl;
3961:.\lib_Fat/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
3962:.\lib_Fat/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
3963:.\lib_Fat/ff.c **** 			if (cl) {
3964:.\lib_Fat/ff.c **** 				do {
3965:.\lib_Fat/ff.c **** 					/* Get a fragment */
3966:.\lib_Fat/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
3967:.\lib_Fat/ff.c **** 					do {
3968:.\lib_Fat/ff.c **** 						pcl = cl; ncl++;
3969:.\lib_Fat/ff.c **** 						cl = get_fat(&fp->obj, cl);
3970:.\lib_Fat/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
3971:.\lib_Fat/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3972:.\lib_Fat/ff.c **** 					} while (cl == pcl + 1);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 189


3973:.\lib_Fat/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
3974:.\lib_Fat/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
3975:.\lib_Fat/ff.c **** 					}
3976:.\lib_Fat/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
3977:.\lib_Fat/ff.c **** 			}
3978:.\lib_Fat/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
3979:.\lib_Fat/ff.c **** 			if (ulen <= tlen) {
3980:.\lib_Fat/ff.c **** 				*tbl = 0;		/* Terminate table */
3981:.\lib_Fat/ff.c **** 			} else {
3982:.\lib_Fat/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
3983:.\lib_Fat/ff.c **** 			}
3984:.\lib_Fat/ff.c **** 		} else {						/* Fast seek */
3985:.\lib_Fat/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
3986:.\lib_Fat/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
3987:.\lib_Fat/ff.c **** 			if (ofs) {
3988:.\lib_Fat/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
3989:.\lib_Fat/ff.c **** 				dsc = clust2sect(fs, fp->clust);
3990:.\lib_Fat/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
3991:.\lib_Fat/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
3992:.\lib_Fat/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
3993:.\lib_Fat/ff.c **** #if !_FS_TINY
3994:.\lib_Fat/ff.c **** #if !_FS_READONLY
3995:.\lib_Fat/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3996:.\lib_Fat/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fp, FR_DISK_ERR);
3997:.\lib_Fat/ff.c **** 						fp->flag &= ~FA_DIRTY;
3998:.\lib_Fat/ff.c **** 					}
3999:.\lib_Fat/ff.c **** #endif
4000:.\lib_Fat/ff.c **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) {	/* Load current sector */
4001:.\lib_Fat/ff.c **** 						ABORT(fs, FR_DISK_ERR);
4002:.\lib_Fat/ff.c **** 					}
4003:.\lib_Fat/ff.c **** #endif
4004:.\lib_Fat/ff.c **** 					fp->sect = dsc;
4005:.\lib_Fat/ff.c **** 				}
4006:.\lib_Fat/ff.c **** 			}
4007:.\lib_Fat/ff.c **** 		}
4008:.\lib_Fat/ff.c **** 	} else
4009:.\lib_Fat/ff.c **** #endif
4010:.\lib_Fat/ff.c **** 
4011:.\lib_Fat/ff.c **** 	/* Normal Seek */
4012:.\lib_Fat/ff.c **** 	{
4013:.\lib_Fat/ff.c **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
 6717              		.loc 1 4013 0 is_stmt 1
 6718 0046 7B68     		ldr	r3, [r7, #4]
 6719 0048 DA68     		ldr	r2, [r3, #12]
 6720 004a 3B68     		ldr	r3, [r7]
 6721 004c 9A42     		cmp	r2, r3
 6722 004e 08D2     		bcs	.L385
 6723              		.loc 1 4013 0 is_stmt 0 discriminator 1
 6724 0050 7B68     		ldr	r3, [r7, #4]
 6725 0052 1B7C     		ldrb	r3, [r3, #16]
 6726 0054 1A1C     		mov	r2, r3
 6727 0056 0223     		mov	r3, #2
 6728 0058 1340     		and	r3, r2
 6729 005a 02D1     		bne	.L385
4014:.\lib_Fat/ff.c **** 			ofs = fp->obj.objsize;
 6730              		.loc 1 4014 0 is_stmt 1
 6731 005c 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 190


 6732 005e DB68     		ldr	r3, [r3, #12]
 6733 0060 3B60     		str	r3, [r7]
 6734              	.L385:
4015:.\lib_Fat/ff.c **** 		}
4016:.\lib_Fat/ff.c **** 		ifptr = fp->fptr;
 6735              		.loc 1 4016 0
 6736 0062 7B68     		ldr	r3, [r7, #4]
 6737 0064 5B69     		ldr	r3, [r3, #20]
 6738 0066 3B61     		str	r3, [r7, #16]
4017:.\lib_Fat/ff.c **** 		fp->fptr = nsect = 0;
 6739              		.loc 1 4017 0
 6740 0068 0023     		mov	r3, #0
 6741 006a 7B61     		str	r3, [r7, #20]
 6742 006c 7B68     		ldr	r3, [r7, #4]
 6743 006e 7A69     		ldr	r2, [r7, #20]
 6744 0070 5A61     		str	r2, [r3, #20]
4018:.\lib_Fat/ff.c **** 		if (ofs) {
 6745              		.loc 1 4018 0
 6746 0072 3B68     		ldr	r3, [r7]
 6747 0074 002B     		cmp	r3, #0
 6748 0076 00D1     		bne	.LCB6101
 6749 0078 AFE0     		b	.L386	@long jump
 6750              	.LCB6101:
4019:.\lib_Fat/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 6751              		.loc 1 4019 0
 6752 007a BB68     		ldr	r3, [r7, #8]
 6753 007c 5B89     		ldrh	r3, [r3, #10]
 6754 007e 5B02     		lsl	r3, r3, #9
 6755 0080 FB60     		str	r3, [r7, #12]
4020:.\lib_Fat/ff.c **** 			if (ifptr > 0 &&
 6756              		.loc 1 4020 0
 6757 0082 3B69     		ldr	r3, [r7, #16]
 6758 0084 002B     		cmp	r3, #0
 6759 0086 20D0     		beq	.L387
4021:.\lib_Fat/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 6760              		.loc 1 4021 0 discriminator 1
 6761 0088 3B68     		ldr	r3, [r7]
 6762 008a 013B     		sub	r3, r3, #1
 6763 008c 181C     		mov	r0, r3
 6764 008e F968     		ldr	r1, [r7, #12]
 6765 0090 FFF7FEFF 		bl	__aeabi_uidiv
 6766 0094 031C     		mov	r3, r0
 6767 0096 1C1C     		mov	r4, r3
 6768 0098 3B69     		ldr	r3, [r7, #16]
 6769 009a 013B     		sub	r3, r3, #1
 6770 009c 181C     		mov	r0, r3
 6771 009e F968     		ldr	r1, [r7, #12]
 6772 00a0 FFF7FEFF 		bl	__aeabi_uidiv
 6773 00a4 031C     		mov	r3, r0
4020:.\lib_Fat/ff.c **** 			if (ifptr > 0 &&
 6774              		.loc 1 4020 0 discriminator 1
 6775 00a6 9C42     		cmp	r4, r3
 6776 00a8 0FD3     		bcc	.L387
4022:.\lib_Fat/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 6777              		.loc 1 4022 0
 6778 00aa 3B69     		ldr	r3, [r7, #16]
 6779 00ac 013B     		sub	r3, r3, #1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 191


 6780 00ae FA68     		ldr	r2, [r7, #12]
 6781 00b0 5242     		neg	r2, r2
 6782 00b2 1A40     		and	r2, r3
 6783 00b4 7B68     		ldr	r3, [r7, #4]
 6784 00b6 5A61     		str	r2, [r3, #20]
4023:.\lib_Fat/ff.c **** 				ofs -= fp->fptr;
 6785              		.loc 1 4023 0
 6786 00b8 7B68     		ldr	r3, [r7, #4]
 6787 00ba 5B69     		ldr	r3, [r3, #20]
 6788 00bc 3A68     		ldr	r2, [r7]
 6789 00be D31A     		sub	r3, r2, r3
 6790 00c0 3B60     		str	r3, [r7]
4024:.\lib_Fat/ff.c **** 				clst = fp->clust;
 6791              		.loc 1 4024 0
 6792 00c2 7B68     		ldr	r3, [r7, #4]
 6793 00c4 9B69     		ldr	r3, [r3, #24]
 6794 00c6 BB61     		str	r3, [r7, #24]
 6795 00c8 22E0     		b	.L388
 6796              	.L387:
4025:.\lib_Fat/ff.c **** 			} else {									/* When seek to back cluster, */
4026:.\lib_Fat/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 6797              		.loc 1 4026 0
 6798 00ca 7B68     		ldr	r3, [r7, #4]
 6799 00cc 9B68     		ldr	r3, [r3, #8]
 6800 00ce BB61     		str	r3, [r7, #24]
4027:.\lib_Fat/ff.c **** #if !_FS_READONLY
4028:.\lib_Fat/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 6801              		.loc 1 4028 0
 6802 00d0 BB69     		ldr	r3, [r7, #24]
 6803 00d2 002B     		cmp	r3, #0
 6804 00d4 19D1     		bne	.L389
4029:.\lib_Fat/ff.c **** 					clst = create_chain(&fp->obj, 0);
 6805              		.loc 1 4029 0
 6806 00d6 7B68     		ldr	r3, [r7, #4]
 6807 00d8 181C     		mov	r0, r3
 6808 00da 0021     		mov	r1, #0
 6809 00dc FFF7FEFF 		bl	create_chain
 6810 00e0 031C     		mov	r3, r0
 6811 00e2 BB61     		str	r3, [r7, #24]
4030:.\lib_Fat/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 6812              		.loc 1 4030 0
 6813 00e4 BB69     		ldr	r3, [r7, #24]
 6814 00e6 012B     		cmp	r3, #1
 6815 00e8 04D1     		bne	.L390
 6816              		.loc 1 4030 0 is_stmt 0 discriminator 1
 6817 00ea 7B68     		ldr	r3, [r7, #4]
 6818 00ec 0222     		mov	r2, #2
 6819 00ee 5A74     		strb	r2, [r3, #17]
 6820 00f0 0223     		mov	r3, #2
 6821 00f2 C7E0     		b	.L406
 6822              	.L390:
4031:.\lib_Fat/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6823              		.loc 1 4031 0 is_stmt 1
 6824 00f4 BB69     		ldr	r3, [r7, #24]
 6825 00f6 0133     		add	r3, r3, #1
 6826 00f8 04D1     		bne	.L391
 6827              		.loc 1 4031 0 is_stmt 0 discriminator 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 192


 6828 00fa 7B68     		ldr	r3, [r7, #4]
 6829 00fc 0122     		mov	r2, #1
 6830 00fe 5A74     		strb	r2, [r3, #17]
 6831 0100 0123     		mov	r3, #1
 6832 0102 BFE0     		b	.L406
 6833              	.L391:
4032:.\lib_Fat/ff.c **** 					fp->obj.sclust = clst;
 6834              		.loc 1 4032 0 is_stmt 1
 6835 0104 7B68     		ldr	r3, [r7, #4]
 6836 0106 BA69     		ldr	r2, [r7, #24]
 6837 0108 9A60     		str	r2, [r3, #8]
 6838              	.L389:
4033:.\lib_Fat/ff.c **** 				}
4034:.\lib_Fat/ff.c **** #endif
4035:.\lib_Fat/ff.c **** 				fp->clust = clst;
 6839              		.loc 1 4035 0
 6840 010a 7B68     		ldr	r3, [r7, #4]
 6841 010c BA69     		ldr	r2, [r7, #24]
 6842 010e 9A61     		str	r2, [r3, #24]
 6843              	.L388:
4036:.\lib_Fat/ff.c **** 			}
4037:.\lib_Fat/ff.c **** 			if (clst != 0) {
 6844              		.loc 1 4037 0
 6845 0110 BB69     		ldr	r3, [r7, #24]
 6846 0112 002B     		cmp	r3, #0
 6847 0114 61D0     		beq	.L386
4038:.\lib_Fat/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 6848              		.loc 1 4038 0
 6849 0116 3DE0     		b	.L392
 6850              	.L399:
4039:.\lib_Fat/ff.c **** #if !_FS_READONLY
4040:.\lib_Fat/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 6851              		.loc 1 4040 0
 6852 0118 7B68     		ldr	r3, [r7, #4]
 6853 011a 1B7C     		ldrb	r3, [r3, #16]
 6854 011c 1A1C     		mov	r2, r3
 6855 011e 0223     		mov	r3, #2
 6856 0120 1340     		and	r3, r2
 6857 0122 0DD0     		beq	.L393
4041:.\lib_Fat/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 6858              		.loc 1 4041 0
 6859 0124 7A68     		ldr	r2, [r7, #4]
 6860 0126 BB69     		ldr	r3, [r7, #24]
 6861 0128 101C     		mov	r0, r2
 6862 012a 191C     		mov	r1, r3
 6863 012c FFF7FEFF 		bl	create_chain
 6864 0130 031C     		mov	r3, r0
 6865 0132 BB61     		str	r3, [r7, #24]
4042:.\lib_Fat/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 6866              		.loc 1 4042 0
 6867 0134 BB69     		ldr	r3, [r7, #24]
 6868 0136 002B     		cmp	r3, #0
 6869 0138 0AD1     		bne	.L394
4043:.\lib_Fat/ff.c **** 							ofs = bcs; break;
 6870              		.loc 1 4043 0
 6871 013a FB68     		ldr	r3, [r7, #12]
 6872 013c 3B60     		str	r3, [r7]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 193


 6873 013e 2DE0     		b	.L395
 6874              	.L393:
4044:.\lib_Fat/ff.c **** 						}
4045:.\lib_Fat/ff.c **** 					} else
4046:.\lib_Fat/ff.c **** #endif
4047:.\lib_Fat/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 6875              		.loc 1 4047 0
 6876 0140 7A68     		ldr	r2, [r7, #4]
 6877 0142 BB69     		ldr	r3, [r7, #24]
 6878 0144 101C     		mov	r0, r2
 6879 0146 191C     		mov	r1, r3
 6880 0148 FFF7FEFF 		bl	get_fat
 6881 014c 031C     		mov	r3, r0
 6882 014e BB61     		str	r3, [r7, #24]
 6883              	.L394:
4048:.\lib_Fat/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6884              		.loc 1 4048 0
 6885 0150 BB69     		ldr	r3, [r7, #24]
 6886 0152 0133     		add	r3, r3, #1
 6887 0154 04D1     		bne	.L396
 6888              		.loc 1 4048 0 is_stmt 0 discriminator 1
 6889 0156 7B68     		ldr	r3, [r7, #4]
 6890 0158 0122     		mov	r2, #1
 6891 015a 5A74     		strb	r2, [r3, #17]
 6892 015c 0123     		mov	r3, #1
 6893 015e 91E0     		b	.L406
 6894              	.L396:
4049:.\lib_Fat/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 6895              		.loc 1 4049 0 is_stmt 1
 6896 0160 BB69     		ldr	r3, [r7, #24]
 6897 0162 012B     		cmp	r3, #1
 6898 0164 04D9     		bls	.L397
 6899              		.loc 1 4049 0 is_stmt 0 discriminator 2
 6900 0166 BB68     		ldr	r3, [r7, #8]
 6901 0168 5A69     		ldr	r2, [r3, #20]
 6902 016a BB69     		ldr	r3, [r7, #24]
 6903 016c 9A42     		cmp	r2, r3
 6904 016e 04D8     		bhi	.L398
 6905              	.L397:
 6906              		.loc 1 4049 0 discriminator 3
 6907 0170 7B68     		ldr	r3, [r7, #4]
 6908 0172 0222     		mov	r2, #2
 6909 0174 5A74     		strb	r2, [r3, #17]
 6910 0176 0223     		mov	r3, #2
 6911 0178 84E0     		b	.L406
 6912              	.L398:
4050:.\lib_Fat/ff.c **** 					fp->clust = clst;
 6913              		.loc 1 4050 0 is_stmt 1
 6914 017a 7B68     		ldr	r3, [r7, #4]
 6915 017c BA69     		ldr	r2, [r7, #24]
 6916 017e 9A61     		str	r2, [r3, #24]
4051:.\lib_Fat/ff.c **** 					fp->fptr += bcs;
 6917              		.loc 1 4051 0
 6918 0180 7B68     		ldr	r3, [r7, #4]
 6919 0182 5A69     		ldr	r2, [r3, #20]
 6920 0184 FB68     		ldr	r3, [r7, #12]
 6921 0186 D218     		add	r2, r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 194


 6922 0188 7B68     		ldr	r3, [r7, #4]
 6923 018a 5A61     		str	r2, [r3, #20]
4052:.\lib_Fat/ff.c **** 					ofs -= bcs;
 6924              		.loc 1 4052 0
 6925 018c 3A68     		ldr	r2, [r7]
 6926 018e FB68     		ldr	r3, [r7, #12]
 6927 0190 D31A     		sub	r3, r2, r3
 6928 0192 3B60     		str	r3, [r7]
 6929              	.L392:
4038:.\lib_Fat/ff.c **** #if !_FS_READONLY
 6930              		.loc 1 4038 0
 6931 0194 3A68     		ldr	r2, [r7]
 6932 0196 FB68     		ldr	r3, [r7, #12]
 6933 0198 9A42     		cmp	r2, r3
 6934 019a BDD8     		bhi	.L399
 6935              	.L395:
4053:.\lib_Fat/ff.c **** 				}
4054:.\lib_Fat/ff.c **** 				fp->fptr += ofs;
 6936              		.loc 1 4054 0
 6937 019c 7B68     		ldr	r3, [r7, #4]
 6938 019e 5A69     		ldr	r2, [r3, #20]
 6939 01a0 3B68     		ldr	r3, [r7]
 6940 01a2 D218     		add	r2, r2, r3
 6941 01a4 7B68     		ldr	r3, [r7, #4]
 6942 01a6 5A61     		str	r2, [r3, #20]
4055:.\lib_Fat/ff.c **** 				if (ofs % SS(fs)) {
 6943              		.loc 1 4055 0
 6944 01a8 3B68     		ldr	r3, [r7]
 6945 01aa DB05     		lsl	r3, r3, #23
 6946 01ac DB0D     		lsr	r3, r3, #23
 6947 01ae 14D0     		beq	.L386
4056:.\lib_Fat/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 6948              		.loc 1 4056 0
 6949 01b0 BA68     		ldr	r2, [r7, #8]
 6950 01b2 BB69     		ldr	r3, [r7, #24]
 6951 01b4 101C     		mov	r0, r2
 6952 01b6 191C     		mov	r1, r3
 6953 01b8 FFF7FEFF 		bl	clust2sect
 6954 01bc 031C     		mov	r3, r0
 6955 01be 7B61     		str	r3, [r7, #20]
4057:.\lib_Fat/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 6956              		.loc 1 4057 0
 6957 01c0 7B69     		ldr	r3, [r7, #20]
 6958 01c2 002B     		cmp	r3, #0
 6959 01c4 04D1     		bne	.L400
 6960              		.loc 1 4057 0 is_stmt 0 discriminator 1
 6961 01c6 7B68     		ldr	r3, [r7, #4]
 6962 01c8 0222     		mov	r2, #2
 6963 01ca 5A74     		strb	r2, [r3, #17]
 6964 01cc 0223     		mov	r3, #2
 6965 01ce 59E0     		b	.L406
 6966              	.L400:
4058:.\lib_Fat/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 6967              		.loc 1 4058 0 is_stmt 1
 6968 01d0 3B68     		ldr	r3, [r7]
 6969 01d2 5B0A     		lsr	r3, r3, #9
 6970 01d4 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 195


 6971 01d6 D318     		add	r3, r2, r3
 6972 01d8 7B61     		str	r3, [r7, #20]
 6973              	.L386:
4059:.\lib_Fat/ff.c **** 				}
4060:.\lib_Fat/ff.c **** 			}
4061:.\lib_Fat/ff.c **** 		}
4062:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 6974              		.loc 1 4062 0
 6975 01da 7B68     		ldr	r3, [r7, #4]
 6976 01dc 5B69     		ldr	r3, [r3, #20]
 6977 01de DB05     		lsl	r3, r3, #23
 6978 01e0 DB0D     		lsr	r3, r3, #23
 6979 01e2 3BD0     		beq	.L401
 6980              		.loc 1 4062 0 is_stmt 0 discriminator 1
 6981 01e4 7B68     		ldr	r3, [r7, #4]
 6982 01e6 DA69     		ldr	r2, [r3, #28]
 6983 01e8 7B69     		ldr	r3, [r7, #20]
 6984 01ea 9A42     		cmp	r2, r3
 6985 01ec 36D0     		beq	.L401
4063:.\lib_Fat/ff.c **** #if !_FS_TINY
4064:.\lib_Fat/ff.c **** #if !_FS_READONLY
4065:.\lib_Fat/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 6986              		.loc 1 4065 0 is_stmt 1
 6987 01ee 7B68     		ldr	r3, [r7, #4]
 6988 01f0 1B7C     		ldrb	r3, [r3, #16]
 6989 01f2 DBB2     		uxtb	r3, r3
 6990 01f4 5BB2     		sxtb	r3, r3
 6991 01f6 002B     		cmp	r3, #0
 6992 01f8 1ADA     		bge	.L402
4066:.\lib_Fat/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6993              		.loc 1 4066 0
 6994 01fa BB68     		ldr	r3, [r7, #8]
 6995 01fc 5978     		ldrb	r1, [r3, #1]
 6996 01fe 7B68     		ldr	r3, [r7, #4]
 6997 0200 2833     		add	r3, r3, #40
 6998 0202 1A1C     		mov	r2, r3
 6999 0204 7B68     		ldr	r3, [r7, #4]
 7000 0206 DB69     		ldr	r3, [r3, #28]
 7001 0208 081C     		mov	r0, r1
 7002 020a 111C     		mov	r1, r2
 7003 020c 1A1C     		mov	r2, r3
 7004 020e 0123     		mov	r3, #1
 7005 0210 FFF7FEFF 		bl	disk_write
 7006 0214 031E     		sub	r3, r0, #0
 7007 0216 04D0     		beq	.L403
 7008              		.loc 1 4066 0 is_stmt 0 discriminator 1
 7009 0218 7B68     		ldr	r3, [r7, #4]
 7010 021a 0122     		mov	r2, #1
 7011 021c 5A74     		strb	r2, [r3, #17]
 7012 021e 0123     		mov	r3, #1
 7013 0220 30E0     		b	.L406
 7014              	.L403:
4067:.\lib_Fat/ff.c **** 				fp->flag &= ~FA_DIRTY;
 7015              		.loc 1 4067 0 is_stmt 1
 7016 0222 7B68     		ldr	r3, [r7, #4]
 7017 0224 1B7C     		ldrb	r3, [r3, #16]
 7018 0226 7F22     		mov	r2, #127
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 196


 7019 0228 1340     		and	r3, r2
 7020 022a DAB2     		uxtb	r2, r3
 7021 022c 7B68     		ldr	r3, [r7, #4]
 7022 022e 1A74     		strb	r2, [r3, #16]
 7023              	.L402:
4068:.\lib_Fat/ff.c **** 			}
4069:.\lib_Fat/ff.c **** #endif
4070:.\lib_Fat/ff.c **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 7024              		.loc 1 4070 0
 7025 0230 BB68     		ldr	r3, [r7, #8]
 7026 0232 5978     		ldrb	r1, [r3, #1]
 7027 0234 7B68     		ldr	r3, [r7, #4]
 7028 0236 2833     		add	r3, r3, #40
 7029 0238 1A1C     		mov	r2, r3
 7030 023a 7B69     		ldr	r3, [r7, #20]
 7031 023c 081C     		mov	r0, r1
 7032 023e 111C     		mov	r1, r2
 7033 0240 1A1C     		mov	r2, r3
 7034 0242 0123     		mov	r3, #1
 7035 0244 FFF7FEFF 		bl	disk_read
 7036 0248 031E     		sub	r3, r0, #0
 7037 024a 04D0     		beq	.L404
4071:.\lib_Fat/ff.c **** 				ABORT(fs, FR_DISK_ERR);
 7038              		.loc 1 4071 0
 7039 024c 7B68     		ldr	r3, [r7, #4]
 7040 024e 0122     		mov	r2, #1
 7041 0250 5A74     		strb	r2, [r3, #17]
 7042 0252 0123     		mov	r3, #1
 7043 0254 16E0     		b	.L406
 7044              	.L404:
4072:.\lib_Fat/ff.c **** 			}
4073:.\lib_Fat/ff.c **** #endif
4074:.\lib_Fat/ff.c **** 			fp->sect = nsect;
 7045              		.loc 1 4074 0
 7046 0256 7B68     		ldr	r3, [r7, #4]
 7047 0258 7A69     		ldr	r2, [r7, #20]
 7048 025a DA61     		str	r2, [r3, #28]
 7049              	.L401:
4075:.\lib_Fat/ff.c **** 		}
4076:.\lib_Fat/ff.c **** #if !_FS_READONLY
4077:.\lib_Fat/ff.c **** 		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 7050              		.loc 1 4077 0
 7051 025c 7B68     		ldr	r3, [r7, #4]
 7052 025e 5A69     		ldr	r2, [r3, #20]
 7053 0260 7B68     		ldr	r3, [r7, #4]
 7054 0262 DB68     		ldr	r3, [r3, #12]
 7055 0264 9A42     		cmp	r2, r3
 7056 0266 0AD9     		bls	.L405
4078:.\lib_Fat/ff.c **** 			fp->obj.objsize = fp->fptr;
 7057              		.loc 1 4078 0
 7058 0268 7B68     		ldr	r3, [r7, #4]
 7059 026a 5A69     		ldr	r2, [r3, #20]
 7060 026c 7B68     		ldr	r3, [r7, #4]
 7061 026e DA60     		str	r2, [r3, #12]
4079:.\lib_Fat/ff.c **** 			fp->flag |= FA_MODIFIED;
 7062              		.loc 1 4079 0
 7063 0270 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 197


 7064 0272 1B7C     		ldrb	r3, [r3, #16]
 7065 0274 4022     		mov	r2, #64
 7066 0276 1343     		orr	r3, r2
 7067 0278 DAB2     		uxtb	r2, r3
 7068 027a 7B68     		ldr	r3, [r7, #4]
 7069 027c 1A74     		strb	r2, [r3, #16]
 7070              	.L405:
4080:.\lib_Fat/ff.c **** 		}
4081:.\lib_Fat/ff.c **** #endif
4082:.\lib_Fat/ff.c **** 	}
4083:.\lib_Fat/ff.c **** 
4084:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 7071              		.loc 1 4084 0
 7072 027e 1F23     		mov	r3, #31
 7073 0280 FB18     		add	r3, r7, r3
 7074 0282 1B78     		ldrb	r3, [r3]
 7075              	.L406:
4085:.\lib_Fat/ff.c **** }
 7076              		.loc 1 4085 0 discriminator 1
 7077 0284 181C     		mov	r0, r3
 7078 0286 BD46     		mov	sp, r7
 7079 0288 09B0     		add	sp, sp, #36
 7080              		@ sp needed
 7081 028a 90BD     		pop	{r4, r7, pc}
 7082              		.cfi_endproc
 7083              	.LFE38:
 7084              		.size	f_lseek, .-f_lseek
 7085              		.section	.text.f_opendir,"ax",%progbits
 7086              		.align	2
 7087              		.global	f_opendir
 7088              		.code	16
 7089              		.thumb_func
 7090              		.type	f_opendir, %function
 7091              	f_opendir:
 7092              	.LFB39:
4086:.\lib_Fat/ff.c **** 
4087:.\lib_Fat/ff.c **** 
4088:.\lib_Fat/ff.c **** 
4089:.\lib_Fat/ff.c **** #if _FS_MINIMIZE <= 1
4090:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4091:.\lib_Fat/ff.c **** /* Create a Directory Object                                             */
4092:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4093:.\lib_Fat/ff.c **** 
4094:.\lib_Fat/ff.c **** FRESULT f_opendir (
4095:.\lib_Fat/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4096:.\lib_Fat/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4097:.\lib_Fat/ff.c **** )
4098:.\lib_Fat/ff.c **** {
 7093              		.loc 1 4098 0
 7094              		.cfi_startproc
 7095 0000 90B5     		push	{r4, r7, lr}
 7096              		.cfi_def_cfa_offset 12
 7097              		.cfi_offset 4, -12
 7098              		.cfi_offset 7, -8
 7099              		.cfi_offset 14, -4
 7100 0002 87B0     		sub	sp, sp, #28
 7101              		.cfi_def_cfa_offset 40
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 198


 7102 0004 00AF     		add	r7, sp, #0
 7103              		.cfi_def_cfa_register 7
 7104 0006 7860     		str	r0, [r7, #4]
 7105 0008 3960     		str	r1, [r7]
4099:.\lib_Fat/ff.c **** 	FRESULT res;
4100:.\lib_Fat/ff.c **** 	FATFS *fs;
4101:.\lib_Fat/ff.c **** 	_FDID *obj;
4102:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4103:.\lib_Fat/ff.c **** 
4104:.\lib_Fat/ff.c **** 
4105:.\lib_Fat/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 7106              		.loc 1 4105 0
 7107 000a 7B68     		ldr	r3, [r7, #4]
 7108 000c 002B     		cmp	r3, #0
 7109 000e 01D1     		bne	.L408
 7110              		.loc 1 4105 0 is_stmt 0 discriminator 1
 7111 0010 0923     		mov	r3, #9
 7112 0012 66E0     		b	.L415
 7113              	.L408:
4106:.\lib_Fat/ff.c **** 
4107:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4108:.\lib_Fat/ff.c **** 	obj = &dp->obj;
 7114              		.loc 1 4108 0 is_stmt 1
 7115 0014 7B68     		ldr	r3, [r7, #4]
 7116 0016 3B61     		str	r3, [r7, #16]
4109:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, 0);
 7117              		.loc 1 4109 0
 7118 0018 1723     		mov	r3, #23
 7119 001a FC18     		add	r4, r7, r3
 7120 001c 3A1C     		mov	r2, r7
 7121 001e 0C23     		mov	r3, #12
 7122 0020 FB18     		add	r3, r7, r3
 7123 0022 101C     		mov	r0, r2
 7124 0024 191C     		mov	r1, r3
 7125 0026 0022     		mov	r2, #0
 7126 0028 FFF7FEFF 		bl	find_volume
 7127 002c 031C     		mov	r3, r0
 7128 002e 2370     		strb	r3, [r4]
4110:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 7129              		.loc 1 4110 0
 7130 0030 1723     		mov	r3, #23
 7131 0032 FB18     		add	r3, r7, r3
 7132 0034 1B78     		ldrb	r3, [r3]
 7133 0036 002B     		cmp	r3, #0
 7134 0038 48D1     		bne	.L410
4111:.\lib_Fat/ff.c **** 		obj->fs = fs;
 7135              		.loc 1 4111 0
 7136 003a FA68     		ldr	r2, [r7, #12]
 7137 003c 3B69     		ldr	r3, [r7, #16]
 7138 003e 1A60     		str	r2, [r3]
4112:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4113:.\lib_Fat/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 7139              		.loc 1 4113 0
 7140 0040 3B68     		ldr	r3, [r7]
 7141 0042 1722     		mov	r2, #23
 7142 0044 BC18     		add	r4, r7, r2
 7143 0046 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 199


 7144 0048 101C     		mov	r0, r2
 7145 004a 191C     		mov	r1, r3
 7146 004c FFF7FEFF 		bl	follow_path
 7147 0050 031C     		mov	r3, r0
 7148 0052 2370     		strb	r3, [r4]
4114:.\lib_Fat/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 7149              		.loc 1 4114 0
 7150 0054 1723     		mov	r3, #23
 7151 0056 FB18     		add	r3, r7, r3
 7152 0058 1B78     		ldrb	r3, [r3]
 7153 005a 002B     		cmp	r3, #0
 7154 005c 2DD1     		bne	.L411
4115:.\lib_Fat/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 7155              		.loc 1 4115 0
 7156 005e 7B68     		ldr	r3, [r7, #4]
 7157 0060 2B22     		mov	r2, #43
 7158 0062 9B5C     		ldrb	r3, [r3, r2]
 7159 0064 DBB2     		uxtb	r3, r3
 7160 0066 5BB2     		sxtb	r3, r3
 7161 0068 002B     		cmp	r3, #0
 7162 006a 14DB     		blt	.L412
4116:.\lib_Fat/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 7163              		.loc 1 4116 0
 7164 006c 3B69     		ldr	r3, [r7, #16]
 7165 006e 9B79     		ldrb	r3, [r3, #6]
 7166 0070 1A1C     		mov	r2, r3
 7167 0072 1023     		mov	r3, #16
 7168 0074 1340     		and	r3, r2
 7169 0076 0AD0     		beq	.L413
4117:.\lib_Fat/ff.c **** #if _FS_EXFAT
4118:.\lib_Fat/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4119:.\lib_Fat/ff.c **** 						obj->c_scl = obj->sclust;	/* Save containing directory inforamation */
4120:.\lib_Fat/ff.c **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4121:.\lib_Fat/ff.c **** 						obj->c_ofs = dp->blk_ofs;
4122:.\lib_Fat/ff.c **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object location and status */
4123:.\lib_Fat/ff.c **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4124:.\lib_Fat/ff.c **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4125:.\lib_Fat/ff.c **** 					} else
4126:.\lib_Fat/ff.c **** #endif
4127:.\lib_Fat/ff.c **** 					{
4128:.\lib_Fat/ff.c **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
 7170              		.loc 1 4128 0
 7171 0078 FA68     		ldr	r2, [r7, #12]
 7172 007a 7B68     		ldr	r3, [r7, #4]
 7173 007c DB69     		ldr	r3, [r3, #28]
 7174 007e 101C     		mov	r0, r2
 7175 0080 191C     		mov	r1, r3
 7176 0082 FFF7FEFF 		bl	ld_clust
 7177 0086 021C     		mov	r2, r0
 7178 0088 3B69     		ldr	r3, [r7, #16]
 7179 008a 9A60     		str	r2, [r3, #8]
 7180 008c 03E0     		b	.L412
 7181              	.L413:
4129:.\lib_Fat/ff.c **** 					}
4130:.\lib_Fat/ff.c **** 				} else {						/* This object is a file */
4131:.\lib_Fat/ff.c **** 					res = FR_NO_PATH;
 7182              		.loc 1 4131 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 200


 7183 008e 1723     		mov	r3, #23
 7184 0090 FB18     		add	r3, r7, r3
 7185 0092 0522     		mov	r2, #5
 7186 0094 1A70     		strb	r2, [r3]
 7187              	.L412:
4132:.\lib_Fat/ff.c **** 				}
4133:.\lib_Fat/ff.c **** 			}
4134:.\lib_Fat/ff.c **** 			if (res == FR_OK) {
 7188              		.loc 1 4134 0
 7189 0096 1723     		mov	r3, #23
 7190 0098 FB18     		add	r3, r7, r3
 7191 009a 1B78     		ldrb	r3, [r3]
 7192 009c 002B     		cmp	r3, #0
 7193 009e 0CD1     		bne	.L411
4135:.\lib_Fat/ff.c **** 				obj->id = fs->id;
 7194              		.loc 1 4135 0
 7195 00a0 FB68     		ldr	r3, [r7, #12]
 7196 00a2 DA88     		ldrh	r2, [r3, #6]
 7197 00a4 3B69     		ldr	r3, [r7, #16]
 7198 00a6 9A80     		strh	r2, [r3, #4]
4136:.\lib_Fat/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 7199              		.loc 1 4136 0
 7200 00a8 1723     		mov	r3, #23
 7201 00aa FC18     		add	r4, r7, r3
 7202 00ac 7B68     		ldr	r3, [r7, #4]
 7203 00ae 181C     		mov	r0, r3
 7204 00b0 0021     		mov	r1, #0
 7205 00b2 FFF7FEFF 		bl	dir_sdi
 7206 00b6 031C     		mov	r3, r0
 7207 00b8 2370     		strb	r3, [r4]
 7208              	.L411:
4137:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
4138:.\lib_Fat/ff.c **** 				if (res == FR_OK) {
4139:.\lib_Fat/ff.c **** 					if (obj->sclust) {
4140:.\lib_Fat/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4141:.\lib_Fat/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
4142:.\lib_Fat/ff.c **** 					} else {
4143:.\lib_Fat/ff.c **** 						obj->lockid = 0;	/* Root directory need not to be locked */
4144:.\lib_Fat/ff.c **** 					}
4145:.\lib_Fat/ff.c **** 				}
4146:.\lib_Fat/ff.c **** #endif
4147:.\lib_Fat/ff.c **** 			}
4148:.\lib_Fat/ff.c **** 		}
4149:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4150:.\lib_Fat/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7209              		.loc 1 4150 0
 7210 00ba 1723     		mov	r3, #23
 7211 00bc FB18     		add	r3, r7, r3
 7212 00be 1B78     		ldrb	r3, [r3]
 7213 00c0 042B     		cmp	r3, #4
 7214 00c2 03D1     		bne	.L410
 7215              		.loc 1 4150 0 is_stmt 0 discriminator 1
 7216 00c4 1723     		mov	r3, #23
 7217 00c6 FB18     		add	r3, r7, r3
 7218 00c8 0522     		mov	r2, #5
 7219 00ca 1A70     		strb	r2, [r3]
 7220              	.L410:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 201


4151:.\lib_Fat/ff.c **** 	}
4152:.\lib_Fat/ff.c **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 7221              		.loc 1 4152 0 is_stmt 1
 7222 00cc 1723     		mov	r3, #23
 7223 00ce FB18     		add	r3, r7, r3
 7224 00d0 1B78     		ldrb	r3, [r3]
 7225 00d2 002B     		cmp	r3, #0
 7226 00d4 02D0     		beq	.L414
 7227              		.loc 1 4152 0 is_stmt 0 discriminator 1
 7228 00d6 3B69     		ldr	r3, [r7, #16]
 7229 00d8 0022     		mov	r2, #0
 7230 00da 1A60     		str	r2, [r3]
 7231              	.L414:
4153:.\lib_Fat/ff.c **** 
4154:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 7232              		.loc 1 4154 0 is_stmt 1
 7233 00dc 1723     		mov	r3, #23
 7234 00de FB18     		add	r3, r7, r3
 7235 00e0 1B78     		ldrb	r3, [r3]
 7236              	.L415:
4155:.\lib_Fat/ff.c **** }
 7237              		.loc 1 4155 0 discriminator 1
 7238 00e2 181C     		mov	r0, r3
 7239 00e4 BD46     		mov	sp, r7
 7240 00e6 07B0     		add	sp, sp, #28
 7241              		@ sp needed
 7242 00e8 90BD     		pop	{r4, r7, pc}
 7243              		.cfi_endproc
 7244              	.LFE39:
 7245              		.size	f_opendir, .-f_opendir
 7246 00ea C046     		.section	.text.f_closedir,"ax",%progbits
 7247              		.align	2
 7248              		.global	f_closedir
 7249              		.code	16
 7250              		.thumb_func
 7251              		.type	f_closedir, %function
 7252              	f_closedir:
 7253              	.LFB40:
4156:.\lib_Fat/ff.c **** 
4157:.\lib_Fat/ff.c **** 
4158:.\lib_Fat/ff.c **** 
4159:.\lib_Fat/ff.c **** 
4160:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4161:.\lib_Fat/ff.c **** /* Close Directory                                                       */
4162:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4163:.\lib_Fat/ff.c **** 
4164:.\lib_Fat/ff.c **** FRESULT f_closedir (
4165:.\lib_Fat/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4166:.\lib_Fat/ff.c **** )
4167:.\lib_Fat/ff.c **** {
 7254              		.loc 1 4167 0
 7255              		.cfi_startproc
 7256 0000 90B5     		push	{r4, r7, lr}
 7257              		.cfi_def_cfa_offset 12
 7258              		.cfi_offset 4, -12
 7259              		.cfi_offset 7, -8
 7260              		.cfi_offset 14, -4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 202


 7261 0002 85B0     		sub	sp, sp, #20
 7262              		.cfi_def_cfa_offset 32
 7263 0004 00AF     		add	r7, sp, #0
 7264              		.cfi_def_cfa_register 7
 7265 0006 7860     		str	r0, [r7, #4]
4168:.\lib_Fat/ff.c **** 	FRESULT res;
4169:.\lib_Fat/ff.c **** 	FATFS *fs;
4170:.\lib_Fat/ff.c **** 
4171:.\lib_Fat/ff.c **** 
4172:.\lib_Fat/ff.c **** 	res = validate(dp, &fs);
 7266              		.loc 1 4172 0
 7267 0008 0F23     		mov	r3, #15
 7268 000a FC18     		add	r4, r7, r3
 7269 000c 7A68     		ldr	r2, [r7, #4]
 7270 000e 0823     		mov	r3, #8
 7271 0010 FB18     		add	r3, r7, r3
 7272 0012 101C     		mov	r0, r2
 7273 0014 191C     		mov	r1, r3
 7274 0016 FFF7FEFF 		bl	validate
 7275 001a 031C     		mov	r3, r0
 7276 001c 2370     		strb	r3, [r4]
4173:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 7277              		.loc 1 4173 0
 7278 001e 0F23     		mov	r3, #15
 7279 0020 FB18     		add	r3, r7, r3
 7280 0022 1B78     		ldrb	r3, [r3]
 7281 0024 002B     		cmp	r3, #0
 7282 0026 02D1     		bne	.L417
4174:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
4175:.\lib_Fat/ff.c **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
4176:.\lib_Fat/ff.c **** 			res = dec_lock(dp->obj.lockid);
4177:.\lib_Fat/ff.c **** 		}
4178:.\lib_Fat/ff.c **** 		if (res == FR_OK)
4179:.\lib_Fat/ff.c **** #endif
4180:.\lib_Fat/ff.c **** 		{
4181:.\lib_Fat/ff.c **** 			dp->obj.fs = 0;			/* Invalidate directory object */
 7283              		.loc 1 4181 0
 7284 0028 7B68     		ldr	r3, [r7, #4]
 7285 002a 0022     		mov	r2, #0
 7286 002c 1A60     		str	r2, [r3]
 7287              	.L417:
4182:.\lib_Fat/ff.c **** 		}
4183:.\lib_Fat/ff.c **** #if _FS_REENTRANT
4184:.\lib_Fat/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4185:.\lib_Fat/ff.c **** #endif
4186:.\lib_Fat/ff.c **** 	}
4187:.\lib_Fat/ff.c **** 	return res;
 7288              		.loc 1 4187 0
 7289 002e 0F23     		mov	r3, #15
 7290 0030 FB18     		add	r3, r7, r3
 7291 0032 1B78     		ldrb	r3, [r3]
4188:.\lib_Fat/ff.c **** }
 7292              		.loc 1 4188 0
 7293 0034 181C     		mov	r0, r3
 7294 0036 BD46     		mov	sp, r7
 7295 0038 05B0     		add	sp, sp, #20
 7296              		@ sp needed
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 203


 7297 003a 90BD     		pop	{r4, r7, pc}
 7298              		.cfi_endproc
 7299              	.LFE40:
 7300              		.size	f_closedir, .-f_closedir
 7301              		.section	.text.f_readdir,"ax",%progbits
 7302              		.align	2
 7303              		.global	f_readdir
 7304              		.code	16
 7305              		.thumb_func
 7306              		.type	f_readdir, %function
 7307              	f_readdir:
 7308              	.LFB41:
4189:.\lib_Fat/ff.c **** 
4190:.\lib_Fat/ff.c **** 
4191:.\lib_Fat/ff.c **** 
4192:.\lib_Fat/ff.c **** 
4193:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4194:.\lib_Fat/ff.c **** /* Read Directory Entries in Sequence                                    */
4195:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4196:.\lib_Fat/ff.c **** 
4197:.\lib_Fat/ff.c **** FRESULT f_readdir (
4198:.\lib_Fat/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4199:.\lib_Fat/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4200:.\lib_Fat/ff.c **** )
4201:.\lib_Fat/ff.c **** {
 7309              		.loc 1 4201 0
 7310              		.cfi_startproc
 7311 0000 90B5     		push	{r4, r7, lr}
 7312              		.cfi_def_cfa_offset 12
 7313              		.cfi_offset 4, -12
 7314              		.cfi_offset 7, -8
 7315              		.cfi_offset 14, -4
 7316 0002 85B0     		sub	sp, sp, #20
 7317              		.cfi_def_cfa_offset 32
 7318 0004 00AF     		add	r7, sp, #0
 7319              		.cfi_def_cfa_register 7
 7320 0006 7860     		str	r0, [r7, #4]
 7321 0008 3960     		str	r1, [r7]
4202:.\lib_Fat/ff.c **** 	FRESULT res;
4203:.\lib_Fat/ff.c **** 	FATFS *fs;
4204:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4205:.\lib_Fat/ff.c **** 
4206:.\lib_Fat/ff.c **** 
4207:.\lib_Fat/ff.c **** 	res = validate(dp, &fs);	/* Check validity of the object */
 7322              		.loc 1 4207 0
 7323 000a 0F23     		mov	r3, #15
 7324 000c FC18     		add	r4, r7, r3
 7325 000e 7A68     		ldr	r2, [r7, #4]
 7326 0010 0823     		mov	r3, #8
 7327 0012 FB18     		add	r3, r7, r3
 7328 0014 101C     		mov	r0, r2
 7329 0016 191C     		mov	r1, r3
 7330 0018 FFF7FEFF 		bl	validate
 7331 001c 031C     		mov	r3, r0
 7332 001e 2370     		strb	r3, [r4]
4208:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 7333              		.loc 1 4208 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 204


 7334 0020 0F23     		mov	r3, #15
 7335 0022 FB18     		add	r3, r7, r3
 7336 0024 1B78     		ldrb	r3, [r3]
 7337 0026 002B     		cmp	r3, #0
 7338 0028 3BD1     		bne	.L420
4209:.\lib_Fat/ff.c **** 		if (!fno) {
 7339              		.loc 1 4209 0
 7340 002a 3B68     		ldr	r3, [r7]
 7341 002c 002B     		cmp	r3, #0
 7342 002e 09D1     		bne	.L421
4210:.\lib_Fat/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 7343              		.loc 1 4210 0
 7344 0030 0F23     		mov	r3, #15
 7345 0032 FC18     		add	r4, r7, r3
 7346 0034 7B68     		ldr	r3, [r7, #4]
 7347 0036 181C     		mov	r0, r3
 7348 0038 0021     		mov	r1, #0
 7349 003a FFF7FEFF 		bl	dir_sdi
 7350 003e 031C     		mov	r3, r0
 7351 0040 2370     		strb	r3, [r4]
 7352 0042 2EE0     		b	.L420
 7353              	.L421:
4211:.\lib_Fat/ff.c **** 		} else {
4212:.\lib_Fat/ff.c **** 			INIT_NAMBUF(fs);
4213:.\lib_Fat/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 7354              		.loc 1 4213 0
 7355 0044 0F23     		mov	r3, #15
 7356 0046 FC18     		add	r4, r7, r3
 7357 0048 7B68     		ldr	r3, [r7, #4]
 7358 004a 181C     		mov	r0, r3
 7359 004c 0021     		mov	r1, #0
 7360 004e FFF7FEFF 		bl	dir_read
 7361 0052 031C     		mov	r3, r0
 7362 0054 2370     		strb	r3, [r4]
4214:.\lib_Fat/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 7363              		.loc 1 4214 0
 7364 0056 0F23     		mov	r3, #15
 7365 0058 FB18     		add	r3, r7, r3
 7366 005a 1B78     		ldrb	r3, [r3]
 7367 005c 042B     		cmp	r3, #4
 7368 005e 03D1     		bne	.L422
 7369              		.loc 1 4214 0 is_stmt 0 discriminator 1
 7370 0060 0F23     		mov	r3, #15
 7371 0062 FB18     		add	r3, r7, r3
 7372 0064 0022     		mov	r2, #0
 7373 0066 1A70     		strb	r2, [r3]
 7374              	.L422:
4215:.\lib_Fat/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 7375              		.loc 1 4215 0 is_stmt 1
 7376 0068 0F23     		mov	r3, #15
 7377 006a FB18     		add	r3, r7, r3
 7378 006c 1B78     		ldrb	r3, [r3]
 7379 006e 002B     		cmp	r3, #0
 7380 0070 17D1     		bne	.L420
4216:.\lib_Fat/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 7381              		.loc 1 4216 0
 7382 0072 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 205


 7383 0074 3B68     		ldr	r3, [r7]
 7384 0076 101C     		mov	r0, r2
 7385 0078 191C     		mov	r1, r3
 7386 007a FFF7FEFF 		bl	get_fileinfo
4217:.\lib_Fat/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 7387              		.loc 1 4217 0
 7388 007e 0F23     		mov	r3, #15
 7389 0080 FC18     		add	r4, r7, r3
 7390 0082 7B68     		ldr	r3, [r7, #4]
 7391 0084 181C     		mov	r0, r3
 7392 0086 0021     		mov	r1, #0
 7393 0088 FFF7FEFF 		bl	dir_next
 7394 008c 031C     		mov	r3, r0
 7395 008e 2370     		strb	r3, [r4]
4218:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 7396              		.loc 1 4218 0
 7397 0090 0F23     		mov	r3, #15
 7398 0092 FB18     		add	r3, r7, r3
 7399 0094 1B78     		ldrb	r3, [r3]
 7400 0096 042B     		cmp	r3, #4
 7401 0098 03D1     		bne	.L420
 7402              		.loc 1 4218 0 is_stmt 0 discriminator 1
 7403 009a 0F23     		mov	r3, #15
 7404 009c FB18     		add	r3, r7, r3
 7405 009e 0022     		mov	r2, #0
 7406 00a0 1A70     		strb	r2, [r3]
 7407              	.L420:
4219:.\lib_Fat/ff.c **** 			}
4220:.\lib_Fat/ff.c **** 			FREE_NAMBUF();
4221:.\lib_Fat/ff.c **** 		}
4222:.\lib_Fat/ff.c **** 	}
4223:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 7408              		.loc 1 4223 0 is_stmt 1
 7409 00a2 0F23     		mov	r3, #15
 7410 00a4 FB18     		add	r3, r7, r3
 7411 00a6 1B78     		ldrb	r3, [r3]
4224:.\lib_Fat/ff.c **** }
 7412              		.loc 1 4224 0
 7413 00a8 181C     		mov	r0, r3
 7414 00aa BD46     		mov	sp, r7
 7415 00ac 05B0     		add	sp, sp, #20
 7416              		@ sp needed
 7417 00ae 90BD     		pop	{r4, r7, pc}
 7418              		.cfi_endproc
 7419              	.LFE41:
 7420              		.size	f_readdir, .-f_readdir
 7421              		.section	.text.f_stat,"ax",%progbits
 7422              		.align	2
 7423              		.global	f_stat
 7424              		.code	16
 7425              		.thumb_func
 7426              		.type	f_stat, %function
 7427              	f_stat:
 7428              	.LFB42:
4225:.\lib_Fat/ff.c **** 
4226:.\lib_Fat/ff.c **** 
4227:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 206


4228:.\lib_Fat/ff.c **** #if _USE_FIND
4229:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4230:.\lib_Fat/ff.c **** /* Find Next File                                                        */
4231:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4232:.\lib_Fat/ff.c **** 
4233:.\lib_Fat/ff.c **** FRESULT f_findnext (
4234:.\lib_Fat/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4235:.\lib_Fat/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4236:.\lib_Fat/ff.c **** )
4237:.\lib_Fat/ff.c **** {
4238:.\lib_Fat/ff.c **** 	FRESULT res;
4239:.\lib_Fat/ff.c **** 
4240:.\lib_Fat/ff.c **** 
4241:.\lib_Fat/ff.c **** 	for (;;) {
4242:.\lib_Fat/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4243:.\lib_Fat/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4244:.\lib_Fat/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4245:.\lib_Fat/ff.c **** #if _USE_LFN != 0 && _USE_FIND == 2
4246:.\lib_Fat/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4247:.\lib_Fat/ff.c **** #endif
4248:.\lib_Fat/ff.c **** 	}
4249:.\lib_Fat/ff.c **** 	return res;
4250:.\lib_Fat/ff.c **** }
4251:.\lib_Fat/ff.c **** 
4252:.\lib_Fat/ff.c **** 
4253:.\lib_Fat/ff.c **** 
4254:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4255:.\lib_Fat/ff.c **** /* Find First File                                                       */
4256:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4257:.\lib_Fat/ff.c **** 
4258:.\lib_Fat/ff.c **** FRESULT f_findfirst (
4259:.\lib_Fat/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4260:.\lib_Fat/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4261:.\lib_Fat/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4262:.\lib_Fat/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4263:.\lib_Fat/ff.c **** )
4264:.\lib_Fat/ff.c **** {
4265:.\lib_Fat/ff.c **** 	FRESULT res;
4266:.\lib_Fat/ff.c **** 
4267:.\lib_Fat/ff.c **** 
4268:.\lib_Fat/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4269:.\lib_Fat/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4270:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
4271:.\lib_Fat/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4272:.\lib_Fat/ff.c **** 	}
4273:.\lib_Fat/ff.c **** 	return res;
4274:.\lib_Fat/ff.c **** }
4275:.\lib_Fat/ff.c **** 
4276:.\lib_Fat/ff.c **** #endif	/* _USE_FIND */
4277:.\lib_Fat/ff.c **** 
4278:.\lib_Fat/ff.c **** 
4279:.\lib_Fat/ff.c **** 
4280:.\lib_Fat/ff.c **** #if _FS_MINIMIZE == 0
4281:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4282:.\lib_Fat/ff.c **** /* Get File Status                                                       */
4283:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4284:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 207


4285:.\lib_Fat/ff.c **** FRESULT f_stat (
4286:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4287:.\lib_Fat/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4288:.\lib_Fat/ff.c **** )
4289:.\lib_Fat/ff.c **** {
 7429              		.loc 1 4289 0
 7430              		.cfi_startproc
 7431 0000 90B5     		push	{r4, r7, lr}
 7432              		.cfi_def_cfa_offset 12
 7433              		.cfi_offset 4, -12
 7434              		.cfi_offset 7, -8
 7435              		.cfi_offset 14, -4
 7436 0002 8FB0     		sub	sp, sp, #60
 7437              		.cfi_def_cfa_offset 72
 7438 0004 00AF     		add	r7, sp, #0
 7439              		.cfi_def_cfa_register 7
 7440 0006 7860     		str	r0, [r7, #4]
 7441 0008 3960     		str	r1, [r7]
4290:.\lib_Fat/ff.c **** 	FRESULT res;
4291:.\lib_Fat/ff.c **** 	DIR dj;
4292:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4293:.\lib_Fat/ff.c **** 
4294:.\lib_Fat/ff.c **** 
4295:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4296:.\lib_Fat/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
 7442              		.loc 1 4296 0
 7443 000a 3723     		mov	r3, #55
 7444 000c FC18     		add	r4, r7, r3
 7445 000e 3A1D     		add	r2, r7, #4
 7446 0010 0823     		mov	r3, #8
 7447 0012 FB18     		add	r3, r7, r3
 7448 0014 101C     		mov	r0, r2
 7449 0016 191C     		mov	r1, r3
 7450 0018 0022     		mov	r2, #0
 7451 001a FFF7FEFF 		bl	find_volume
 7452 001e 031C     		mov	r3, r0
 7453 0020 2370     		strb	r3, [r4]
4297:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 7454              		.loc 1 4297 0
 7455 0022 3723     		mov	r3, #55
 7456 0024 FB18     		add	r3, r7, r3
 7457 0026 1B78     		ldrb	r3, [r3]
 7458 0028 002B     		cmp	r3, #0
 7459 002a 26D1     		bne	.L425
4298:.\lib_Fat/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4299:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 7460              		.loc 1 4299 0
 7461 002c 7B68     		ldr	r3, [r7, #4]
 7462 002e 3722     		mov	r2, #55
 7463 0030 BC18     		add	r4, r7, r2
 7464 0032 0822     		mov	r2, #8
 7465 0034 BA18     		add	r2, r7, r2
 7466 0036 101C     		mov	r0, r2
 7467 0038 191C     		mov	r1, r3
 7468 003a FFF7FEFF 		bl	follow_path
 7469 003e 031C     		mov	r3, r0
 7470 0040 2370     		strb	r3, [r4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 208


4300:.\lib_Fat/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 7471              		.loc 1 4300 0
 7472 0042 3723     		mov	r3, #55
 7473 0044 FB18     		add	r3, r7, r3
 7474 0046 1B78     		ldrb	r3, [r3]
 7475 0048 002B     		cmp	r3, #0
 7476 004a 16D1     		bne	.L425
4301:.\lib_Fat/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 7477              		.loc 1 4301 0
 7478 004c 0823     		mov	r3, #8
 7479 004e FB18     		add	r3, r7, r3
 7480 0050 2B22     		mov	r2, #43
 7481 0052 9B5C     		ldrb	r3, [r3, r2]
 7482 0054 DBB2     		uxtb	r3, r3
 7483 0056 5BB2     		sxtb	r3, r3
 7484 0058 002B     		cmp	r3, #0
 7485 005a 04DA     		bge	.L426
4302:.\lib_Fat/ff.c **** 				res = FR_INVALID_NAME;
 7486              		.loc 1 4302 0
 7487 005c 3723     		mov	r3, #55
 7488 005e FB18     		add	r3, r7, r3
 7489 0060 0622     		mov	r2, #6
 7490 0062 1A70     		strb	r2, [r3]
 7491 0064 09E0     		b	.L425
 7492              	.L426:
4303:.\lib_Fat/ff.c **** 			} else {							/* Found an object */
4304:.\lib_Fat/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 7493              		.loc 1 4304 0
 7494 0066 3B68     		ldr	r3, [r7]
 7495 0068 002B     		cmp	r3, #0
 7496 006a 06D0     		beq	.L425
 7497              		.loc 1 4304 0 is_stmt 0 discriminator 1
 7498 006c 0823     		mov	r3, #8
 7499 006e FA18     		add	r2, r7, r3
 7500 0070 3B68     		ldr	r3, [r7]
 7501 0072 101C     		mov	r0, r2
 7502 0074 191C     		mov	r1, r3
 7503 0076 FFF7FEFF 		bl	get_fileinfo
 7504              	.L425:
4305:.\lib_Fat/ff.c **** 			}
4306:.\lib_Fat/ff.c **** 		}
4307:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4308:.\lib_Fat/ff.c **** 	}
4309:.\lib_Fat/ff.c **** 
4310:.\lib_Fat/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
 7505              		.loc 1 4310 0 is_stmt 1
 7506 007a 3723     		mov	r3, #55
 7507 007c FB18     		add	r3, r7, r3
 7508 007e 1B78     		ldrb	r3, [r3]
4311:.\lib_Fat/ff.c **** }
 7509              		.loc 1 4311 0
 7510 0080 181C     		mov	r0, r3
 7511 0082 BD46     		mov	sp, r7
 7512 0084 0FB0     		add	sp, sp, #60
 7513              		@ sp needed
 7514 0086 90BD     		pop	{r4, r7, pc}
 7515              		.cfi_endproc
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 209


 7516              	.LFE42:
 7517              		.size	f_stat, .-f_stat
 7518              		.section	.text.f_getfree,"ax",%progbits
 7519              		.align	2
 7520              		.global	f_getfree
 7521              		.code	16
 7522              		.thumb_func
 7523              		.type	f_getfree, %function
 7524              	f_getfree:
 7525              	.LFB43:
4312:.\lib_Fat/ff.c **** 
4313:.\lib_Fat/ff.c **** 
4314:.\lib_Fat/ff.c **** 
4315:.\lib_Fat/ff.c **** #if !_FS_READONLY
4316:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4317:.\lib_Fat/ff.c **** /* Get Number of Free Clusters                                           */
4318:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4319:.\lib_Fat/ff.c **** 
4320:.\lib_Fat/ff.c **** FRESULT f_getfree (
4321:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4322:.\lib_Fat/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4323:.\lib_Fat/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4324:.\lib_Fat/ff.c **** )
4325:.\lib_Fat/ff.c **** {
 7526              		.loc 1 4325 0
 7527              		.cfi_startproc
 7528 0000 90B5     		push	{r4, r7, lr}
 7529              		.cfi_def_cfa_offset 12
 7530              		.cfi_offset 4, -12
 7531              		.cfi_offset 7, -8
 7532              		.cfi_offset 14, -4
 7533 0002 91B0     		sub	sp, sp, #68
 7534              		.cfi_def_cfa_offset 80
 7535 0004 00AF     		add	r7, sp, #0
 7536              		.cfi_def_cfa_register 7
 7537 0006 F860     		str	r0, [r7, #12]
 7538 0008 B960     		str	r1, [r7, #8]
 7539 000a 7A60     		str	r2, [r7, #4]
4326:.\lib_Fat/ff.c **** 	FRESULT res;
4327:.\lib_Fat/ff.c **** 	FATFS *fs;
4328:.\lib_Fat/ff.c **** 	DWORD nfree, clst, sect, stat;
4329:.\lib_Fat/ff.c **** 	UINT i;
4330:.\lib_Fat/ff.c **** 	BYTE *p;
4331:.\lib_Fat/ff.c **** 	_FDID obj;
4332:.\lib_Fat/ff.c **** 
4333:.\lib_Fat/ff.c **** 
4334:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4335:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, 0);
 7540              		.loc 1 4335 0
 7541 000c 3F23     		mov	r3, #63
 7542 000e FC18     		add	r4, r7, r3
 7543 0010 0C23     		mov	r3, #12
 7544 0012 FA18     		add	r2, r7, r3
 7545 0014 2023     		mov	r3, #32
 7546 0016 FB18     		add	r3, r7, r3
 7547 0018 101C     		mov	r0, r2
 7548 001a 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 210


 7549 001c 0022     		mov	r2, #0
 7550 001e FFF7FEFF 		bl	find_volume
 7551 0022 031C     		mov	r3, r0
 7552 0024 2370     		strb	r3, [r4]
4336:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 7553              		.loc 1 4336 0
 7554 0026 3F23     		mov	r3, #63
 7555 0028 FB18     		add	r3, r7, r3
 7556 002a 1B78     		ldrb	r3, [r3]
 7557 002c 002B     		cmp	r3, #0
 7558 002e 00D0     		beq	.LCB6847
 7559 0030 A0E0     		b	.L429	@long jump
 7560              	.LCB6847:
4337:.\lib_Fat/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 7561              		.loc 1 4337 0
 7562 0032 3A6A     		ldr	r2, [r7, #32]
 7563 0034 7B68     		ldr	r3, [r7, #4]
 7564 0036 1A60     		str	r2, [r3]
4338:.\lib_Fat/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
4339:.\lib_Fat/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 7565              		.loc 1 4339 0
 7566 0038 3B6A     		ldr	r3, [r7, #32]
 7567 003a 1A69     		ldr	r2, [r3, #16]
 7568 003c 3B6A     		ldr	r3, [r7, #32]
 7569 003e 5B69     		ldr	r3, [r3, #20]
 7570 0040 023B     		sub	r3, r3, #2
 7571 0042 9A42     		cmp	r2, r3
 7572 0044 04D8     		bhi	.L430
4340:.\lib_Fat/ff.c **** 			*nclst = fs->free_clst;
 7573              		.loc 1 4340 0
 7574 0046 3B6A     		ldr	r3, [r7, #32]
 7575 0048 1A69     		ldr	r2, [r3, #16]
 7576 004a BB68     		ldr	r3, [r7, #8]
 7577 004c 1A60     		str	r2, [r3]
 7578 004e 91E0     		b	.L429
 7579              	.L430:
4341:.\lib_Fat/ff.c **** 		} else {
4342:.\lib_Fat/ff.c **** 			/* Get number of free clusters */
4343:.\lib_Fat/ff.c **** 			nfree = 0;
 7580              		.loc 1 4343 0
 7581 0050 0023     		mov	r3, #0
 7582 0052 BB63     		str	r3, [r7, #56]
4344:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 7583              		.loc 1 4344 0
 7584 0054 3B6A     		ldr	r3, [r7, #32]
 7585 0056 1B78     		ldrb	r3, [r3]
 7586 0058 012B     		cmp	r3, #1
 7587 005a 2ED1     		bne	.L431
4345:.\lib_Fat/ff.c **** 				clst = 2; obj.fs = fs;
 7588              		.loc 1 4345 0
 7589 005c 0223     		mov	r3, #2
 7590 005e 7B63     		str	r3, [r7, #52]
 7591 0060 3A6A     		ldr	r2, [r7, #32]
 7592 0062 1023     		mov	r3, #16
 7593 0064 FB18     		add	r3, r7, r3
 7594 0066 1A60     		str	r2, [r3]
 7595              	.L436:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 211


4346:.\lib_Fat/ff.c **** 				do {
4347:.\lib_Fat/ff.c **** 					stat = get_fat(&obj, clst);
 7596              		.loc 1 4347 0
 7597 0068 1023     		mov	r3, #16
 7598 006a FA18     		add	r2, r7, r3
 7599 006c 7B6B     		ldr	r3, [r7, #52]
 7600 006e 101C     		mov	r0, r2
 7601 0070 191C     		mov	r1, r3
 7602 0072 FFF7FEFF 		bl	get_fat
 7603 0076 031C     		mov	r3, r0
 7604 0078 7B62     		str	r3, [r7, #36]
4348:.\lib_Fat/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 7605              		.loc 1 4348 0
 7606 007a 7B6A     		ldr	r3, [r7, #36]
 7607 007c 0133     		add	r3, r3, #1
 7608 007e 04D1     		bne	.L432
 7609              		.loc 1 4348 0 is_stmt 0 discriminator 1
 7610 0080 3F23     		mov	r3, #63
 7611 0082 FB18     		add	r3, r7, r3
 7612 0084 0122     		mov	r2, #1
 7613 0086 1A70     		strb	r2, [r3]
 7614 0088 16E0     		b	.L433
 7615              	.L432:
4349:.\lib_Fat/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 7616              		.loc 1 4349 0 is_stmt 1
 7617 008a 7B6A     		ldr	r3, [r7, #36]
 7618 008c 012B     		cmp	r3, #1
 7619 008e 04D1     		bne	.L434
 7620              		.loc 1 4349 0 is_stmt 0 discriminator 1
 7621 0090 3F23     		mov	r3, #63
 7622 0092 FB18     		add	r3, r7, r3
 7623 0094 0222     		mov	r2, #2
 7624 0096 1A70     		strb	r2, [r3]
 7625 0098 0EE0     		b	.L433
 7626              	.L434:
4350:.\lib_Fat/ff.c **** 					if (stat == 0) nfree++;
 7627              		.loc 1 4350 0 is_stmt 1
 7628 009a 7B6A     		ldr	r3, [r7, #36]
 7629 009c 002B     		cmp	r3, #0
 7630 009e 02D1     		bne	.L435
 7631              		.loc 1 4350 0 is_stmt 0 discriminator 1
 7632 00a0 BB6B     		ldr	r3, [r7, #56]
 7633 00a2 0133     		add	r3, r3, #1
 7634 00a4 BB63     		str	r3, [r7, #56]
 7635              	.L435:
4351:.\lib_Fat/ff.c **** 				} while (++clst < fs->n_fatent);
 7636              		.loc 1 4351 0 is_stmt 1
 7637 00a6 7B6B     		ldr	r3, [r7, #52]
 7638 00a8 0133     		add	r3, r3, #1
 7639 00aa 7B63     		str	r3, [r7, #52]
 7640 00ac 3B6A     		ldr	r3, [r7, #32]
 7641 00ae 5B69     		ldr	r3, [r3, #20]
 7642 00b0 7A6B     		ldr	r2, [r7, #52]
 7643 00b2 9A42     		cmp	r2, r3
 7644 00b4 D8D3     		bcc	.L436
 7645 00b6 50E0     		b	.L437
 7646              	.L433:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 212


 7647 00b8 4FE0     		b	.L437
 7648              	.L431:
4352:.\lib_Fat/ff.c **** 			} else {
4353:.\lib_Fat/ff.c **** #if _FS_EXFAT
4354:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4355:.\lib_Fat/ff.c **** 					BYTE bm;
4356:.\lib_Fat/ff.c **** 					UINT b;
4357:.\lib_Fat/ff.c **** 
4358:.\lib_Fat/ff.c **** 					clst = fs->n_fatent - 2;
4359:.\lib_Fat/ff.c **** 					sect = fs->database;
4360:.\lib_Fat/ff.c **** 					i = 0;
4361:.\lib_Fat/ff.c **** 					do {
4362:.\lib_Fat/ff.c **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
4363:.\lib_Fat/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4364:.\lib_Fat/ff.c **** 							if (!(bm & 1)) nfree++;
4365:.\lib_Fat/ff.c **** 							bm >>= 1;
4366:.\lib_Fat/ff.c **** 						}
4367:.\lib_Fat/ff.c **** 						i = (i + 1) % SS(fs);
4368:.\lib_Fat/ff.c **** 					} while (clst);
4369:.\lib_Fat/ff.c **** 				} else
4370:.\lib_Fat/ff.c **** #endif
4371:.\lib_Fat/ff.c **** 				{	/* FAT16/32: Sector alighed FAT entries */
4372:.\lib_Fat/ff.c **** 					clst = fs->n_fatent; sect = fs->fatbase;
 7649              		.loc 1 4372 0
 7650 00ba 3B6A     		ldr	r3, [r7, #32]
 7651 00bc 5B69     		ldr	r3, [r3, #20]
 7652 00be 7B63     		str	r3, [r7, #52]
 7653 00c0 3B6A     		ldr	r3, [r7, #32]
 7654 00c2 1B6A     		ldr	r3, [r3, #32]
 7655 00c4 3B63     		str	r3, [r7, #48]
4373:.\lib_Fat/ff.c **** 					i = 0; p = 0;
 7656              		.loc 1 4373 0
 7657 00c6 0023     		mov	r3, #0
 7658 00c8 FB62     		str	r3, [r7, #44]
 7659 00ca 0023     		mov	r3, #0
 7660 00cc BB62     		str	r3, [r7, #40]
 7661              	.L444:
4374:.\lib_Fat/ff.c **** 					do {
4375:.\lib_Fat/ff.c **** 						if (i == 0) {
 7662              		.loc 1 4375 0
 7663 00ce FB6A     		ldr	r3, [r7, #44]
 7664 00d0 002B     		cmp	r3, #0
 7665 00d2 17D1     		bne	.L438
4376:.\lib_Fat/ff.c **** 							res = move_window(fs, sect++);
 7666              		.loc 1 4376 0
 7667 00d4 396A     		ldr	r1, [r7, #32]
 7668 00d6 3B6B     		ldr	r3, [r7, #48]
 7669 00d8 5A1C     		add	r2, r3, #1
 7670 00da 3A63     		str	r2, [r7, #48]
 7671 00dc 3F22     		mov	r2, #63
 7672 00de BC18     		add	r4, r7, r2
 7673 00e0 081C     		mov	r0, r1
 7674 00e2 191C     		mov	r1, r3
 7675 00e4 FFF7FEFF 		bl	move_window
 7676 00e8 031C     		mov	r3, r0
 7677 00ea 2370     		strb	r3, [r4]
4377:.\lib_Fat/ff.c **** 							if (res != FR_OK) break;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 213


 7678              		.loc 1 4377 0
 7679 00ec 3F23     		mov	r3, #63
 7680 00ee FB18     		add	r3, r7, r3
 7681 00f0 1B78     		ldrb	r3, [r3]
 7682 00f2 002B     		cmp	r3, #0
 7683 00f4 00D0     		beq	.L439
 7684 00f6 30E0     		b	.L437
 7685              	.L439:
4378:.\lib_Fat/ff.c **** 							p = fs->win;
 7686              		.loc 1 4378 0
 7687 00f8 3B6A     		ldr	r3, [r7, #32]
 7688 00fa 3033     		add	r3, r3, #48
 7689 00fc BB62     		str	r3, [r7, #40]
4379:.\lib_Fat/ff.c **** 							i = SS(fs);
 7690              		.loc 1 4379 0
 7691 00fe 8023     		mov	r3, #128
 7692 0100 9B00     		lsl	r3, r3, #2
 7693 0102 FB62     		str	r3, [r7, #44]
 7694              	.L438:
4380:.\lib_Fat/ff.c **** 						}
4381:.\lib_Fat/ff.c **** 						if (fs->fs_type == FS_FAT16) {
 7695              		.loc 1 4381 0
 7696 0104 3B6A     		ldr	r3, [r7, #32]
 7697 0106 1B78     		ldrb	r3, [r3]
 7698 0108 022B     		cmp	r3, #2
 7699 010a 0FD1     		bne	.L440
4382:.\lib_Fat/ff.c **** 							if (ld_word(p) == 0) nfree++;
 7700              		.loc 1 4382 0
 7701 010c BB6A     		ldr	r3, [r7, #40]
 7702 010e 181C     		mov	r0, r3
 7703 0110 FFF7FEFF 		bl	ld_word
 7704 0114 031E     		sub	r3, r0, #0
 7705 0116 02D1     		bne	.L441
 7706              		.loc 1 4382 0 is_stmt 0 discriminator 1
 7707 0118 BB6B     		ldr	r3, [r7, #56]
 7708 011a 0133     		add	r3, r3, #1
 7709 011c BB63     		str	r3, [r7, #56]
 7710              	.L441:
4383:.\lib_Fat/ff.c **** 							p += 2; i -= 2;
 7711              		.loc 1 4383 0 is_stmt 1
 7712 011e BB6A     		ldr	r3, [r7, #40]
 7713 0120 0233     		add	r3, r3, #2
 7714 0122 BB62     		str	r3, [r7, #40]
 7715 0124 FB6A     		ldr	r3, [r7, #44]
 7716 0126 023B     		sub	r3, r3, #2
 7717 0128 FB62     		str	r3, [r7, #44]
 7718 012a 10E0     		b	.L442
 7719              	.L440:
4384:.\lib_Fat/ff.c **** 						} else {
4385:.\lib_Fat/ff.c **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 7720              		.loc 1 4385 0
 7721 012c BB6A     		ldr	r3, [r7, #40]
 7722 012e 181C     		mov	r0, r3
 7723 0130 FFF7FEFF 		bl	ld_dword
 7724 0134 031C     		mov	r3, r0
 7725 0136 1B01     		lsl	r3, r3, #4
 7726 0138 1B09     		lsr	r3, r3, #4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 214


 7727 013a 02D1     		bne	.L443
 7728              		.loc 1 4385 0 is_stmt 0 discriminator 1
 7729 013c BB6B     		ldr	r3, [r7, #56]
 7730 013e 0133     		add	r3, r3, #1
 7731 0140 BB63     		str	r3, [r7, #56]
 7732              	.L443:
4386:.\lib_Fat/ff.c **** 							p += 4; i -= 4;
 7733              		.loc 1 4386 0 is_stmt 1
 7734 0142 BB6A     		ldr	r3, [r7, #40]
 7735 0144 0433     		add	r3, r3, #4
 7736 0146 BB62     		str	r3, [r7, #40]
 7737 0148 FB6A     		ldr	r3, [r7, #44]
 7738 014a 043B     		sub	r3, r3, #4
 7739 014c FB62     		str	r3, [r7, #44]
 7740              	.L442:
4387:.\lib_Fat/ff.c **** 						}
4388:.\lib_Fat/ff.c **** 					} while (--clst);
 7741              		.loc 1 4388 0
 7742 014e 7B6B     		ldr	r3, [r7, #52]
 7743 0150 013B     		sub	r3, r3, #1
 7744 0152 7B63     		str	r3, [r7, #52]
 7745 0154 7B6B     		ldr	r3, [r7, #52]
 7746 0156 002B     		cmp	r3, #0
 7747 0158 B9D1     		bne	.L444
 7748              	.L437:
4389:.\lib_Fat/ff.c **** 				}
4390:.\lib_Fat/ff.c **** 			}
4391:.\lib_Fat/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
 7749              		.loc 1 4391 0
 7750 015a BB68     		ldr	r3, [r7, #8]
 7751 015c BA6B     		ldr	r2, [r7, #56]
 7752 015e 1A60     		str	r2, [r3]
4392:.\lib_Fat/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 7753              		.loc 1 4392 0
 7754 0160 3B6A     		ldr	r3, [r7, #32]
 7755 0162 BA6B     		ldr	r2, [r7, #56]
 7756 0164 1A61     		str	r2, [r3, #16]
4393:.\lib_Fat/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 7757              		.loc 1 4393 0
 7758 0166 3B6A     		ldr	r3, [r7, #32]
 7759 0168 3A6A     		ldr	r2, [r7, #32]
 7760 016a 1279     		ldrb	r2, [r2, #4]
 7761 016c 0121     		mov	r1, #1
 7762 016e 0A43     		orr	r2, r1
 7763 0170 D2B2     		uxtb	r2, r2
 7764 0172 1A71     		strb	r2, [r3, #4]
 7765              	.L429:
4394:.\lib_Fat/ff.c **** 		}
4395:.\lib_Fat/ff.c **** 	}
4396:.\lib_Fat/ff.c **** 
4397:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 7766              		.loc 1 4397 0
 7767 0174 3F23     		mov	r3, #63
 7768 0176 FB18     		add	r3, r7, r3
 7769 0178 1B78     		ldrb	r3, [r3]
4398:.\lib_Fat/ff.c **** }
 7770              		.loc 1 4398 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 215


 7771 017a 181C     		mov	r0, r3
 7772 017c BD46     		mov	sp, r7
 7773 017e 11B0     		add	sp, sp, #68
 7774              		@ sp needed
 7775 0180 90BD     		pop	{r4, r7, pc}
 7776              		.cfi_endproc
 7777              	.LFE43:
 7778              		.size	f_getfree, .-f_getfree
 7779 0182 C046     		.section	.text.f_truncate,"ax",%progbits
 7780              		.align	2
 7781              		.global	f_truncate
 7782              		.code	16
 7783              		.thumb_func
 7784              		.type	f_truncate, %function
 7785              	f_truncate:
 7786              	.LFB44:
4399:.\lib_Fat/ff.c **** 
4400:.\lib_Fat/ff.c **** 
4401:.\lib_Fat/ff.c **** 
4402:.\lib_Fat/ff.c **** 
4403:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4404:.\lib_Fat/ff.c **** /* Truncate File                                                         */
4405:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4406:.\lib_Fat/ff.c **** 
4407:.\lib_Fat/ff.c **** FRESULT f_truncate (
4408:.\lib_Fat/ff.c **** 	FIL* fp		/* Pointer to the file object */
4409:.\lib_Fat/ff.c **** )
4410:.\lib_Fat/ff.c **** {
 7787              		.loc 1 4410 0
 7788              		.cfi_startproc
 7789 0000 90B5     		push	{r4, r7, lr}
 7790              		.cfi_def_cfa_offset 12
 7791              		.cfi_offset 4, -12
 7792              		.cfi_offset 7, -8
 7793              		.cfi_offset 14, -4
 7794 0002 87B0     		sub	sp, sp, #28
 7795              		.cfi_def_cfa_offset 40
 7796 0004 00AF     		add	r7, sp, #0
 7797              		.cfi_def_cfa_register 7
 7798 0006 7860     		str	r0, [r7, #4]
4411:.\lib_Fat/ff.c **** 	FRESULT res;
4412:.\lib_Fat/ff.c **** 	FATFS *fs;
4413:.\lib_Fat/ff.c **** 	DWORD ncl;
4414:.\lib_Fat/ff.c **** 
4415:.\lib_Fat/ff.c **** 
4416:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);	/* Check validity of the object */
 7799              		.loc 1 4416 0
 7800 0008 1723     		mov	r3, #23
 7801 000a FC18     		add	r4, r7, r3
 7802 000c 7A68     		ldr	r2, [r7, #4]
 7803 000e 0C23     		mov	r3, #12
 7804 0010 FB18     		add	r3, r7, r3
 7805 0012 101C     		mov	r0, r2
 7806 0014 191C     		mov	r1, r3
 7807 0016 FFF7FEFF 		bl	validate
 7808 001a 031C     		mov	r3, r0
 7809 001c 2370     		strb	r3, [r4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 216


4417:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 7810              		.loc 1 4417 0
 7811 001e 1723     		mov	r3, #23
 7812 0020 FB18     		add	r3, r7, r3
 7813 0022 1B78     		ldrb	r3, [r3]
 7814 0024 002B     		cmp	r3, #0
 7815 0026 09D1     		bne	.L447
 7816              		.loc 1 4417 0 is_stmt 0 discriminator 2
 7817 0028 1723     		mov	r3, #23
 7818 002a FB18     		add	r3, r7, r3
 7819 002c 7A68     		ldr	r2, [r7, #4]
 7820 002e 527C     		ldrb	r2, [r2, #17]
 7821 0030 1A70     		strb	r2, [r3]
 7822 0032 1723     		mov	r3, #23
 7823 0034 FB18     		add	r3, r7, r3
 7824 0036 1B78     		ldrb	r3, [r3]
 7825 0038 002B     		cmp	r3, #0
 7826 003a 03D0     		beq	.L448
 7827              	.L447:
 7828              		.loc 1 4417 0 discriminator 3
 7829 003c 1723     		mov	r3, #23
 7830 003e FB18     		add	r3, r7, r3
 7831 0040 1B78     		ldrb	r3, [r3]
 7832 0042 96E0     		b	.L458
 7833              	.L448:
4418:.\lib_Fat/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 7834              		.loc 1 4418 0 is_stmt 1
 7835 0044 7B68     		ldr	r3, [r7, #4]
 7836 0046 1B7C     		ldrb	r3, [r3, #16]
 7837 0048 1A1C     		mov	r2, r3
 7838 004a 0223     		mov	r3, #2
 7839 004c 1340     		and	r3, r2
 7840 004e 01D1     		bne	.L450
 7841              		.loc 1 4418 0 is_stmt 0 discriminator 1
 7842 0050 0723     		mov	r3, #7
 7843 0052 8EE0     		b	.L458
 7844              	.L450:
4419:.\lib_Fat/ff.c **** 
4420:.\lib_Fat/ff.c **** 	if (fp->obj.objsize > fp->fptr) {
 7845              		.loc 1 4420 0 is_stmt 1
 7846 0054 7B68     		ldr	r3, [r7, #4]
 7847 0056 DA68     		ldr	r2, [r3, #12]
 7848 0058 7B68     		ldr	r3, [r7, #4]
 7849 005a 5B69     		ldr	r3, [r3, #20]
 7850 005c 9A42     		cmp	r2, r3
 7851 005e 00D8     		bhi	.LCB7124
 7852 0060 84E0     		b	.L451	@long jump
 7853              	.LCB7124:
4421:.\lib_Fat/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 7854              		.loc 1 4421 0
 7855 0062 7B68     		ldr	r3, [r7, #4]
 7856 0064 5B69     		ldr	r3, [r3, #20]
 7857 0066 002B     		cmp	r3, #0
 7858 0068 0FD1     		bne	.L452
4422:.\lib_Fat/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 7859              		.loc 1 4422 0
 7860 006a 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 217


 7861 006c 7B68     		ldr	r3, [r7, #4]
 7862 006e 9B68     		ldr	r3, [r3, #8]
 7863 0070 1721     		mov	r1, #23
 7864 0072 7C18     		add	r4, r7, r1
 7865 0074 101C     		mov	r0, r2
 7866 0076 191C     		mov	r1, r3
 7867 0078 0022     		mov	r2, #0
 7868 007a FFF7FEFF 		bl	remove_chain
 7869 007e 031C     		mov	r3, r0
 7870 0080 2370     		strb	r3, [r4]
4423:.\lib_Fat/ff.c **** 			fp->obj.sclust = 0;
 7871              		.loc 1 4423 0
 7872 0082 7B68     		ldr	r3, [r7, #4]
 7873 0084 0022     		mov	r2, #0
 7874 0086 9A60     		str	r2, [r3, #8]
 7875 0088 31E0     		b	.L453
 7876              	.L452:
4424:.\lib_Fat/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4425:.\lib_Fat/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
 7877              		.loc 1 4425 0
 7878 008a 7A68     		ldr	r2, [r7, #4]
 7879 008c 7B68     		ldr	r3, [r7, #4]
 7880 008e 9B69     		ldr	r3, [r3, #24]
 7881 0090 101C     		mov	r0, r2
 7882 0092 191C     		mov	r1, r3
 7883 0094 FFF7FEFF 		bl	get_fat
 7884 0098 031C     		mov	r3, r0
 7885 009a 3B61     		str	r3, [r7, #16]
4426:.\lib_Fat/ff.c **** 			res = FR_OK;
 7886              		.loc 1 4426 0
 7887 009c 1723     		mov	r3, #23
 7888 009e FB18     		add	r3, r7, r3
 7889 00a0 0022     		mov	r2, #0
 7890 00a2 1A70     		strb	r2, [r3]
4427:.\lib_Fat/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7891              		.loc 1 4427 0
 7892 00a4 3B69     		ldr	r3, [r7, #16]
 7893 00a6 0133     		add	r3, r3, #1
 7894 00a8 03D1     		bne	.L454
 7895              		.loc 1 4427 0 is_stmt 0 discriminator 1
 7896 00aa 1723     		mov	r3, #23
 7897 00ac FB18     		add	r3, r7, r3
 7898 00ae 0122     		mov	r2, #1
 7899 00b0 1A70     		strb	r2, [r3]
 7900              	.L454:
4428:.\lib_Fat/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 7901              		.loc 1 4428 0 is_stmt 1
 7902 00b2 3B69     		ldr	r3, [r7, #16]
 7903 00b4 012B     		cmp	r3, #1
 7904 00b6 03D1     		bne	.L455
 7905              		.loc 1 4428 0 is_stmt 0 discriminator 1
 7906 00b8 1723     		mov	r3, #23
 7907 00ba FB18     		add	r3, r7, r3
 7908 00bc 0222     		mov	r2, #2
 7909 00be 1A70     		strb	r2, [r3]
 7910              	.L455:
4429:.\lib_Fat/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 218


 7911              		.loc 1 4429 0 is_stmt 1
 7912 00c0 1723     		mov	r3, #23
 7913 00c2 FB18     		add	r3, r7, r3
 7914 00c4 1B78     		ldrb	r3, [r3]
 7915 00c6 002B     		cmp	r3, #0
 7916 00c8 11D1     		bne	.L453
 7917              		.loc 1 4429 0 is_stmt 0 discriminator 1
 7918 00ca FB68     		ldr	r3, [r7, #12]
 7919 00cc 5A69     		ldr	r2, [r3, #20]
 7920 00ce 3B69     		ldr	r3, [r7, #16]
 7921 00d0 9A42     		cmp	r2, r3
 7922 00d2 0CD9     		bls	.L453
4430:.\lib_Fat/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 7923              		.loc 1 4430 0 is_stmt 1
 7924 00d4 7968     		ldr	r1, [r7, #4]
 7925 00d6 7B68     		ldr	r3, [r7, #4]
 7926 00d8 9B69     		ldr	r3, [r3, #24]
 7927 00da 1722     		mov	r2, #23
 7928 00dc BC18     		add	r4, r7, r2
 7929 00de 3A69     		ldr	r2, [r7, #16]
 7930 00e0 081C     		mov	r0, r1
 7931 00e2 111C     		mov	r1, r2
 7932 00e4 1A1C     		mov	r2, r3
 7933 00e6 FFF7FEFF 		bl	remove_chain
 7934 00ea 031C     		mov	r3, r0
 7935 00ec 2370     		strb	r3, [r4]
 7936              	.L453:
4431:.\lib_Fat/ff.c **** 			}
4432:.\lib_Fat/ff.c **** 		}
4433:.\lib_Fat/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 7937              		.loc 1 4433 0
 7938 00ee 7B68     		ldr	r3, [r7, #4]
 7939 00f0 5A69     		ldr	r2, [r3, #20]
 7940 00f2 7B68     		ldr	r3, [r7, #4]
 7941 00f4 DA60     		str	r2, [r3, #12]
4434:.\lib_Fat/ff.c **** 		fp->flag |= FA_MODIFIED;
 7942              		.loc 1 4434 0
 7943 00f6 7B68     		ldr	r3, [r7, #4]
 7944 00f8 1B7C     		ldrb	r3, [r3, #16]
 7945 00fa 4022     		mov	r2, #64
 7946 00fc 1343     		orr	r3, r2
 7947 00fe DAB2     		uxtb	r2, r3
 7948 0100 7B68     		ldr	r3, [r7, #4]
 7949 0102 1A74     		strb	r2, [r3, #16]
4435:.\lib_Fat/ff.c **** #if !_FS_TINY
4436:.\lib_Fat/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 7950              		.loc 1 4436 0
 7951 0104 1723     		mov	r3, #23
 7952 0106 FB18     		add	r3, r7, r3
 7953 0108 1B78     		ldrb	r3, [r3]
 7954 010a 002B     		cmp	r3, #0
 7955 010c 20D1     		bne	.L456
 7956              		.loc 1 4436 0 is_stmt 0 discriminator 1
 7957 010e 7B68     		ldr	r3, [r7, #4]
 7958 0110 1B7C     		ldrb	r3, [r3, #16]
 7959 0112 DBB2     		uxtb	r3, r3
 7960 0114 5BB2     		sxtb	r3, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 219


 7961 0116 002B     		cmp	r3, #0
 7962 0118 1ADA     		bge	.L456
4437:.\lib_Fat/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 7963              		.loc 1 4437 0 is_stmt 1
 7964 011a FB68     		ldr	r3, [r7, #12]
 7965 011c 5978     		ldrb	r1, [r3, #1]
 7966 011e 7B68     		ldr	r3, [r7, #4]
 7967 0120 2833     		add	r3, r3, #40
 7968 0122 1A1C     		mov	r2, r3
 7969 0124 7B68     		ldr	r3, [r7, #4]
 7970 0126 DB69     		ldr	r3, [r3, #28]
 7971 0128 081C     		mov	r0, r1
 7972 012a 111C     		mov	r1, r2
 7973 012c 1A1C     		mov	r2, r3
 7974 012e 0123     		mov	r3, #1
 7975 0130 FFF7FEFF 		bl	disk_write
 7976 0134 031E     		sub	r3, r0, #0
 7977 0136 04D0     		beq	.L457
4438:.\lib_Fat/ff.c **** 				res = FR_DISK_ERR;
 7978              		.loc 1 4438 0
 7979 0138 1723     		mov	r3, #23
 7980 013a FB18     		add	r3, r7, r3
 7981 013c 0122     		mov	r2, #1
 7982 013e 1A70     		strb	r2, [r3]
 7983 0140 06E0     		b	.L456
 7984              	.L457:
4439:.\lib_Fat/ff.c **** 			} else {
4440:.\lib_Fat/ff.c **** 				fp->flag &= ~FA_DIRTY;
 7985              		.loc 1 4440 0
 7986 0142 7B68     		ldr	r3, [r7, #4]
 7987 0144 1B7C     		ldrb	r3, [r3, #16]
 7988 0146 7F22     		mov	r2, #127
 7989 0148 1340     		and	r3, r2
 7990 014a DAB2     		uxtb	r2, r3
 7991 014c 7B68     		ldr	r3, [r7, #4]
 7992 014e 1A74     		strb	r2, [r3, #16]
 7993              	.L456:
4441:.\lib_Fat/ff.c **** 			}
4442:.\lib_Fat/ff.c **** 		}
4443:.\lib_Fat/ff.c **** #endif
4444:.\lib_Fat/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
 7994              		.loc 1 4444 0
 7995 0150 1723     		mov	r3, #23
 7996 0152 FB18     		add	r3, r7, r3
 7997 0154 1B78     		ldrb	r3, [r3]
 7998 0156 002B     		cmp	r3, #0
 7999 0158 08D0     		beq	.L451
 8000              		.loc 1 4444 0 is_stmt 0 discriminator 1
 8001 015a 7B68     		ldr	r3, [r7, #4]
 8002 015c 1722     		mov	r2, #23
 8003 015e BA18     		add	r2, r7, r2
 8004 0160 1278     		ldrb	r2, [r2]
 8005 0162 5A74     		strb	r2, [r3, #17]
 8006 0164 1723     		mov	r3, #23
 8007 0166 FB18     		add	r3, r7, r3
 8008 0168 1B78     		ldrb	r3, [r3]
 8009 016a 02E0     		b	.L458
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 220


 8010              	.L451:
4445:.\lib_Fat/ff.c **** 	}
4446:.\lib_Fat/ff.c **** 
4447:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 8011              		.loc 1 4447 0 is_stmt 1
 8012 016c 1723     		mov	r3, #23
 8013 016e FB18     		add	r3, r7, r3
 8014 0170 1B78     		ldrb	r3, [r3]
 8015              	.L458:
4448:.\lib_Fat/ff.c **** }
 8016              		.loc 1 4448 0 discriminator 1
 8017 0172 181C     		mov	r0, r3
 8018 0174 BD46     		mov	sp, r7
 8019 0176 07B0     		add	sp, sp, #28
 8020              		@ sp needed
 8021 0178 90BD     		pop	{r4, r7, pc}
 8022              		.cfi_endproc
 8023              	.LFE44:
 8024              		.size	f_truncate, .-f_truncate
 8025 017a C046     		.section	.text.f_unlink,"ax",%progbits
 8026              		.align	2
 8027              		.global	f_unlink
 8028              		.code	16
 8029              		.thumb_func
 8030              		.type	f_unlink, %function
 8031              	f_unlink:
 8032              	.LFB45:
4449:.\lib_Fat/ff.c **** 
4450:.\lib_Fat/ff.c **** 
4451:.\lib_Fat/ff.c **** 
4452:.\lib_Fat/ff.c **** 
4453:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4454:.\lib_Fat/ff.c **** /* Delete a File/Directory                                               */
4455:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4456:.\lib_Fat/ff.c **** 
4457:.\lib_Fat/ff.c **** FRESULT f_unlink (
4458:.\lib_Fat/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4459:.\lib_Fat/ff.c **** )
4460:.\lib_Fat/ff.c **** {
 8033              		.loc 1 4460 0
 8034              		.cfi_startproc
 8035 0000 90B5     		push	{r4, r7, lr}
 8036              		.cfi_def_cfa_offset 12
 8037              		.cfi_offset 4, -12
 8038              		.cfi_offset 7, -8
 8039              		.cfi_offset 14, -4
 8040 0002 9DB0     		sub	sp, sp, #116
 8041              		.cfi_def_cfa_offset 128
 8042 0004 00AF     		add	r7, sp, #0
 8043              		.cfi_def_cfa_register 7
 8044 0006 7860     		str	r0, [r7, #4]
4461:.\lib_Fat/ff.c **** 	FRESULT res;
4462:.\lib_Fat/ff.c **** 	DIR dj, sdj;
4463:.\lib_Fat/ff.c **** 	DWORD dclst = 0;
 8045              		.loc 1 4463 0
 8046 0008 0023     		mov	r3, #0
 8047 000a BB66     		str	r3, [r7, #104]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 221


4464:.\lib_Fat/ff.c **** 	FATFS *fs;
4465:.\lib_Fat/ff.c **** #if _FS_EXFAT
4466:.\lib_Fat/ff.c **** 	_FDID obj;
4467:.\lib_Fat/ff.c **** #endif
4468:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4469:.\lib_Fat/ff.c **** 
4470:.\lib_Fat/ff.c **** 
4471:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4472:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 8048              		.loc 1 4472 0
 8049 000c 6F23     		mov	r3, #111
 8050 000e FC18     		add	r4, r7, r3
 8051 0010 3A1D     		add	r2, r7, #4
 8052 0012 0C23     		mov	r3, #12
 8053 0014 FB18     		add	r3, r7, r3
 8054 0016 101C     		mov	r0, r2
 8055 0018 191C     		mov	r1, r3
 8056 001a 0222     		mov	r2, #2
 8057 001c FFF7FEFF 		bl	find_volume
 8058 0020 031C     		mov	r3, r0
 8059 0022 2370     		strb	r3, [r4]
4473:.\lib_Fat/ff.c **** 	dj.obj.fs = fs;
 8060              		.loc 1 4473 0
 8061 0024 FA68     		ldr	r2, [r7, #12]
 8062 0026 3C23     		mov	r3, #60
 8063 0028 FB18     		add	r3, r7, r3
 8064 002a 1A60     		str	r2, [r3]
4474:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 8065              		.loc 1 4474 0
 8066 002c 6F23     		mov	r3, #111
 8067 002e FB18     		add	r3, r7, r3
 8068 0030 1B78     		ldrb	r3, [r3]
 8069 0032 002B     		cmp	r3, #0
 8070 0034 00D0     		beq	.LCB7324
 8071 0036 A0E0     		b	.L460	@long jump
 8072              	.LCB7324:
4475:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4476:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 8073              		.loc 1 4476 0
 8074 0038 7B68     		ldr	r3, [r7, #4]
 8075 003a 6F22     		mov	r2, #111
 8076 003c BC18     		add	r4, r7, r2
 8077 003e 3C22     		mov	r2, #60
 8078 0040 BA18     		add	r2, r7, r2
 8079 0042 101C     		mov	r0, r2
 8080 0044 191C     		mov	r1, r3
 8081 0046 FFF7FEFF 		bl	follow_path
 8082 004a 031C     		mov	r3, r0
 8083 004c 2370     		strb	r3, [r4]
4477:.\lib_Fat/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4478:.\lib_Fat/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4479:.\lib_Fat/ff.c **** 		}
4480:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
4481:.\lib_Fat/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4482:.\lib_Fat/ff.c **** #endif
4483:.\lib_Fat/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 8084              		.loc 1 4483 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 222


 8085 004e 6F23     		mov	r3, #111
 8086 0050 FB18     		add	r3, r7, r3
 8087 0052 1B78     		ldrb	r3, [r3]
 8088 0054 002B     		cmp	r3, #0
 8089 0056 00D0     		beq	.LCB7339
 8090 0058 8FE0     		b	.L460	@long jump
 8091              	.LCB7339:
4484:.\lib_Fat/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 8092              		.loc 1 4484 0
 8093 005a 3C23     		mov	r3, #60
 8094 005c FB18     		add	r3, r7, r3
 8095 005e 2B22     		mov	r2, #43
 8096 0060 9B5C     		ldrb	r3, [r3, r2]
 8097 0062 DBB2     		uxtb	r3, r3
 8098 0064 5BB2     		sxtb	r3, r3
 8099 0066 002B     		cmp	r3, #0
 8100 0068 04DA     		bge	.L461
4485:.\lib_Fat/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8101              		.loc 1 4485 0
 8102 006a 6F23     		mov	r3, #111
 8103 006c FB18     		add	r3, r7, r3
 8104 006e 0622     		mov	r2, #6
 8105 0070 1A70     		strb	r2, [r3]
 8106 0072 0AE0     		b	.L462
 8107              	.L461:
4486:.\lib_Fat/ff.c **** 			} else {
4487:.\lib_Fat/ff.c **** 				if (dj.obj.attr & AM_RDO) {
 8108              		.loc 1 4487 0
 8109 0074 3C23     		mov	r3, #60
 8110 0076 FB18     		add	r3, r7, r3
 8111 0078 9B79     		ldrb	r3, [r3, #6]
 8112 007a 1A1C     		mov	r2, r3
 8113 007c 0123     		mov	r3, #1
 8114 007e 1340     		and	r3, r2
 8115 0080 03D0     		beq	.L462
4488:.\lib_Fat/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 8116              		.loc 1 4488 0
 8117 0082 6F23     		mov	r3, #111
 8118 0084 FB18     		add	r3, r7, r3
 8119 0086 0722     		mov	r2, #7
 8120 0088 1A70     		strb	r2, [r3]
 8121              	.L462:
4489:.\lib_Fat/ff.c **** 				}
4490:.\lib_Fat/ff.c **** 			}
4491:.\lib_Fat/ff.c **** 			if (res == FR_OK) {
 8122              		.loc 1 4491 0
 8123 008a 6F23     		mov	r3, #111
 8124 008c FB18     		add	r3, r7, r3
 8125 008e 1B78     		ldrb	r3, [r3]
 8126 0090 002B     		cmp	r3, #0
 8127 0092 43D1     		bne	.L463
4492:.\lib_Fat/ff.c **** #if _FS_EXFAT
4493:.\lib_Fat/ff.c **** 				obj.fs = fs;
4494:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4495:.\lib_Fat/ff.c **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4496:.\lib_Fat/ff.c **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4497:.\lib_Fat/ff.c **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 223


4498:.\lib_Fat/ff.c **** 				} else
4499:.\lib_Fat/ff.c **** #endif
4500:.\lib_Fat/ff.c **** 				{
4501:.\lib_Fat/ff.c **** 					dclst = ld_clust(fs, dj.dir);
 8128              		.loc 1 4501 0
 8129 0094 FA68     		ldr	r2, [r7, #12]
 8130 0096 3C23     		mov	r3, #60
 8131 0098 FB18     		add	r3, r7, r3
 8132 009a DB69     		ldr	r3, [r3, #28]
 8133 009c 101C     		mov	r0, r2
 8134 009e 191C     		mov	r1, r3
 8135 00a0 FFF7FEFF 		bl	ld_clust
 8136 00a4 031C     		mov	r3, r0
 8137 00a6 BB66     		str	r3, [r7, #104]
4502:.\lib_Fat/ff.c **** 				}
4503:.\lib_Fat/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 8138              		.loc 1 4503 0
 8139 00a8 3C23     		mov	r3, #60
 8140 00aa FB18     		add	r3, r7, r3
 8141 00ac 9B79     		ldrb	r3, [r3, #6]
 8142 00ae 1A1C     		mov	r2, r3
 8143 00b0 1023     		mov	r3, #16
 8144 00b2 1340     		and	r3, r2
 8145 00b4 32D0     		beq	.L463
4504:.\lib_Fat/ff.c **** #if _FS_RPATH != 0
4505:.\lib_Fat/ff.c **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4506:.\lib_Fat/ff.c **** 						res = FR_DENIED;
4507:.\lib_Fat/ff.c **** 					} else
4508:.\lib_Fat/ff.c **** #endif
4509:.\lib_Fat/ff.c **** 					{
4510:.\lib_Fat/ff.c **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
 8146              		.loc 1 4510 0
 8147 00b6 FA68     		ldr	r2, [r7, #12]
 8148 00b8 1023     		mov	r3, #16
 8149 00ba FB18     		add	r3, r7, r3
 8150 00bc 1A60     		str	r2, [r3]
4511:.\lib_Fat/ff.c **** 						sdj.obj.sclust = dclst;
 8151              		.loc 1 4511 0
 8152 00be 1023     		mov	r3, #16
 8153 00c0 FB18     		add	r3, r7, r3
 8154 00c2 BA6E     		ldr	r2, [r7, #104]
 8155 00c4 9A60     		str	r2, [r3, #8]
4512:.\lib_Fat/ff.c **** #if _FS_EXFAT
4513:.\lib_Fat/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4514:.\lib_Fat/ff.c **** 							sdj.obj.objsize = obj.objsize;
4515:.\lib_Fat/ff.c **** 							sdj.obj.stat = obj.stat;
4516:.\lib_Fat/ff.c **** 						}
4517:.\lib_Fat/ff.c **** #endif
4518:.\lib_Fat/ff.c **** 						res = dir_sdi(&sdj, 0);
 8156              		.loc 1 4518 0
 8157 00c6 6F23     		mov	r3, #111
 8158 00c8 FC18     		add	r4, r7, r3
 8159 00ca 1023     		mov	r3, #16
 8160 00cc FB18     		add	r3, r7, r3
 8161 00ce 181C     		mov	r0, r3
 8162 00d0 0021     		mov	r1, #0
 8163 00d2 FFF7FEFF 		bl	dir_sdi
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 224


 8164 00d6 031C     		mov	r3, r0
 8165 00d8 2370     		strb	r3, [r4]
4519:.\lib_Fat/ff.c **** 						if (res == FR_OK) {
 8166              		.loc 1 4519 0
 8167 00da 6F23     		mov	r3, #111
 8168 00dc FB18     		add	r3, r7, r3
 8169 00de 1B78     		ldrb	r3, [r3]
 8170 00e0 002B     		cmp	r3, #0
 8171 00e2 1BD1     		bne	.L463
4520:.\lib_Fat/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
 8172              		.loc 1 4520 0
 8173 00e4 6F23     		mov	r3, #111
 8174 00e6 FC18     		add	r4, r7, r3
 8175 00e8 1023     		mov	r3, #16
 8176 00ea FB18     		add	r3, r7, r3
 8177 00ec 181C     		mov	r0, r3
 8178 00ee 0021     		mov	r1, #0
 8179 00f0 FFF7FEFF 		bl	dir_read
 8180 00f4 031C     		mov	r3, r0
 8181 00f6 2370     		strb	r3, [r4]
4521:.\lib_Fat/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8182              		.loc 1 4521 0
 8183 00f8 6F23     		mov	r3, #111
 8184 00fa FB18     		add	r3, r7, r3
 8185 00fc 1B78     		ldrb	r3, [r3]
 8186 00fe 002B     		cmp	r3, #0
 8187 0100 03D1     		bne	.L464
 8188              		.loc 1 4521 0 is_stmt 0 discriminator 1
 8189 0102 6F23     		mov	r3, #111
 8190 0104 FB18     		add	r3, r7, r3
 8191 0106 0722     		mov	r2, #7
 8192 0108 1A70     		strb	r2, [r3]
 8193              	.L464:
4522:.\lib_Fat/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8194              		.loc 1 4522 0 is_stmt 1
 8195 010a 6F23     		mov	r3, #111
 8196 010c FB18     		add	r3, r7, r3
 8197 010e 1B78     		ldrb	r3, [r3]
 8198 0110 042B     		cmp	r3, #4
 8199 0112 03D1     		bne	.L463
 8200              		.loc 1 4522 0 is_stmt 0 discriminator 1
 8201 0114 6F23     		mov	r3, #111
 8202 0116 FB18     		add	r3, r7, r3
 8203 0118 0022     		mov	r2, #0
 8204 011a 1A70     		strb	r2, [r3]
 8205              	.L463:
4523:.\lib_Fat/ff.c **** 						}
4524:.\lib_Fat/ff.c **** 					}
4525:.\lib_Fat/ff.c **** 				}
4526:.\lib_Fat/ff.c **** 			}
4527:.\lib_Fat/ff.c **** 			if (res == FR_OK) {
 8206              		.loc 1 4527 0 is_stmt 1
 8207 011c 6F23     		mov	r3, #111
 8208 011e FB18     		add	r3, r7, r3
 8209 0120 1B78     		ldrb	r3, [r3]
 8210 0122 002B     		cmp	r3, #0
 8211 0124 29D1     		bne	.L460
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 225


4528:.\lib_Fat/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 8212              		.loc 1 4528 0
 8213 0126 6F23     		mov	r3, #111
 8214 0128 FC18     		add	r4, r7, r3
 8215 012a 3C23     		mov	r3, #60
 8216 012c FB18     		add	r3, r7, r3
 8217 012e 181C     		mov	r0, r3
 8218 0130 FFF7FEFF 		bl	dir_remove
 8219 0134 031C     		mov	r3, r0
 8220 0136 2370     		strb	r3, [r4]
4529:.\lib_Fat/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8221              		.loc 1 4529 0
 8222 0138 6F23     		mov	r3, #111
 8223 013a FB18     		add	r3, r7, r3
 8224 013c 1B78     		ldrb	r3, [r3]
 8225 013e 002B     		cmp	r3, #0
 8226 0140 0ED1     		bne	.L465
 8227              		.loc 1 4529 0 is_stmt 0 discriminator 1
 8228 0142 BB6E     		ldr	r3, [r7, #104]
 8229 0144 002B     		cmp	r3, #0
 8230 0146 0BD0     		beq	.L465
4530:.\lib_Fat/ff.c **** #if _FS_EXFAT
4531:.\lib_Fat/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4532:.\lib_Fat/ff.c **** #else
4533:.\lib_Fat/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
 8231              		.loc 1 4533 0 is_stmt 1
 8232 0148 6F23     		mov	r3, #111
 8233 014a FC18     		add	r4, r7, r3
 8234 014c 3C23     		mov	r3, #60
 8235 014e FA18     		add	r2, r7, r3
 8236 0150 BB6E     		ldr	r3, [r7, #104]
 8237 0152 101C     		mov	r0, r2
 8238 0154 191C     		mov	r1, r3
 8239 0156 0022     		mov	r2, #0
 8240 0158 FFF7FEFF 		bl	remove_chain
 8241 015c 031C     		mov	r3, r0
 8242 015e 2370     		strb	r3, [r4]
 8243              	.L465:
4534:.\lib_Fat/ff.c **** #endif
4535:.\lib_Fat/ff.c **** 				}
4536:.\lib_Fat/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 8244              		.loc 1 4536 0
 8245 0160 6F23     		mov	r3, #111
 8246 0162 FB18     		add	r3, r7, r3
 8247 0164 1B78     		ldrb	r3, [r3]
 8248 0166 002B     		cmp	r3, #0
 8249 0168 07D1     		bne	.L460
 8250              		.loc 1 4536 0 is_stmt 0 discriminator 1
 8251 016a FB68     		ldr	r3, [r7, #12]
 8252 016c 6F22     		mov	r2, #111
 8253 016e BC18     		add	r4, r7, r2
 8254 0170 181C     		mov	r0, r3
 8255 0172 FFF7FEFF 		bl	sync_fs
 8256 0176 031C     		mov	r3, r0
 8257 0178 2370     		strb	r3, [r4]
 8258              	.L460:
4537:.\lib_Fat/ff.c **** 			}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 226


4538:.\lib_Fat/ff.c **** 		}
4539:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4540:.\lib_Fat/ff.c **** 	}
4541:.\lib_Fat/ff.c **** 
4542:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 8259              		.loc 1 4542 0 is_stmt 1
 8260 017a 6F23     		mov	r3, #111
 8261 017c FB18     		add	r3, r7, r3
 8262 017e 1B78     		ldrb	r3, [r3]
4543:.\lib_Fat/ff.c **** }
 8263              		.loc 1 4543 0
 8264 0180 181C     		mov	r0, r3
 8265 0182 BD46     		mov	sp, r7
 8266 0184 1DB0     		add	sp, sp, #116
 8267              		@ sp needed
 8268 0186 90BD     		pop	{r4, r7, pc}
 8269              		.cfi_endproc
 8270              	.LFE45:
 8271              		.size	f_unlink, .-f_unlink
 8272              		.section	.text.f_mkdir,"ax",%progbits
 8273              		.align	2
 8274              		.global	f_mkdir
 8275              		.code	16
 8276              		.thumb_func
 8277              		.type	f_mkdir, %function
 8278              	f_mkdir:
 8279              	.LFB46:
4544:.\lib_Fat/ff.c **** 
4545:.\lib_Fat/ff.c **** 
4546:.\lib_Fat/ff.c **** 
4547:.\lib_Fat/ff.c **** 
4548:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4549:.\lib_Fat/ff.c **** /* Create a Directory                                                    */
4550:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4551:.\lib_Fat/ff.c **** 
4552:.\lib_Fat/ff.c **** FRESULT f_mkdir (
4553:.\lib_Fat/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4554:.\lib_Fat/ff.c **** )
4555:.\lib_Fat/ff.c **** {
 8280              		.loc 1 4555 0
 8281              		.cfi_startproc
 8282 0000 90B5     		push	{r4, r7, lr}
 8283              		.cfi_def_cfa_offset 12
 8284              		.cfi_offset 4, -12
 8285              		.cfi_offset 7, -8
 8286              		.cfi_offset 14, -4
 8287 0002 97B0     		sub	sp, sp, #92
 8288              		.cfi_def_cfa_offset 104
 8289 0004 00AF     		add	r7, sp, #0
 8290              		.cfi_def_cfa_register 7
 8291 0006 7860     		str	r0, [r7, #4]
4556:.\lib_Fat/ff.c **** 	FRESULT res;
4557:.\lib_Fat/ff.c **** 	DIR dj;
4558:.\lib_Fat/ff.c **** 	FATFS *fs;
4559:.\lib_Fat/ff.c **** 	BYTE *dir;
4560:.\lib_Fat/ff.c **** 	UINT n;
4561:.\lib_Fat/ff.c **** 	DWORD dsc, dcl, pcl, tm;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 227


4562:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4563:.\lib_Fat/ff.c **** 
4564:.\lib_Fat/ff.c **** 
4565:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4566:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
 8292              		.loc 1 4566 0
 8293 0008 5723     		mov	r3, #87
 8294 000a FC18     		add	r4, r7, r3
 8295 000c 3A1D     		add	r2, r7, #4
 8296 000e 0C23     		mov	r3, #12
 8297 0010 FB18     		add	r3, r7, r3
 8298 0012 101C     		mov	r0, r2
 8299 0014 191C     		mov	r1, r3
 8300 0016 0222     		mov	r2, #2
 8301 0018 FFF7FEFF 		bl	find_volume
 8302 001c 031C     		mov	r3, r0
 8303 001e 2370     		strb	r3, [r4]
4567:.\lib_Fat/ff.c **** 	dj.obj.fs = fs;
 8304              		.loc 1 4567 0
 8305 0020 FA68     		ldr	r2, [r7, #12]
 8306 0022 1023     		mov	r3, #16
 8307 0024 FB18     		add	r3, r7, r3
 8308 0026 1A60     		str	r2, [r3]
4568:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 8309              		.loc 1 4568 0
 8310 0028 5723     		mov	r3, #87
 8311 002a FB18     		add	r3, r7, r3
 8312 002c 1B78     		ldrb	r3, [r3]
 8313 002e 002B     		cmp	r3, #0
 8314 0030 00D0     		beq	.LCB7541
 8315 0032 17E1     		b	.L468	@long jump
 8316              	.LCB7541:
4569:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4570:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 8317              		.loc 1 4570 0
 8318 0034 7B68     		ldr	r3, [r7, #4]
 8319 0036 5722     		mov	r2, #87
 8320 0038 BC18     		add	r4, r7, r2
 8321 003a 1022     		mov	r2, #16
 8322 003c BA18     		add	r2, r7, r2
 8323 003e 101C     		mov	r0, r2
 8324 0040 191C     		mov	r1, r3
 8325 0042 FFF7FEFF 		bl	follow_path
 8326 0046 031C     		mov	r3, r0
 8327 0048 2370     		strb	r3, [r4]
4571:.\lib_Fat/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8328              		.loc 1 4571 0
 8329 004a 5723     		mov	r3, #87
 8330 004c FB18     		add	r3, r7, r3
 8331 004e 1B78     		ldrb	r3, [r3]
 8332 0050 002B     		cmp	r3, #0
 8333 0052 03D1     		bne	.L483
 8334              		.loc 1 4571 0 is_stmt 0 discriminator 1
 8335 0054 5723     		mov	r3, #87
 8336 0056 FB18     		add	r3, r7, r3
 8337 0058 0822     		mov	r2, #8
 8338 005a 1A70     		strb	r2, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 228


 8339              	.L483:
4572:.\lib_Fat/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4573:.\lib_Fat/ff.c **** 			res = FR_INVALID_NAME;
4574:.\lib_Fat/ff.c **** 		}
4575:.\lib_Fat/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8340              		.loc 1 4575 0 is_stmt 1
 8341 005c 5723     		mov	r3, #87
 8342 005e FB18     		add	r3, r7, r3
 8343 0060 1B78     		ldrb	r3, [r3]
 8344 0062 042B     		cmp	r3, #4
 8345 0064 00D0     		beq	.LCB7567
 8346 0066 FDE0     		b	.L468	@long jump
 8347              	.LCB7567:
4576:.\lib_Fat/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8348              		.loc 1 4576 0
 8349 0068 1023     		mov	r3, #16
 8350 006a FB18     		add	r3, r7, r3
 8351 006c 181C     		mov	r0, r3
 8352 006e 0021     		mov	r1, #0
 8353 0070 FFF7FEFF 		bl	create_chain
 8354 0074 031C     		mov	r3, r0
 8355 0076 7B64     		str	r3, [r7, #68]
4577:.\lib_Fat/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8356              		.loc 1 4577 0
 8357 0078 FB68     		ldr	r3, [r7, #12]
 8358 007a 5B89     		ldrh	r3, [r3, #10]
 8359 007c 5A02     		lsl	r2, r3, #9
 8360 007e 1023     		mov	r3, #16
 8361 0080 FB18     		add	r3, r7, r3
 8362 0082 DA60     		str	r2, [r3, #12]
4578:.\lib_Fat/ff.c **** 			res = FR_OK;
 8363              		.loc 1 4578 0
 8364 0084 5723     		mov	r3, #87
 8365 0086 FB18     		add	r3, r7, r3
 8366 0088 0022     		mov	r2, #0
 8367 008a 1A70     		strb	r2, [r3]
4579:.\lib_Fat/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8368              		.loc 1 4579 0
 8369 008c 7B6C     		ldr	r3, [r7, #68]
 8370 008e 002B     		cmp	r3, #0
 8371 0090 03D1     		bne	.L470
 8372              		.loc 1 4579 0 is_stmt 0 discriminator 1
 8373 0092 5723     		mov	r3, #87
 8374 0094 FB18     		add	r3, r7, r3
 8375 0096 0722     		mov	r2, #7
 8376 0098 1A70     		strb	r2, [r3]
 8377              	.L470:
4580:.\lib_Fat/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 8378              		.loc 1 4580 0 is_stmt 1
 8379 009a 7B6C     		ldr	r3, [r7, #68]
 8380 009c 012B     		cmp	r3, #1
 8381 009e 03D1     		bne	.L471
 8382              		.loc 1 4580 0 is_stmt 0 discriminator 1
 8383 00a0 5723     		mov	r3, #87
 8384 00a2 FB18     		add	r3, r7, r3
 8385 00a4 0222     		mov	r2, #2
 8386 00a6 1A70     		strb	r2, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 229


 8387              	.L471:
4581:.\lib_Fat/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8388              		.loc 1 4581 0 is_stmt 1
 8389 00a8 7B6C     		ldr	r3, [r7, #68]
 8390 00aa 0133     		add	r3, r3, #1
 8391 00ac 03D1     		bne	.L472
 8392              		.loc 1 4581 0 is_stmt 0 discriminator 1
 8393 00ae 5723     		mov	r3, #87
 8394 00b0 FB18     		add	r3, r7, r3
 8395 00b2 0122     		mov	r2, #1
 8396 00b4 1A70     		strb	r2, [r3]
 8397              	.L472:
4582:.\lib_Fat/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8398              		.loc 1 4582 0 is_stmt 1
 8399 00b6 5723     		mov	r3, #87
 8400 00b8 FB18     		add	r3, r7, r3
 8401 00ba 1B78     		ldrb	r3, [r3]
 8402 00bc 002B     		cmp	r3, #0
 8403 00be 07D1     		bne	.L473
 8404              		.loc 1 4582 0 is_stmt 0 discriminator 1
 8405 00c0 FB68     		ldr	r3, [r7, #12]
 8406 00c2 5722     		mov	r2, #87
 8407 00c4 BC18     		add	r4, r7, r2
 8408 00c6 181C     		mov	r0, r3
 8409 00c8 FFF7FEFF 		bl	sync_window
 8410 00cc 031C     		mov	r3, r0
 8411 00ce 2370     		strb	r3, [r4]
 8412              	.L473:
4583:.\lib_Fat/ff.c **** 			tm = GET_FATTIME();
 8413              		.loc 1 4583 0 is_stmt 1
 8414 00d0 0023     		mov	r3, #0
 8415 00d2 3B64     		str	r3, [r7, #64]
4584:.\lib_Fat/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 8416              		.loc 1 4584 0
 8417 00d4 5723     		mov	r3, #87
 8418 00d6 FB18     		add	r3, r7, r3
 8419 00d8 1B78     		ldrb	r3, [r3]
 8420 00da 002B     		cmp	r3, #0
 8421 00dc 00D0     		beq	.LCB7632
 8422 00de 7DE0     		b	.L474	@long jump
 8423              	.LCB7632:
4585:.\lib_Fat/ff.c **** 				dsc = clust2sect(fs, dcl);
 8424              		.loc 1 4585 0
 8425 00e0 FA68     		ldr	r2, [r7, #12]
 8426 00e2 7B6C     		ldr	r3, [r7, #68]
 8427 00e4 101C     		mov	r0, r2
 8428 00e6 191C     		mov	r1, r3
 8429 00e8 FFF7FEFF 		bl	clust2sect
 8430 00ec 031C     		mov	r3, r0
 8431 00ee FB64     		str	r3, [r7, #76]
4586:.\lib_Fat/ff.c **** 				dir = fs->win;
 8432              		.loc 1 4586 0
 8433 00f0 FB68     		ldr	r3, [r7, #12]
 8434 00f2 3033     		add	r3, r3, #48
 8435 00f4 FB63     		str	r3, [r7, #60]
4587:.\lib_Fat/ff.c **** 				mem_set(dir, 0, SS(fs));
 8436              		.loc 1 4587 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 230


 8437 00f6 FA6B     		ldr	r2, [r7, #60]
 8438 00f8 8023     		mov	r3, #128
 8439 00fa 9B00     		lsl	r3, r3, #2
 8440 00fc 101C     		mov	r0, r2
 8441 00fe 0021     		mov	r1, #0
 8442 0100 1A1C     		mov	r2, r3
 8443 0102 FFF7FEFF 		bl	mem_set
4588:.\lib_Fat/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4589:.\lib_Fat/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8444              		.loc 1 4589 0
 8445 0106 FB6B     		ldr	r3, [r7, #60]
 8446 0108 181C     		mov	r0, r3
 8447 010a 2021     		mov	r1, #32
 8448 010c 0B22     		mov	r2, #11
 8449 010e FFF7FEFF 		bl	mem_set
4590:.\lib_Fat/ff.c **** 					dir[DIR_Name] = '.';
 8450              		.loc 1 4590 0
 8451 0112 FB6B     		ldr	r3, [r7, #60]
 8452 0114 2E22     		mov	r2, #46
 8453 0116 1A70     		strb	r2, [r3]
4591:.\lib_Fat/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 8454              		.loc 1 4591 0
 8455 0118 FB6B     		ldr	r3, [r7, #60]
 8456 011a 0B33     		add	r3, r3, #11
 8457 011c 1022     		mov	r2, #16
 8458 011e 1A70     		strb	r2, [r3]
4592:.\lib_Fat/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 8459              		.loc 1 4592 0
 8460 0120 FB6B     		ldr	r3, [r7, #60]
 8461 0122 1633     		add	r3, r3, #22
 8462 0124 1A1C     		mov	r2, r3
 8463 0126 3B6C     		ldr	r3, [r7, #64]
 8464 0128 101C     		mov	r0, r2
 8465 012a 191C     		mov	r1, r3
 8466 012c FFF7FEFF 		bl	st_dword
4593:.\lib_Fat/ff.c **** 					st_clust(fs, dir, dcl);
 8467              		.loc 1 4593 0
 8468 0130 F968     		ldr	r1, [r7, #12]
 8469 0132 FA6B     		ldr	r2, [r7, #60]
 8470 0134 7B6C     		ldr	r3, [r7, #68]
 8471 0136 081C     		mov	r0, r1
 8472 0138 111C     		mov	r1, r2
 8473 013a 1A1C     		mov	r2, r3
 8474 013c FFF7FEFF 		bl	st_clust
4594:.\lib_Fat/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8475              		.loc 1 4594 0
 8476 0140 FB6B     		ldr	r3, [r7, #60]
 8477 0142 2033     		add	r3, r3, #32
 8478 0144 1A1C     		mov	r2, r3
 8479 0146 FB6B     		ldr	r3, [r7, #60]
 8480 0148 101C     		mov	r0, r2
 8481 014a 191C     		mov	r1, r3
 8482 014c 2022     		mov	r2, #32
 8483 014e FFF7FEFF 		bl	mem_cpy
4595:.\lib_Fat/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8484              		.loc 1 4595 0
 8485 0152 FB6B     		ldr	r3, [r7, #60]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 231


 8486 0154 2133     		add	r3, r3, #33
 8487 0156 2E22     		mov	r2, #46
 8488 0158 1A70     		strb	r2, [r3]
 8489 015a 1023     		mov	r3, #16
 8490 015c FB18     		add	r3, r7, r3
 8491 015e 9B68     		ldr	r3, [r3, #8]
 8492 0160 BB64     		str	r3, [r7, #72]
4596:.\lib_Fat/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8493              		.loc 1 4596 0
 8494 0162 FB68     		ldr	r3, [r7, #12]
 8495 0164 1B78     		ldrb	r3, [r3]
 8496 0166 032B     		cmp	r3, #3
 8497 0168 06D1     		bne	.L475
 8498              		.loc 1 4596 0 is_stmt 0 discriminator 1
 8499 016a FB68     		ldr	r3, [r7, #12]
 8500 016c 5A6A     		ldr	r2, [r3, #36]
 8501 016e BB6C     		ldr	r3, [r7, #72]
 8502 0170 9A42     		cmp	r2, r3
 8503 0172 01D1     		bne	.L475
 8504              		.loc 1 4596 0 discriminator 2
 8505 0174 0023     		mov	r3, #0
 8506 0176 BB64     		str	r3, [r7, #72]
 8507              	.L475:
4597:.\lib_Fat/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 8508              		.loc 1 4597 0 is_stmt 1
 8509 0178 F968     		ldr	r1, [r7, #12]
 8510 017a FB6B     		ldr	r3, [r7, #60]
 8511 017c 2033     		add	r3, r3, #32
 8512 017e 1A1C     		mov	r2, r3
 8513 0180 BB6C     		ldr	r3, [r7, #72]
 8514 0182 081C     		mov	r0, r1
 8515 0184 111C     		mov	r1, r2
 8516 0186 1A1C     		mov	r2, r3
 8517 0188 FFF7FEFF 		bl	st_clust
4598:.\lib_Fat/ff.c **** 				}
4599:.\lib_Fat/ff.c **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8518              		.loc 1 4599 0
 8519 018c FB68     		ldr	r3, [r7, #12]
 8520 018e 5B89     		ldrh	r3, [r3, #10]
 8521 0190 3B65     		str	r3, [r7, #80]
 8522 0192 20E0     		b	.L476
 8523              	.L478:
4600:.\lib_Fat/ff.c **** 					fs->winsect = dsc++;
 8524              		.loc 1 4600 0
 8525 0194 FB68     		ldr	r3, [r7, #12]
 8526 0196 FA6C     		ldr	r2, [r7, #76]
 8527 0198 511C     		add	r1, r2, #1
 8528 019a F964     		str	r1, [r7, #76]
 8529 019c DA62     		str	r2, [r3, #44]
4601:.\lib_Fat/ff.c **** 					fs->wflag = 1;
 8530              		.loc 1 4601 0
 8531 019e FB68     		ldr	r3, [r7, #12]
 8532 01a0 0122     		mov	r2, #1
 8533 01a2 DA70     		strb	r2, [r3, #3]
4602:.\lib_Fat/ff.c **** 					res = sync_window(fs);
 8534              		.loc 1 4602 0
 8535 01a4 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 232


 8536 01a6 5722     		mov	r2, #87
 8537 01a8 BC18     		add	r4, r7, r2
 8538 01aa 181C     		mov	r0, r3
 8539 01ac FFF7FEFF 		bl	sync_window
 8540 01b0 031C     		mov	r3, r0
 8541 01b2 2370     		strb	r3, [r4]
4603:.\lib_Fat/ff.c **** 					if (res != FR_OK) break;
 8542              		.loc 1 4603 0
 8543 01b4 5723     		mov	r3, #87
 8544 01b6 FB18     		add	r3, r7, r3
 8545 01b8 1B78     		ldrb	r3, [r3]
 8546 01ba 002B     		cmp	r3, #0
 8547 01bc 00D0     		beq	.L477
 8548 01be 0DE0     		b	.L474
 8549              	.L477:
4604:.\lib_Fat/ff.c **** 					mem_set(dir, 0, SS(fs));
 8550              		.loc 1 4604 0 discriminator 2
 8551 01c0 FA6B     		ldr	r2, [r7, #60]
 8552 01c2 8023     		mov	r3, #128
 8553 01c4 9B00     		lsl	r3, r3, #2
 8554 01c6 101C     		mov	r0, r2
 8555 01c8 0021     		mov	r1, #0
 8556 01ca 1A1C     		mov	r2, r3
 8557 01cc FFF7FEFF 		bl	mem_set
4599:.\lib_Fat/ff.c **** 					fs->winsect = dsc++;
 8558              		.loc 1 4599 0 discriminator 2
 8559 01d0 3B6D     		ldr	r3, [r7, #80]
 8560 01d2 013B     		sub	r3, r3, #1
 8561 01d4 3B65     		str	r3, [r7, #80]
 8562              	.L476:
4599:.\lib_Fat/ff.c **** 					fs->winsect = dsc++;
 8563              		.loc 1 4599 0 is_stmt 0 discriminator 1
 8564 01d6 3B6D     		ldr	r3, [r7, #80]
 8565 01d8 002B     		cmp	r3, #0
 8566 01da DBD1     		bne	.L478
 8567              	.L474:
4605:.\lib_Fat/ff.c **** 				}
4606:.\lib_Fat/ff.c **** 			}
4607:.\lib_Fat/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 8568              		.loc 1 4607 0 is_stmt 1
 8569 01dc 5723     		mov	r3, #87
 8570 01de FB18     		add	r3, r7, r3
 8571 01e0 1B78     		ldrb	r3, [r3]
 8572 01e2 002B     		cmp	r3, #0
 8573 01e4 08D1     		bne	.L479
 8574              		.loc 1 4607 0 is_stmt 0 discriminator 1
 8575 01e6 5723     		mov	r3, #87
 8576 01e8 FC18     		add	r4, r7, r3
 8577 01ea 1023     		mov	r3, #16
 8578 01ec FB18     		add	r3, r7, r3
 8579 01ee 181C     		mov	r0, r3
 8580 01f0 FFF7FEFF 		bl	dir_register
 8581 01f4 031C     		mov	r3, r0
 8582 01f6 2370     		strb	r3, [r4]
 8583              	.L479:
4608:.\lib_Fat/ff.c **** 			if (res == FR_OK) {
 8584              		.loc 1 4608 0 is_stmt 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 233


 8585 01f8 5723     		mov	r3, #87
 8586 01fa FB18     		add	r3, r7, r3
 8587 01fc 1B78     		ldrb	r3, [r3]
 8588 01fe 002B     		cmp	r3, #0
 8589 0200 28D1     		bne	.L480
4609:.\lib_Fat/ff.c **** #if _FS_EXFAT
4610:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4611:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4612:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4613:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4614:.\lib_Fat/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4615:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4616:.\lib_Fat/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4617:.\lib_Fat/ff.c **** 					res = store_xdir(&dj);
4618:.\lib_Fat/ff.c **** 				} else
4619:.\lib_Fat/ff.c **** #endif
4620:.\lib_Fat/ff.c **** 				{
4621:.\lib_Fat/ff.c **** 					dir = dj.dir;
 8590              		.loc 1 4621 0
 8591 0202 1023     		mov	r3, #16
 8592 0204 FB18     		add	r3, r7, r3
 8593 0206 DB69     		ldr	r3, [r3, #28]
 8594 0208 FB63     		str	r3, [r7, #60]
4622:.\lib_Fat/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8595              		.loc 1 4622 0
 8596 020a FB6B     		ldr	r3, [r7, #60]
 8597 020c 1633     		add	r3, r3, #22
 8598 020e 1A1C     		mov	r2, r3
 8599 0210 3B6C     		ldr	r3, [r7, #64]
 8600 0212 101C     		mov	r0, r2
 8601 0214 191C     		mov	r1, r3
 8602 0216 FFF7FEFF 		bl	st_dword
4623:.\lib_Fat/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 8603              		.loc 1 4623 0
 8604 021a F968     		ldr	r1, [r7, #12]
 8605 021c FA6B     		ldr	r2, [r7, #60]
 8606 021e 7B6C     		ldr	r3, [r7, #68]
 8607 0220 081C     		mov	r0, r1
 8608 0222 111C     		mov	r1, r2
 8609 0224 1A1C     		mov	r2, r3
 8610 0226 FFF7FEFF 		bl	st_clust
4624:.\lib_Fat/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8611              		.loc 1 4624 0
 8612 022a FB6B     		ldr	r3, [r7, #60]
 8613 022c 0B33     		add	r3, r3, #11
 8614 022e 1022     		mov	r2, #16
 8615 0230 1A70     		strb	r2, [r3]
4625:.\lib_Fat/ff.c **** 					fs->wflag = 1;
 8616              		.loc 1 4625 0
 8617 0232 FB68     		ldr	r3, [r7, #12]
 8618 0234 0122     		mov	r2, #1
 8619 0236 DA70     		strb	r2, [r3, #3]
4626:.\lib_Fat/ff.c **** 				}
4627:.\lib_Fat/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 8620              		.loc 1 4627 0
 8621 0238 5723     		mov	r3, #87
 8622 023a FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 234


 8623 023c 1B78     		ldrb	r3, [r3]
 8624 023e 002B     		cmp	r3, #0
 8625 0240 10D1     		bne	.L468
 8626              		.loc 1 4627 0 is_stmt 0 discriminator 1
 8627 0242 FB68     		ldr	r3, [r7, #12]
 8628 0244 5722     		mov	r2, #87
 8629 0246 BC18     		add	r4, r7, r2
 8630 0248 181C     		mov	r0, r3
 8631 024a FFF7FEFF 		bl	sync_fs
 8632 024e 031C     		mov	r3, r0
 8633 0250 2370     		strb	r3, [r4]
 8634 0252 07E0     		b	.L468
 8635              	.L480:
4628:.\lib_Fat/ff.c **** 			} else {
4629:.\lib_Fat/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8636              		.loc 1 4629 0 is_stmt 1
 8637 0254 1023     		mov	r3, #16
 8638 0256 FA18     		add	r2, r7, r3
 8639 0258 7B6C     		ldr	r3, [r7, #68]
 8640 025a 101C     		mov	r0, r2
 8641 025c 191C     		mov	r1, r3
 8642 025e 0022     		mov	r2, #0
 8643 0260 FFF7FEFF 		bl	remove_chain
 8644              	.L468:
4630:.\lib_Fat/ff.c **** 			}
4631:.\lib_Fat/ff.c **** 		}
4632:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4633:.\lib_Fat/ff.c **** 	}
4634:.\lib_Fat/ff.c **** 
4635:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 8645              		.loc 1 4635 0
 8646 0264 5723     		mov	r3, #87
 8647 0266 FB18     		add	r3, r7, r3
 8648 0268 1B78     		ldrb	r3, [r3]
4636:.\lib_Fat/ff.c **** }
 8649              		.loc 1 4636 0
 8650 026a 181C     		mov	r0, r3
 8651 026c BD46     		mov	sp, r7
 8652 026e 17B0     		add	sp, sp, #92
 8653              		@ sp needed
 8654 0270 90BD     		pop	{r4, r7, pc}
 8655              		.cfi_endproc
 8656              	.LFE46:
 8657              		.size	f_mkdir, .-f_mkdir
 8658 0272 C046     		.section	.text.f_rename,"ax",%progbits
 8659              		.align	2
 8660              		.global	f_rename
 8661              		.code	16
 8662              		.thumb_func
 8663              		.type	f_rename, %function
 8664              	f_rename:
 8665              	.LFB47:
4637:.\lib_Fat/ff.c **** 
4638:.\lib_Fat/ff.c **** 
4639:.\lib_Fat/ff.c **** 
4640:.\lib_Fat/ff.c **** 
4641:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 235


4642:.\lib_Fat/ff.c **** /* Rename a File/Directory                                               */
4643:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4644:.\lib_Fat/ff.c **** 
4645:.\lib_Fat/ff.c **** FRESULT f_rename (
4646:.\lib_Fat/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4647:.\lib_Fat/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4648:.\lib_Fat/ff.c **** )
4649:.\lib_Fat/ff.c **** {
 8666              		.loc 1 4649 0
 8667              		.cfi_startproc
 8668 0000 90B5     		push	{r4, r7, lr}
 8669              		.cfi_def_cfa_offset 12
 8670              		.cfi_offset 4, -12
 8671              		.cfi_offset 7, -8
 8672              		.cfi_offset 14, -4
 8673 0002 A3B0     		sub	sp, sp, #140
 8674              		.cfi_def_cfa_offset 152
 8675 0004 00AF     		add	r7, sp, #0
 8676              		.cfi_def_cfa_register 7
 8677 0006 7860     		str	r0, [r7, #4]
 8678 0008 3960     		str	r1, [r7]
4650:.\lib_Fat/ff.c **** 	FRESULT res;
4651:.\lib_Fat/ff.c **** 	DIR djo, djn;
4652:.\lib_Fat/ff.c **** 	FATFS *fs;
4653:.\lib_Fat/ff.c **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4654:.\lib_Fat/ff.c **** 	DWORD dw;
4655:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4656:.\lib_Fat/ff.c **** 
4657:.\lib_Fat/ff.c **** 
4658:.\lib_Fat/ff.c **** 	get_ldnumber(&path_new);						/* Ignore drive number of new name */
 8679              		.loc 1 4658 0
 8680 000a 3B1C     		mov	r3, r7
 8681 000c 181C     		mov	r0, r3
 8682 000e FFF7FEFF 		bl	get_ldnumber
4659:.\lib_Fat/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
 8683              		.loc 1 4659 0
 8684 0012 8723     		mov	r3, #135
 8685 0014 FC18     		add	r4, r7, r3
 8686 0016 3A1D     		add	r2, r7, #4
 8687 0018 2023     		mov	r3, #32
 8688 001a FB18     		add	r3, r7, r3
 8689 001c 101C     		mov	r0, r2
 8690 001e 191C     		mov	r1, r3
 8691 0020 0222     		mov	r2, #2
 8692 0022 FFF7FEFF 		bl	find_volume
 8693 0026 031C     		mov	r3, r0
 8694 0028 2370     		strb	r3, [r4]
4660:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
 8695              		.loc 1 4660 0
 8696 002a 8723     		mov	r3, #135
 8697 002c FB18     		add	r3, r7, r3
 8698 002e 1B78     		ldrb	r3, [r3]
 8699 0030 002B     		cmp	r3, #0
 8700 0032 00D0     		beq	.LCB7879
 8701 0034 F0E0     		b	.L485	@long jump
 8702              	.LCB7879:
4661:.\lib_Fat/ff.c **** 		djo.obj.fs = fs;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 236


 8703              		.loc 1 4661 0
 8704 0036 3A6A     		ldr	r2, [r7, #32]
 8705 0038 5023     		mov	r3, #80
 8706 003a FB18     		add	r3, r7, r3
 8707 003c 1A60     		str	r2, [r3]
4662:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4663:.\lib_Fat/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 8708              		.loc 1 4663 0
 8709 003e 7B68     		ldr	r3, [r7, #4]
 8710 0040 8722     		mov	r2, #135
 8711 0042 BC18     		add	r4, r7, r2
 8712 0044 5022     		mov	r2, #80
 8713 0046 BA18     		add	r2, r7, r2
 8714 0048 101C     		mov	r0, r2
 8715 004a 191C     		mov	r1, r3
 8716 004c FFF7FEFF 		bl	follow_path
 8717 0050 031C     		mov	r3, r0
 8718 0052 2370     		strb	r3, [r4]
4664:.\lib_Fat/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 8719              		.loc 1 4664 0
 8720 0054 8723     		mov	r3, #135
 8721 0056 FB18     		add	r3, r7, r3
 8722 0058 1B78     		ldrb	r3, [r3]
 8723 005a 002B     		cmp	r3, #0
 8724 005c 0BD1     		bne	.L486
 8725              		.loc 1 4664 0 is_stmt 0 discriminator 1
 8726 005e 5023     		mov	r3, #80
 8727 0060 FB18     		add	r3, r7, r3
 8728 0062 2B22     		mov	r2, #43
 8729 0064 9B5C     		ldrb	r3, [r3, r2]
 8730 0066 1A1C     		mov	r2, r3
 8731 0068 A023     		mov	r3, #160
 8732 006a 1340     		and	r3, r2
 8733 006c 03D0     		beq	.L486
 8734              		.loc 1 4664 0 discriminator 2
 8735 006e 8723     		mov	r3, #135
 8736 0070 FB18     		add	r3, r7, r3
 8737 0072 0622     		mov	r2, #6
 8738 0074 1A70     		strb	r2, [r3]
 8739              	.L486:
4665:.\lib_Fat/ff.c **** #if _FS_LOCK != 0
4666:.\lib_Fat/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
4667:.\lib_Fat/ff.c **** #endif
4668:.\lib_Fat/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
 8740              		.loc 1 4668 0 is_stmt 1
 8741 0076 8723     		mov	r3, #135
 8742 0078 FB18     		add	r3, r7, r3
 8743 007a 1B78     		ldrb	r3, [r3]
 8744 007c 002B     		cmp	r3, #0
 8745 007e 00D0     		beq	.LCB7918
 8746 0080 CAE0     		b	.L485	@long jump
 8747              	.LCB7918:
4669:.\lib_Fat/ff.c **** #if _FS_EXFAT
4670:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4671:.\lib_Fat/ff.c **** 				BYTE nf, nn;
4672:.\lib_Fat/ff.c **** 				WORD nh;
4673:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 237


4674:.\lib_Fat/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4675:.\lib_Fat/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4676:.\lib_Fat/ff.c **** 				res = follow_path(&djn, path_new);	/* Make sure if new object name is not in use */
4677:.\lib_Fat/ff.c **** 				if (res == FR_OK) res = FR_EXIST;	/* Is new name already in use? */
4678:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE) { 			/* It is a valid path and no name collision */
4679:.\lib_Fat/ff.c **** 					res = dir_register(&djn);		/* Register the new entry */
4680:.\lib_Fat/ff.c **** 					if (res == FR_OK) {
4681:.\lib_Fat/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4682:.\lib_Fat/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4683:.\lib_Fat/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4684:.\lib_Fat/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4685:.\lib_Fat/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4686:.\lib_Fat/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
4687:.\lib_Fat/ff.c **** 						res = store_xdir(&djn);
4688:.\lib_Fat/ff.c **** 					}
4689:.\lib_Fat/ff.c **** 				}
4690:.\lib_Fat/ff.c **** 			} else
4691:.\lib_Fat/ff.c **** #endif
4692:.\lib_Fat/ff.c **** 			{	/* At FAT12/FAT16/FAT32 */
4693:.\lib_Fat/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8748              		.loc 1 4693 0
 8749 0082 5023     		mov	r3, #80
 8750 0084 FB18     		add	r3, r7, r3
 8751 0086 DB69     		ldr	r3, [r3, #28]
 8752 0088 0B33     		add	r3, r3, #11
 8753 008a 0822     		mov	r2, #8
 8754 008c BA18     		add	r2, r7, r2
 8755 008e 101C     		mov	r0, r2
 8756 0090 191C     		mov	r1, r3
 8757 0092 1522     		mov	r2, #21
 8758 0094 FFF7FEFF 		bl	mem_cpy
4694:.\lib_Fat/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8759              		.loc 1 4694 0
 8760 0098 2423     		mov	r3, #36
 8761 009a FA18     		add	r2, r7, r3
 8762 009c 5023     		mov	r3, #80
 8763 009e FB18     		add	r3, r7, r3
 8764 00a0 101C     		mov	r0, r2
 8765 00a2 191C     		mov	r1, r3
 8766 00a4 2C22     		mov	r2, #44
 8767 00a6 FFF7FEFF 		bl	mem_cpy
4695:.\lib_Fat/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8768              		.loc 1 4695 0
 8769 00aa 3B68     		ldr	r3, [r7]
 8770 00ac 8722     		mov	r2, #135
 8771 00ae BC18     		add	r4, r7, r2
 8772 00b0 2422     		mov	r2, #36
 8773 00b2 BA18     		add	r2, r7, r2
 8774 00b4 101C     		mov	r0, r2
 8775 00b6 191C     		mov	r1, r3
 8776 00b8 FFF7FEFF 		bl	follow_path
 8777 00bc 031C     		mov	r3, r0
 8778 00be 2370     		strb	r3, [r4]
4696:.\lib_Fat/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* Is new name already in use? */
 8779              		.loc 1 4696 0
 8780 00c0 8723     		mov	r3, #135
 8781 00c2 FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 238


 8782 00c4 1B78     		ldrb	r3, [r3]
 8783 00c6 002B     		cmp	r3, #0
 8784 00c8 03D1     		bne	.L487
 8785              		.loc 1 4696 0 is_stmt 0 discriminator 1
 8786 00ca 8723     		mov	r3, #135
 8787 00cc FB18     		add	r3, r7, r3
 8788 00ce 0822     		mov	r2, #8
 8789 00d0 1A70     		strb	r2, [r3]
 8790              	.L487:
4697:.\lib_Fat/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8791              		.loc 1 4697 0 is_stmt 1
 8792 00d2 8723     		mov	r3, #135
 8793 00d4 FB18     		add	r3, r7, r3
 8794 00d6 1B78     		ldrb	r3, [r3]
 8795 00d8 042B     		cmp	r3, #4
 8796 00da 00D0     		beq	.LCB7962
 8797 00dc 81E0     		b	.L488	@long jump
 8798              	.LCB7962:
4698:.\lib_Fat/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 8799              		.loc 1 4698 0
 8800 00de 8723     		mov	r3, #135
 8801 00e0 FC18     		add	r4, r7, r3
 8802 00e2 2423     		mov	r3, #36
 8803 00e4 FB18     		add	r3, r7, r3
 8804 00e6 181C     		mov	r0, r3
 8805 00e8 FFF7FEFF 		bl	dir_register
 8806 00ec 031C     		mov	r3, r0
 8807 00ee 2370     		strb	r3, [r4]
4699:.\lib_Fat/ff.c **** 					if (res == FR_OK) {
 8808              		.loc 1 4699 0
 8809 00f0 8723     		mov	r3, #135
 8810 00f2 FB18     		add	r3, r7, r3
 8811 00f4 1B78     		ldrb	r3, [r3]
 8812 00f6 002B     		cmp	r3, #0
 8813 00f8 73D1     		bne	.L488
4700:.\lib_Fat/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
 8814              		.loc 1 4700 0
 8815 00fa 2423     		mov	r3, #36
 8816 00fc FB18     		add	r3, r7, r3
 8817 00fe DB69     		ldr	r3, [r3, #28]
 8818 0100 8022     		mov	r2, #128
 8819 0102 BA18     		add	r2, r7, r2
 8820 0104 1360     		str	r3, [r2]
4701:.\lib_Fat/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 8821              		.loc 1 4701 0
 8822 0106 8023     		mov	r3, #128
 8823 0108 FB18     		add	r3, r7, r3
 8824 010a 1B68     		ldr	r3, [r3]
 8825 010c 0D33     		add	r3, r3, #13
 8826 010e 1A1C     		mov	r2, r3
 8827 0110 0823     		mov	r3, #8
 8828 0112 FB18     		add	r3, r7, r3
 8829 0114 0233     		add	r3, r3, #2
 8830 0116 101C     		mov	r0, r2
 8831 0118 191C     		mov	r1, r3
 8832 011a 1322     		mov	r2, #19
 8833 011c FFF7FEFF 		bl	mem_cpy
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 239


4702:.\lib_Fat/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 8834              		.loc 1 4702 0
 8835 0120 8023     		mov	r3, #128
 8836 0122 FB18     		add	r3, r7, r3
 8837 0124 1B68     		ldr	r3, [r3]
 8838 0126 0B33     		add	r3, r3, #11
 8839 0128 0822     		mov	r2, #8
 8840 012a BA18     		add	r2, r7, r2
 8841 012c 1278     		ldrb	r2, [r2]
 8842 012e 2021     		mov	r1, #32
 8843 0130 0A43     		orr	r2, r1
 8844 0132 D2B2     		uxtb	r2, r2
 8845 0134 1A70     		strb	r2, [r3]
4703:.\lib_Fat/ff.c **** 						fs->wflag = 1;
 8846              		.loc 1 4703 0
 8847 0136 3B6A     		ldr	r3, [r7, #32]
 8848 0138 0122     		mov	r2, #1
 8849 013a DA70     		strb	r2, [r3, #3]
4704:.\lib_Fat/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 8850              		.loc 1 4704 0
 8851 013c 8023     		mov	r3, #128
 8852 013e FB18     		add	r3, r7, r3
 8853 0140 1B68     		ldr	r3, [r3]
 8854 0142 0B33     		add	r3, r3, #11
 8855 0144 1B78     		ldrb	r3, [r3]
 8856 0146 1A1C     		mov	r2, r3
 8857 0148 1023     		mov	r3, #16
 8858 014a 1340     		and	r3, r2
 8859 014c 49D0     		beq	.L488
 8860              		.loc 1 4704 0 is_stmt 0 discriminator 1
 8861 014e 5023     		mov	r3, #80
 8862 0150 FB18     		add	r3, r7, r3
 8863 0152 9A68     		ldr	r2, [r3, #8]
 8864 0154 2423     		mov	r3, #36
 8865 0156 FB18     		add	r3, r7, r3
 8866 0158 9B68     		ldr	r3, [r3, #8]
 8867 015a 9A42     		cmp	r2, r3
 8868 015c 41D0     		beq	.L488
4705:.\lib_Fat/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 8869              		.loc 1 4705 0 is_stmt 1
 8870 015e 3C6A     		ldr	r4, [r7, #32]
 8871 0160 3A6A     		ldr	r2, [r7, #32]
 8872 0162 8023     		mov	r3, #128
 8873 0164 FB18     		add	r3, r7, r3
 8874 0166 1B68     		ldr	r3, [r3]
 8875 0168 101C     		mov	r0, r2
 8876 016a 191C     		mov	r1, r3
 8877 016c FFF7FEFF 		bl	ld_clust
 8878 0170 031C     		mov	r3, r0
 8879 0172 201C     		mov	r0, r4
 8880 0174 191C     		mov	r1, r3
 8881 0176 FFF7FEFF 		bl	clust2sect
 8882 017a 031C     		mov	r3, r0
 8883 017c FB67     		str	r3, [r7, #124]
4706:.\lib_Fat/ff.c **** 							if (!dw) {
 8884              		.loc 1 4706 0
 8885 017e FB6F     		ldr	r3, [r7, #124]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 240


 8886 0180 002B     		cmp	r3, #0
 8887 0182 04D1     		bne	.L489
4707:.\lib_Fat/ff.c **** 								res = FR_INT_ERR;
 8888              		.loc 1 4707 0
 8889 0184 8723     		mov	r3, #135
 8890 0186 FB18     		add	r3, r7, r3
 8891 0188 0222     		mov	r2, #2
 8892 018a 1A70     		strb	r2, [r3]
 8893 018c 29E0     		b	.L488
 8894              	.L489:
4708:.\lib_Fat/ff.c **** 							} else {
4709:.\lib_Fat/ff.c **** /* Start of critical section where any interruption can cause a cross-link */
4710:.\lib_Fat/ff.c **** 								res = move_window(fs, dw);
 8895              		.loc 1 4710 0
 8896 018e 3A6A     		ldr	r2, [r7, #32]
 8897 0190 8723     		mov	r3, #135
 8898 0192 FC18     		add	r4, r7, r3
 8899 0194 FB6F     		ldr	r3, [r7, #124]
 8900 0196 101C     		mov	r0, r2
 8901 0198 191C     		mov	r1, r3
 8902 019a FFF7FEFF 		bl	move_window
 8903 019e 031C     		mov	r3, r0
 8904 01a0 2370     		strb	r3, [r4]
4711:.\lib_Fat/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8905              		.loc 1 4711 0
 8906 01a2 3B6A     		ldr	r3, [r7, #32]
 8907 01a4 5033     		add	r3, r3, #80
 8908 01a6 8022     		mov	r2, #128
 8909 01a8 BA18     		add	r2, r7, r2
 8910 01aa 1360     		str	r3, [r2]
4712:.\lib_Fat/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 8911              		.loc 1 4712 0
 8912 01ac 8723     		mov	r3, #135
 8913 01ae FB18     		add	r3, r7, r3
 8914 01b0 1B78     		ldrb	r3, [r3]
 8915 01b2 002B     		cmp	r3, #0
 8916 01b4 15D1     		bne	.L488
 8917              		.loc 1 4712 0 is_stmt 0 discriminator 1
 8918 01b6 8023     		mov	r3, #128
 8919 01b8 FB18     		add	r3, r7, r3
 8920 01ba 1B68     		ldr	r3, [r3]
 8921 01bc 0133     		add	r3, r3, #1
 8922 01be 1B78     		ldrb	r3, [r3]
 8923 01c0 2E2B     		cmp	r3, #46
 8924 01c2 0ED1     		bne	.L488
4713:.\lib_Fat/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 8925              		.loc 1 4713 0 is_stmt 1
 8926 01c4 396A     		ldr	r1, [r7, #32]
 8927 01c6 2423     		mov	r3, #36
 8928 01c8 FB18     		add	r3, r7, r3
 8929 01ca 9B68     		ldr	r3, [r3, #8]
 8930 01cc 8022     		mov	r2, #128
 8931 01ce BA18     		add	r2, r7, r2
 8932 01d0 1268     		ldr	r2, [r2]
 8933 01d2 081C     		mov	r0, r1
 8934 01d4 111C     		mov	r1, r2
 8935 01d6 1A1C     		mov	r2, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 241


 8936 01d8 FFF7FEFF 		bl	st_clust
4714:.\lib_Fat/ff.c **** 									fs->wflag = 1;
 8937              		.loc 1 4714 0
 8938 01dc 3B6A     		ldr	r3, [r7, #32]
 8939 01de 0122     		mov	r2, #1
 8940 01e0 DA70     		strb	r2, [r3, #3]
 8941              	.L488:
4715:.\lib_Fat/ff.c **** 								}
4716:.\lib_Fat/ff.c **** 							}
4717:.\lib_Fat/ff.c **** 						}
4718:.\lib_Fat/ff.c **** 					}
4719:.\lib_Fat/ff.c **** 				}
4720:.\lib_Fat/ff.c **** 			}
4721:.\lib_Fat/ff.c **** 			if (res == FR_OK) {
 8942              		.loc 1 4721 0
 8943 01e2 8723     		mov	r3, #135
 8944 01e4 FB18     		add	r3, r7, r3
 8945 01e6 1B78     		ldrb	r3, [r3]
 8946 01e8 002B     		cmp	r3, #0
 8947 01ea 15D1     		bne	.L485
4722:.\lib_Fat/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 8948              		.loc 1 4722 0
 8949 01ec 8723     		mov	r3, #135
 8950 01ee FC18     		add	r4, r7, r3
 8951 01f0 5023     		mov	r3, #80
 8952 01f2 FB18     		add	r3, r7, r3
 8953 01f4 181C     		mov	r0, r3
 8954 01f6 FFF7FEFF 		bl	dir_remove
 8955 01fa 031C     		mov	r3, r0
 8956 01fc 2370     		strb	r3, [r4]
4723:.\lib_Fat/ff.c **** 				if (res == FR_OK) {
 8957              		.loc 1 4723 0
 8958 01fe 8723     		mov	r3, #135
 8959 0200 FB18     		add	r3, r7, r3
 8960 0202 1B78     		ldrb	r3, [r3]
 8961 0204 002B     		cmp	r3, #0
 8962 0206 07D1     		bne	.L485
4724:.\lib_Fat/ff.c **** 					res = sync_fs(fs);
 8963              		.loc 1 4724 0
 8964 0208 3B6A     		ldr	r3, [r7, #32]
 8965 020a 8722     		mov	r2, #135
 8966 020c BC18     		add	r4, r7, r2
 8967 020e 181C     		mov	r0, r3
 8968 0210 FFF7FEFF 		bl	sync_fs
 8969 0214 031C     		mov	r3, r0
 8970 0216 2370     		strb	r3, [r4]
 8971              	.L485:
4725:.\lib_Fat/ff.c **** 				}
4726:.\lib_Fat/ff.c **** 			}
4727:.\lib_Fat/ff.c **** /* End of critical section */
4728:.\lib_Fat/ff.c **** 		}
4729:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4730:.\lib_Fat/ff.c **** 	}
4731:.\lib_Fat/ff.c **** 
4732:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
 8972              		.loc 1 4732 0
 8973 0218 8723     		mov	r3, #135
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 242


 8974 021a FB18     		add	r3, r7, r3
 8975 021c 1B78     		ldrb	r3, [r3]
4733:.\lib_Fat/ff.c **** }
 8976              		.loc 1 4733 0
 8977 021e 181C     		mov	r0, r3
 8978 0220 BD46     		mov	sp, r7
 8979 0222 23B0     		add	sp, sp, #140
 8980              		@ sp needed
 8981 0224 90BD     		pop	{r4, r7, pc}
 8982              		.cfi_endproc
 8983              	.LFE47:
 8984              		.size	f_rename, .-f_rename
 8985 0226 C046     		.section	.text.f_gets,"ax",%progbits
 8986              		.align	2
 8987              		.global	f_gets
 8988              		.code	16
 8989              		.thumb_func
 8990              		.type	f_gets, %function
 8991              	f_gets:
 8992              	.LFB48:
4734:.\lib_Fat/ff.c **** 
4735:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
4736:.\lib_Fat/ff.c **** #endif /* _FS_MINIMIZE == 0 */
4737:.\lib_Fat/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
4738:.\lib_Fat/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
4739:.\lib_Fat/ff.c **** 
4740:.\lib_Fat/ff.c **** 
4741:.\lib_Fat/ff.c **** 
4742:.\lib_Fat/ff.c **** #if _USE_CHMOD && !_FS_READONLY
4743:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4744:.\lib_Fat/ff.c **** /* Change Attribute                                                      */
4745:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4746:.\lib_Fat/ff.c **** 
4747:.\lib_Fat/ff.c **** FRESULT f_chmod (
4748:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4749:.\lib_Fat/ff.c **** 	BYTE attr,			/* Attribute bits */
4750:.\lib_Fat/ff.c **** 	BYTE mask			/* Attribute mask to change */
4751:.\lib_Fat/ff.c **** )
4752:.\lib_Fat/ff.c **** {
4753:.\lib_Fat/ff.c **** 	FRESULT res;
4754:.\lib_Fat/ff.c **** 	DIR dj;
4755:.\lib_Fat/ff.c **** 	FATFS *fs;
4756:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4757:.\lib_Fat/ff.c **** 
4758:.\lib_Fat/ff.c **** 
4759:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive number */
4760:.\lib_Fat/ff.c **** 	dj.obj.fs = fs;
4761:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
4762:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4763:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4764:.\lib_Fat/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4765:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
4766:.\lib_Fat/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4767:.\lib_Fat/ff.c **** #if _FS_EXFAT
4768:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4769:.\lib_Fat/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4770:.\lib_Fat/ff.c **** 				res = store_xdir(&dj);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 243


4771:.\lib_Fat/ff.c **** 			} else
4772:.\lib_Fat/ff.c **** #endif
4773:.\lib_Fat/ff.c **** 			{
4774:.\lib_Fat/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4775:.\lib_Fat/ff.c **** 				fs->wflag = 1;
4776:.\lib_Fat/ff.c **** 			}
4777:.\lib_Fat/ff.c **** 			if (res == FR_OK) res = sync_fs(fs);
4778:.\lib_Fat/ff.c **** 		}
4779:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4780:.\lib_Fat/ff.c **** 	}
4781:.\lib_Fat/ff.c **** 
4782:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
4783:.\lib_Fat/ff.c **** }
4784:.\lib_Fat/ff.c **** 
4785:.\lib_Fat/ff.c **** 
4786:.\lib_Fat/ff.c **** 
4787:.\lib_Fat/ff.c **** 
4788:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4789:.\lib_Fat/ff.c **** /* Change Timestamp                                                      */
4790:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4791:.\lib_Fat/ff.c **** 
4792:.\lib_Fat/ff.c **** FRESULT f_utime (
4793:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4794:.\lib_Fat/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4795:.\lib_Fat/ff.c **** )
4796:.\lib_Fat/ff.c **** {
4797:.\lib_Fat/ff.c **** 	FRESULT res;
4798:.\lib_Fat/ff.c **** 	DIR dj;
4799:.\lib_Fat/ff.c **** 	FATFS *fs;
4800:.\lib_Fat/ff.c **** 	DEF_NAMBUF
4801:.\lib_Fat/ff.c **** 
4802:.\lib_Fat/ff.c **** 
4803:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive number */
4804:.\lib_Fat/ff.c **** 	dj.obj.fs = fs;
4805:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
4806:.\lib_Fat/ff.c **** 		INIT_NAMBUF(fs);
4807:.\lib_Fat/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4808:.\lib_Fat/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4809:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
4810:.\lib_Fat/ff.c **** #if _FS_EXFAT
4811:.\lib_Fat/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4812:.\lib_Fat/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4813:.\lib_Fat/ff.c **** 				res = store_xdir(&dj);
4814:.\lib_Fat/ff.c **** 			} else
4815:.\lib_Fat/ff.c **** #endif
4816:.\lib_Fat/ff.c **** 			{
4817:.\lib_Fat/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4818:.\lib_Fat/ff.c **** 				fs->wflag = 1;
4819:.\lib_Fat/ff.c **** 			}
4820:.\lib_Fat/ff.c **** 			if (res == FR_OK) res = sync_fs(fs);
4821:.\lib_Fat/ff.c **** 		}
4822:.\lib_Fat/ff.c **** 		FREE_NAMBUF();
4823:.\lib_Fat/ff.c **** 	}
4824:.\lib_Fat/ff.c **** 
4825:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
4826:.\lib_Fat/ff.c **** }
4827:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 244


4828:.\lib_Fat/ff.c **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4829:.\lib_Fat/ff.c **** 
4830:.\lib_Fat/ff.c **** 
4831:.\lib_Fat/ff.c **** 
4832:.\lib_Fat/ff.c **** #if _USE_LABEL
4833:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4834:.\lib_Fat/ff.c **** /* Get Volume Label                                                      */
4835:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4836:.\lib_Fat/ff.c **** 
4837:.\lib_Fat/ff.c **** FRESULT f_getlabel (
4838:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4839:.\lib_Fat/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4840:.\lib_Fat/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4841:.\lib_Fat/ff.c **** )
4842:.\lib_Fat/ff.c **** {
4843:.\lib_Fat/ff.c **** 	FRESULT res;
4844:.\lib_Fat/ff.c **** 	DIR dj;
4845:.\lib_Fat/ff.c **** 	FATFS *fs;
4846:.\lib_Fat/ff.c **** 	UINT si, di;
4847:.\lib_Fat/ff.c **** #if _LFN_UNICODE || _FS_EXFAT
4848:.\lib_Fat/ff.c **** 	WCHAR w;
4849:.\lib_Fat/ff.c **** #endif
4850:.\lib_Fat/ff.c **** 
4851:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4852:.\lib_Fat/ff.c **** 	res = find_volume(&path, &fs, 0);
4853:.\lib_Fat/ff.c **** 
4854:.\lib_Fat/ff.c **** 	/* Get volume label */
4855:.\lib_Fat/ff.c **** 	if (res == FR_OK && label) {
4856:.\lib_Fat/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4857:.\lib_Fat/ff.c **** 		res = dir_sdi(&dj, 0);
4858:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
4859:.\lib_Fat/ff.c **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4860:.\lib_Fat/ff.c **** 		 	if (res == FR_OK) {
4861:.\lib_Fat/ff.c **** #if _FS_EXFAT
4862:.\lib_Fat/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4863:.\lib_Fat/ff.c **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4864:.\lib_Fat/ff.c **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4865:.\lib_Fat/ff.c **** #if _LFN_UNICODE
4866:.\lib_Fat/ff.c **** 						label[di++] = w;
4867:.\lib_Fat/ff.c **** #else
4868:.\lib_Fat/ff.c **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
4869:.\lib_Fat/ff.c **** 						if (w == 0) w = '?';	/* Replace wrong character */
4870:.\lib_Fat/ff.c **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4871:.\lib_Fat/ff.c **** 						label[di++] = (char)w;
4872:.\lib_Fat/ff.c **** #endif
4873:.\lib_Fat/ff.c **** 					}
4874:.\lib_Fat/ff.c **** 					label[di] = 0;
4875:.\lib_Fat/ff.c **** 				} else
4876:.\lib_Fat/ff.c **** #endif
4877:.\lib_Fat/ff.c **** 				{
4878:.\lib_Fat/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4879:.\lib_Fat/ff.c **** 					do {
4880:.\lib_Fat/ff.c **** #if _LFN_UNICODE
4881:.\lib_Fat/ff.c **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4882:.\lib_Fat/ff.c **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4883:.\lib_Fat/ff.c **** 							w = w << 8 | dj.dir[si++];
4884:.\lib_Fat/ff.c **** 						}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 245


4885:.\lib_Fat/ff.c **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4886:.\lib_Fat/ff.c **** #else
4887:.\lib_Fat/ff.c **** 						label[di++] = dj.dir[si++];
4888:.\lib_Fat/ff.c **** #endif
4889:.\lib_Fat/ff.c **** 					} while (di < 11);
4890:.\lib_Fat/ff.c **** 					do {				/* Truncate trailing spaces */
4891:.\lib_Fat/ff.c **** 						label[di] = 0;
4892:.\lib_Fat/ff.c **** 						if (di == 0) break;
4893:.\lib_Fat/ff.c **** 					} while (label[--di] == ' ');
4894:.\lib_Fat/ff.c **** 				}
4895:.\lib_Fat/ff.c **** 			}
4896:.\lib_Fat/ff.c **** 		}
4897:.\lib_Fat/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4898:.\lib_Fat/ff.c **** 			label[0] = 0;
4899:.\lib_Fat/ff.c **** 			res = FR_OK;
4900:.\lib_Fat/ff.c **** 		}
4901:.\lib_Fat/ff.c **** 	}
4902:.\lib_Fat/ff.c **** 
4903:.\lib_Fat/ff.c **** 	/* Get volume serial number */
4904:.\lib_Fat/ff.c **** 	if (res == FR_OK && vsn) {
4905:.\lib_Fat/ff.c **** 		res = move_window(fs, fs->volbase);
4906:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
4907:.\lib_Fat/ff.c **** 			switch (fs->fs_type) {
4908:.\lib_Fat/ff.c **** 			case FS_EXFAT: di = BPB_VolIDEx; break;
4909:.\lib_Fat/ff.c **** 			case FS_FAT32: di = BS_VolID32; break;
4910:.\lib_Fat/ff.c **** 			default:       di = BS_VolID;
4911:.\lib_Fat/ff.c **** 			}
4912:.\lib_Fat/ff.c **** 			*vsn = ld_dword(fs->win + di);
4913:.\lib_Fat/ff.c **** 		}
4914:.\lib_Fat/ff.c **** 	}
4915:.\lib_Fat/ff.c **** 
4916:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
4917:.\lib_Fat/ff.c **** }
4918:.\lib_Fat/ff.c **** 
4919:.\lib_Fat/ff.c **** 
4920:.\lib_Fat/ff.c **** 
4921:.\lib_Fat/ff.c **** #if !_FS_READONLY
4922:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4923:.\lib_Fat/ff.c **** /* Set Volume Label                                                      */
4924:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
4925:.\lib_Fat/ff.c **** 
4926:.\lib_Fat/ff.c **** FRESULT f_setlabel (
4927:.\lib_Fat/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
4928:.\lib_Fat/ff.c **** )
4929:.\lib_Fat/ff.c **** {
4930:.\lib_Fat/ff.c **** 	FRESULT res;
4931:.\lib_Fat/ff.c **** 	DIR dj;
4932:.\lib_Fat/ff.c **** 	FATFS *fs;
4933:.\lib_Fat/ff.c **** 	BYTE dirvn[22];
4934:.\lib_Fat/ff.c **** 	UINT i, j, slen;
4935:.\lib_Fat/ff.c **** 	WCHAR w;
4936:.\lib_Fat/ff.c **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
4937:.\lib_Fat/ff.c **** 
4938:.\lib_Fat/ff.c **** 
4939:.\lib_Fat/ff.c **** 	/* Get logical drive number */
4940:.\lib_Fat/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
4941:.\lib_Fat/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 246


4942:.\lib_Fat/ff.c **** 	dj.obj.fs = fs;
4943:.\lib_Fat/ff.c **** 
4944:.\lib_Fat/ff.c **** 	/* Get length of given volume label */
4945:.\lib_Fat/ff.c **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
4946:.\lib_Fat/ff.c **** 
4947:.\lib_Fat/ff.c **** #if _FS_EXFAT
4948:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* At the exFAT */
4949:.\lib_Fat/ff.c **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
4950:.\lib_Fat/ff.c **** 			w = label[i++];
4951:.\lib_Fat/ff.c **** #if !_LFN_UNICODE
4952:.\lib_Fat/ff.c **** 			if (IsDBCS1(w)) {
4953:.\lib_Fat/ff.c **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4954:.\lib_Fat/ff.c **** 			}
4955:.\lib_Fat/ff.c **** 			w = ff_convert(w, 1);
4956:.\lib_Fat/ff.c **** #endif
4957:.\lib_Fat/ff.c **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
4958:.\lib_Fat/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
4959:.\lib_Fat/ff.c **** 			}
4960:.\lib_Fat/ff.c **** 			st_word(dirvn + j, w); j += 2;
4961:.\lib_Fat/ff.c **** 		}
4962:.\lib_Fat/ff.c **** 		slen = j;
4963:.\lib_Fat/ff.c **** 	} else
4964:.\lib_Fat/ff.c **** #endif
4965:.\lib_Fat/ff.c **** 	{	/* At the FAT12/16/32 */
4966:.\lib_Fat/ff.c **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
4967:.\lib_Fat/ff.c **** 		if (slen) {		/* Is there a volume label to be set? */
4968:.\lib_Fat/ff.c **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
4969:.\lib_Fat/ff.c **** 			do {
4970:.\lib_Fat/ff.c **** #if _LFN_UNICODE
4971:.\lib_Fat/ff.c **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
4972:.\lib_Fat/ff.c **** #else
4973:.\lib_Fat/ff.c **** 				w = (BYTE)label[i++];
4974:.\lib_Fat/ff.c **** 				if (IsDBCS1(w)) {
4975:.\lib_Fat/ff.c **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
4976:.\lib_Fat/ff.c **** 				}
4977:.\lib_Fat/ff.c **** #if _USE_LFN != 0
4978:.\lib_Fat/ff.c **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
4979:.\lib_Fat/ff.c **** #else
4980:.\lib_Fat/ff.c **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
4981:.\lib_Fat/ff.c **** #ifdef _EXCVT
4982:.\lib_Fat/ff.c **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
4983:.\lib_Fat/ff.c **** #else
4984:.\lib_Fat/ff.c **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
4985:.\lib_Fat/ff.c **** #endif
4986:.\lib_Fat/ff.c **** #endif
4987:.\lib_Fat/ff.c **** #endif
4988:.\lib_Fat/ff.c **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
4989:.\lib_Fat/ff.c **** 					LEAVE_FF(fs, FR_INVALID_NAME);
4990:.\lib_Fat/ff.c **** 				}
4991:.\lib_Fat/ff.c **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
4992:.\lib_Fat/ff.c **** 				dirvn[j++] = (BYTE)w;
4993:.\lib_Fat/ff.c **** 			} while (i < slen);
4994:.\lib_Fat/ff.c **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
4995:.\lib_Fat/ff.c **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
4996:.\lib_Fat/ff.c **** 		}
4997:.\lib_Fat/ff.c **** 	}
4998:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 247


4999:.\lib_Fat/ff.c **** 	/* Set volume label */
5000:.\lib_Fat/ff.c **** 	dj.obj.sclust = 0;		/* Open root directory */
5001:.\lib_Fat/ff.c **** 	res = dir_sdi(&dj, 0);
5002:.\lib_Fat/ff.c **** 	if (res == FR_OK) {
5003:.\lib_Fat/ff.c **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5004:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
5005:.\lib_Fat/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5006:.\lib_Fat/ff.c **** 				dj.dir[XDIR_NumLabel] = slen / 2;	/* Change the volume label */
5007:.\lib_Fat/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5008:.\lib_Fat/ff.c **** 			} else {
5009:.\lib_Fat/ff.c **** 				if (slen) {
5010:.\lib_Fat/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5011:.\lib_Fat/ff.c **** 				} else {
5012:.\lib_Fat/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5013:.\lib_Fat/ff.c **** 				}
5014:.\lib_Fat/ff.c **** 			}
5015:.\lib_Fat/ff.c **** 			fs->wflag = 1;
5016:.\lib_Fat/ff.c **** 			res = sync_fs(fs);
5017:.\lib_Fat/ff.c **** 		} else {			/* No volume label entry is found or error */
5018:.\lib_Fat/ff.c **** 			if (res == FR_NO_FILE) {
5019:.\lib_Fat/ff.c **** 				res = FR_OK;
5020:.\lib_Fat/ff.c **** 				if (slen) {	/* Create a volume label entry */
5021:.\lib_Fat/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5022:.\lib_Fat/ff.c **** 					if (res == FR_OK) {
5023:.\lib_Fat/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5024:.\lib_Fat/ff.c **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5025:.\lib_Fat/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5026:.\lib_Fat/ff.c **** 							dj.dir[XDIR_NumLabel] = slen / 2;
5027:.\lib_Fat/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5028:.\lib_Fat/ff.c **** 						} else {
5029:.\lib_Fat/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5030:.\lib_Fat/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5031:.\lib_Fat/ff.c **** 						}
5032:.\lib_Fat/ff.c **** 						fs->wflag = 1;
5033:.\lib_Fat/ff.c **** 						res = sync_fs(fs);
5034:.\lib_Fat/ff.c **** 					}
5035:.\lib_Fat/ff.c **** 				}
5036:.\lib_Fat/ff.c **** 			}
5037:.\lib_Fat/ff.c **** 		}
5038:.\lib_Fat/ff.c **** 	}
5039:.\lib_Fat/ff.c **** 
5040:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
5041:.\lib_Fat/ff.c **** }
5042:.\lib_Fat/ff.c **** 
5043:.\lib_Fat/ff.c **** #endif /* !_FS_READONLY */
5044:.\lib_Fat/ff.c **** #endif /* _USE_LABEL */
5045:.\lib_Fat/ff.c **** 
5046:.\lib_Fat/ff.c **** 
5047:.\lib_Fat/ff.c **** 
5048:.\lib_Fat/ff.c **** #if _USE_EXPAND && !_FS_READONLY
5049:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5050:.\lib_Fat/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5051:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5052:.\lib_Fat/ff.c **** 
5053:.\lib_Fat/ff.c **** FRESULT f_expand (
5054:.\lib_Fat/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5055:.\lib_Fat/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 248


5056:.\lib_Fat/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5057:.\lib_Fat/ff.c **** )
5058:.\lib_Fat/ff.c **** {
5059:.\lib_Fat/ff.c **** 	FRESULT res;
5060:.\lib_Fat/ff.c **** 	FATFS *fs;
5061:.\lib_Fat/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5062:.\lib_Fat/ff.c **** 
5063:.\lib_Fat/ff.c **** 
5064:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);		/* Check validity of the object */
5065:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
5066:.\lib_Fat/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5067:.\lib_Fat/ff.c **** #if _FS_EXFAT
5068:.\lib_Fat/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5069:.\lib_Fat/ff.c **** #endif
5070:.\lib_Fat/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5071:.\lib_Fat/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5072:.\lib_Fat/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5073:.\lib_Fat/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5074:.\lib_Fat/ff.c **** 
5075:.\lib_Fat/ff.c **** #if _FS_EXFAT
5076:.\lib_Fat/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5077:.\lib_Fat/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5078:.\lib_Fat/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5079:.\lib_Fat/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5080:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
5081:.\lib_Fat/ff.c **** 			if (opt) {
5082:.\lib_Fat/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5083:.\lib_Fat/ff.c **** 				lclst = scl + tcl - 1;
5084:.\lib_Fat/ff.c **** 			} else {
5085:.\lib_Fat/ff.c **** 				lclst = scl - 1;
5086:.\lib_Fat/ff.c **** 			}
5087:.\lib_Fat/ff.c **** 		}
5088:.\lib_Fat/ff.c **** 	} else
5089:.\lib_Fat/ff.c **** #endif
5090:.\lib_Fat/ff.c **** 	{
5091:.\lib_Fat/ff.c **** 		scl = clst = stcl; ncl = 0;
5092:.\lib_Fat/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5093:.\lib_Fat/ff.c **** 			n = get_fat(&fp->obj, clst);
5094:.\lib_Fat/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5095:.\lib_Fat/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5096:.\lib_Fat/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5097:.\lib_Fat/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5098:.\lib_Fat/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5099:.\lib_Fat/ff.c **** 			} else {
5100:.\lib_Fat/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5101:.\lib_Fat/ff.c **** 			}
5102:.\lib_Fat/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5103:.\lib_Fat/ff.c **** 		}
5104:.\lib_Fat/ff.c **** 		if (res == FR_OK) {
5105:.\lib_Fat/ff.c **** 			if (opt) {
5106:.\lib_Fat/ff.c **** 				for (clst = scl; tcl; clst++, tcl--) {	/* Create a cluster chain on the FAT */
5107:.\lib_Fat/ff.c **** 					res = put_fat(fs, clst, (tcl == 1) ? 0xFFFFFFFF : clst + 1);
5108:.\lib_Fat/ff.c **** 					if (res != FR_OK) break;
5109:.\lib_Fat/ff.c **** 					lclst = clst;
5110:.\lib_Fat/ff.c **** 				}
5111:.\lib_Fat/ff.c **** 			} else {
5112:.\lib_Fat/ff.c **** 				lclst = scl - 1;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 249


5113:.\lib_Fat/ff.c **** 			}
5114:.\lib_Fat/ff.c **** 		}
5115:.\lib_Fat/ff.c **** 	}
5116:.\lib_Fat/ff.c **** 
5117:.\lib_Fat/ff.c **** 	if (opt && res == FR_OK) {
5118:.\lib_Fat/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5119:.\lib_Fat/ff.c **** 		fp->obj.sclust = scl;		/* Update object allocation information */
5120:.\lib_Fat/ff.c **** 		fp->obj.objsize = fsz;
5121:.\lib_Fat/ff.c **** 		if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5122:.\lib_Fat/ff.c **** 		fp->flag |= FA_MODIFIED;
5123:.\lib_Fat/ff.c **** 	}
5124:.\lib_Fat/ff.c **** 
5125:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, res);
5126:.\lib_Fat/ff.c **** }
5127:.\lib_Fat/ff.c **** 
5128:.\lib_Fat/ff.c **** #endif /* _USE_EXPAND && !_FS_READONLY */
5129:.\lib_Fat/ff.c **** 
5130:.\lib_Fat/ff.c **** 
5131:.\lib_Fat/ff.c **** 
5132:.\lib_Fat/ff.c **** #if _USE_FORWARD
5133:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5134:.\lib_Fat/ff.c **** /* Forward data to the stream directly                                   */
5135:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5136:.\lib_Fat/ff.c **** 
5137:.\lib_Fat/ff.c **** FRESULT f_forward (
5138:.\lib_Fat/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5139:.\lib_Fat/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5140:.\lib_Fat/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5141:.\lib_Fat/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5142:.\lib_Fat/ff.c **** )
5143:.\lib_Fat/ff.c **** {
5144:.\lib_Fat/ff.c **** 	FRESULT res;
5145:.\lib_Fat/ff.c **** 	FATFS *fs;
5146:.\lib_Fat/ff.c **** 	DWORD clst, sect;
5147:.\lib_Fat/ff.c **** 	FSIZE_t remain;
5148:.\lib_Fat/ff.c **** 	UINT rcnt, csect;
5149:.\lib_Fat/ff.c **** 	BYTE *dbuf;
5150:.\lib_Fat/ff.c **** 
5151:.\lib_Fat/ff.c **** 
5152:.\lib_Fat/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5153:.\lib_Fat/ff.c **** 	res = validate(fp, &fs);		/* Check validity of the object */
5154:.\lib_Fat/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
5155:.\lib_Fat/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5156:.\lib_Fat/ff.c **** 
5157:.\lib_Fat/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5158:.\lib_Fat/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5159:.\lib_Fat/ff.c **** 
5160:.\lib_Fat/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5161:.\lib_Fat/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5162:.\lib_Fat/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5163:.\lib_Fat/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5164:.\lib_Fat/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5165:.\lib_Fat/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5166:.\lib_Fat/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5167:.\lib_Fat/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5168:.\lib_Fat/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5169:.\lib_Fat/ff.c **** 				fp->clust = clst;					/* Update current cluster */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 250


5170:.\lib_Fat/ff.c **** 			}
5171:.\lib_Fat/ff.c **** 		}
5172:.\lib_Fat/ff.c **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
5173:.\lib_Fat/ff.c **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5174:.\lib_Fat/ff.c **** 		sect += csect;
5175:.\lib_Fat/ff.c **** #if _FS_TINY
5176:.\lib_Fat/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5177:.\lib_Fat/ff.c **** 		dbuf = fs->win;
5178:.\lib_Fat/ff.c **** #else
5179:.\lib_Fat/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5180:.\lib_Fat/ff.c **** #if !_FS_READONLY
5181:.\lib_Fat/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5182:.\lib_Fat/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5183:.\lib_Fat/ff.c **** 				fp->flag &= ~FA_DIRTY;
5184:.\lib_Fat/ff.c **** 			}
5185:.\lib_Fat/ff.c **** #endif
5186:.\lib_Fat/ff.c **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5187:.\lib_Fat/ff.c **** 		}
5188:.\lib_Fat/ff.c **** 		dbuf = fp->buf;
5189:.\lib_Fat/ff.c **** #endif
5190:.\lib_Fat/ff.c **** 		fp->sect = sect;
5191:.\lib_Fat/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5192:.\lib_Fat/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5193:.\lib_Fat/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5194:.\lib_Fat/ff.c **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5195:.\lib_Fat/ff.c **** 	}
5196:.\lib_Fat/ff.c **** 
5197:.\lib_Fat/ff.c **** 	LEAVE_FF(fs, FR_OK);
5198:.\lib_Fat/ff.c **** }
5199:.\lib_Fat/ff.c **** #endif /* _USE_FORWARD */
5200:.\lib_Fat/ff.c **** 
5201:.\lib_Fat/ff.c **** 
5202:.\lib_Fat/ff.c **** 
5203:.\lib_Fat/ff.c **** #if _USE_MKFS && !_FS_READONLY
5204:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5205:.\lib_Fat/ff.c **** /* Create FAT file system on the logical drive                           */
5206:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5207:.\lib_Fat/ff.c **** 
5208:.\lib_Fat/ff.c **** FRESULT f_mkfs (
5209:.\lib_Fat/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5210:.\lib_Fat/ff.c **** 	BYTE opt,			/* Format option */
5211:.\lib_Fat/ff.c **** 	DWORD au,			/* Size of allocation unit [byte] */
5212:.\lib_Fat/ff.c **** 	void* work,			/* Pointer to working buffer */
5213:.\lib_Fat/ff.c **** 	UINT len			/* Size of working buffer */
5214:.\lib_Fat/ff.c **** )
5215:.\lib_Fat/ff.c **** {
5216:.\lib_Fat/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
5217:.\lib_Fat/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
5218:.\lib_Fat/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5219:.\lib_Fat/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5220:.\lib_Fat/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5221:.\lib_Fat/ff.c **** 	WORD ss;
5222:.\lib_Fat/ff.c **** 	DWORD n, pau, n_clst, sz_blk, sect, szb_buf, sz_buf;
5223:.\lib_Fat/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5224:.\lib_Fat/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5225:.\lib_Fat/ff.c **** 	UINT i, ns;
5226:.\lib_Fat/ff.c **** 	int vol;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 251


5227:.\lib_Fat/ff.c **** 	DSTATUS stat;
5228:.\lib_Fat/ff.c **** #if _USE_TRIM || _FS_EXFAT
5229:.\lib_Fat/ff.c **** 	DWORD tbl[3];
5230:.\lib_Fat/ff.c **** #endif
5231:.\lib_Fat/ff.c **** 
5232:.\lib_Fat/ff.c **** 
5233:.\lib_Fat/ff.c **** 	/* Check mounted drive and clear work area */
5234:.\lib_Fat/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5235:.\lib_Fat/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5236:.\lib_Fat/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
5237:.\lib_Fat/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5238:.\lib_Fat/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get by partition table) */
5239:.\lib_Fat/ff.c **** 
5240:.\lib_Fat/ff.c **** 	/* Check physical drive status */
5241:.\lib_Fat/ff.c **** 	stat = disk_initialize(pdrv);
5242:.\lib_Fat/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5243:.\lib_Fat/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5244:.\lib_Fat/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5245:.\lib_Fat/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium */
5246:.\lib_Fat/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5247:.\lib_Fat/ff.c **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5248:.\lib_Fat/ff.c **** #else
5249:.\lib_Fat/ff.c **** 	ss = _MAX_SS;
5250:.\lib_Fat/ff.c **** #endif
5251:.\lib_Fat/ff.c **** 	if ((au != 0 && au < ss) || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid 
5252:.\lib_Fat/ff.c **** 	au /= ss;	/* Cluster size in byte to in sector */
5253:.\lib_Fat/ff.c **** 	if (au > 32768) return FR_INVALID_PARAMETER;
5254:.\lib_Fat/ff.c **** 
5255:.\lib_Fat/ff.c **** 	/* Set size and pointer of the working buffer */
5256:.\lib_Fat/ff.c **** 	buf = (BYTE*)work;			/* Use given working buffer */
5257:.\lib_Fat/ff.c **** 	if (len < ss) return FR_MKFS_ABORTED;
5258:.\lib_Fat/ff.c **** 	szb_buf = len & ~(ss - 1);	/* Round-down by sector size [byte] */
5259:.\lib_Fat/ff.c **** 	sz_buf = szb_buf / ss;		/* Size of sector buffer [sector] */
5260:.\lib_Fat/ff.c **** 
5261:.\lib_Fat/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5262:.\lib_Fat/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5263:.\lib_Fat/ff.c **** 		/* Get partition information from partition table in the MBR */
5264:.\lib_Fat/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5265:.\lib_Fat/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check MBR is valid */
5266:.\lib_Fat/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5267:.\lib_Fat/ff.c **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5268:.\lib_Fat/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5269:.\lib_Fat/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5270:.\lib_Fat/ff.c **** 	} else {
5271:.\lib_Fat/ff.c **** 		/* Create a single-partition in this function */
5272:.\lib_Fat/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
5273:.\lib_Fat/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5274:.\lib_Fat/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
5275:.\lib_Fat/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5276:.\lib_Fat/ff.c **** 	}
5277:.\lib_Fat/ff.c **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check volume size (>=128s) */
5278:.\lib_Fat/ff.c **** 
5279:.\lib_Fat/ff.c **** 	/* Pre-determine the FAT type by argument */
5280:.\lib_Fat/ff.c **** 	do {
5281:.\lib_Fat/ff.c **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5282:.\lib_Fat/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au >= 256) {	/* exFAT only, vol >= 64Ms
5283:.\lib_Fat/ff.c **** 				fmt = FS_EXFAT; break;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 252


5284:.\lib_Fat/ff.c **** 			}
5285:.\lib_Fat/ff.c **** 		}
5286:.\lib_Fat/ff.c **** 		if (au >= 256) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
5287:.\lib_Fat/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5288:.\lib_Fat/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5289:.\lib_Fat/ff.c **** 				fmt = FS_FAT32; break;
5290:.\lib_Fat/ff.c **** 			}
5291:.\lib_Fat/ff.c **** 		}
5292:.\lib_Fat/ff.c **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
5293:.\lib_Fat/ff.c **** 		fmt = FS_FAT16;
5294:.\lib_Fat/ff.c **** 	} while (0);
5295:.\lib_Fat/ff.c **** 
5296:.\lib_Fat/ff.c **** #if _FS_EXFAT
5297:.\lib_Fat/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5298:.\lib_Fat/ff.c **** 		DWORD sum, szb_bit, szb_case;
5299:.\lib_Fat/ff.c **** 		WCHAR ch, si;
5300:.\lib_Fat/ff.c **** 		UINT j, st;
5301:.\lib_Fat/ff.c **** 		BYTE b;
5302:.\lib_Fat/ff.c **** 
5303:.\lib_Fat/ff.c **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5304:.\lib_Fat/ff.c **** #if _USE_TRIM
5305:.\lib_Fat/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5306:.\lib_Fat/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5307:.\lib_Fat/ff.c **** #endif
5308:.\lib_Fat/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5309:.\lib_Fat/ff.c **** 		if (!au) {	/* au auto-selection */
5310:.\lib_Fat/ff.c **** 			au = 8;
5311:.\lib_Fat/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512KS */
5312:.\lib_Fat/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64MS */
5313:.\lib_Fat/ff.c **** 		}
5314:.\lib_Fat/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5315:.\lib_Fat/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Numbef of FAT sectors */
5316:.\lib_Fat/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5317:.\lib_Fat/ff.c **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5318:.\lib_Fat/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Nunber of clusters */
5319:.\lib_Fat/ff.c **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5320:.\lib_Fat/ff.c **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5321:.\lib_Fat/ff.c **** 
5322:.\lib_Fat/ff.c **** 		szb_bit = (n_clst + 7) / 8;		/* Size of allocation bitmap */
5323:.\lib_Fat/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of bitmap clusters */
5324:.\lib_Fat/ff.c **** 		tbl[2] = 1;										/* Number of rootdir clusters */
5325:.\lib_Fat/ff.c **** 
5326:.\lib_Fat/ff.c **** 		/* Create a compressed up-case table */
5327:.\lib_Fat/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5328:.\lib_Fat/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5329:.\lib_Fat/ff.c **** 		st = si = i = j = szb_case = 0;
5330:.\lib_Fat/ff.c **** 		do {
5331:.\lib_Fat/ff.c **** 			switch (st) {
5332:.\lib_Fat/ff.c **** 			case 0:
5333:.\lib_Fat/ff.c **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5334:.\lib_Fat/ff.c **** 				if (ch != si) {
5335:.\lib_Fat/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5336:.\lib_Fat/ff.c **** 				}
5337:.\lib_Fat/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5338:.\lib_Fat/ff.c **** 				if (j >= 128) {
5339:.\lib_Fat/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5340:.\lib_Fat/ff.c **** 				}
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 253


5341:.\lib_Fat/ff.c **** 				st = 1;			/* Do not compress short run */
5342:.\lib_Fat/ff.c **** 				/* continue */
5343:.\lib_Fat/ff.c **** 			case 1:
5344:.\lib_Fat/ff.c **** 				ch = si++;		/* Fill the short run */
5345:.\lib_Fat/ff.c **** 				if (--j == 0) st = 0;
5346:.\lib_Fat/ff.c **** 				break;
5347:.\lib_Fat/ff.c **** 			default:
5348:.\lib_Fat/ff.c **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
5349:.\lib_Fat/ff.c **** 				st = 0;
5350:.\lib_Fat/ff.c **** 			}
5351:.\lib_Fat/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5352:.\lib_Fat/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5353:.\lib_Fat/ff.c **** 			i += 2; szb_case += 2;
5354:.\lib_Fat/ff.c **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5355:.\lib_Fat/ff.c **** 				ns = (i + ss - 1) / ss;
5356:.\lib_Fat/ff.c **** 				if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5357:.\lib_Fat/ff.c **** 				sect += ns; i = 0;
5358:.\lib_Fat/ff.c **** 			}
5359:.\lib_Fat/ff.c **** 		} while (si);
5360:.\lib_Fat/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case clusters */
5361:.\lib_Fat/ff.c **** 
5362:.\lib_Fat/ff.c **** 		/* Initialize the allocation bitmap */
5363:.\lib_Fat/ff.c **** 		mem_set(buf, 0, szb_buf);	/* Set in-use flags of bitmap, up-case and root dir */
5364:.\lib_Fat/ff.c **** 		for (i = 0, n = tbl[0] + tbl[1] + tbl[2]; n >= 8; buf[i++] = 0xFF, n -= 8) ;
5365:.\lib_Fat/ff.c **** 		for (b = 1; n; buf[i] |= b, b <<= 1, n--) ;
5366:.\lib_Fat/ff.c **** 		sect = b_data; n = (szb_bit + ss - 1) / ss;		/* Start of bitmap and number of the sectors */
5367:.\lib_Fat/ff.c **** 		do {	/* Fill allocation bitmap sectors */
5368:.\lib_Fat/ff.c **** 			ns = (n > sz_buf) ? sz_buf : n;
5369:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5370:.\lib_Fat/ff.c **** 			sect += ns;
5371:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5372:.\lib_Fat/ff.c **** 		} while (n -= ns);
5373:.\lib_Fat/ff.c **** 
5374:.\lib_Fat/ff.c **** 		/* Initialize the FAT */
5375:.\lib_Fat/ff.c **** 		st_qword(buf, 0xFFFFFFFFFFFFFFF8);	/* Entry 0 and 1 */
5376:.\lib_Fat/ff.c **** 		for (j = 0, i = 2; j < 3; j++) {	/* Set entries of bitmap, up-case and root dir */
5377:.\lib_Fat/ff.c **** 			for (n = tbl[j]; n; n--) {
5378:.\lib_Fat/ff.c **** 				st_dword(buf + i * 4, (n >= 2) ? i + 1 : 0xFFFFFFFF);
5379:.\lib_Fat/ff.c **** 				i++;
5380:.\lib_Fat/ff.c **** 			}
5381:.\lib_Fat/ff.c **** 		}
5382:.\lib_Fat/ff.c **** 		sect = b_fat; n = sz_fat;	/* Start of FAT and number of the sectors */
5383:.\lib_Fat/ff.c **** 		do {	/* Fill FAT sectors */
5384:.\lib_Fat/ff.c **** 			ns = (n > sz_buf) ? sz_buf : n;
5385:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5386:.\lib_Fat/ff.c **** 			sect += ns;
5387:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5388:.\lib_Fat/ff.c **** 		} while (n -= ns);
5389:.\lib_Fat/ff.c **** 
5390:.\lib_Fat/ff.c **** 		/* Initialize the root directory */
5391:.\lib_Fat/ff.c **** 		mem_set(buf, 0, ss);
5392:.\lib_Fat/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5393:.\lib_Fat/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5394:.\lib_Fat/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5395:.\lib_Fat/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5396:.\lib_Fat/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5397:.\lib_Fat/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 254


5398:.\lib_Fat/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5399:.\lib_Fat/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
5400:.\lib_Fat/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	n = au;	/* Start of directory and number of the sectors *
5401:.\lib_Fat/ff.c **** 		do {	/* Fill root direcotry sectors */
5402:.\lib_Fat/ff.c **** 			ns = (n > sz_buf) ? sz_buf : n;
5403:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5404:.\lib_Fat/ff.c **** 			sect += ns;
5405:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5406:.\lib_Fat/ff.c **** 		} while (n -= ns);
5407:.\lib_Fat/ff.c **** 
5408:.\lib_Fat/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5409:.\lib_Fat/ff.c **** 		sect = b_vol;
5410:.\lib_Fat/ff.c **** 		for (n = 0; n < 2; n++) {
5411:.\lib_Fat/ff.c **** 			/* Main record (+0) */
5412:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5413:.\lib_Fat/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5414:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5415:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
5416:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5417:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5418:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5419:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5420:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5421:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5422:.\lib_Fat/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
5423:.\lib_Fat/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5424:.\lib_Fat/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5425:.\lib_Fat/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5426:.\lib_Fat/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5427:.\lib_Fat/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5428:.\lib_Fat/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5429:.\lib_Fat/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5430:.\lib_Fat/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5431:.\lib_Fat/ff.c **** 			}
5432:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5433:.\lib_Fat/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5434:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5435:.\lib_Fat/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5436:.\lib_Fat/ff.c **** 			for (j = 1; j < 9; j++) {
5437:.\lib_Fat/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5438:.\lib_Fat/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5439:.\lib_Fat/ff.c **** 			}
5440:.\lib_Fat/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5441:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5442:.\lib_Fat/ff.c **** 			for ( ; j < 11; j++) {
5443:.\lib_Fat/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5444:.\lib_Fat/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5445:.\lib_Fat/ff.c **** 			}
5446:.\lib_Fat/ff.c **** 			/* Sum record (+11) */
5447:.\lib_Fat/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5448:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5449:.\lib_Fat/ff.c **** 		}
5450:.\lib_Fat/ff.c **** 
5451:.\lib_Fat/ff.c **** 	} else
5452:.\lib_Fat/ff.c **** #endif
5453:.\lib_Fat/ff.c **** 	{	/* Create an FAT12/16/32 volume */
5454:.\lib_Fat/ff.c **** 		do {
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 255


5455:.\lib_Fat/ff.c **** 			pau = au;
5456:.\lib_Fat/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5457:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5458:.\lib_Fat/ff.c **** 				if (!pau) {	/* au auto-selection */
5459:.\lib_Fat/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5460:.\lib_Fat/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5461:.\lib_Fat/ff.c **** 				}
5462:.\lib_Fat/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5463:.\lib_Fat/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5464:.\lib_Fat/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5465:.\lib_Fat/ff.c **** 				sz_dir = 0;		/* No static directory */
5466:.\lib_Fat/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
5467:.\lib_Fat/ff.c **** 			} else {				/* FAT12/16 volume */
5468:.\lib_Fat/ff.c **** 				if (!pau) {	/* au auto-selection */
5469:.\lib_Fat/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5470:.\lib_Fat/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5471:.\lib_Fat/ff.c **** 				}
5472:.\lib_Fat/ff.c **** 				n_clst = sz_vol / pau;
5473:.\lib_Fat/ff.c **** 				if (n_clst > MAX_FAT12) {
5474:.\lib_Fat/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5475:.\lib_Fat/ff.c **** 				} else {
5476:.\lib_Fat/ff.c **** 					fmt = FS_FAT12;
5477:.\lib_Fat/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5478:.\lib_Fat/ff.c **** 				}
5479:.\lib_Fat/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5480:.\lib_Fat/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5481:.\lib_Fat/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5482:.\lib_Fat/ff.c **** 			}
5483:.\lib_Fat/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5484:.\lib_Fat/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5485:.\lib_Fat/ff.c **** 
5486:.\lib_Fat/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5487:.\lib_Fat/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5488:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5489:.\lib_Fat/ff.c **** 				sz_rsv += n; b_fat += n;
5490:.\lib_Fat/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
5491:.\lib_Fat/ff.c **** 				sz_fat += n / n_fats;
5492:.\lib_Fat/ff.c **** 			}
5493:.\lib_Fat/ff.c **** 
5494:.\lib_Fat/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5495:.\lib_Fat/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
5496:.\lib_Fat/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5497:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT32) {
5498:.\lib_Fat/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5499:.\lib_Fat/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5500:.\lib_Fat/ff.c **** 					return FR_MKFS_ABORTED;
5501:.\lib_Fat/ff.c **** 				}
5502:.\lib_Fat/ff.c **** 			}
5503:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT16) {
5504:.\lib_Fat/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5505:.\lib_Fat/ff.c **** 					if (!au && (pau * 2) <= 64) {
5506:.\lib_Fat/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5507:.\lib_Fat/ff.c **** 					}
5508:.\lib_Fat/ff.c **** 					if ((opt & FM_FAT32)) {
5509:.\lib_Fat/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5510:.\lib_Fat/ff.c **** 					}
5511:.\lib_Fat/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 256


5512:.\lib_Fat/ff.c **** 					return FR_MKFS_ABORTED;
5513:.\lib_Fat/ff.c **** 				}
5514:.\lib_Fat/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5515:.\lib_Fat/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5516:.\lib_Fat/ff.c **** 					return FR_MKFS_ABORTED;
5517:.\lib_Fat/ff.c **** 				}
5518:.\lib_Fat/ff.c **** 			}
5519:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
5520:.\lib_Fat/ff.c **** 
5521:.\lib_Fat/ff.c **** 			/* Ok, it is the valid cluster configuration */
5522:.\lib_Fat/ff.c **** 			break;
5523:.\lib_Fat/ff.c **** 		} while (1);
5524:.\lib_Fat/ff.c **** 
5525:.\lib_Fat/ff.c **** #if _USE_TRIM
5526:.\lib_Fat/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5527:.\lib_Fat/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5528:.\lib_Fat/ff.c **** #endif
5529:.\lib_Fat/ff.c **** 		/* Create FAT VBR */
5530:.\lib_Fat/ff.c **** 		mem_set(buf, 0, ss);
5531:.\lib_Fat/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5532:.\lib_Fat/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5533:.\lib_Fat/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5534:.\lib_Fat/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5535:.\lib_Fat/ff.c **** 		buf[BPB_NumFATs] = n_fats;						/* Number of FATs */
5536:.\lib_Fat/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5537:.\lib_Fat/ff.c **** 		if (sz_vol < 0x10000) {
5538:.\lib_Fat/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5539:.\lib_Fat/ff.c **** 		} else {
5540:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 12-bit LBA */
5541:.\lib_Fat/ff.c **** 		}
5542:.\lib_Fat/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor */
5543:.\lib_Fat/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5544:.\lib_Fat/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5545:.\lib_Fat/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5546:.\lib_Fat/ff.c **** 		if (fmt == FS_FAT32) {
5547:.\lib_Fat/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5548:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5549:.\lib_Fat/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5550:.\lib_Fat/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5551:.\lib_Fat/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5552:.\lib_Fat/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5553:.\lib_Fat/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5554:.\lib_Fat/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5555:.\lib_Fat/ff.c **** 		} else {
5556:.\lib_Fat/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5557:.\lib_Fat/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5558:.\lib_Fat/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5559:.\lib_Fat/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5560:.\lib_Fat/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5561:.\lib_Fat/ff.c **** 		}
5562:.\lib_Fat/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5563:.\lib_Fat/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
5564:.\lib_Fat/ff.c **** 
5565:.\lib_Fat/ff.c **** 		/* Create FSINFO record if needed */
5566:.\lib_Fat/ff.c **** 		if (fmt == FS_FAT32) {
5567:.\lib_Fat/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5568:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 257


5569:.\lib_Fat/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5570:.\lib_Fat/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5571:.\lib_Fat/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5572:.\lib_Fat/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5573:.\lib_Fat/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5574:.\lib_Fat/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5575:.\lib_Fat/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5576:.\lib_Fat/ff.c **** 		}
5577:.\lib_Fat/ff.c **** 
5578:.\lib_Fat/ff.c **** 		/* Initialize FAT area */
5579:.\lib_Fat/ff.c **** 		mem_set(buf, 0, szb_buf);
5580:.\lib_Fat/ff.c **** 		sect = b_fat;		/* Start sector */
5581:.\lib_Fat/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5582:.\lib_Fat/ff.c **** 			if (fmt == FS_FAT32) {
5583:.\lib_Fat/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5584:.\lib_Fat/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5585:.\lib_Fat/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5586:.\lib_Fat/ff.c **** 			} else {
5587:.\lib_Fat/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5588:.\lib_Fat/ff.c **** 			}
5589:.\lib_Fat/ff.c **** 			n = sz_fat;		/* Sector count of a FAT */
5590:.\lib_Fat/ff.c **** 			do {	/* Fill FAT sectors */
5591:.\lib_Fat/ff.c **** 				ns = (n > sz_buf) ? sz_buf : n;
5592:.\lib_Fat/ff.c **** 				if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5593:.\lib_Fat/ff.c **** 				sect += ns;
5594:.\lib_Fat/ff.c **** 				mem_set(buf, 0, ss);
5595:.\lib_Fat/ff.c **** 			} while (n -= ns);
5596:.\lib_Fat/ff.c **** 		}
5597:.\lib_Fat/ff.c **** 
5598:.\lib_Fat/ff.c **** 		/* Initialize root directory (fill with zero) */
5599:.\lib_Fat/ff.c **** 		n = (fmt == FS_FAT32) ? pau : sz_dir;		/* Sector count of root directory */
5600:.\lib_Fat/ff.c **** 		do {
5601:.\lib_Fat/ff.c **** 			ns = (n > sz_buf) ? sz_buf : n;
5602:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, sect, ns) != RES_OK) return FR_DISK_ERR;
5603:.\lib_Fat/ff.c **** 			sect += ns;
5604:.\lib_Fat/ff.c **** 		} while (n -= ns);
5605:.\lib_Fat/ff.c **** 	}
5606:.\lib_Fat/ff.c **** 
5607:.\lib_Fat/ff.c **** 	/* Determine system ID in the partition table */
5608:.\lib_Fat/ff.c **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5609:.\lib_Fat/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5610:.\lib_Fat/ff.c **** 	} else {
5611:.\lib_Fat/ff.c **** 		if (fmt == FS_FAT32) {
5612:.\lib_Fat/ff.c **** 			sys = 0x0C;		/* FAT32X */
5613:.\lib_Fat/ff.c **** 		} else {
5614:.\lib_Fat/ff.c **** 			if (sz_vol >= 0x10000) {
5615:.\lib_Fat/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
5616:.\lib_Fat/ff.c **** 			} else {
5617:.\lib_Fat/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
5618:.\lib_Fat/ff.c **** 			}
5619:.\lib_Fat/ff.c **** 		}
5620:.\lib_Fat/ff.c **** 	}
5621:.\lib_Fat/ff.c **** 
5622:.\lib_Fat/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5623:.\lib_Fat/ff.c **** 		/* Update system ID in the partition table */
5624:.\lib_Fat/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
5625:.\lib_Fat/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 258


5626:.\lib_Fat/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
5627:.\lib_Fat/ff.c **** 	} else {
5628:.\lib_Fat/ff.c **** 		if (!(opt & FM_SFD)) {
5629:.\lib_Fat/ff.c **** 			/* Create partition table in FDISK format */
5630:.\lib_Fat/ff.c **** 			mem_set(buf, 0, ss);
5631:.\lib_Fat/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5632:.\lib_Fat/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5633:.\lib_Fat/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5634:.\lib_Fat/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5635:.\lib_Fat/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5636:.\lib_Fat/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5637:.\lib_Fat/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5638:.\lib_Fat/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
5639:.\lib_Fat/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5640:.\lib_Fat/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
5641:.\lib_Fat/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5642:.\lib_Fat/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5643:.\lib_Fat/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
5644:.\lib_Fat/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5645:.\lib_Fat/ff.c **** 		}
5646:.\lib_Fat/ff.c **** 	}
5647:.\lib_Fat/ff.c **** 
5648:.\lib_Fat/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
5649:.\lib_Fat/ff.c **** 
5650:.\lib_Fat/ff.c **** 	return FR_OK;
5651:.\lib_Fat/ff.c **** }
5652:.\lib_Fat/ff.c **** 
5653:.\lib_Fat/ff.c **** 
5654:.\lib_Fat/ff.c **** 
5655:.\lib_Fat/ff.c **** #if _MULTI_PARTITION
5656:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5657:.\lib_Fat/ff.c **** /* Create partition table on the physical drive                          */
5658:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5659:.\lib_Fat/ff.c **** 
5660:.\lib_Fat/ff.c **** FRESULT f_fdisk (
5661:.\lib_Fat/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5662:.\lib_Fat/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5663:.\lib_Fat/ff.c **** 	void* work			/* Pointer to the working buffer */
5664:.\lib_Fat/ff.c **** )
5665:.\lib_Fat/ff.c **** {
5666:.\lib_Fat/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5667:.\lib_Fat/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5668:.\lib_Fat/ff.c **** 	DSTATUS stat;
5669:.\lib_Fat/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5670:.\lib_Fat/ff.c **** 
5671:.\lib_Fat/ff.c **** 
5672:.\lib_Fat/ff.c **** 	stat = disk_initialize(pdrv);
5673:.\lib_Fat/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5674:.\lib_Fat/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5675:.\lib_Fat/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5676:.\lib_Fat/ff.c **** 
5677:.\lib_Fat/ff.c **** 	/* Determine the CHS without any care of the drive geometry */
5678:.\lib_Fat/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5679:.\lib_Fat/ff.c **** 	if (n == 256) n--;
5680:.\lib_Fat/ff.c **** 	e_hd = n - 1;
5681:.\lib_Fat/ff.c **** 	sz_cyl = 63 * n;
5682:.\lib_Fat/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 259


5683:.\lib_Fat/ff.c **** 
5684:.\lib_Fat/ff.c **** 	/* Create partition table */
5685:.\lib_Fat/ff.c **** 	mem_set(buf, 0, _MAX_SS);
5686:.\lib_Fat/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
5687:.\lib_Fat/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5688:.\lib_Fat/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
5689:.\lib_Fat/ff.c **** 		if (!p_cyl) continue;
5690:.\lib_Fat/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
5691:.\lib_Fat/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5692:.\lib_Fat/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5693:.\lib_Fat/ff.c **** 			s_hd = 1;
5694:.\lib_Fat/ff.c **** 			s_part += 63; sz_part -= 63;
5695:.\lib_Fat/ff.c **** 		} else {
5696:.\lib_Fat/ff.c **** 			s_hd = 0;
5697:.\lib_Fat/ff.c **** 		}
5698:.\lib_Fat/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
5699:.\lib_Fat/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5700:.\lib_Fat/ff.c **** 
5701:.\lib_Fat/ff.c **** 		/* Set partition table */
5702:.\lib_Fat/ff.c **** 		p[1] = s_hd;						/* Start head */
5703:.\lib_Fat/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
5704:.\lib_Fat/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5705:.\lib_Fat/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
5706:.\lib_Fat/ff.c **** 		p[5] = e_hd;						/* End head */
5707:.\lib_Fat/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
5708:.\lib_Fat/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5709:.\lib_Fat/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5710:.\lib_Fat/ff.c **** 		st_dword(p + 12, sz_part);			/* Partition size */
5711:.\lib_Fat/ff.c **** 
5712:.\lib_Fat/ff.c **** 		/* Next partition */
5713:.\lib_Fat/ff.c **** 		b_cyl += p_cyl;
5714:.\lib_Fat/ff.c **** 	}
5715:.\lib_Fat/ff.c **** 	st_word(p, 0xAA55);
5716:.\lib_Fat/ff.c **** 
5717:.\lib_Fat/ff.c **** 	/* Write it to the MBR */
5718:.\lib_Fat/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5719:.\lib_Fat/ff.c **** }
5720:.\lib_Fat/ff.c **** 
5721:.\lib_Fat/ff.c **** #endif /* _MULTI_PARTITION */
5722:.\lib_Fat/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
5723:.\lib_Fat/ff.c **** 
5724:.\lib_Fat/ff.c **** 
5725:.\lib_Fat/ff.c **** 
5726:.\lib_Fat/ff.c **** 
5727:.\lib_Fat/ff.c **** #if _USE_STRFUNC
5728:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5729:.\lib_Fat/ff.c **** /* Get a string from the file                                            */
5730:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5731:.\lib_Fat/ff.c **** 
5732:.\lib_Fat/ff.c **** TCHAR* f_gets (
5733:.\lib_Fat/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5734:.\lib_Fat/ff.c **** 	int len,		/* Size of string buffer (characters) */
5735:.\lib_Fat/ff.c **** 	FIL* fp			/* Pointer to the file object */
5736:.\lib_Fat/ff.c **** )
5737:.\lib_Fat/ff.c **** {
 8993              		.loc 1 5737 0
 8994              		.cfi_startproc
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 260


 8995 0000 80B5     		push	{r7, lr}
 8996              		.cfi_def_cfa_offset 8
 8997              		.cfi_offset 7, -8
 8998              		.cfi_offset 14, -4
 8999 0002 88B0     		sub	sp, sp, #32
 9000              		.cfi_def_cfa_offset 40
 9001 0004 00AF     		add	r7, sp, #0
 9002              		.cfi_def_cfa_register 7
 9003 0006 F860     		str	r0, [r7, #12]
 9004 0008 B960     		str	r1, [r7, #8]
 9005 000a 7A60     		str	r2, [r7, #4]
5738:.\lib_Fat/ff.c **** 	int n = 0;
 9006              		.loc 1 5738 0
 9007 000c 0023     		mov	r3, #0
 9008 000e FB61     		str	r3, [r7, #28]
5739:.\lib_Fat/ff.c **** 	TCHAR c, *p = buff;
 9009              		.loc 1 5739 0
 9010 0010 FB68     		ldr	r3, [r7, #12]
 9011 0012 BB61     		str	r3, [r7, #24]
5740:.\lib_Fat/ff.c **** 	BYTE s[2];
5741:.\lib_Fat/ff.c **** 	UINT rc;
5742:.\lib_Fat/ff.c **** 
5743:.\lib_Fat/ff.c **** 
5744:.\lib_Fat/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
 9012              		.loc 1 5744 0
 9013 0014 29E0     		b	.L492
 9014              	.L496:
5745:.\lib_Fat/ff.c **** #if _LFN_UNICODE
5746:.\lib_Fat/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5747:.\lib_Fat/ff.c **** 		f_read(fp, s, 1, &rc);
5748:.\lib_Fat/ff.c **** 		if (rc != 1) break;
5749:.\lib_Fat/ff.c **** 		c = s[0];
5750:.\lib_Fat/ff.c **** 		if (c >= 0x80) {
5751:.\lib_Fat/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5752:.\lib_Fat/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence */
5753:.\lib_Fat/ff.c **** 				f_read(fp, s, 1, &rc);
5754:.\lib_Fat/ff.c **** 				if (rc != 1) break;
5755:.\lib_Fat/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5756:.\lib_Fat/ff.c **** 				if (c < 0x80) c = '?';
5757:.\lib_Fat/ff.c **** 			} else {
5758:.\lib_Fat/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence */
5759:.\lib_Fat/ff.c **** 					f_read(fp, s, 2, &rc);
5760:.\lib_Fat/ff.c **** 					if (rc != 2) break;
5761:.\lib_Fat/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5762:.\lib_Fat/ff.c **** 					if (c < 0x800) c = '?';
5763:.\lib_Fat/ff.c **** 				} else {			/* Reject four-byte sequence */
5764:.\lib_Fat/ff.c **** 					c = '?';
5765:.\lib_Fat/ff.c **** 				}
5766:.\lib_Fat/ff.c **** 			}
5767:.\lib_Fat/ff.c **** 		}
5768:.\lib_Fat/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5769:.\lib_Fat/ff.c **** 		f_read(fp, s, 2, &rc);
5770:.\lib_Fat/ff.c **** 		if (rc != 2) break;
5771:.\lib_Fat/ff.c **** 		c = s[1] + (s[0] << 8);
5772:.\lib_Fat/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5773:.\lib_Fat/ff.c **** 		f_read(fp, s, 2, &rc);
5774:.\lib_Fat/ff.c **** 		if (rc != 2) break;
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 261


5775:.\lib_Fat/ff.c **** 		c = s[0] + (s[1] << 8);
5776:.\lib_Fat/ff.c **** #else						/* Read a character in ANSI/OEM */
5777:.\lib_Fat/ff.c **** 		f_read(fp, s, 1, &rc);
5778:.\lib_Fat/ff.c **** 		if (rc != 1) break;
5779:.\lib_Fat/ff.c **** 		c = s[0];
5780:.\lib_Fat/ff.c **** 		if (IsDBCS1(c)) {
5781:.\lib_Fat/ff.c **** 			f_read(fp, s, 1, &rc);
5782:.\lib_Fat/ff.c **** 			if (rc != 1) break;
5783:.\lib_Fat/ff.c **** 			c = (c << 8) + s[0];
5784:.\lib_Fat/ff.c **** 		}
5785:.\lib_Fat/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5786:.\lib_Fat/ff.c **** 		if (!c) c = '?';
5787:.\lib_Fat/ff.c **** #endif
5788:.\lib_Fat/ff.c **** #else						/* Read a character without conversion */
5789:.\lib_Fat/ff.c **** 		f_read(fp, s, 1, &rc);
 9015              		.loc 1 5789 0
 9016 0016 7968     		ldr	r1, [r7, #4]
 9017 0018 1423     		mov	r3, #20
 9018 001a FA18     		add	r2, r7, r3
 9019 001c 1023     		mov	r3, #16
 9020 001e FB18     		add	r3, r7, r3
 9021 0020 081C     		mov	r0, r1
 9022 0022 111C     		mov	r1, r2
 9023 0024 0122     		mov	r2, #1
 9024 0026 FFF7FEFF 		bl	f_read
5790:.\lib_Fat/ff.c **** 		if (rc != 1) break;
 9025              		.loc 1 5790 0
 9026 002a 3B69     		ldr	r3, [r7, #16]
 9027 002c 012B     		cmp	r3, #1
 9028 002e 00D0     		beq	.L493
 9029 0030 20E0     		b	.L494
 9030              	.L493:
5791:.\lib_Fat/ff.c **** 		c = s[0];
 9031              		.loc 1 5791 0
 9032 0032 1723     		mov	r3, #23
 9033 0034 FB18     		add	r3, r7, r3
 9034 0036 1422     		mov	r2, #20
 9035 0038 BA18     		add	r2, r7, r2
 9036 003a 1278     		ldrb	r2, [r2]
 9037 003c 1A70     		strb	r2, [r3]
5792:.\lib_Fat/ff.c **** #endif
5793:.\lib_Fat/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 9038              		.loc 1 5793 0
 9039 003e 1723     		mov	r3, #23
 9040 0040 FB18     		add	r3, r7, r3
 9041 0042 1B78     		ldrb	r3, [r3]
 9042 0044 0D2B     		cmp	r3, #13
 9043 0046 00D1     		bne	.L495
 9044              		.loc 1 5793 0 is_stmt 0 discriminator 1
 9045 0048 0FE0     		b	.L492
 9046              	.L495:
5794:.\lib_Fat/ff.c **** 		*p++ = c;
 9047              		.loc 1 5794 0 is_stmt 1
 9048 004a BB69     		ldr	r3, [r7, #24]
 9049 004c 5A1C     		add	r2, r3, #1
 9050 004e BA61     		str	r2, [r7, #24]
 9051 0050 1722     		mov	r2, #23
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 262


 9052 0052 BA18     		add	r2, r7, r2
 9053 0054 1278     		ldrb	r2, [r2]
 9054 0056 1A70     		strb	r2, [r3]
5795:.\lib_Fat/ff.c **** 		n++;
 9055              		.loc 1 5795 0
 9056 0058 FB69     		ldr	r3, [r7, #28]
 9057 005a 0133     		add	r3, r3, #1
 9058 005c FB61     		str	r3, [r7, #28]
5796:.\lib_Fat/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 9059              		.loc 1 5796 0
 9060 005e 1723     		mov	r3, #23
 9061 0060 FB18     		add	r3, r7, r3
 9062 0062 1B78     		ldrb	r3, [r3]
 9063 0064 0A2B     		cmp	r3, #10
 9064 0066 00D1     		bne	.L492
 9065 0068 04E0     		b	.L494
 9066              	.L492:
5744:.\lib_Fat/ff.c **** #if _LFN_UNICODE
 9067              		.loc 1 5744 0
 9068 006a BB68     		ldr	r3, [r7, #8]
 9069 006c 5A1E     		sub	r2, r3, #1
 9070 006e FB69     		ldr	r3, [r7, #28]
 9071 0070 9A42     		cmp	r2, r3
 9072 0072 D0DC     		bgt	.L496
 9073              	.L494:
5797:.\lib_Fat/ff.c **** 	}
5798:.\lib_Fat/ff.c **** 	*p = 0;
 9074              		.loc 1 5798 0
 9075 0074 BB69     		ldr	r3, [r7, #24]
 9076 0076 0022     		mov	r2, #0
 9077 0078 1A70     		strb	r2, [r3]
5799:.\lib_Fat/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 9078              		.loc 1 5799 0
 9079 007a FB69     		ldr	r3, [r7, #28]
 9080 007c 002B     		cmp	r3, #0
 9081 007e 01D0     		beq	.L497
 9082              		.loc 1 5799 0 is_stmt 0 discriminator 1
 9083 0080 FB68     		ldr	r3, [r7, #12]
 9084 0082 00E0     		b	.L499
 9085              	.L497:
 9086              		.loc 1 5799 0 discriminator 2
 9087 0084 0023     		mov	r3, #0
 9088              	.L499:
5800:.\lib_Fat/ff.c **** }
 9089              		.loc 1 5800 0 is_stmt 1
 9090 0086 181C     		mov	r0, r3
 9091 0088 BD46     		mov	sp, r7
 9092 008a 08B0     		add	sp, sp, #32
 9093              		@ sp needed
 9094 008c 80BD     		pop	{r7, pc}
 9095              		.cfi_endproc
 9096              	.LFE48:
 9097              		.size	f_gets, .-f_gets
 9098 008e C046     		.section	.text.putc_bfd,"ax",%progbits
 9099              		.align	2
 9100              		.code	16
 9101              		.thumb_func
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 263


 9102              		.type	putc_bfd, %function
 9103              	putc_bfd:
 9104              	.LFB49:
5801:.\lib_Fat/ff.c **** 
5802:.\lib_Fat/ff.c **** 
5803:.\lib_Fat/ff.c **** 
5804:.\lib_Fat/ff.c **** 
5805:.\lib_Fat/ff.c **** #if !_FS_READONLY
5806:.\lib_Fat/ff.c **** #include <stdarg.h>
5807:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5808:.\lib_Fat/ff.c **** /* Put a character to the file                                           */
5809:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5810:.\lib_Fat/ff.c **** 
5811:.\lib_Fat/ff.c **** typedef struct {
5812:.\lib_Fat/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
5813:.\lib_Fat/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
5814:.\lib_Fat/ff.c **** 	BYTE buf[64];	/* Write buffer */
5815:.\lib_Fat/ff.c **** } putbuff;
5816:.\lib_Fat/ff.c **** 
5817:.\lib_Fat/ff.c **** 
5818:.\lib_Fat/ff.c **** static
5819:.\lib_Fat/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
5820:.\lib_Fat/ff.c **** 	putbuff* pb,
5821:.\lib_Fat/ff.c **** 	TCHAR c
5822:.\lib_Fat/ff.c **** )
5823:.\lib_Fat/ff.c **** {
 9105              		.loc 1 5823 0
 9106              		.cfi_startproc
 9107 0000 80B5     		push	{r7, lr}
 9108              		.cfi_def_cfa_offset 8
 9109              		.cfi_offset 7, -8
 9110              		.cfi_offset 14, -4
 9111 0002 84B0     		sub	sp, sp, #16
 9112              		.cfi_def_cfa_offset 24
 9113 0004 00AF     		add	r7, sp, #0
 9114              		.cfi_def_cfa_register 7
 9115 0006 7860     		str	r0, [r7, #4]
 9116 0008 0A1C     		mov	r2, r1
 9117 000a FB1C     		add	r3, r7, #3
 9118 000c 1A70     		strb	r2, [r3]
5824:.\lib_Fat/ff.c **** 	UINT bw;
5825:.\lib_Fat/ff.c **** 	int i;
5826:.\lib_Fat/ff.c **** 
5827:.\lib_Fat/ff.c **** 
5828:.\lib_Fat/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 9119              		.loc 1 5828 0
 9120 000e FB1C     		add	r3, r7, #3
 9121 0010 1B78     		ldrb	r3, [r3]
 9122 0012 0A2B     		cmp	r3, #10
 9123 0014 04D1     		bne	.L501
5829:.\lib_Fat/ff.c **** 		putc_bfd(pb, '\r');
 9124              		.loc 1 5829 0
 9125 0016 7B68     		ldr	r3, [r7, #4]
 9126 0018 181C     		mov	r0, r3
 9127 001a 0D21     		mov	r1, #13
 9128 001c FFF7F0FF 		bl	putc_bfd
 9129              	.L501:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 264


5830:.\lib_Fat/ff.c **** 	}
5831:.\lib_Fat/ff.c **** 
5832:.\lib_Fat/ff.c **** 	i = pb->idx;		/* Write index of pb->buf[] */
 9130              		.loc 1 5832 0
 9131 0020 7B68     		ldr	r3, [r7, #4]
 9132 0022 5B68     		ldr	r3, [r3, #4]
 9133 0024 FB60     		str	r3, [r7, #12]
5833:.\lib_Fat/ff.c **** 	if (i < 0) return;
 9134              		.loc 1 5833 0
 9135 0026 FB68     		ldr	r3, [r7, #12]
 9136 0028 002B     		cmp	r3, #0
 9137 002a 25DB     		blt	.L500
5834:.\lib_Fat/ff.c **** 
5835:.\lib_Fat/ff.c **** #if _LFN_UNICODE
5836:.\lib_Fat/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5837:.\lib_Fat/ff.c **** 	if (c < 0x80) {				/* 7-bit */
5838:.\lib_Fat/ff.c **** 		pb->buf[i++] = (BYTE)c;
5839:.\lib_Fat/ff.c **** 	} else {
5840:.\lib_Fat/ff.c **** 		if (c < 0x800) {		/* 11-bit */
5841:.\lib_Fat/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5842:.\lib_Fat/ff.c **** 		} else {				/* 16-bit */
5843:.\lib_Fat/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5844:.\lib_Fat/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5845:.\lib_Fat/ff.c **** 		}
5846:.\lib_Fat/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5847:.\lib_Fat/ff.c **** 	}
5848:.\lib_Fat/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5849:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5850:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)c;
5851:.\lib_Fat/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5852:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)c;
5853:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5854:.\lib_Fat/ff.c **** #else							/* Write a character in ANSI/OEM */
5855:.\lib_Fat/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
5856:.\lib_Fat/ff.c **** 	if (!c) c = '?';
5857:.\lib_Fat/ff.c **** 	if (c >= 0x100)
5858:.\lib_Fat/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
5859:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)c;
5860:.\lib_Fat/ff.c **** #endif
5861:.\lib_Fat/ff.c **** #else							/* Write a character without conversion */
5862:.\lib_Fat/ff.c **** 	pb->buf[i++] = (BYTE)c;
 9138              		.loc 1 5862 0
 9139 002c FB68     		ldr	r3, [r7, #12]
 9140 002e 5A1C     		add	r2, r3, #1
 9141 0030 FA60     		str	r2, [r7, #12]
 9142 0032 7A68     		ldr	r2, [r7, #4]
 9143 0034 D318     		add	r3, r2, r3
 9144 0036 FA1C     		add	r2, r7, #3
 9145 0038 1278     		ldrb	r2, [r2]
 9146 003a 1A73     		strb	r2, [r3, #12]
5863:.\lib_Fat/ff.c **** #endif
5864:.\lib_Fat/ff.c **** 
5865:.\lib_Fat/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 9147              		.loc 1 5865 0
 9148 003c FB68     		ldr	r3, [r7, #12]
 9149 003e 3C2B     		cmp	r3, #60
 9150 0040 12DD     		ble	.L504
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 265


5866:.\lib_Fat/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 9151              		.loc 1 5866 0
 9152 0042 7B68     		ldr	r3, [r7, #4]
 9153 0044 1868     		ldr	r0, [r3]
 9154 0046 7B68     		ldr	r3, [r7, #4]
 9155 0048 0C33     		add	r3, r3, #12
 9156 004a 191C     		mov	r1, r3
 9157 004c FA68     		ldr	r2, [r7, #12]
 9158 004e 0823     		mov	r3, #8
 9159 0050 FB18     		add	r3, r7, r3
 9160 0052 FFF7FEFF 		bl	f_write
5867:.\lib_Fat/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 9161              		.loc 1 5867 0
 9162 0056 FA68     		ldr	r2, [r7, #12]
 9163 0058 BB68     		ldr	r3, [r7, #8]
 9164 005a 9A42     		cmp	r2, r3
 9165 005c 01D1     		bne	.L505
 9166              		.loc 1 5867 0 is_stmt 0 discriminator 1
 9167 005e 0023     		mov	r3, #0
 9168 0060 01E0     		b	.L506
 9169              	.L505:
 9170              		.loc 1 5867 0 discriminator 2
 9171 0062 0123     		mov	r3, #1
 9172 0064 5B42     		neg	r3, r3
 9173              	.L506:
 9174              		.loc 1 5867 0 discriminator 4
 9175 0066 FB60     		str	r3, [r7, #12]
 9176              	.L504:
5868:.\lib_Fat/ff.c **** 	}
5869:.\lib_Fat/ff.c **** 	pb->idx = i;
 9177              		.loc 1 5869 0 is_stmt 1
 9178 0068 7B68     		ldr	r3, [r7, #4]
 9179 006a FA68     		ldr	r2, [r7, #12]
 9180 006c 5A60     		str	r2, [r3, #4]
5870:.\lib_Fat/ff.c **** 	pb->nchr++;
 9181              		.loc 1 5870 0
 9182 006e 7B68     		ldr	r3, [r7, #4]
 9183 0070 9B68     		ldr	r3, [r3, #8]
 9184 0072 5A1C     		add	r2, r3, #1
 9185 0074 7B68     		ldr	r3, [r7, #4]
 9186 0076 9A60     		str	r2, [r3, #8]
 9187              	.L500:
5871:.\lib_Fat/ff.c **** }
 9188              		.loc 1 5871 0
 9189 0078 BD46     		mov	sp, r7
 9190 007a 04B0     		add	sp, sp, #16
 9191              		@ sp needed
 9192 007c 80BD     		pop	{r7, pc}
 9193              		.cfi_endproc
 9194              	.LFE49:
 9195              		.size	putc_bfd, .-putc_bfd
 9196 007e C046     		.section	.text.putc_flush,"ax",%progbits
 9197              		.align	2
 9198              		.code	16
 9199              		.thumb_func
 9200              		.type	putc_flush, %function
 9201              	putc_flush:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 266


 9202              	.LFB50:
5872:.\lib_Fat/ff.c **** 
5873:.\lib_Fat/ff.c **** 
5874:.\lib_Fat/ff.c **** static
5875:.\lib_Fat/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
5876:.\lib_Fat/ff.c **** 	putbuff* pb
5877:.\lib_Fat/ff.c **** )
5878:.\lib_Fat/ff.c **** {
 9203              		.loc 1 5878 0
 9204              		.cfi_startproc
 9205 0000 90B5     		push	{r4, r7, lr}
 9206              		.cfi_def_cfa_offset 12
 9207              		.cfi_offset 4, -12
 9208              		.cfi_offset 7, -8
 9209              		.cfi_offset 14, -4
 9210 0002 85B0     		sub	sp, sp, #20
 9211              		.cfi_def_cfa_offset 32
 9212 0004 00AF     		add	r7, sp, #0
 9213              		.cfi_def_cfa_register 7
 9214 0006 7860     		str	r0, [r7, #4]
5879:.\lib_Fat/ff.c **** 	UINT nw;
5880:.\lib_Fat/ff.c **** 
5881:.\lib_Fat/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 9215              		.loc 1 5881 0
 9216 0008 7B68     		ldr	r3, [r7, #4]
 9217 000a 5B68     		ldr	r3, [r3, #4]
 9218 000c 002B     		cmp	r3, #0
 9219 000e 19DB     		blt	.L508
5882:.\lib_Fat/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 9220              		.loc 1 5882 0
 9221 0010 7B68     		ldr	r3, [r7, #4]
 9222 0012 1968     		ldr	r1, [r3]
 9223 0014 7B68     		ldr	r3, [r7, #4]
 9224 0016 0C33     		add	r3, r3, #12
 9225 0018 1A1C     		mov	r2, r3
 9226 001a 7B68     		ldr	r3, [r7, #4]
 9227 001c 5B68     		ldr	r3, [r3, #4]
 9228 001e 1C1C     		mov	r4, r3
 9229 0020 0C23     		mov	r3, #12
 9230 0022 FB18     		add	r3, r7, r3
 9231 0024 081C     		mov	r0, r1
 9232 0026 111C     		mov	r1, r2
 9233 0028 221C     		mov	r2, r4
 9234 002a FFF7FEFF 		bl	f_write
 9235 002e 031E     		sub	r3, r0, #0
 9236 0030 08D1     		bne	.L508
5883:.\lib_Fat/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 9237              		.loc 1 5883 0
 9238 0032 7B68     		ldr	r3, [r7, #4]
 9239 0034 5B68     		ldr	r3, [r3, #4]
 9240 0036 1A1E     		sub	r2, r3, #0
 9241 0038 FB68     		ldr	r3, [r7, #12]
 9242 003a 9A42     		cmp	r2, r3
 9243 003c 02D1     		bne	.L508
 9244              		.loc 1 5883 0 is_stmt 0 discriminator 1
 9245 003e 7B68     		ldr	r3, [r7, #4]
 9246 0040 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 267


 9247 0042 01E0     		b	.L510
 9248              	.L508:
5884:.\lib_Fat/ff.c **** 	return EOF;
 9249              		.loc 1 5884 0 is_stmt 1
 9250 0044 0123     		mov	r3, #1
 9251 0046 5B42     		neg	r3, r3
 9252              	.L510:
5885:.\lib_Fat/ff.c **** }
 9253              		.loc 1 5885 0 discriminator 1
 9254 0048 181C     		mov	r0, r3
 9255 004a BD46     		mov	sp, r7
 9256 004c 05B0     		add	sp, sp, #20
 9257              		@ sp needed
 9258 004e 90BD     		pop	{r4, r7, pc}
 9259              		.cfi_endproc
 9260              	.LFE50:
 9261              		.size	putc_flush, .-putc_flush
 9262              		.section	.text.putc_init,"ax",%progbits
 9263              		.align	2
 9264              		.code	16
 9265              		.thumb_func
 9266              		.type	putc_init, %function
 9267              	putc_init:
 9268              	.LFB51:
5886:.\lib_Fat/ff.c **** 
5887:.\lib_Fat/ff.c **** 
5888:.\lib_Fat/ff.c **** static
5889:.\lib_Fat/ff.c **** void putc_init (		/* Initialize write buffer */
5890:.\lib_Fat/ff.c **** 	putbuff* pb,
5891:.\lib_Fat/ff.c **** 	FIL* fp
5892:.\lib_Fat/ff.c **** )
5893:.\lib_Fat/ff.c **** {
 9269              		.loc 1 5893 0
 9270              		.cfi_startproc
 9271 0000 80B5     		push	{r7, lr}
 9272              		.cfi_def_cfa_offset 8
 9273              		.cfi_offset 7, -8
 9274              		.cfi_offset 14, -4
 9275 0002 82B0     		sub	sp, sp, #8
 9276              		.cfi_def_cfa_offset 16
 9277 0004 00AF     		add	r7, sp, #0
 9278              		.cfi_def_cfa_register 7
 9279 0006 7860     		str	r0, [r7, #4]
 9280 0008 3960     		str	r1, [r7]
5894:.\lib_Fat/ff.c **** 	pb->fp = fp;
 9281              		.loc 1 5894 0
 9282 000a 7B68     		ldr	r3, [r7, #4]
 9283 000c 3A68     		ldr	r2, [r7]
 9284 000e 1A60     		str	r2, [r3]
5895:.\lib_Fat/ff.c **** 	pb->nchr = pb->idx = 0;
 9285              		.loc 1 5895 0
 9286 0010 7B68     		ldr	r3, [r7, #4]
 9287 0012 0022     		mov	r2, #0
 9288 0014 5A60     		str	r2, [r3, #4]
 9289 0016 7B68     		ldr	r3, [r7, #4]
 9290 0018 5A68     		ldr	r2, [r3, #4]
 9291 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 268


 9292 001c 9A60     		str	r2, [r3, #8]
5896:.\lib_Fat/ff.c **** }
 9293              		.loc 1 5896 0
 9294 001e BD46     		mov	sp, r7
 9295 0020 02B0     		add	sp, sp, #8
 9296              		@ sp needed
 9297 0022 80BD     		pop	{r7, pc}
 9298              		.cfi_endproc
 9299              	.LFE51:
 9300              		.size	putc_init, .-putc_init
 9301              		.section	.text.f_putc,"ax",%progbits
 9302              		.align	2
 9303              		.global	f_putc
 9304              		.code	16
 9305              		.thumb_func
 9306              		.type	f_putc, %function
 9307              	f_putc:
 9308              	.LFB52:
5897:.\lib_Fat/ff.c **** 
5898:.\lib_Fat/ff.c **** 
5899:.\lib_Fat/ff.c **** 
5900:.\lib_Fat/ff.c **** int f_putc (
5901:.\lib_Fat/ff.c **** 	TCHAR c,	/* A character to be output */
5902:.\lib_Fat/ff.c **** 	FIL* fp		/* Pointer to the file object */
5903:.\lib_Fat/ff.c **** )
5904:.\lib_Fat/ff.c **** {
 9309              		.loc 1 5904 0
 9310              		.cfi_startproc
 9311 0000 80B5     		push	{r7, lr}
 9312              		.cfi_def_cfa_offset 8
 9313              		.cfi_offset 7, -8
 9314              		.cfi_offset 14, -4
 9315 0002 96B0     		sub	sp, sp, #88
 9316              		.cfi_def_cfa_offset 96
 9317 0004 00AF     		add	r7, sp, #0
 9318              		.cfi_def_cfa_register 7
 9319 0006 021C     		mov	r2, r0
 9320 0008 3960     		str	r1, [r7]
 9321 000a FB1D     		add	r3, r7, #7
 9322 000c 1A70     		strb	r2, [r3]
5905:.\lib_Fat/ff.c **** 	putbuff pb;
5906:.\lib_Fat/ff.c **** 
5907:.\lib_Fat/ff.c **** 
5908:.\lib_Fat/ff.c **** 	putc_init(&pb, fp);
 9323              		.loc 1 5908 0
 9324 000e 0C23     		mov	r3, #12
 9325 0010 FA18     		add	r2, r7, r3
 9326 0012 3B68     		ldr	r3, [r7]
 9327 0014 101C     		mov	r0, r2
 9328 0016 191C     		mov	r1, r3
 9329 0018 FFF7FEFF 		bl	putc_init
5909:.\lib_Fat/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 9330              		.loc 1 5909 0
 9331 001c 0C23     		mov	r3, #12
 9332 001e FA18     		add	r2, r7, r3
 9333 0020 FB1D     		add	r3, r7, #7
 9334 0022 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 269


 9335 0024 101C     		mov	r0, r2
 9336 0026 191C     		mov	r1, r3
 9337 0028 FFF7FEFF 		bl	putc_bfd
5910:.\lib_Fat/ff.c **** 	return putc_flush(&pb);
 9338              		.loc 1 5910 0
 9339 002c 0C23     		mov	r3, #12
 9340 002e FB18     		add	r3, r7, r3
 9341 0030 181C     		mov	r0, r3
 9342 0032 FFF7FEFF 		bl	putc_flush
 9343 0036 031C     		mov	r3, r0
5911:.\lib_Fat/ff.c **** }
 9344              		.loc 1 5911 0
 9345 0038 181C     		mov	r0, r3
 9346 003a BD46     		mov	sp, r7
 9347 003c 16B0     		add	sp, sp, #88
 9348              		@ sp needed
 9349 003e 80BD     		pop	{r7, pc}
 9350              		.cfi_endproc
 9351              	.LFE52:
 9352              		.size	f_putc, .-f_putc
 9353              		.section	.text.f_puts,"ax",%progbits
 9354              		.align	2
 9355              		.global	f_puts
 9356              		.code	16
 9357              		.thumb_func
 9358              		.type	f_puts, %function
 9359              	f_puts:
 9360              	.LFB53:
5912:.\lib_Fat/ff.c **** 
5913:.\lib_Fat/ff.c **** 
5914:.\lib_Fat/ff.c **** 
5915:.\lib_Fat/ff.c **** 
5916:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5917:.\lib_Fat/ff.c **** /* Put a string to the file                                              */
5918:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5919:.\lib_Fat/ff.c **** 
5920:.\lib_Fat/ff.c **** int f_puts (
5921:.\lib_Fat/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
5922:.\lib_Fat/ff.c **** 	FIL* fp				/* Pointer to the file object */
5923:.\lib_Fat/ff.c **** )
5924:.\lib_Fat/ff.c **** {
 9361              		.loc 1 5924 0
 9362              		.cfi_startproc
 9363 0000 80B5     		push	{r7, lr}
 9364              		.cfi_def_cfa_offset 8
 9365              		.cfi_offset 7, -8
 9366              		.cfi_offset 14, -4
 9367 0002 96B0     		sub	sp, sp, #88
 9368              		.cfi_def_cfa_offset 96
 9369 0004 00AF     		add	r7, sp, #0
 9370              		.cfi_def_cfa_register 7
 9371 0006 7860     		str	r0, [r7, #4]
 9372 0008 3960     		str	r1, [r7]
5925:.\lib_Fat/ff.c **** 	putbuff pb;
5926:.\lib_Fat/ff.c **** 
5927:.\lib_Fat/ff.c **** 
5928:.\lib_Fat/ff.c **** 	putc_init(&pb, fp);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 270


 9373              		.loc 1 5928 0
 9374 000a 0C23     		mov	r3, #12
 9375 000c FA18     		add	r2, r7, r3
 9376 000e 3B68     		ldr	r3, [r7]
 9377 0010 101C     		mov	r0, r2
 9378 0012 191C     		mov	r1, r3
 9379 0014 FFF7FEFF 		bl	putc_init
5929:.\lib_Fat/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 9380              		.loc 1 5929 0
 9381 0018 09E0     		b	.L515
 9382              	.L516:
 9383              		.loc 1 5929 0 is_stmt 0 discriminator 2
 9384 001a 7B68     		ldr	r3, [r7, #4]
 9385 001c 5A1C     		add	r2, r3, #1
 9386 001e 7A60     		str	r2, [r7, #4]
 9387 0020 1B78     		ldrb	r3, [r3]
 9388 0022 0C22     		mov	r2, #12
 9389 0024 BA18     		add	r2, r7, r2
 9390 0026 101C     		mov	r0, r2
 9391 0028 191C     		mov	r1, r3
 9392 002a FFF7FEFF 		bl	putc_bfd
 9393              	.L515:
 9394              		.loc 1 5929 0 discriminator 1
 9395 002e 7B68     		ldr	r3, [r7, #4]
 9396 0030 1B78     		ldrb	r3, [r3]
 9397 0032 002B     		cmp	r3, #0
 9398 0034 F1D1     		bne	.L516
5930:.\lib_Fat/ff.c **** 	return putc_flush(&pb);
 9399              		.loc 1 5930 0 is_stmt 1
 9400 0036 0C23     		mov	r3, #12
 9401 0038 FB18     		add	r3, r7, r3
 9402 003a 181C     		mov	r0, r3
 9403 003c FFF7FEFF 		bl	putc_flush
 9404 0040 031C     		mov	r3, r0
5931:.\lib_Fat/ff.c **** }
 9405              		.loc 1 5931 0
 9406 0042 181C     		mov	r0, r3
 9407 0044 BD46     		mov	sp, r7
 9408 0046 16B0     		add	sp, sp, #88
 9409              		@ sp needed
 9410 0048 80BD     		pop	{r7, pc}
 9411              		.cfi_endproc
 9412              	.LFE53:
 9413              		.size	f_puts, .-f_puts
 9414              		.global	__aeabi_uidivmod
 9415 004a C046     		.section	.text.f_printf,"ax",%progbits
 9416              		.align	2
 9417              		.global	f_printf
 9418              		.code	16
 9419              		.thumb_func
 9420              		.type	f_printf, %function
 9421              	f_printf:
 9422              	.LFB54:
5932:.\lib_Fat/ff.c **** 
5933:.\lib_Fat/ff.c **** 
5934:.\lib_Fat/ff.c **** 
5935:.\lib_Fat/ff.c **** 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 271


5936:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5937:.\lib_Fat/ff.c **** /* Put a formatted string to the file                                    */
5938:.\lib_Fat/ff.c **** /*-----------------------------------------------------------------------*/
5939:.\lib_Fat/ff.c **** 
5940:.\lib_Fat/ff.c **** int f_printf (
5941:.\lib_Fat/ff.c **** 	FIL* fp,			/* Pointer to the file object */
5942:.\lib_Fat/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
5943:.\lib_Fat/ff.c **** 	...					/* Optional arguments... */
5944:.\lib_Fat/ff.c **** )
5945:.\lib_Fat/ff.c **** {
 9423              		.loc 1 5945 0
 9424              		.cfi_startproc
 9425 0000 0EB4     		push	{r1, r2, r3}
 9426              		.cfi_def_cfa_offset 12
 9427 0002 80B5     		push	{r7, lr}
 9428              		.cfi_def_cfa_offset 20
 9429              		.cfi_offset 7, -20
 9430              		.cfi_offset 14, -16
 9431 0004 A7B0     		sub	sp, sp, #156
 9432              		.cfi_def_cfa_offset 176
 9433 0006 00AF     		add	r7, sp, #0
 9434              		.cfi_def_cfa_register 7
 9435 0008 7860     		str	r0, [r7, #4]
5946:.\lib_Fat/ff.c **** 	va_list arp;
5947:.\lib_Fat/ff.c **** 	putbuff pb;
5948:.\lib_Fat/ff.c **** 	BYTE f, r;
5949:.\lib_Fat/ff.c **** 	UINT i, j, w;
5950:.\lib_Fat/ff.c **** 	DWORD v;
5951:.\lib_Fat/ff.c **** 	TCHAR c, d, str[32], *p;
5952:.\lib_Fat/ff.c **** 
5953:.\lib_Fat/ff.c **** 
5954:.\lib_Fat/ff.c **** 	putc_init(&pb, fp);
 9436              		.loc 1 5954 0
 9437 000a 2C23     		mov	r3, #44
 9438 000c FA18     		add	r2, r7, r3
 9439 000e 7B68     		ldr	r3, [r7, #4]
 9440 0010 101C     		mov	r0, r2
 9441 0012 191C     		mov	r1, r3
 9442 0014 FFF7FEFF 		bl	putc_init
5955:.\lib_Fat/ff.c **** 
5956:.\lib_Fat/ff.c **** 	va_start(arp, fmt);
 9443              		.loc 1 5956 0
 9444 0018 A823     		mov	r3, #168
 9445 001a FB18     		add	r3, r7, r3
 9446 001c BB67     		str	r3, [r7, #120]
 9447              	.L568:
5957:.\lib_Fat/ff.c **** 
5958:.\lib_Fat/ff.c **** 	for (;;) {
5959:.\lib_Fat/ff.c **** 		c = *fmt++;
 9448              		.loc 1 5959 0
 9449 001e A423     		mov	r3, #164
 9450 0020 FB18     		add	r3, r7, r3
 9451 0022 1B68     		ldr	r3, [r3]
 9452 0024 5A1C     		add	r2, r3, #1
 9453 0026 A421     		mov	r1, #164
 9454 0028 7918     		add	r1, r7, r1
 9455 002a 0A60     		str	r2, [r1]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 272


 9456 002c 8322     		mov	r2, #131
 9457 002e BA18     		add	r2, r7, r2
 9458 0030 1B78     		ldrb	r3, [r3]
 9459 0032 1370     		strb	r3, [r2]
5960:.\lib_Fat/ff.c **** 		if (c == 0) break;			/* End of string */
 9460              		.loc 1 5960 0
 9461 0034 8323     		mov	r3, #131
 9462 0036 FB18     		add	r3, r7, r3
 9463 0038 1B78     		ldrb	r3, [r3]
 9464 003a 002B     		cmp	r3, #0
 9465 003c 00D1     		bne	.L519
 9466 003e 26E2     		b	.L520
 9467              	.L519:
5961:.\lib_Fat/ff.c **** 		if (c != '%') {				/* Non escape character */
 9468              		.loc 1 5961 0
 9469 0040 8323     		mov	r3, #131
 9470 0042 FB18     		add	r3, r7, r3
 9471 0044 1B78     		ldrb	r3, [r3]
 9472 0046 252B     		cmp	r3, #37
 9473 0048 09D0     		beq	.L521
5962:.\lib_Fat/ff.c **** 			putc_bfd(&pb, c);
 9474              		.loc 1 5962 0
 9475 004a 2C23     		mov	r3, #44
 9476 004c FA18     		add	r2, r7, r3
 9477 004e 8323     		mov	r3, #131
 9478 0050 FB18     		add	r3, r7, r3
 9479 0052 1B78     		ldrb	r3, [r3]
 9480 0054 101C     		mov	r0, r2
 9481 0056 191C     		mov	r1, r3
 9482 0058 FFF7FEFF 		bl	putc_bfd
5963:.\lib_Fat/ff.c **** 			continue;
 9483              		.loc 1 5963 0
 9484 005c 16E2     		b	.L522
 9485              	.L521:
5964:.\lib_Fat/ff.c **** 		}
5965:.\lib_Fat/ff.c **** 		w = f = 0;
 9486              		.loc 1 5965 0
 9487 005e 9723     		mov	r3, #151
 9488 0060 FB18     		add	r3, r7, r3
 9489 0062 0022     		mov	r2, #0
 9490 0064 1A70     		strb	r2, [r3]
 9491 0066 0023     		mov	r3, #0
 9492 0068 8822     		mov	r2, #136
 9493 006a BA18     		add	r2, r7, r2
 9494 006c 1360     		str	r3, [r2]
5966:.\lib_Fat/ff.c **** 		c = *fmt++;
 9495              		.loc 1 5966 0
 9496 006e A423     		mov	r3, #164
 9497 0070 FB18     		add	r3, r7, r3
 9498 0072 1B68     		ldr	r3, [r3]
 9499 0074 5A1C     		add	r2, r3, #1
 9500 0076 A421     		mov	r1, #164
 9501 0078 7918     		add	r1, r7, r1
 9502 007a 0A60     		str	r2, [r1]
 9503 007c 8322     		mov	r2, #131
 9504 007e BA18     		add	r2, r7, r2
 9505 0080 1B78     		ldrb	r3, [r3]
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 273


 9506 0082 1370     		strb	r3, [r2]
5967:.\lib_Fat/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 9507              		.loc 1 5967 0
 9508 0084 8323     		mov	r3, #131
 9509 0086 FB18     		add	r3, r7, r3
 9510 0088 1B78     		ldrb	r3, [r3]
 9511 008a 302B     		cmp	r3, #48
 9512 008c 0FD1     		bne	.L523
5968:.\lib_Fat/ff.c **** 			f = 1; c = *fmt++;
 9513              		.loc 1 5968 0
 9514 008e 9723     		mov	r3, #151
 9515 0090 FB18     		add	r3, r7, r3
 9516 0092 0122     		mov	r2, #1
 9517 0094 1A70     		strb	r2, [r3]
 9518 0096 A423     		mov	r3, #164
 9519 0098 FB18     		add	r3, r7, r3
 9520 009a 1B68     		ldr	r3, [r3]
 9521 009c 5A1C     		add	r2, r3, #1
 9522 009e A421     		mov	r1, #164
 9523 00a0 7918     		add	r1, r7, r1
 9524 00a2 0A60     		str	r2, [r1]
 9525 00a4 8322     		mov	r2, #131
 9526 00a6 BA18     		add	r2, r7, r2
 9527 00a8 1B78     		ldrb	r3, [r3]
 9528 00aa 1370     		strb	r3, [r2]
 9529 00ac 13E0     		b	.L524
 9530              	.L523:
5969:.\lib_Fat/ff.c **** 		} else {
5970:.\lib_Fat/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 9531              		.loc 1 5970 0
 9532 00ae 8323     		mov	r3, #131
 9533 00b0 FB18     		add	r3, r7, r3
 9534 00b2 1B78     		ldrb	r3, [r3]
 9535 00b4 2D2B     		cmp	r3, #45
 9536 00b6 0ED1     		bne	.L524
5971:.\lib_Fat/ff.c **** 				f = 2; c = *fmt++;
 9537              		.loc 1 5971 0
 9538 00b8 9723     		mov	r3, #151
 9539 00ba FB18     		add	r3, r7, r3
 9540 00bc 0222     		mov	r2, #2
 9541 00be 1A70     		strb	r2, [r3]
 9542 00c0 A423     		mov	r3, #164
 9543 00c2 FB18     		add	r3, r7, r3
 9544 00c4 1B68     		ldr	r3, [r3]
 9545 00c6 5A1C     		add	r2, r3, #1
 9546 00c8 A421     		mov	r1, #164
 9547 00ca 7918     		add	r1, r7, r1
 9548 00cc 0A60     		str	r2, [r1]
 9549 00ce 8322     		mov	r2, #131
 9550 00d0 BA18     		add	r2, r7, r2
 9551 00d2 1B78     		ldrb	r3, [r3]
 9552 00d4 1370     		strb	r3, [r2]
 9553              	.L524:
5972:.\lib_Fat/ff.c **** 			}
5973:.\lib_Fat/ff.c **** 		}
5974:.\lib_Fat/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 9554              		.loc 1 5974 0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 274


 9555 00d6 1AE0     		b	.L525
 9556              	.L527:
5975:.\lib_Fat/ff.c **** 			w = w * 10 + c - '0';
 9557              		.loc 1 5975 0
 9558 00d8 8823     		mov	r3, #136
 9559 00da FB18     		add	r3, r7, r3
 9560 00dc 1A68     		ldr	r2, [r3]
 9561 00de 131C     		mov	r3, r2
 9562 00e0 9B00     		lsl	r3, r3, #2
 9563 00e2 9B18     		add	r3, r3, r2
 9564 00e4 5B00     		lsl	r3, r3, #1
 9565 00e6 1A1C     		mov	r2, r3
 9566 00e8 8323     		mov	r3, #131
 9567 00ea FB18     		add	r3, r7, r3
 9568 00ec 1B78     		ldrb	r3, [r3]
 9569 00ee D318     		add	r3, r2, r3
 9570 00f0 303B     		sub	r3, r3, #48
 9571 00f2 8822     		mov	r2, #136
 9572 00f4 BA18     		add	r2, r7, r2
 9573 00f6 1360     		str	r3, [r2]
5976:.\lib_Fat/ff.c **** 			c = *fmt++;
 9574              		.loc 1 5976 0
 9575 00f8 A423     		mov	r3, #164
 9576 00fa FB18     		add	r3, r7, r3
 9577 00fc 1B68     		ldr	r3, [r3]
 9578 00fe 5A1C     		add	r2, r3, #1
 9579 0100 A421     		mov	r1, #164
 9580 0102 7918     		add	r1, r7, r1
 9581 0104 0A60     		str	r2, [r1]
 9582 0106 8322     		mov	r2, #131
 9583 0108 BA18     		add	r2, r7, r2
 9584 010a 1B78     		ldrb	r3, [r3]
 9585 010c 1370     		strb	r3, [r2]
 9586              	.L525:
5974:.\lib_Fat/ff.c **** 			w = w * 10 + c - '0';
 9587              		.loc 1 5974 0
 9588 010e 8323     		mov	r3, #131
 9589 0110 FB18     		add	r3, r7, r3
 9590 0112 1B78     		ldrb	r3, [r3]
 9591 0114 2F2B     		cmp	r3, #47
 9592 0116 04D9     		bls	.L526
5974:.\lib_Fat/ff.c **** 			w = w * 10 + c - '0';
 9593              		.loc 1 5974 0 is_stmt 0 discriminator 1
 9594 0118 8323     		mov	r3, #131
 9595 011a FB18     		add	r3, r7, r3
 9596 011c 1B78     		ldrb	r3, [r3]
 9597 011e 392B     		cmp	r3, #57
 9598 0120 DAD9     		bls	.L527
 9599              	.L526:
5977:.\lib_Fat/ff.c **** 		}
5978:.\lib_Fat/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 9600              		.loc 1 5978 0 is_stmt 1
 9601 0122 8323     		mov	r3, #131
 9602 0124 FB18     		add	r3, r7, r3
 9603 0126 1B78     		ldrb	r3, [r3]
 9604 0128 6C2B     		cmp	r3, #108
 9605 012a 04D0     		beq	.L528
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 275


 9606              		.loc 1 5978 0 is_stmt 0 discriminator 1
 9607 012c 8323     		mov	r3, #131
 9608 012e FB18     		add	r3, r7, r3
 9609 0130 1B78     		ldrb	r3, [r3]
 9610 0132 4C2B     		cmp	r3, #76
 9611 0134 12D1     		bne	.L529
 9612              	.L528:
5979:.\lib_Fat/ff.c **** 			f |= 4; c = *fmt++;
 9613              		.loc 1 5979 0 is_stmt 1
 9614 0136 9723     		mov	r3, #151
 9615 0138 FB18     		add	r3, r7, r3
 9616 013a 9722     		mov	r2, #151
 9617 013c BA18     		add	r2, r7, r2
 9618 013e 1278     		ldrb	r2, [r2]
 9619 0140 0421     		mov	r1, #4
 9620 0142 0A43     		orr	r2, r1
 9621 0144 1A70     		strb	r2, [r3]
 9622 0146 A423     		mov	r3, #164
 9623 0148 FB18     		add	r3, r7, r3
 9624 014a 1B68     		ldr	r3, [r3]
 9625 014c 5A1C     		add	r2, r3, #1
 9626 014e A421     		mov	r1, #164
 9627 0150 7918     		add	r1, r7, r1
 9628 0152 0A60     		str	r2, [r1]
 9629 0154 8322     		mov	r2, #131
 9630 0156 BA18     		add	r2, r7, r2
 9631 0158 1B78     		ldrb	r3, [r3]
 9632 015a 1370     		strb	r3, [r2]
 9633              	.L529:
5980:.\lib_Fat/ff.c **** 		}
5981:.\lib_Fat/ff.c **** 		if (!c) break;
 9634              		.loc 1 5981 0
 9635 015c 8323     		mov	r3, #131
 9636 015e FB18     		add	r3, r7, r3
 9637 0160 1B78     		ldrb	r3, [r3]
 9638 0162 002B     		cmp	r3, #0
 9639 0164 00D1     		bne	.L530
 9640 0166 92E1     		b	.L520
 9641              	.L530:
5982:.\lib_Fat/ff.c **** 		d = c;
 9642              		.loc 1 5982 0
 9643 0168 8223     		mov	r3, #130
 9644 016a FB18     		add	r3, r7, r3
 9645 016c 8322     		mov	r2, #131
 9646 016e BA18     		add	r2, r7, r2
 9647 0170 1278     		ldrb	r2, [r2]
 9648 0172 1A70     		strb	r2, [r3]
5983:.\lib_Fat/ff.c **** 		if (IsLower(d)) d -= 0x20;
 9649              		.loc 1 5983 0
 9650 0174 8223     		mov	r3, #130
 9651 0176 FB18     		add	r3, r7, r3
 9652 0178 1B78     		ldrb	r3, [r3]
 9653 017a 602B     		cmp	r3, #96
 9654 017c 0BD9     		bls	.L531
 9655              		.loc 1 5983 0 is_stmt 0 discriminator 1
 9656 017e 8223     		mov	r3, #130
 9657 0180 FB18     		add	r3, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 276


 9658 0182 1B78     		ldrb	r3, [r3]
 9659 0184 7A2B     		cmp	r3, #122
 9660 0186 06D8     		bhi	.L531
 9661              		.loc 1 5983 0 discriminator 2
 9662 0188 8223     		mov	r3, #130
 9663 018a FB18     		add	r3, r7, r3
 9664 018c 8222     		mov	r2, #130
 9665 018e BA18     		add	r2, r7, r2
 9666 0190 1278     		ldrb	r2, [r2]
 9667 0192 203A     		sub	r2, r2, #32
 9668 0194 1A70     		strb	r2, [r3]
 9669              	.L531:
5984:.\lib_Fat/ff.c **** 		switch (d) {				/* Type is... */
 9670              		.loc 1 5984 0 is_stmt 1
 9671 0196 8223     		mov	r3, #130
 9672 0198 FB18     		add	r3, r7, r3
 9673 019a 1B78     		ldrb	r3, [r3]
 9674 019c 423B     		sub	r3, r3, #66
 9675 019e 162B     		cmp	r3, #22
 9676 01a0 00D9     		bls	.LCB8766
 9677 01a2 79E0     		b	.L532	@long jump
 9678              	.LCB8766:
 9679 01a4 9A00     		lsl	r2, r3, #2
 9680 01a6 C04B     		ldr	r3, .L570
 9681 01a8 D318     		add	r3, r2, r3
 9682 01aa 1B68     		ldr	r3, [r3]
 9683 01ac 9F46     		mov	pc, r3
 9684              		.section	.rodata
 9685 008f 00       		.align	2
 9686              	.L534:
 9687 0090 70020000 		.word	.L533
 9688 0094 58020000 		.word	.L535
 9689 0098 84020000 		.word	.L536
 9690 009c 98020000 		.word	.L532
 9691 00a0 98020000 		.word	.L532
 9692 00a4 98020000 		.word	.L532
 9693 00a8 98020000 		.word	.L532
 9694 00ac 98020000 		.word	.L532
 9695 00b0 98020000 		.word	.L532
 9696 00b4 98020000 		.word	.L532
 9697 00b8 98020000 		.word	.L532
 9698 00bc 98020000 		.word	.L532
 9699 00c0 98020000 		.word	.L532
 9700 00c4 7A020000 		.word	.L537
 9701 00c8 98020000 		.word	.L532
 9702 00cc 98020000 		.word	.L532
 9703 00d0 98020000 		.word	.L532
 9704 00d4 AE010000 		.word	.L538
 9705 00d8 98020000 		.word	.L532
 9706 00dc 84020000 		.word	.L536
 9707 00e0 98020000 		.word	.L532
 9708 00e4 98020000 		.word	.L532
 9709 00e8 8E020000 		.word	.L539
 9710              		.section	.text.f_printf
 9711              	.L538:
5985:.\lib_Fat/ff.c **** 		case 'S' :					/* String */
5986:.\lib_Fat/ff.c **** 			p = va_arg(arp, TCHAR*);
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 277


 9712              		.loc 1 5986 0
 9713 01ae BB6F     		ldr	r3, [r7, #120]
 9714 01b0 1A1D     		add	r2, r3, #4
 9715 01b2 BA67     		str	r2, [r7, #120]
 9716 01b4 1B68     		ldr	r3, [r3]
 9717 01b6 FB67     		str	r3, [r7, #124]
5987:.\lib_Fat/ff.c **** 			for (j = 0; p[j]; j++) ;
 9718              		.loc 1 5987 0
 9719 01b8 0023     		mov	r3, #0
 9720 01ba 8C22     		mov	r2, #140
 9721 01bc BA18     		add	r2, r7, r2
 9722 01be 1360     		str	r3, [r2]
 9723 01c0 06E0     		b	.L540
 9724              	.L541:
 9725              		.loc 1 5987 0 is_stmt 0 discriminator 3
 9726 01c2 8C23     		mov	r3, #140
 9727 01c4 FB18     		add	r3, r7, r3
 9728 01c6 1B68     		ldr	r3, [r3]
 9729 01c8 0133     		add	r3, r3, #1
 9730 01ca 8C22     		mov	r2, #140
 9731 01cc BA18     		add	r2, r7, r2
 9732 01ce 1360     		str	r3, [r2]
 9733              	.L540:
 9734              		.loc 1 5987 0 discriminator 1
 9735 01d0 FA6F     		ldr	r2, [r7, #124]
 9736 01d2 8C23     		mov	r3, #140
 9737 01d4 FB18     		add	r3, r7, r3
 9738 01d6 1B68     		ldr	r3, [r3]
 9739 01d8 D318     		add	r3, r2, r3
 9740 01da 1B78     		ldrb	r3, [r3]
 9741 01dc 002B     		cmp	r3, #0
 9742 01de F0D1     		bne	.L541
5988:.\lib_Fat/ff.c **** 			if (!(f & 2)) {
 9743              		.loc 1 5988 0 is_stmt 1
 9744 01e0 9723     		mov	r3, #151
 9745 01e2 FB18     		add	r3, r7, r3
 9746 01e4 1B78     		ldrb	r3, [r3]
 9747 01e6 0222     		mov	r2, #2
 9748 01e8 1340     		and	r3, r2
 9749 01ea 12D1     		bne	.L542
5989:.\lib_Fat/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 9750              		.loc 1 5989 0
 9751 01ec 05E0     		b	.L543
 9752              	.L544:
 9753              		.loc 1 5989 0 is_stmt 0 discriminator 2
 9754 01ee 2C23     		mov	r3, #44
 9755 01f0 FB18     		add	r3, r7, r3
 9756 01f2 181C     		mov	r0, r3
 9757 01f4 2021     		mov	r1, #32
 9758 01f6 FFF7FEFF 		bl	putc_bfd
 9759              	.L543:
 9760              		.loc 1 5989 0 discriminator 1
 9761 01fa 8C23     		mov	r3, #140
 9762 01fc FB18     		add	r3, r7, r3
 9763 01fe 1B68     		ldr	r3, [r3]
 9764 0200 5A1C     		add	r2, r3, #1
 9765 0202 8C21     		mov	r1, #140
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 278


 9766 0204 7918     		add	r1, r7, r1
 9767 0206 0A60     		str	r2, [r1]
 9768 0208 8822     		mov	r2, #136
 9769 020a BA18     		add	r2, r7, r2
 9770 020c 1268     		ldr	r2, [r2]
 9771 020e 9342     		cmp	r3, r2
 9772 0210 EDD3     		bcc	.L544
 9773              	.L542:
5990:.\lib_Fat/ff.c **** 			}
5991:.\lib_Fat/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 9774              		.loc 1 5991 0 is_stmt 1
 9775 0212 09E0     		b	.L545
 9776              	.L546:
 9777              		.loc 1 5991 0 is_stmt 0 discriminator 2
 9778 0214 FB6F     		ldr	r3, [r7, #124]
 9779 0216 5A1C     		add	r2, r3, #1
 9780 0218 FA67     		str	r2, [r7, #124]
 9781 021a 1B78     		ldrb	r3, [r3]
 9782 021c 2C22     		mov	r2, #44
 9783 021e BA18     		add	r2, r7, r2
 9784 0220 101C     		mov	r0, r2
 9785 0222 191C     		mov	r1, r3
 9786 0224 FFF7FEFF 		bl	putc_bfd
 9787              	.L545:
 9788              		.loc 1 5991 0 discriminator 1
 9789 0228 FB6F     		ldr	r3, [r7, #124]
 9790 022a 1B78     		ldrb	r3, [r3]
 9791 022c 002B     		cmp	r3, #0
 9792 022e F1D1     		bne	.L546
5992:.\lib_Fat/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 9793              		.loc 1 5992 0 is_stmt 1
 9794 0230 05E0     		b	.L547
 9795              	.L548:
 9796              		.loc 1 5992 0 is_stmt 0 discriminator 2
 9797 0232 2C23     		mov	r3, #44
 9798 0234 FB18     		add	r3, r7, r3
 9799 0236 181C     		mov	r0, r3
 9800 0238 2021     		mov	r1, #32
 9801 023a FFF7FEFF 		bl	putc_bfd
 9802              	.L547:
 9803              		.loc 1 5992 0 discriminator 1
 9804 023e 8C23     		mov	r3, #140
 9805 0240 FB18     		add	r3, r7, r3
 9806 0242 1B68     		ldr	r3, [r3]
 9807 0244 5A1C     		add	r2, r3, #1
 9808 0246 8C21     		mov	r1, #140
 9809 0248 7918     		add	r1, r7, r1
 9810 024a 0A60     		str	r2, [r1]
 9811 024c 8822     		mov	r2, #136
 9812 024e BA18     		add	r2, r7, r2
 9813 0250 1268     		ldr	r2, [r2]
 9814 0252 9342     		cmp	r3, r2
 9815 0254 EDD3     		bcc	.L548
5993:.\lib_Fat/ff.c **** 			continue;
 9816              		.loc 1 5993 0 is_stmt 1
 9817 0256 19E1     		b	.L522
 9818              	.L535:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 279


5994:.\lib_Fat/ff.c **** 		case 'C' :					/* Character */
5995:.\lib_Fat/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 9819              		.loc 1 5995 0
 9820 0258 BB6F     		ldr	r3, [r7, #120]
 9821 025a 1A1D     		add	r2, r3, #4
 9822 025c BA67     		str	r2, [r7, #120]
 9823 025e 1B68     		ldr	r3, [r3]
 9824 0260 DBB2     		uxtb	r3, r3
 9825 0262 2C22     		mov	r2, #44
 9826 0264 BA18     		add	r2, r7, r2
 9827 0266 101C     		mov	r0, r2
 9828 0268 191C     		mov	r1, r3
 9829 026a FFF7FEFF 		bl	putc_bfd
 9830 026e 0DE1     		b	.L522
 9831              	.L533:
5996:.\lib_Fat/ff.c **** 		case 'B' :					/* Binary */
5997:.\lib_Fat/ff.c **** 			r = 2; break;
 9832              		.loc 1 5997 0
 9833 0270 9623     		mov	r3, #150
 9834 0272 FB18     		add	r3, r7, r3
 9835 0274 0222     		mov	r2, #2
 9836 0276 1A70     		strb	r2, [r3]
 9837 0278 18E0     		b	.L549
 9838              	.L537:
5998:.\lib_Fat/ff.c **** 		case 'O' :					/* Octal */
5999:.\lib_Fat/ff.c **** 			r = 8; break;
 9839              		.loc 1 5999 0
 9840 027a 9623     		mov	r3, #150
 9841 027c FB18     		add	r3, r7, r3
 9842 027e 0822     		mov	r2, #8
 9843 0280 1A70     		strb	r2, [r3]
 9844 0282 13E0     		b	.L549
 9845              	.L536:
6000:.\lib_Fat/ff.c **** 		case 'D' :					/* Signed decimal */
6001:.\lib_Fat/ff.c **** 		case 'U' :					/* Unsigned decimal */
6002:.\lib_Fat/ff.c **** 			r = 10; break;
 9846              		.loc 1 6002 0
 9847 0284 9623     		mov	r3, #150
 9848 0286 FB18     		add	r3, r7, r3
 9849 0288 0A22     		mov	r2, #10
 9850 028a 1A70     		strb	r2, [r3]
 9851 028c 0EE0     		b	.L549
 9852              	.L539:
6003:.\lib_Fat/ff.c **** 		case 'X' :					/* Hexdecimal */
6004:.\lib_Fat/ff.c **** 			r = 16; break;
 9853              		.loc 1 6004 0
 9854 028e 9623     		mov	r3, #150
 9855 0290 FB18     		add	r3, r7, r3
 9856 0292 1022     		mov	r2, #16
 9857 0294 1A70     		strb	r2, [r3]
 9858 0296 09E0     		b	.L549
 9859              	.L532:
6005:.\lib_Fat/ff.c **** 		default:					/* Unknown type (pass-through) */
6006:.\lib_Fat/ff.c **** 			putc_bfd(&pb, c); continue;
 9860              		.loc 1 6006 0
 9861 0298 2C23     		mov	r3, #44
 9862 029a FA18     		add	r2, r7, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 280


 9863 029c 8323     		mov	r3, #131
 9864 029e FB18     		add	r3, r7, r3
 9865 02a0 1B78     		ldrb	r3, [r3]
 9866 02a2 101C     		mov	r0, r2
 9867 02a4 191C     		mov	r1, r3
 9868 02a6 FFF7FEFF 		bl	putc_bfd
 9869 02aa EFE0     		b	.L522
 9870              	.L549:
6007:.\lib_Fat/ff.c **** 		}
6008:.\lib_Fat/ff.c **** 
6009:.\lib_Fat/ff.c **** 		/* Get an argument and put it in numeral */
6010:.\lib_Fat/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 9871              		.loc 1 6010 0
 9872 02ac 9723     		mov	r3, #151
 9873 02ae FB18     		add	r3, r7, r3
 9874 02b0 1B78     		ldrb	r3, [r3]
 9875 02b2 0422     		mov	r2, #4
 9876 02b4 1340     		and	r3, r2
 9877 02b6 04D0     		beq	.L550
 9878              		.loc 1 6010 0 is_stmt 0 discriminator 1
 9879 02b8 BB6F     		ldr	r3, [r7, #120]
 9880 02ba 1A1D     		add	r2, r3, #4
 9881 02bc BA67     		str	r2, [r7, #120]
 9882 02be 1B68     		ldr	r3, [r3]
 9883 02c0 0DE0     		b	.L551
 9884              	.L550:
 9885              		.loc 1 6010 0 discriminator 2
 9886 02c2 8223     		mov	r3, #130
 9887 02c4 FB18     		add	r3, r7, r3
 9888 02c6 1B78     		ldrb	r3, [r3]
 9889 02c8 442B     		cmp	r3, #68
 9890 02ca 04D1     		bne	.L552
 9891              		.loc 1 6010 0 discriminator 4
 9892 02cc BB6F     		ldr	r3, [r7, #120]
 9893 02ce 1A1D     		add	r2, r3, #4
 9894 02d0 BA67     		str	r2, [r7, #120]
 9895 02d2 1B68     		ldr	r3, [r3]
 9896 02d4 03E0     		b	.L551
 9897              	.L552:
 9898              		.loc 1 6010 0 discriminator 5
 9899 02d6 BB6F     		ldr	r3, [r7, #120]
 9900 02d8 1A1D     		add	r2, r3, #4
 9901 02da BA67     		str	r2, [r7, #120]
 9902 02dc 1B68     		ldr	r3, [r3]
 9903              	.L551:
 9904              		.loc 1 6010 0 discriminator 8
 9905 02de 8422     		mov	r2, #132
 9906 02e0 BA18     		add	r2, r7, r2
 9907 02e2 1360     		str	r3, [r2]
6011:.\lib_Fat/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9908              		.loc 1 6011 0 is_stmt 1 discriminator 8
 9909 02e4 8223     		mov	r3, #130
 9910 02e6 FB18     		add	r3, r7, r3
 9911 02e8 1B78     		ldrb	r3, [r3]
 9912 02ea 442B     		cmp	r3, #68
 9913 02ec 13D1     		bne	.L554
 9914              		.loc 1 6011 0 is_stmt 0 discriminator 1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 281


 9915 02ee 8423     		mov	r3, #132
 9916 02f0 FB18     		add	r3, r7, r3
 9917 02f2 1B68     		ldr	r3, [r3]
 9918 02f4 002B     		cmp	r3, #0
 9919 02f6 0EDA     		bge	.L554
6012:.\lib_Fat/ff.c **** 			v = 0 - v;
 9920              		.loc 1 6012 0 is_stmt 1
 9921 02f8 8423     		mov	r3, #132
 9922 02fa FB18     		add	r3, r7, r3
 9923 02fc 1B68     		ldr	r3, [r3]
 9924 02fe 5B42     		neg	r3, r3
 9925 0300 8422     		mov	r2, #132
 9926 0302 BA18     		add	r2, r7, r2
 9927 0304 1360     		str	r3, [r2]
6013:.\lib_Fat/ff.c **** 			f |= 8;
 9928              		.loc 1 6013 0
 9929 0306 9723     		mov	r3, #151
 9930 0308 FB18     		add	r3, r7, r3
 9931 030a 9722     		mov	r2, #151
 9932 030c BA18     		add	r2, r7, r2
 9933 030e 1278     		ldrb	r2, [r2]
 9934 0310 0821     		mov	r1, #8
 9935 0312 0A43     		orr	r2, r1
 9936 0314 1A70     		strb	r2, [r3]
 9937              	.L554:
6014:.\lib_Fat/ff.c **** 		}
6015:.\lib_Fat/ff.c **** 		i = 0;
 9938              		.loc 1 6015 0
 9939 0316 0023     		mov	r3, #0
 9940 0318 9022     		mov	r2, #144
 9941 031a BA18     		add	r2, r7, r2
 9942 031c 1360     		str	r3, [r2]
 9943              	.L559:
6016:.\lib_Fat/ff.c **** 		do {
6017:.\lib_Fat/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 9944              		.loc 1 6017 0
 9945 031e 9623     		mov	r3, #150
 9946 0320 FB18     		add	r3, r7, r3
 9947 0322 1B78     		ldrb	r3, [r3]
 9948 0324 8422     		mov	r2, #132
 9949 0326 BA18     		add	r2, r7, r2
 9950 0328 1268     		ldr	r2, [r2]
 9951 032a 101C     		mov	r0, r2
 9952 032c 191C     		mov	r1, r3
 9953 032e FFF7FEFF 		bl	__aeabi_uidivmod
 9954 0332 0B1C     		mov	r3, r1
 9955 0334 1A1C     		mov	r2, r3
 9956 0336 8223     		mov	r3, #130
 9957 0338 FB18     		add	r3, r7, r3
 9958 033a 1A70     		strb	r2, [r3]
 9959 033c 9623     		mov	r3, #150
 9960 033e FB18     		add	r3, r7, r3
 9961 0340 1B78     		ldrb	r3, [r3]
 9962 0342 8422     		mov	r2, #132
 9963 0344 BA18     		add	r2, r7, r2
 9964 0346 1068     		ldr	r0, [r2]
 9965 0348 191C     		mov	r1, r3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 282


 9966 034a FFF7FEFF 		bl	__aeabi_uidiv
 9967 034e 031C     		mov	r3, r0
 9968 0350 8422     		mov	r2, #132
 9969 0352 BA18     		add	r2, r7, r2
 9970 0354 1360     		str	r3, [r2]
6018:.\lib_Fat/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9971              		.loc 1 6018 0
 9972 0356 8223     		mov	r3, #130
 9973 0358 FB18     		add	r3, r7, r3
 9974 035a 1B78     		ldrb	r3, [r3]
 9975 035c 092B     		cmp	r3, #9
 9976 035e 0ED9     		bls	.L555
 9977              		.loc 1 6018 0 is_stmt 0 discriminator 1
 9978 0360 8323     		mov	r3, #131
 9979 0362 FB18     		add	r3, r7, r3
 9980 0364 1B78     		ldrb	r3, [r3]
 9981 0366 782B     		cmp	r3, #120
 9982 0368 01D1     		bne	.L556
 9983              		.loc 1 6018 0 discriminator 2
 9984 036a 2723     		mov	r3, #39
 9985 036c 00E0     		b	.L557
 9986              	.L556:
 9987              		.loc 1 6018 0 discriminator 3
 9988 036e 0723     		mov	r3, #7
 9989              	.L557:
 9990              		.loc 1 6018 0 discriminator 5
 9991 0370 8222     		mov	r2, #130
 9992 0372 BA18     		add	r2, r7, r2
 9993 0374 8221     		mov	r1, #130
 9994 0376 7918     		add	r1, r7, r1
 9995 0378 0978     		ldrb	r1, [r1]
 9996 037a 5B18     		add	r3, r3, r1
 9997 037c 1370     		strb	r3, [r2]
 9998              	.L555:
6019:.\lib_Fat/ff.c **** 			str[i++] = d + '0';
 9999              		.loc 1 6019 0 is_stmt 1
 10000 037e 9023     		mov	r3, #144
 10001 0380 FB18     		add	r3, r7, r3
 10002 0382 1B68     		ldr	r3, [r3]
 10003 0384 5A1C     		add	r2, r3, #1
 10004 0386 9021     		mov	r1, #144
 10005 0388 7918     		add	r1, r7, r1
 10006 038a 0A60     		str	r2, [r1]
 10007 038c 8222     		mov	r2, #130
 10008 038e BA18     		add	r2, r7, r2
 10009 0390 1278     		ldrb	r2, [r2]
 10010 0392 3032     		add	r2, r2, #48
 10011 0394 D1B2     		uxtb	r1, r2
 10012 0396 0C22     		mov	r2, #12
 10013 0398 BA18     		add	r2, r7, r2
 10014 039a D154     		strb	r1, [r2, r3]
6020:.\lib_Fat/ff.c **** 		} while (v && i < sizeof str / sizeof str[0]);
 10015              		.loc 1 6020 0
 10016 039c 8423     		mov	r3, #132
 10017 039e FB18     		add	r3, r7, r3
 10018 03a0 1B68     		ldr	r3, [r3]
 10019 03a2 002B     		cmp	r3, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 283


 10020 03a4 04D0     		beq	.L558
 10021              		.loc 1 6020 0 is_stmt 0 discriminator 1
 10022 03a6 9023     		mov	r3, #144
 10023 03a8 FB18     		add	r3, r7, r3
 10024 03aa 1B68     		ldr	r3, [r3]
 10025 03ac 1F2B     		cmp	r3, #31
 10026 03ae B6D9     		bls	.L559
 10027              	.L558:
6021:.\lib_Fat/ff.c **** 		if (f & 8) str[i++] = '-';
 10028              		.loc 1 6021 0 is_stmt 1
 10029 03b0 9723     		mov	r3, #151
 10030 03b2 FB18     		add	r3, r7, r3
 10031 03b4 1B78     		ldrb	r3, [r3]
 10032 03b6 0822     		mov	r2, #8
 10033 03b8 1340     		and	r3, r2
 10034 03ba 0AD0     		beq	.L560
 10035              		.loc 1 6021 0 is_stmt 0 discriminator 1
 10036 03bc 9023     		mov	r3, #144
 10037 03be FB18     		add	r3, r7, r3
 10038 03c0 1B68     		ldr	r3, [r3]
 10039 03c2 5A1C     		add	r2, r3, #1
 10040 03c4 9021     		mov	r1, #144
 10041 03c6 7918     		add	r1, r7, r1
 10042 03c8 0A60     		str	r2, [r1]
 10043 03ca 0C22     		mov	r2, #12
 10044 03cc BA18     		add	r2, r7, r2
 10045 03ce 2D21     		mov	r1, #45
 10046 03d0 D154     		strb	r1, [r2, r3]
 10047              	.L560:
6022:.\lib_Fat/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 10048              		.loc 1 6022 0 is_stmt 1
 10049 03d2 9023     		mov	r3, #144
 10050 03d4 FB18     		add	r3, r7, r3
 10051 03d6 1B68     		ldr	r3, [r3]
 10052 03d8 8C22     		mov	r2, #140
 10053 03da BA18     		add	r2, r7, r2
 10054 03dc 1360     		str	r3, [r2]
 10055 03de 9723     		mov	r3, #151
 10056 03e0 FB18     		add	r3, r7, r3
 10057 03e2 1B78     		ldrb	r3, [r3]
 10058 03e4 0122     		mov	r2, #1
 10059 03e6 1340     		and	r3, r2
 10060 03e8 01D0     		beq	.L561
 10061              		.loc 1 6022 0 is_stmt 0 discriminator 1
 10062 03ea 3022     		mov	r2, #48
 10063 03ec 00E0     		b	.L562
 10064              	.L561:
 10065              		.loc 1 6022 0 discriminator 2
 10066 03ee 2022     		mov	r2, #32
 10067              	.L562:
 10068              		.loc 1 6022 0 discriminator 4
 10069 03f0 8223     		mov	r3, #130
 10070 03f2 FB18     		add	r3, r7, r3
 10071 03f4 1A70     		strb	r2, [r3]
6023:.\lib_Fat/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 10072              		.loc 1 6023 0 is_stmt 1 discriminator 4
 10073 03f6 08E0     		b	.L563
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 284


 10074              	.L565:
 10075              		.loc 1 6023 0 is_stmt 0 discriminator 3
 10076 03f8 2C23     		mov	r3, #44
 10077 03fa FA18     		add	r2, r7, r3
 10078 03fc 8223     		mov	r3, #130
 10079 03fe FB18     		add	r3, r7, r3
 10080 0400 1B78     		ldrb	r3, [r3]
 10081 0402 101C     		mov	r0, r2
 10082 0404 191C     		mov	r1, r3
 10083 0406 FFF7FEFF 		bl	putc_bfd
 10084              	.L563:
 10085              		.loc 1 6023 0 discriminator 1
 10086 040a 9723     		mov	r3, #151
 10087 040c FB18     		add	r3, r7, r3
 10088 040e 1B78     		ldrb	r3, [r3]
 10089 0410 0222     		mov	r2, #2
 10090 0412 1340     		and	r3, r2
 10091 0414 0BD1     		bne	.L564
 10092              		.loc 1 6023 0 discriminator 2
 10093 0416 8C23     		mov	r3, #140
 10094 0418 FB18     		add	r3, r7, r3
 10095 041a 1B68     		ldr	r3, [r3]
 10096 041c 5A1C     		add	r2, r3, #1
 10097 041e 8C21     		mov	r1, #140
 10098 0420 7918     		add	r1, r7, r1
 10099 0422 0A60     		str	r2, [r1]
 10100 0424 8822     		mov	r2, #136
 10101 0426 BA18     		add	r2, r7, r2
 10102 0428 1268     		ldr	r2, [r2]
 10103 042a 9342     		cmp	r3, r2
 10104 042c E4D3     		bcc	.L565
 10105              	.L564:
6024:.\lib_Fat/ff.c **** 		do putc_bfd(&pb, str[--i]); while (i);
 10106              		.loc 1 6024 0 is_stmt 1 discriminator 1
 10107 042e 9023     		mov	r3, #144
 10108 0430 FB18     		add	r3, r7, r3
 10109 0432 1B68     		ldr	r3, [r3]
 10110 0434 013B     		sub	r3, r3, #1
 10111 0436 9022     		mov	r2, #144
 10112 0438 BA18     		add	r2, r7, r2
 10113 043a 1360     		str	r3, [r2]
 10114 043c 0C23     		mov	r3, #12
 10115 043e FA18     		add	r2, r7, r3
 10116 0440 9023     		mov	r3, #144
 10117 0442 FB18     		add	r3, r7, r3
 10118 0444 1B68     		ldr	r3, [r3]
 10119 0446 D318     		add	r3, r2, r3
 10120 0448 1B78     		ldrb	r3, [r3]
 10121 044a 2C22     		mov	r2, #44
 10122 044c BA18     		add	r2, r7, r2
 10123 044e 101C     		mov	r0, r2
 10124 0450 191C     		mov	r1, r3
 10125 0452 FFF7FEFF 		bl	putc_bfd
 10126 0456 9023     		mov	r3, #144
 10127 0458 FB18     		add	r3, r7, r3
 10128 045a 1B68     		ldr	r3, [r3]
 10129 045c 002B     		cmp	r3, #0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 285


 10130 045e E6D1     		bne	.L564
6025:.\lib_Fat/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 10131              		.loc 1 6025 0
 10132 0460 08E0     		b	.L566
 10133              	.L567:
 10134              		.loc 1 6025 0 is_stmt 0 discriminator 2
 10135 0462 2C23     		mov	r3, #44
 10136 0464 FA18     		add	r2, r7, r3
 10137 0466 8223     		mov	r3, #130
 10138 0468 FB18     		add	r3, r7, r3
 10139 046a 1B78     		ldrb	r3, [r3]
 10140 046c 101C     		mov	r0, r2
 10141 046e 191C     		mov	r1, r3
 10142 0470 FFF7FEFF 		bl	putc_bfd
 10143              	.L566:
 10144              		.loc 1 6025 0 discriminator 1
 10145 0474 8C23     		mov	r3, #140
 10146 0476 FB18     		add	r3, r7, r3
 10147 0478 1B68     		ldr	r3, [r3]
 10148 047a 5A1C     		add	r2, r3, #1
 10149 047c 8C21     		mov	r1, #140
 10150 047e 7918     		add	r1, r7, r1
 10151 0480 0A60     		str	r2, [r1]
 10152 0482 8822     		mov	r2, #136
 10153 0484 BA18     		add	r2, r7, r2
 10154 0486 1268     		ldr	r2, [r2]
 10155 0488 9342     		cmp	r3, r2
 10156 048a EAD3     		bcc	.L567
 10157              	.L522:
6026:.\lib_Fat/ff.c **** 	}
 10158              		.loc 1 6026 0 is_stmt 1
 10159 048c C7E5     		b	.L568
 10160              	.L520:
6027:.\lib_Fat/ff.c **** 
6028:.\lib_Fat/ff.c **** 	va_end(arp);
6029:.\lib_Fat/ff.c **** 
6030:.\lib_Fat/ff.c **** 	return putc_flush(&pb);
 10161              		.loc 1 6030 0
 10162 048e 2C23     		mov	r3, #44
 10163 0490 FB18     		add	r3, r7, r3
 10164 0492 181C     		mov	r0, r3
 10165 0494 FFF7FEFF 		bl	putc_flush
 10166 0498 031C     		mov	r3, r0
6031:.\lib_Fat/ff.c **** }
 10167              		.loc 1 6031 0
 10168 049a 181C     		mov	r0, r3
 10169 049c BD46     		mov	sp, r7
 10170 049e 27B0     		add	sp, sp, #156
 10171              		@ sp needed
 10172 04a0 80BC     		pop	{r7}
 10173 04a2 08BC     		pop	{r3}
 10174 04a4 03B0     		add	sp, sp, #12
 10175 04a6 1847     		bx	r3
 10176              	.L571:
 10177              		.align	2
 10178              	.L570:
 10179 04a8 90000000 		.word	.L534
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 286


 10180              		.cfi_endproc
 10181              	.LFE54:
 10182              		.size	f_printf, .-f_printf
 10183              		.text
 10184              	.Letext0:
 10185              		.file 2 ".\\lib_Fat\\integer.h"
 10186              		.file 3 ".\\lib_Fat\\ff.h"
 10187              		.file 4 ".\\lib_Fat\\diskio.h"
 10188              		.file 5 "c:\\program files\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.3\\lib
 10189              		.file 6 "<built-in>"
 10190              		.section	.debug_info,"",%progbits
 10191              	.Ldebug_info0:
 10192 0000 661C0000 		.4byte	0x1c66
 10193 0004 0400     		.2byte	0x4
 10194 0006 00000000 		.4byte	.Ldebug_abbrev0
 10195 000a 04       		.byte	0x4
 10196 000b 01       		.uleb128 0x1
 10197 000c 8C050000 		.4byte	.LASF165
 10198 0010 01       		.byte	0x1
 10199 0011 EA000000 		.4byte	.LASF166
 10200 0015 4D060000 		.4byte	.LASF167
 10201 0019 00000000 		.4byte	.Ldebug_ranges0+0
 10202 001d 00000000 		.4byte	0
 10203 0021 00000000 		.4byte	.Ldebug_line0
 10204 0025 02       		.uleb128 0x2
 10205 0026 A4010000 		.4byte	.LASF2
 10206 002a 02       		.byte	0x2
 10207 002b 10       		.byte	0x10
 10208 002c 30000000 		.4byte	0x30
 10209 0030 03       		.uleb128 0x3
 10210 0031 01       		.byte	0x1
 10211 0032 08       		.byte	0x8
 10212 0033 C3030000 		.4byte	.LASF0
 10213 0037 03       		.uleb128 0x3
 10214 0038 02       		.byte	0x2
 10215 0039 05       		.byte	0x5
 10216 003a E0030000 		.4byte	.LASF1
 10217 003e 02       		.uleb128 0x2
 10218 003f 24030000 		.4byte	.LASF3
 10219 0043 02       		.byte	0x2
 10220 0044 14       		.byte	0x14
 10221 0045 49000000 		.4byte	0x49
 10222 0049 03       		.uleb128 0x3
 10223 004a 02       		.byte	0x2
 10224 004b 07       		.byte	0x7
 10225 004c 21020000 		.4byte	.LASF4
 10226 0050 04       		.uleb128 0x4
 10227 0051 04       		.byte	0x4
 10228 0052 05       		.byte	0x5
 10229 0053 696E7400 		.ascii	"int\000"
 10230 0057 02       		.uleb128 0x2
 10231 0058 EA010000 		.4byte	.LASF5
 10232 005c 02       		.byte	0x2
 10233 005d 19       		.byte	0x19
 10234 005e 62000000 		.4byte	0x62
 10235 0062 03       		.uleb128 0x3
 10236 0063 04       		.byte	0x4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 287


 10237 0064 07       		.byte	0x7
 10238 0065 D3010000 		.4byte	.LASF6
 10239 0069 03       		.uleb128 0x3
 10240 006a 04       		.byte	0x4
 10241 006b 05       		.byte	0x5
 10242 006c E1000000 		.4byte	.LASF7
 10243 0070 02       		.uleb128 0x2
 10244 0071 59010000 		.4byte	.LASF8
 10245 0075 02       		.byte	0x2
 10246 0076 1D       		.byte	0x1d
 10247 0077 7B000000 		.4byte	0x7b
 10248 007b 03       		.uleb128 0x3
 10249 007c 04       		.byte	0x4
 10250 007d 07       		.byte	0x7
 10251 007e F5010000 		.4byte	.LASF9
 10252 0082 02       		.uleb128 0x2
 10253 0083 48030000 		.4byte	.LASF10
 10254 0087 03       		.byte	0x3
 10255 0088 45       		.byte	0x45
 10256 0089 8D000000 		.4byte	0x8d
 10257 008d 03       		.uleb128 0x3
 10258 008e 01       		.byte	0x1
 10259 008f 08       		.byte	0x8
 10260 0090 82040000 		.4byte	.LASF11
 10261 0094 02       		.uleb128 0x2
 10262 0095 67010000 		.4byte	.LASF12
 10263 0099 03       		.byte	0x3
 10264 009a 55       		.byte	0x55
 10265 009b 70000000 		.4byte	0x70
 10266 009f 05       		.uleb128 0x5
 10267 00a0 3002     		.2byte	0x230
 10268 00a2 03       		.byte	0x3
 10269 00a3 5C       		.byte	0x5c
 10270 00a4 80010000 		.4byte	0x180
 10271 00a8 06       		.uleb128 0x6
 10272 00a9 29000000 		.4byte	.LASF13
 10273 00ad 03       		.byte	0x3
 10274 00ae 5D       		.byte	0x5d
 10275 00af 25000000 		.4byte	0x25
 10276 00b3 00       		.byte	0
 10277 00b4 07       		.uleb128 0x7
 10278 00b5 64727600 		.ascii	"drv\000"
 10279 00b9 03       		.byte	0x3
 10280 00ba 5E       		.byte	0x5e
 10281 00bb 25000000 		.4byte	0x25
 10282 00bf 01       		.byte	0x1
 10283 00c0 06       		.uleb128 0x6
 10284 00c1 0F010000 		.4byte	.LASF14
 10285 00c5 03       		.byte	0x3
 10286 00c6 5F       		.byte	0x5f
 10287 00c7 25000000 		.4byte	0x25
 10288 00cb 02       		.byte	0x2
 10289 00cc 06       		.uleb128 0x6
 10290 00cd 5B040000 		.4byte	.LASF15
 10291 00d1 03       		.byte	0x3
 10292 00d2 60       		.byte	0x60
 10293 00d3 25000000 		.4byte	0x25
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 288


 10294 00d7 03       		.byte	0x3
 10295 00d8 06       		.uleb128 0x6
 10296 00d9 14050000 		.4byte	.LASF16
 10297 00dd 03       		.byte	0x3
 10298 00de 61       		.byte	0x61
 10299 00df 25000000 		.4byte	0x25
 10300 00e3 04       		.byte	0x4
 10301 00e4 07       		.uleb128 0x7
 10302 00e5 696400   		.ascii	"id\000"
 10303 00e8 03       		.byte	0x3
 10304 00e9 62       		.byte	0x62
 10305 00ea 3E000000 		.4byte	0x3e
 10306 00ee 06       		.byte	0x6
 10307 00ef 06       		.uleb128 0x6
 10308 00f0 58000000 		.4byte	.LASF17
 10309 00f4 03       		.byte	0x3
 10310 00f5 63       		.byte	0x63
 10311 00f6 3E000000 		.4byte	0x3e
 10312 00fa 08       		.byte	0x8
 10313 00fb 06       		.uleb128 0x6
 10314 00fc 94010000 		.4byte	.LASF18
 10315 0100 03       		.byte	0x3
 10316 0101 64       		.byte	0x64
 10317 0102 3E000000 		.4byte	0x3e
 10318 0106 0A       		.byte	0xa
 10319 0107 06       		.uleb128 0x6
 10320 0108 6F030000 		.4byte	.LASF19
 10321 010c 03       		.byte	0x3
 10322 010d 72       		.byte	0x72
 10323 010e 70000000 		.4byte	0x70
 10324 0112 0C       		.byte	0xc
 10325 0113 06       		.uleb128 0x6
 10326 0114 9A010000 		.4byte	.LASF20
 10327 0118 03       		.byte	0x3
 10328 0119 73       		.byte	0x73
 10329 011a 70000000 		.4byte	0x70
 10330 011e 10       		.byte	0x10
 10331 011f 06       		.uleb128 0x6
 10332 0120 D8000000 		.4byte	.LASF21
 10333 0124 03       		.byte	0x3
 10334 0125 7D       		.byte	0x7d
 10335 0126 70000000 		.4byte	0x70
 10336 012a 14       		.byte	0x14
 10337 012b 06       		.uleb128 0x6
 10338 012c D2000000 		.4byte	.LASF22
 10339 0130 03       		.byte	0x3
 10340 0131 7E       		.byte	0x7e
 10341 0132 70000000 		.4byte	0x70
 10342 0136 18       		.byte	0x18
 10343 0137 06       		.uleb128 0x6
 10344 0138 CA040000 		.4byte	.LASF23
 10345 013c 03       		.byte	0x3
 10346 013d 7F       		.byte	0x7f
 10347 013e 70000000 		.4byte	0x70
 10348 0142 1C       		.byte	0x1c
 10349 0143 06       		.uleb128 0x6
 10350 0144 51010000 		.4byte	.LASF24
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 289


 10351 0148 03       		.byte	0x3
 10352 0149 80       		.byte	0x80
 10353 014a 70000000 		.4byte	0x70
 10354 014e 20       		.byte	0x20
 10355 014f 06       		.uleb128 0x6
 10356 0150 AF000000 		.4byte	.LASF25
 10357 0154 03       		.byte	0x3
 10358 0155 81       		.byte	0x81
 10359 0156 70000000 		.4byte	0x70
 10360 015a 24       		.byte	0x24
 10361 015b 06       		.uleb128 0x6
 10362 015c 34020000 		.4byte	.LASF26
 10363 0160 03       		.byte	0x3
 10364 0161 82       		.byte	0x82
 10365 0162 70000000 		.4byte	0x70
 10366 0166 28       		.byte	0x28
 10367 0167 06       		.uleb128 0x6
 10368 0168 7D020000 		.4byte	.LASF27
 10369 016c 03       		.byte	0x3
 10370 016d 83       		.byte	0x83
 10371 016e 70000000 		.4byte	0x70
 10372 0172 2C       		.byte	0x2c
 10373 0173 07       		.uleb128 0x7
 10374 0174 77696E00 		.ascii	"win\000"
 10375 0178 03       		.byte	0x3
 10376 0179 84       		.byte	0x84
 10377 017a 80010000 		.4byte	0x180
 10378 017e 30       		.byte	0x30
 10379 017f 00       		.byte	0
 10380 0180 08       		.uleb128 0x8
 10381 0181 25000000 		.4byte	0x25
 10382 0185 91010000 		.4byte	0x191
 10383 0189 09       		.uleb128 0x9
 10384 018a 91010000 		.4byte	0x191
 10385 018e FF01     		.2byte	0x1ff
 10386 0190 00       		.byte	0
 10387 0191 03       		.uleb128 0x3
 10388 0192 04       		.byte	0x4
 10389 0193 07       		.byte	0x7
 10390 0194 FD020000 		.4byte	.LASF28
 10391 0198 02       		.uleb128 0x2
 10392 0199 CC020000 		.4byte	.LASF29
 10393 019d 03       		.byte	0x3
 10394 019e 85       		.byte	0x85
 10395 019f 9F000000 		.4byte	0x9f
 10396 01a3 0A       		.uleb128 0xa
 10397 01a4 10       		.byte	0x10
 10398 01a5 03       		.byte	0x3
 10399 01a6 8B       		.byte	0x8b
 10400 01a7 F2010000 		.4byte	0x1f2
 10401 01ab 07       		.uleb128 0x7
 10402 01ac 667300   		.ascii	"fs\000"
 10403 01af 03       		.byte	0x3
 10404 01b0 8C       		.byte	0x8c
 10405 01b1 F2010000 		.4byte	0x1f2
 10406 01b5 00       		.byte	0
 10407 01b6 07       		.uleb128 0x7
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 290


 10408 01b7 696400   		.ascii	"id\000"
 10409 01ba 03       		.byte	0x3
 10410 01bb 8D       		.byte	0x8d
 10411 01bc 3E000000 		.4byte	0x3e
 10412 01c0 04       		.byte	0x4
 10413 01c1 06       		.uleb128 0x6
 10414 01c2 B9010000 		.4byte	.LASF30
 10415 01c6 03       		.byte	0x3
 10416 01c7 8E       		.byte	0x8e
 10417 01c8 25000000 		.4byte	0x25
 10418 01cc 06       		.byte	0x6
 10419 01cd 06       		.uleb128 0x6
 10420 01ce 75050000 		.4byte	.LASF31
 10421 01d2 03       		.byte	0x3
 10422 01d3 8F       		.byte	0x8f
 10423 01d4 25000000 		.4byte	0x25
 10424 01d8 07       		.byte	0x7
 10425 01d9 06       		.uleb128 0x6
 10426 01da 29030000 		.4byte	.LASF32
 10427 01de 03       		.byte	0x3
 10428 01df 90       		.byte	0x90
 10429 01e0 70000000 		.4byte	0x70
 10430 01e4 08       		.byte	0x8
 10431 01e5 06       		.uleb128 0x6
 10432 01e6 90030000 		.4byte	.LASF33
 10433 01ea 03       		.byte	0x3
 10434 01eb 91       		.byte	0x91
 10435 01ec 94000000 		.4byte	0x94
 10436 01f0 0C       		.byte	0xc
 10437 01f1 00       		.byte	0
 10438 01f2 0B       		.uleb128 0xb
 10439 01f3 04       		.byte	0x4
 10440 01f4 98010000 		.4byte	0x198
 10441 01f8 02       		.uleb128 0x2
 10442 01f9 52050000 		.4byte	.LASF34
 10443 01fd 03       		.byte	0x3
 10444 01fe 9B       		.byte	0x9b
 10445 01ff A3010000 		.4byte	0x1a3
 10446 0203 05       		.uleb128 0x5
 10447 0204 2802     		.2byte	0x228
 10448 0206 03       		.byte	0x3
 10449 0207 A1       		.byte	0xa1
 10450 0208 79020000 		.4byte	0x279
 10451 020c 07       		.uleb128 0x7
 10452 020d 6F626A00 		.ascii	"obj\000"
 10453 0211 03       		.byte	0x3
 10454 0212 A2       		.byte	0xa2
 10455 0213 F8010000 		.4byte	0x1f8
 10456 0217 00       		.byte	0
 10457 0218 06       		.uleb128 0x6
 10458 0219 FD030000 		.4byte	.LASF35
 10459 021d 03       		.byte	0x3
 10460 021e A3       		.byte	0xa3
 10461 021f 25000000 		.4byte	0x25
 10462 0223 10       		.byte	0x10
 10463 0224 07       		.uleb128 0x7
 10464 0225 65727200 		.ascii	"err\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 291


 10465 0229 03       		.byte	0x3
 10466 022a A4       		.byte	0xa4
 10467 022b 25000000 		.4byte	0x25
 10468 022f 11       		.byte	0x11
 10469 0230 06       		.uleb128 0x6
 10470 0231 E5020000 		.4byte	.LASF36
 10471 0235 03       		.byte	0x3
 10472 0236 A5       		.byte	0xa5
 10473 0237 94000000 		.4byte	0x94
 10474 023b 14       		.byte	0x14
 10475 023c 06       		.uleb128 0x6
 10476 023d 85060000 		.4byte	.LASF37
 10477 0241 03       		.byte	0x3
 10478 0242 A6       		.byte	0xa6
 10479 0243 70000000 		.4byte	0x70
 10480 0247 18       		.byte	0x18
 10481 0248 06       		.uleb128 0x6
 10482 0249 83000000 		.4byte	.LASF38
 10483 024d 03       		.byte	0x3
 10484 024e A7       		.byte	0xa7
 10485 024f 70000000 		.4byte	0x70
 10486 0253 1C       		.byte	0x1c
 10487 0254 06       		.uleb128 0x6
 10488 0255 A6000000 		.4byte	.LASF39
 10489 0259 03       		.byte	0x3
 10490 025a A9       		.byte	0xa9
 10491 025b 70000000 		.4byte	0x70
 10492 025f 20       		.byte	0x20
 10493 0260 06       		.uleb128 0x6
 10494 0261 B1010000 		.4byte	.LASF40
 10495 0265 03       		.byte	0x3
 10496 0266 AA       		.byte	0xaa
 10497 0267 79020000 		.4byte	0x279
 10498 026b 24       		.byte	0x24
 10499 026c 07       		.uleb128 0x7
 10500 026d 62756600 		.ascii	"buf\000"
 10501 0271 03       		.byte	0x3
 10502 0272 B0       		.byte	0xb0
 10503 0273 80010000 		.4byte	0x180
 10504 0277 28       		.byte	0x28
 10505 0278 00       		.byte	0
 10506 0279 0B       		.uleb128 0xb
 10507 027a 04       		.byte	0x4
 10508 027b 25000000 		.4byte	0x25
 10509 027f 0C       		.uleb128 0xc
 10510 0280 46494C00 		.ascii	"FIL\000"
 10511 0284 03       		.byte	0x3
 10512 0285 B2       		.byte	0xb2
 10513 0286 03020000 		.4byte	0x203
 10514 028a 0A       		.uleb128 0xa
 10515 028b 2C       		.byte	0x2c
 10516 028c 03       		.byte	0x3
 10517 028d B8       		.byte	0xb8
 10518 028e DA020000 		.4byte	0x2da
 10519 0292 07       		.uleb128 0x7
 10520 0293 6F626A00 		.ascii	"obj\000"
 10521 0297 03       		.byte	0x3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 292


 10522 0298 B9       		.byte	0xb9
 10523 0299 F8010000 		.4byte	0x1f8
 10524 029d 00       		.byte	0
 10525 029e 06       		.uleb128 0x6
 10526 029f 32040000 		.4byte	.LASF41
 10527 02a3 03       		.byte	0x3
 10528 02a4 BA       		.byte	0xba
 10529 02a5 70000000 		.4byte	0x70
 10530 02a9 10       		.byte	0x10
 10531 02aa 06       		.uleb128 0x6
 10532 02ab 85060000 		.4byte	.LASF37
 10533 02af 03       		.byte	0x3
 10534 02b0 BB       		.byte	0xbb
 10535 02b1 70000000 		.4byte	0x70
 10536 02b5 14       		.byte	0x14
 10537 02b6 06       		.uleb128 0x6
 10538 02b7 83000000 		.4byte	.LASF38
 10539 02bb 03       		.byte	0x3
 10540 02bc BC       		.byte	0xbc
 10541 02bd 70000000 		.4byte	0x70
 10542 02c1 18       		.byte	0x18
 10543 02c2 07       		.uleb128 0x7
 10544 02c3 64697200 		.ascii	"dir\000"
 10545 02c7 03       		.byte	0x3
 10546 02c8 BD       		.byte	0xbd
 10547 02c9 79020000 		.4byte	0x279
 10548 02cd 1C       		.byte	0x1c
 10549 02ce 07       		.uleb128 0x7
 10550 02cf 666E00   		.ascii	"fn\000"
 10551 02d2 03       		.byte	0x3
 10552 02d3 BE       		.byte	0xbe
 10553 02d4 DA020000 		.4byte	0x2da
 10554 02d8 20       		.byte	0x20
 10555 02d9 00       		.byte	0
 10556 02da 08       		.uleb128 0x8
 10557 02db 25000000 		.4byte	0x25
 10558 02df EA020000 		.4byte	0x2ea
 10559 02e3 0D       		.uleb128 0xd
 10560 02e4 91010000 		.4byte	0x191
 10561 02e8 0B       		.byte	0xb
 10562 02e9 00       		.byte	0
 10563 02ea 0C       		.uleb128 0xc
 10564 02eb 44495200 		.ascii	"DIR\000"
 10565 02ef 03       		.byte	0x3
 10566 02f0 C5       		.byte	0xc5
 10567 02f1 8A020000 		.4byte	0x28a
 10568 02f5 0A       		.uleb128 0xa
 10569 02f6 18       		.byte	0x18
 10570 02f7 03       		.byte	0x3
 10571 02f8 CB       		.byte	0xcb
 10572 02f9 3A030000 		.4byte	0x33a
 10573 02fd 06       		.uleb128 0x6
 10574 02fe D2000000 		.4byte	.LASF22
 10575 0302 03       		.byte	0x3
 10576 0303 CC       		.byte	0xcc
 10577 0304 94000000 		.4byte	0x94
 10578 0308 00       		.byte	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 293


 10579 0309 06       		.uleb128 0x6
 10580 030a DA020000 		.4byte	.LASF42
 10581 030e 03       		.byte	0x3
 10582 030f CD       		.byte	0xcd
 10583 0310 3E000000 		.4byte	0x3e
 10584 0314 04       		.byte	0x4
 10585 0315 06       		.uleb128 0x6
 10586 0316 EF010000 		.4byte	.LASF43
 10587 031a 03       		.byte	0x3
 10588 031b CE       		.byte	0xce
 10589 031c 3E000000 		.4byte	0x3e
 10590 0320 06       		.byte	0x6
 10591 0321 06       		.uleb128 0x6
 10592 0322 33050000 		.4byte	.LASF44
 10593 0326 03       		.byte	0x3
 10594 0327 CF       		.byte	0xcf
 10595 0328 25000000 		.4byte	0x25
 10596 032c 08       		.byte	0x8
 10597 032d 06       		.uleb128 0x6
 10598 032e A4020000 		.4byte	.LASF45
 10599 0332 03       		.byte	0x3
 10600 0333 D4       		.byte	0xd4
 10601 0334 3A030000 		.4byte	0x33a
 10602 0338 09       		.byte	0x9
 10603 0339 00       		.byte	0
 10604 033a 08       		.uleb128 0x8
 10605 033b 82000000 		.4byte	0x82
 10606 033f 4A030000 		.4byte	0x34a
 10607 0343 0D       		.uleb128 0xd
 10608 0344 91010000 		.4byte	0x191
 10609 0348 0C       		.byte	0xc
 10610 0349 00       		.byte	0
 10611 034a 02       		.uleb128 0x2
 10612 034b 80010000 		.4byte	.LASF46
 10613 034f 03       		.byte	0x3
 10614 0350 D6       		.byte	0xd6
 10615 0351 F5020000 		.4byte	0x2f5
 10616 0355 0E       		.uleb128 0xe
 10617 0356 01       		.byte	0x1
 10618 0357 03       		.byte	0x3
 10619 0358 DC       		.byte	0xdc
 10620 0359 D6030000 		.4byte	0x3d6
 10621 035d 0F       		.uleb128 0xf
 10622 035e 93040000 		.4byte	.LASF47
 10623 0362 00       		.sleb128 0
 10624 0363 0F       		.uleb128 0xf
 10625 0364 71020000 		.4byte	.LASF48
 10626 0368 01       		.sleb128 1
 10627 0369 0F       		.uleb128 0xf
 10628 036a 5D020000 		.4byte	.LASF49
 10629 036e 02       		.sleb128 2
 10630 036f 0F       		.uleb128 0xf
 10631 0370 40060000 		.4byte	.LASF50
 10632 0374 03       		.sleb128 3
 10633 0375 0F       		.uleb128 0xf
 10634 0376 37030000 		.4byte	.LASF51
 10635 037a 04       		.sleb128 4
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 294


 10636 037b 0F       		.uleb128 0xf
 10637 037c 2A060000 		.4byte	.LASF52
 10638 0380 05       		.sleb128 5
 10639 0381 0F       		.uleb128 0xf
 10640 0382 EF040000 		.4byte	.LASF53
 10641 0386 06       		.sleb128 6
 10642 0387 0F       		.uleb128 0xf
 10643 0388 1F040000 		.4byte	.LASF54
 10644 038c 07       		.sleb128 7
 10645 038d 0F       		.uleb128 0xf
 10646 038e 48010000 		.4byte	.LASF55
 10647 0392 08       		.sleb128 8
 10648 0393 0F       		.uleb128 0xf
 10649 0394 88000000 		.4byte	.LASF56
 10650 0398 09       		.sleb128 9
 10651 0399 0F       		.uleb128 0xf
 10652 039a B9020000 		.4byte	.LASF57
 10653 039e 0A       		.sleb128 10
 10654 039f 0F       		.uleb128 0xf
 10655 03a0 0E040000 		.4byte	.LASF58
 10656 03a4 0B       		.sleb128 11
 10657 03a5 0F       		.uleb128 0xf
 10658 03a6 57030000 		.4byte	.LASF59
 10659 03aa 0C       		.sleb128 12
 10660 03ab 0F       		.uleb128 0xf
 10661 03ac 24010000 		.4byte	.LASF60
 10662 03b0 0D       		.sleb128 13
 10663 03b1 0F       		.uleb128 0xf
 10664 03b2 37040000 		.4byte	.LASF61
 10665 03b6 0E       		.sleb128 14
 10666 03b7 0F       		.uleb128 0xf
 10667 03b8 19030000 		.4byte	.LASF62
 10668 03bc 0F       		.sleb128 15
 10669 03bd 0F       		.uleb128 0xf
 10670 03be 51040000 		.4byte	.LASF63
 10671 03c2 10       		.sleb128 16
 10672 03c3 0F       		.uleb128 0xf
 10673 03c4 35010000 		.4byte	.LASF64
 10674 03c8 11       		.sleb128 17
 10675 03c9 0F       		.uleb128 0xf
 10676 03ca 0A000000 		.4byte	.LASF65
 10677 03ce 12       		.sleb128 18
 10678 03cf 0F       		.uleb128 0xf
 10679 03d0 BD000000 		.4byte	.LASF66
 10680 03d4 13       		.sleb128 19
 10681 03d5 00       		.byte	0
 10682 03d6 02       		.uleb128 0x2
 10683 03d7 7A050000 		.4byte	.LASF67
 10684 03db 03       		.byte	0x3
 10685 03dc F1       		.byte	0xf1
 10686 03dd 55030000 		.4byte	0x355
 10687 03e1 02       		.uleb128 0x2
 10688 03e2 B6040000 		.4byte	.LASF68
 10689 03e6 04       		.byte	0x4
 10690 03e7 13       		.byte	0x13
 10691 03e8 25000000 		.4byte	0x25
 10692 03ec 0E       		.uleb128 0xe
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 295


 10693 03ed 01       		.byte	0x1
 10694 03ee 04       		.byte	0x4
 10695 03ef 16       		.byte	0x16
 10696 03f0 13040000 		.4byte	0x413
 10697 03f4 0F       		.uleb128 0xf
 10698 03f5 30030000 		.4byte	.LASF69
 10699 03f9 00       		.sleb128 0
 10700 03fa 0F       		.uleb128 0xf
 10701 03fb 82050000 		.4byte	.LASF70
 10702 03ff 01       		.sleb128 1
 10703 0400 0F       		.uleb128 0xf
 10704 0401 00000000 		.4byte	.LASF71
 10705 0405 02       		.sleb128 2
 10706 0406 0F       		.uleb128 0xf
 10707 0407 4D000000 		.4byte	.LASF72
 10708 040b 03       		.sleb128 3
 10709 040c 0F       		.uleb128 0xf
 10710 040d 04010000 		.4byte	.LASF73
 10711 0411 04       		.sleb128 4
 10712 0412 00       		.byte	0
 10713 0413 02       		.uleb128 0x2
 10714 0414 61040000 		.4byte	.LASF74
 10715 0418 05       		.byte	0x5
 10716 0419 28       		.byte	0x28
 10717 041a 1E040000 		.4byte	0x41e
 10718 041e 10       		.uleb128 0x10
 10719 041f 6F010000 		.4byte	.LASF168
 10720 0423 04       		.byte	0x4
 10721 0424 06       		.byte	0x6
 10722 0425 00       		.byte	0
 10723 0426 35040000 		.4byte	0x435
 10724 042a 11       		.uleb128 0x11
 10725 042b DA040000 		.4byte	.LASF169
 10726 042f 35040000 		.4byte	0x435
 10727 0433 00       		.byte	0
 10728 0434 00       		.byte	0
 10729 0435 12       		.uleb128 0x12
 10730 0436 04       		.byte	0x4
 10731 0437 02       		.uleb128 0x2
 10732 0438 45000000 		.4byte	.LASF75
 10733 043c 05       		.byte	0x5
 10734 043d 62       		.byte	0x62
 10735 043e 13040000 		.4byte	0x413
 10736 0442 13       		.uleb128 0x13
 10737 0443 4C       		.byte	0x4c
 10738 0444 01       		.byte	0x1
 10739 0445 B316     		.2byte	0x16b3
 10740 0447 7F040000 		.4byte	0x47f
 10741 044b 14       		.uleb128 0x14
 10742 044c 667000   		.ascii	"fp\000"
 10743 044f 01       		.byte	0x1
 10744 0450 B416     		.2byte	0x16b4
 10745 0452 7F040000 		.4byte	0x47f
 10746 0456 00       		.byte	0
 10747 0457 14       		.uleb128 0x14
 10748 0458 69647800 		.ascii	"idx\000"
 10749 045c 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 296


 10750 045d B516     		.2byte	0x16b5
 10751 045f 50000000 		.4byte	0x50
 10752 0463 04       		.byte	0x4
 10753 0464 15       		.uleb128 0x15
 10754 0465 07020000 		.4byte	.LASF76
 10755 0469 01       		.byte	0x1
 10756 046a B516     		.2byte	0x16b5
 10757 046c 50000000 		.4byte	0x50
 10758 0470 08       		.byte	0x8
 10759 0471 14       		.uleb128 0x14
 10760 0472 62756600 		.ascii	"buf\000"
 10761 0476 01       		.byte	0x1
 10762 0477 B616     		.2byte	0x16b6
 10763 0479 85040000 		.4byte	0x485
 10764 047d 0C       		.byte	0xc
 10765 047e 00       		.byte	0
 10766 047f 0B       		.uleb128 0xb
 10767 0480 04       		.byte	0x4
 10768 0481 7F020000 		.4byte	0x27f
 10769 0485 08       		.uleb128 0x8
 10770 0486 25000000 		.4byte	0x25
 10771 048a 95040000 		.4byte	0x495
 10772 048e 0D       		.uleb128 0xd
 10773 048f 91010000 		.4byte	0x191
 10774 0493 3F       		.byte	0x3f
 10775 0494 00       		.byte	0
 10776 0495 16       		.uleb128 0x16
 10777 0496 A9010000 		.4byte	.LASF77
 10778 049a 01       		.byte	0x1
 10779 049b B716     		.2byte	0x16b7
 10780 049d 42040000 		.4byte	0x442
 10781 04a1 17       		.uleb128 0x17
 10782 04a2 D2040000 		.4byte	.LASF78
 10783 04a6 01       		.byte	0x1
 10784 04a7 5B02     		.2byte	0x25b
 10785 04a9 3E000000 		.4byte	0x3e
 10786 04ad 00000000 		.4byte	.LFB0
 10787 04b1 3C000000 		.4byte	.LFE0-.LFB0
 10788 04b5 01       		.uleb128 0x1
 10789 04b6 9C       		.byte	0x9c
 10790 04b7 D9040000 		.4byte	0x4d9
 10791 04bb 18       		.uleb128 0x18
 10792 04bc 70747200 		.ascii	"ptr\000"
 10793 04c0 01       		.byte	0x1
 10794 04c1 5B02     		.2byte	0x25b
 10795 04c3 D9040000 		.4byte	0x4d9
 10796 04c7 02       		.uleb128 0x2
 10797 04c8 91       		.byte	0x91
 10798 04c9 6C       		.sleb128 -20
 10799 04ca 19       		.uleb128 0x19
 10800 04cb 727600   		.ascii	"rv\000"
 10801 04ce 01       		.byte	0x1
 10802 04cf 5D02     		.2byte	0x25d
 10803 04d1 3E000000 		.4byte	0x3e
 10804 04d5 02       		.uleb128 0x2
 10805 04d6 91       		.byte	0x91
 10806 04d7 76       		.sleb128 -10
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 297


 10807 04d8 00       		.byte	0
 10808 04d9 0B       		.uleb128 0xb
 10809 04da 04       		.byte	0x4
 10810 04db DF040000 		.4byte	0x4df
 10811 04df 1A       		.uleb128 0x1a
 10812 04e0 25000000 		.4byte	0x25
 10813 04e4 17       		.uleb128 0x17
 10814 04e5 0B050000 		.4byte	.LASF79
 10815 04e9 01       		.byte	0x1
 10816 04ea 6502     		.2byte	0x265
 10817 04ec 70000000 		.4byte	0x70
 10818 04f0 00000000 		.4byte	.LFB1
 10819 04f4 42000000 		.4byte	.LFE1-.LFB1
 10820 04f8 01       		.uleb128 0x1
 10821 04f9 9C       		.byte	0x9c
 10822 04fa 1C050000 		.4byte	0x51c
 10823 04fe 18       		.uleb128 0x18
 10824 04ff 70747200 		.ascii	"ptr\000"
 10825 0503 01       		.byte	0x1
 10826 0504 6502     		.2byte	0x265
 10827 0506 D9040000 		.4byte	0x4d9
 10828 050a 02       		.uleb128 0x2
 10829 050b 91       		.byte	0x91
 10830 050c 6C       		.sleb128 -20
 10831 050d 19       		.uleb128 0x19
 10832 050e 727600   		.ascii	"rv\000"
 10833 0511 01       		.byte	0x1
 10834 0512 6702     		.2byte	0x267
 10835 0514 70000000 		.4byte	0x70
 10836 0518 02       		.uleb128 0x2
 10837 0519 91       		.byte	0x91
 10838 051a 74       		.sleb128 -12
 10839 051b 00       		.byte	0
 10840 051c 1B       		.uleb128 0x1b
 10841 051d 4A050000 		.4byte	.LASF80
 10842 0521 01       		.byte	0x1
 10843 0522 8402     		.2byte	0x284
 10844 0524 00000000 		.4byte	.LFB2
 10845 0528 3A000000 		.4byte	.LFE2-.LFB2
 10846 052c 01       		.uleb128 0x1
 10847 052d 9C       		.byte	0x9c
 10848 052e 51050000 		.4byte	0x551
 10849 0532 18       		.uleb128 0x18
 10850 0533 70747200 		.ascii	"ptr\000"
 10851 0537 01       		.byte	0x1
 10852 0538 8402     		.2byte	0x284
 10853 053a 79020000 		.4byte	0x279
 10854 053e 02       		.uleb128 0x2
 10855 053f 91       		.byte	0x91
 10856 0540 74       		.sleb128 -12
 10857 0541 18       		.uleb128 0x18
 10858 0542 76616C00 		.ascii	"val\000"
 10859 0546 01       		.byte	0x1
 10860 0547 8402     		.2byte	0x284
 10861 0549 3E000000 		.4byte	0x3e
 10862 054d 02       		.uleb128 0x2
 10863 054e 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 298


 10864 054f 72       		.sleb128 -14
 10865 0550 00       		.byte	0
 10866 0551 1B       		.uleb128 0x1b
 10867 0552 4E030000 		.4byte	.LASF81
 10868 0556 01       		.byte	0x1
 10869 0557 8B02     		.2byte	0x28b
 10870 0559 00000000 		.4byte	.LFB3
 10871 055d 52000000 		.4byte	.LFE3-.LFB3
 10872 0561 01       		.uleb128 0x1
 10873 0562 9C       		.byte	0x9c
 10874 0563 86050000 		.4byte	0x586
 10875 0567 18       		.uleb128 0x18
 10876 0568 70747200 		.ascii	"ptr\000"
 10877 056c 01       		.byte	0x1
 10878 056d 8B02     		.2byte	0x28b
 10879 056f 79020000 		.4byte	0x279
 10880 0573 02       		.uleb128 0x2
 10881 0574 91       		.byte	0x91
 10882 0575 74       		.sleb128 -12
 10883 0576 18       		.uleb128 0x18
 10884 0577 76616C00 		.ascii	"val\000"
 10885 057b 01       		.byte	0x1
 10886 057c 8B02     		.2byte	0x28b
 10887 057e 70000000 		.4byte	0x70
 10888 0582 02       		.uleb128 0x2
 10889 0583 91       		.byte	0x91
 10890 0584 70       		.sleb128 -16
 10891 0585 00       		.byte	0
 10892 0586 1B       		.uleb128 0x1b
 10893 0587 1D050000 		.4byte	.LASF82
 10894 058b 01       		.byte	0x1
 10895 058c AB02     		.2byte	0x2ab
 10896 058e 00000000 		.4byte	.LFB4
 10897 0592 3C000000 		.4byte	.LFE4-.LFB4
 10898 0596 01       		.uleb128 0x1
 10899 0597 9C       		.byte	0x9c
 10900 0598 E4050000 		.4byte	0x5e4
 10901 059c 18       		.uleb128 0x18
 10902 059d 64737400 		.ascii	"dst\000"
 10903 05a1 01       		.byte	0x1
 10904 05a2 AB02     		.2byte	0x2ab
 10905 05a4 35040000 		.4byte	0x435
 10906 05a8 02       		.uleb128 0x2
 10907 05a9 91       		.byte	0x91
 10908 05aa 6C       		.sleb128 -20
 10909 05ab 18       		.uleb128 0x18
 10910 05ac 73726300 		.ascii	"src\000"
 10911 05b0 01       		.byte	0x1
 10912 05b1 AB02     		.2byte	0x2ab
 10913 05b3 E4050000 		.4byte	0x5e4
 10914 05b7 02       		.uleb128 0x2
 10915 05b8 91       		.byte	0x91
 10916 05b9 68       		.sleb128 -24
 10917 05ba 18       		.uleb128 0x18
 10918 05bb 636E7400 		.ascii	"cnt\000"
 10919 05bf 01       		.byte	0x1
 10920 05c0 AB02     		.2byte	0x2ab
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 299


 10921 05c2 57000000 		.4byte	0x57
 10922 05c6 02       		.uleb128 0x2
 10923 05c7 91       		.byte	0x91
 10924 05c8 64       		.sleb128 -28
 10925 05c9 19       		.uleb128 0x19
 10926 05ca 6400     		.ascii	"d\000"
 10927 05cc 01       		.byte	0x1
 10928 05cd AC02     		.2byte	0x2ac
 10929 05cf 79020000 		.4byte	0x279
 10930 05d3 02       		.uleb128 0x2
 10931 05d4 91       		.byte	0x91
 10932 05d5 74       		.sleb128 -12
 10933 05d6 19       		.uleb128 0x19
 10934 05d7 7300     		.ascii	"s\000"
 10935 05d9 01       		.byte	0x1
 10936 05da AD02     		.2byte	0x2ad
 10937 05dc D9040000 		.4byte	0x4d9
 10938 05e0 02       		.uleb128 0x2
 10939 05e1 91       		.byte	0x91
 10940 05e2 70       		.sleb128 -16
 10941 05e3 00       		.byte	0
 10942 05e4 0B       		.uleb128 0xb
 10943 05e5 04       		.byte	0x4
 10944 05e6 EA050000 		.4byte	0x5ea
 10945 05ea 1C       		.uleb128 0x1c
 10946 05eb 1B       		.uleb128 0x1b
 10947 05ec F5020000 		.4byte	.LASF83
 10948 05f0 01       		.byte	0x1
 10949 05f1 B602     		.2byte	0x2b6
 10950 05f3 00000000 		.4byte	.LFB5
 10951 05f7 2E000000 		.4byte	.LFE5-.LFB5
 10952 05fb 01       		.uleb128 0x1
 10953 05fc 9C       		.byte	0x9c
 10954 05fd 3C060000 		.4byte	0x63c
 10955 0601 18       		.uleb128 0x18
 10956 0602 64737400 		.ascii	"dst\000"
 10957 0606 01       		.byte	0x1
 10958 0607 B602     		.2byte	0x2b6
 10959 0609 35040000 		.4byte	0x435
 10960 060d 02       		.uleb128 0x2
 10961 060e 91       		.byte	0x91
 10962 060f 6C       		.sleb128 -20
 10963 0610 18       		.uleb128 0x18
 10964 0611 76616C00 		.ascii	"val\000"
 10965 0615 01       		.byte	0x1
 10966 0616 B602     		.2byte	0x2b6
 10967 0618 50000000 		.4byte	0x50
 10968 061c 02       		.uleb128 0x2
 10969 061d 91       		.byte	0x91
 10970 061e 68       		.sleb128 -24
 10971 061f 18       		.uleb128 0x18
 10972 0620 636E7400 		.ascii	"cnt\000"
 10973 0624 01       		.byte	0x1
 10974 0625 B602     		.2byte	0x2b6
 10975 0627 57000000 		.4byte	0x57
 10976 062b 02       		.uleb128 0x2
 10977 062c 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 300


 10978 062d 64       		.sleb128 -28
 10979 062e 19       		.uleb128 0x19
 10980 062f 6400     		.ascii	"d\000"
 10981 0631 01       		.byte	0x1
 10982 0632 B702     		.2byte	0x2b7
 10983 0634 79020000 		.4byte	0x279
 10984 0638 02       		.uleb128 0x2
 10985 0639 91       		.byte	0x91
 10986 063a 74       		.sleb128 -12
 10987 063b 00       		.byte	0
 10988 063c 17       		.uleb128 0x17
 10989 063d 85020000 		.4byte	.LASF84
 10990 0641 01       		.byte	0x1
 10991 0642 BE02     		.2byte	0x2be
 10992 0644 50000000 		.4byte	0x50
 10993 0648 00000000 		.4byte	.LFB6
 10994 064c 4A000000 		.4byte	.LFE6-.LFB6
 10995 0650 01       		.uleb128 0x1
 10996 0651 9C       		.byte	0x9c
 10997 0652 AB060000 		.4byte	0x6ab
 10998 0656 18       		.uleb128 0x18
 10999 0657 64737400 		.ascii	"dst\000"
 11000 065b 01       		.byte	0x1
 11001 065c BE02     		.2byte	0x2be
 11002 065e E4050000 		.4byte	0x5e4
 11003 0662 02       		.uleb128 0x2
 11004 0663 91       		.byte	0x91
 11005 0664 64       		.sleb128 -28
 11006 0665 18       		.uleb128 0x18
 11007 0666 73726300 		.ascii	"src\000"
 11008 066a 01       		.byte	0x1
 11009 066b BE02     		.2byte	0x2be
 11010 066d E4050000 		.4byte	0x5e4
 11011 0671 02       		.uleb128 0x2
 11012 0672 91       		.byte	0x91
 11013 0673 60       		.sleb128 -32
 11014 0674 18       		.uleb128 0x18
 11015 0675 636E7400 		.ascii	"cnt\000"
 11016 0679 01       		.byte	0x1
 11017 067a BE02     		.2byte	0x2be
 11018 067c 57000000 		.4byte	0x57
 11019 0680 02       		.uleb128 0x2
 11020 0681 91       		.byte	0x91
 11021 0682 5C       		.sleb128 -36
 11022 0683 19       		.uleb128 0x19
 11023 0684 6400     		.ascii	"d\000"
 11024 0686 01       		.byte	0x1
 11025 0687 BF02     		.2byte	0x2bf
 11026 0689 D9040000 		.4byte	0x4d9
 11027 068d 02       		.uleb128 0x2
 11028 068e 91       		.byte	0x91
 11029 068f 74       		.sleb128 -12
 11030 0690 19       		.uleb128 0x19
 11031 0691 7300     		.ascii	"s\000"
 11032 0693 01       		.byte	0x1
 11033 0694 BF02     		.2byte	0x2bf
 11034 0696 D9040000 		.4byte	0x4d9
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 301


 11035 069a 02       		.uleb128 0x2
 11036 069b 91       		.byte	0x91
 11037 069c 70       		.sleb128 -16
 11038 069d 19       		.uleb128 0x19
 11039 069e 7200     		.ascii	"r\000"
 11040 06a0 01       		.byte	0x1
 11041 06a1 C002     		.2byte	0x2c0
 11042 06a3 50000000 		.4byte	0x50
 11043 06a7 02       		.uleb128 0x2
 11044 06a8 91       		.byte	0x91
 11045 06a9 6C       		.sleb128 -20
 11046 06aa 00       		.byte	0
 11047 06ab 17       		.uleb128 0x17
 11048 06ac 37000000 		.4byte	.LASF85
 11049 06b0 01       		.byte	0x1
 11050 06b1 CB02     		.2byte	0x2cb
 11051 06b3 50000000 		.4byte	0x50
 11052 06b7 00000000 		.4byte	.LFB7
 11053 06bb 32000000 		.4byte	.LFE7-.LFB7
 11054 06bf 01       		.uleb128 0x1
 11055 06c0 9C       		.byte	0x9c
 11056 06c1 E4060000 		.4byte	0x6e4
 11057 06c5 18       		.uleb128 0x18
 11058 06c6 73747200 		.ascii	"str\000"
 11059 06ca 01       		.byte	0x1
 11060 06cb CB02     		.2byte	0x2cb
 11061 06cd E4060000 		.4byte	0x6e4
 11062 06d1 02       		.uleb128 0x2
 11063 06d2 91       		.byte	0x91
 11064 06d3 74       		.sleb128 -12
 11065 06d4 18       		.uleb128 0x18
 11066 06d5 63687200 		.ascii	"chr\000"
 11067 06d9 01       		.byte	0x1
 11068 06da CB02     		.2byte	0x2cb
 11069 06dc 50000000 		.4byte	0x50
 11070 06e0 02       		.uleb128 0x2
 11071 06e1 91       		.byte	0x91
 11072 06e2 70       		.sleb128 -16
 11073 06e3 00       		.byte	0
 11074 06e4 0B       		.uleb128 0xb
 11075 06e5 04       		.byte	0x4
 11076 06e6 EA060000 		.4byte	0x6ea
 11077 06ea 1A       		.uleb128 0x1a
 11078 06eb 8D000000 		.4byte	0x8d
 11079 06ef 1D       		.uleb128 0x1d
 11080 06f0 88010000 		.4byte	.LASF86
 11081 06f4 01       		.byte	0x1
 11082 06f5 6503     		.2byte	0x365
 11083 06f7 D6030000 		.4byte	0x3d6
 11084 06fb 00000000 		.4byte	.LFB8
 11085 06ff 9E000000 		.4byte	.LFE8-.LFB8
 11086 0703 01       		.uleb128 0x1
 11087 0704 9C       		.byte	0x9c
 11088 0705 44070000 		.4byte	0x744
 11089 0709 18       		.uleb128 0x18
 11090 070a 667300   		.ascii	"fs\000"
 11091 070d 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 302


 11092 070e 6603     		.2byte	0x366
 11093 0710 F2010000 		.4byte	0x1f2
 11094 0714 02       		.uleb128 0x2
 11095 0715 91       		.byte	0x91
 11096 0716 64       		.sleb128 -28
 11097 0717 1E       		.uleb128 0x1e
 11098 0718 44050000 		.4byte	.LASF87
 11099 071c 01       		.byte	0x1
 11100 071d 6903     		.2byte	0x369
 11101 071f 70000000 		.4byte	0x70
 11102 0723 02       		.uleb128 0x2
 11103 0724 91       		.byte	0x91
 11104 0725 74       		.sleb128 -12
 11105 0726 19       		.uleb128 0x19
 11106 0727 6E6600   		.ascii	"nf\000"
 11107 072a 01       		.byte	0x1
 11108 072b 6A03     		.2byte	0x36a
 11109 072d 57000000 		.4byte	0x57
 11110 0731 02       		.uleb128 0x2
 11111 0732 91       		.byte	0x91
 11112 0733 70       		.sleb128 -16
 11113 0734 19       		.uleb128 0x19
 11114 0735 72657300 		.ascii	"res\000"
 11115 0739 01       		.byte	0x1
 11116 073a 6B03     		.2byte	0x36b
 11117 073c D6030000 		.4byte	0x3d6
 11118 0740 02       		.uleb128 0x2
 11119 0741 91       		.byte	0x91
 11120 0742 6F       		.sleb128 -17
 11121 0743 00       		.byte	0
 11122 0744 1D       		.uleb128 0x1d
 11123 0745 FF040000 		.4byte	.LASF88
 11124 0749 01       		.byte	0x1
 11125 074a 8203     		.2byte	0x382
 11126 074c D6030000 		.4byte	0x3d6
 11127 0750 00000000 		.4byte	.LFB9
 11128 0754 74000000 		.4byte	.LFE9-.LFB9
 11129 0758 01       		.uleb128 0x1
 11130 0759 9C       		.byte	0x9c
 11131 075a 8B070000 		.4byte	0x78b
 11132 075e 18       		.uleb128 0x18
 11133 075f 667300   		.ascii	"fs\000"
 11134 0762 01       		.byte	0x1
 11135 0763 8303     		.2byte	0x383
 11136 0765 F2010000 		.4byte	0x1f2
 11137 0769 02       		.uleb128 0x2
 11138 076a 91       		.byte	0x91
 11139 076b 64       		.sleb128 -28
 11140 076c 1F       		.uleb128 0x1f
 11141 076d 8D020000 		.4byte	.LASF89
 11142 0771 01       		.byte	0x1
 11143 0772 8403     		.2byte	0x384
 11144 0774 70000000 		.4byte	0x70
 11145 0778 02       		.uleb128 0x2
 11146 0779 91       		.byte	0x91
 11147 077a 60       		.sleb128 -32
 11148 077b 19       		.uleb128 0x19
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 303


 11149 077c 72657300 		.ascii	"res\000"
 11150 0780 01       		.byte	0x1
 11151 0781 8703     		.2byte	0x387
 11152 0783 D6030000 		.4byte	0x3d6
 11153 0787 02       		.uleb128 0x2
 11154 0788 91       		.byte	0x91
 11155 0789 6F       		.sleb128 -17
 11156 078a 00       		.byte	0
 11157 078b 1D       		.uleb128 0x1d
 11158 078c CB010000 		.4byte	.LASF90
 11159 0790 01       		.byte	0x1
 11160 0791 A203     		.2byte	0x3a2
 11161 0793 D6030000 		.4byte	0x3d6
 11162 0797 00000000 		.4byte	.LFB10
 11163 079b 04010000 		.4byte	.LFE10-.LFB10
 11164 079f 01       		.uleb128 0x1
 11165 07a0 9C       		.byte	0x9c
 11166 07a1 C3070000 		.4byte	0x7c3
 11167 07a5 18       		.uleb128 0x18
 11168 07a6 667300   		.ascii	"fs\000"
 11169 07a9 01       		.byte	0x1
 11170 07aa A303     		.2byte	0x3a3
 11171 07ac F2010000 		.4byte	0x1f2
 11172 07b0 02       		.uleb128 0x2
 11173 07b1 91       		.byte	0x91
 11174 07b2 64       		.sleb128 -28
 11175 07b3 19       		.uleb128 0x19
 11176 07b4 72657300 		.ascii	"res\000"
 11177 07b8 01       		.byte	0x1
 11178 07b9 A603     		.2byte	0x3a6
 11179 07bb D6030000 		.4byte	0x3d6
 11180 07bf 02       		.uleb128 0x2
 11181 07c0 91       		.byte	0x91
 11182 07c1 6F       		.sleb128 -17
 11183 07c2 00       		.byte	0
 11184 07c3 17       		.uleb128 0x17
 11185 07c4 EA020000 		.4byte	.LASF91
 11186 07c8 01       		.byte	0x1
 11187 07c9 C903     		.2byte	0x3c9
 11188 07cb 70000000 		.4byte	0x70
 11189 07cf 00000000 		.4byte	.LFB11
 11190 07d3 38000000 		.4byte	.LFE11-.LFB11
 11191 07d7 01       		.uleb128 0x1
 11192 07d8 9C       		.byte	0x9c
 11193 07d9 FB070000 		.4byte	0x7fb
 11194 07dd 18       		.uleb128 0x18
 11195 07de 667300   		.ascii	"fs\000"
 11196 07e1 01       		.byte	0x1
 11197 07e2 CA03     		.2byte	0x3ca
 11198 07e4 F2010000 		.4byte	0x1f2
 11199 07e8 02       		.uleb128 0x2
 11200 07e9 91       		.byte	0x91
 11201 07ea 74       		.sleb128 -12
 11202 07eb 1F       		.uleb128 0x1f
 11203 07ec 51020000 		.4byte	.LASF92
 11204 07f0 01       		.byte	0x1
 11205 07f1 CB03     		.2byte	0x3cb
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 304


 11206 07f3 70000000 		.4byte	0x70
 11207 07f7 02       		.uleb128 0x2
 11208 07f8 91       		.byte	0x91
 11209 07f9 70       		.sleb128 -16
 11210 07fa 00       		.byte	0
 11211 07fb 1D       		.uleb128 0x1d
 11212 07fc A6030000 		.4byte	.LASF93
 11213 0800 01       		.byte	0x1
 11214 0801 DB03     		.2byte	0x3db
 11215 0803 70000000 		.4byte	0x70
 11216 0807 00000000 		.4byte	.LFB12
 11217 080b 46010000 		.4byte	.LFE12-.LFB12
 11218 080f 01       		.uleb128 0x1
 11219 0810 9C       		.byte	0x9c
 11220 0811 6D080000 		.4byte	0x86d
 11221 0815 18       		.uleb128 0x18
 11222 0816 6F626A00 		.ascii	"obj\000"
 11223 081a 01       		.byte	0x1
 11224 081b DC03     		.2byte	0x3dc
 11225 081d 6D080000 		.4byte	0x86d
 11226 0821 02       		.uleb128 0x2
 11227 0822 91       		.byte	0x91
 11228 0823 64       		.sleb128 -28
 11229 0824 1F       		.uleb128 0x1f
 11230 0825 51020000 		.4byte	.LASF92
 11231 0829 01       		.byte	0x1
 11232 082a DD03     		.2byte	0x3dd
 11233 082c 70000000 		.4byte	0x70
 11234 0830 02       		.uleb128 0x2
 11235 0831 91       		.byte	0x91
 11236 0832 60       		.sleb128 -32
 11237 0833 19       		.uleb128 0x19
 11238 0834 776300   		.ascii	"wc\000"
 11239 0837 01       		.byte	0x1
 11240 0838 E003     		.2byte	0x3e0
 11241 083a 57000000 		.4byte	0x57
 11242 083e 02       		.uleb128 0x2
 11243 083f 91       		.byte	0x91
 11244 0840 68       		.sleb128 -24
 11245 0841 19       		.uleb128 0x19
 11246 0842 626300   		.ascii	"bc\000"
 11247 0845 01       		.byte	0x1
 11248 0846 E003     		.2byte	0x3e0
 11249 0848 57000000 		.4byte	0x57
 11250 084c 02       		.uleb128 0x2
 11251 084d 91       		.byte	0x91
 11252 084e 6C       		.sleb128 -20
 11253 084f 19       		.uleb128 0x19
 11254 0850 76616C00 		.ascii	"val\000"
 11255 0854 01       		.byte	0x1
 11256 0855 E103     		.2byte	0x3e1
 11257 0857 70000000 		.4byte	0x70
 11258 085b 02       		.uleb128 0x2
 11259 085c 91       		.byte	0x91
 11260 085d 74       		.sleb128 -12
 11261 085e 19       		.uleb128 0x19
 11262 085f 667300   		.ascii	"fs\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 305


 11263 0862 01       		.byte	0x1
 11264 0863 E203     		.2byte	0x3e2
 11265 0865 F2010000 		.4byte	0x1f2
 11266 0869 02       		.uleb128 0x2
 11267 086a 91       		.byte	0x91
 11268 086b 70       		.sleb128 -16
 11269 086c 00       		.byte	0
 11270 086d 0B       		.uleb128 0xb
 11271 086e 04       		.byte	0x4
 11272 086f F8010000 		.4byte	0x1f8
 11273 0873 1D       		.uleb128 0x1d
 11274 0874 21000000 		.4byte	.LASF94
 11275 0878 01       		.byte	0x1
 11276 0879 2704     		.2byte	0x427
 11277 087b D6030000 		.4byte	0x3d6
 11278 087f 00000000 		.4byte	.LFB13
 11279 0883 FA010000 		.4byte	.LFE13-.LFB13
 11280 0887 01       		.uleb128 0x1
 11281 0888 9C       		.byte	0x9c
 11282 0889 E4080000 		.4byte	0x8e4
 11283 088d 18       		.uleb128 0x18
 11284 088e 667300   		.ascii	"fs\000"
 11285 0891 01       		.byte	0x1
 11286 0892 2804     		.2byte	0x428
 11287 0894 F2010000 		.4byte	0x1f2
 11288 0898 02       		.uleb128 0x2
 11289 0899 91       		.byte	0x91
 11290 089a 5C       		.sleb128 -36
 11291 089b 1F       		.uleb128 0x1f
 11292 089c 51020000 		.4byte	.LASF92
 11293 08a0 01       		.byte	0x1
 11294 08a1 2904     		.2byte	0x429
 11295 08a3 70000000 		.4byte	0x70
 11296 08a7 02       		.uleb128 0x2
 11297 08a8 91       		.byte	0x91
 11298 08a9 58       		.sleb128 -40
 11299 08aa 18       		.uleb128 0x18
 11300 08ab 76616C00 		.ascii	"val\000"
 11301 08af 01       		.byte	0x1
 11302 08b0 2A04     		.2byte	0x42a
 11303 08b2 70000000 		.4byte	0x70
 11304 08b6 02       		.uleb128 0x2
 11305 08b7 91       		.byte	0x91
 11306 08b8 54       		.sleb128 -44
 11307 08b9 19       		.uleb128 0x19
 11308 08ba 626300   		.ascii	"bc\000"
 11309 08bd 01       		.byte	0x1
 11310 08be 2D04     		.2byte	0x42d
 11311 08c0 57000000 		.4byte	0x57
 11312 08c4 02       		.uleb128 0x2
 11313 08c5 91       		.byte	0x91
 11314 08c6 68       		.sleb128 -24
 11315 08c7 19       		.uleb128 0x19
 11316 08c8 7000     		.ascii	"p\000"
 11317 08ca 01       		.byte	0x1
 11318 08cb 2E04     		.2byte	0x42e
 11319 08cd 79020000 		.4byte	0x279
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 306


 11320 08d1 02       		.uleb128 0x2
 11321 08d2 91       		.byte	0x91
 11322 08d3 64       		.sleb128 -28
 11323 08d4 19       		.uleb128 0x19
 11324 08d5 72657300 		.ascii	"res\000"
 11325 08d9 01       		.byte	0x1
 11326 08da 2F04     		.2byte	0x42f
 11327 08dc D6030000 		.4byte	0x3d6
 11328 08e0 02       		.uleb128 0x2
 11329 08e1 91       		.byte	0x91
 11330 08e2 6F       		.sleb128 -17
 11331 08e3 00       		.byte	0
 11332 08e4 1D       		.uleb128 0x1d
 11333 08e5 A9040000 		.4byte	.LASF95
 11334 08e9 01       		.byte	0x1
 11335 08ea D004     		.2byte	0x4d0
 11336 08ec D6030000 		.4byte	0x3d6
 11337 08f0 00000000 		.4byte	.LFB14
 11338 08f4 EC000000 		.4byte	.LFE14-.LFB14
 11339 08f8 01       		.uleb128 0x1
 11340 08f9 9C       		.byte	0x9c
 11341 08fa 58090000 		.4byte	0x958
 11342 08fe 18       		.uleb128 0x18
 11343 08ff 6F626A00 		.ascii	"obj\000"
 11344 0903 01       		.byte	0x1
 11345 0904 D104     		.2byte	0x4d1
 11346 0906 6D080000 		.4byte	0x86d
 11347 090a 02       		.uleb128 0x2
 11348 090b 91       		.byte	0x91
 11349 090c 5C       		.sleb128 -36
 11350 090d 1F       		.uleb128 0x1f
 11351 090e 51020000 		.4byte	.LASF92
 11352 0912 01       		.byte	0x1
 11353 0913 D204     		.2byte	0x4d2
 11354 0915 70000000 		.4byte	0x70
 11355 0919 02       		.uleb128 0x2
 11356 091a 91       		.byte	0x91
 11357 091b 58       		.sleb128 -40
 11358 091c 1F       		.uleb128 0x1f
 11359 091d 99040000 		.4byte	.LASF96
 11360 0921 01       		.byte	0x1
 11361 0922 D304     		.2byte	0x4d3
 11362 0924 70000000 		.4byte	0x70
 11363 0928 02       		.uleb128 0x2
 11364 0929 91       		.byte	0x91
 11365 092a 54       		.sleb128 -44
 11366 092b 19       		.uleb128 0x19
 11367 092c 72657300 		.ascii	"res\000"
 11368 0930 01       		.byte	0x1
 11369 0931 D604     		.2byte	0x4d6
 11370 0933 D6030000 		.4byte	0x3d6
 11371 0937 02       		.uleb128 0x2
 11372 0938 91       		.byte	0x91
 11373 0939 6F       		.sleb128 -17
 11374 093a 19       		.uleb128 0x19
 11375 093b 6E787400 		.ascii	"nxt\000"
 11376 093f 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 307


 11377 0940 D704     		.2byte	0x4d7
 11378 0942 70000000 		.4byte	0x70
 11379 0946 02       		.uleb128 0x2
 11380 0947 91       		.byte	0x91
 11381 0948 64       		.sleb128 -28
 11382 0949 19       		.uleb128 0x19
 11383 094a 667300   		.ascii	"fs\000"
 11384 094d 01       		.byte	0x1
 11385 094e D804     		.2byte	0x4d8
 11386 0950 F2010000 		.4byte	0x1f2
 11387 0954 02       		.uleb128 0x2
 11388 0955 91       		.byte	0x91
 11389 0956 68       		.sleb128 -24
 11390 0957 00       		.byte	0
 11391 0958 1D       		.uleb128 0x1d
 11392 0959 AE030000 		.4byte	.LASF97
 11393 095d 01       		.byte	0x1
 11394 095e 2005     		.2byte	0x520
 11395 0960 70000000 		.4byte	0x70
 11396 0964 00000000 		.4byte	.LFB15
 11397 0968 5C010000 		.4byte	.LFE15-.LFB15
 11398 096c 01       		.uleb128 0x1
 11399 096d 9C       		.byte	0x9c
 11400 096e DA090000 		.4byte	0x9da
 11401 0972 18       		.uleb128 0x18
 11402 0973 6F626A00 		.ascii	"obj\000"
 11403 0977 01       		.byte	0x1
 11404 0978 2105     		.2byte	0x521
 11405 097a 6D080000 		.4byte	0x86d
 11406 097e 02       		.uleb128 0x2
 11407 097f 91       		.byte	0x91
 11408 0980 54       		.sleb128 -44
 11409 0981 1F       		.uleb128 0x1f
 11410 0982 51020000 		.4byte	.LASF92
 11411 0986 01       		.byte	0x1
 11412 0987 2205     		.2byte	0x522
 11413 0989 70000000 		.4byte	0x70
 11414 098d 02       		.uleb128 0x2
 11415 098e 91       		.byte	0x91
 11416 098f 50       		.sleb128 -48
 11417 0990 19       		.uleb128 0x19
 11418 0991 637300   		.ascii	"cs\000"
 11419 0994 01       		.byte	0x1
 11420 0995 2505     		.2byte	0x525
 11421 0997 70000000 		.4byte	0x70
 11422 099b 02       		.uleb128 0x2
 11423 099c 91       		.byte	0x91
 11424 099d 5C       		.sleb128 -36
 11425 099e 19       		.uleb128 0x19
 11426 099f 6E636C00 		.ascii	"ncl\000"
 11427 09a3 01       		.byte	0x1
 11428 09a4 2505     		.2byte	0x525
 11429 09a6 70000000 		.4byte	0x70
 11430 09aa 02       		.uleb128 0x2
 11431 09ab 91       		.byte	0x91
 11432 09ac 6C       		.sleb128 -20
 11433 09ad 19       		.uleb128 0x19
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 308


 11434 09ae 73636C00 		.ascii	"scl\000"
 11435 09b2 01       		.byte	0x1
 11436 09b3 2505     		.2byte	0x525
 11437 09b5 70000000 		.4byte	0x70
 11438 09b9 02       		.uleb128 0x2
 11439 09ba 91       		.byte	0x91
 11440 09bb 68       		.sleb128 -24
 11441 09bc 19       		.uleb128 0x19
 11442 09bd 72657300 		.ascii	"res\000"
 11443 09c1 01       		.byte	0x1
 11444 09c2 2605     		.2byte	0x526
 11445 09c4 D6030000 		.4byte	0x3d6
 11446 09c8 02       		.uleb128 0x2
 11447 09c9 91       		.byte	0x91
 11448 09ca 67       		.sleb128 -25
 11449 09cb 19       		.uleb128 0x19
 11450 09cc 667300   		.ascii	"fs\000"
 11451 09cf 01       		.byte	0x1
 11452 09d0 2705     		.2byte	0x527
 11453 09d2 F2010000 		.4byte	0x1f2
 11454 09d6 02       		.uleb128 0x2
 11455 09d7 91       		.byte	0x91
 11456 09d8 60       		.sleb128 -32
 11457 09d9 00       		.byte	0
 11458 09da 1D       		.uleb128 0x1d
 11459 09db 78060000 		.4byte	.LASF98
 11460 09df 01       		.byte	0x1
 11461 09e0 9305     		.2byte	0x593
 11462 09e2 D6030000 		.4byte	0x3d6
 11463 09e6 00000000 		.4byte	.LFB16
 11464 09ea FC000000 		.4byte	.LFE16-.LFB16
 11465 09ee 01       		.uleb128 0x1
 11466 09ef 9C       		.byte	0x9c
 11467 09f0 3E0A0000 		.4byte	0xa3e
 11468 09f4 18       		.uleb128 0x18
 11469 09f5 647000   		.ascii	"dp\000"
 11470 09f8 01       		.byte	0x1
 11471 09f9 9405     		.2byte	0x594
 11472 09fb 3E0A0000 		.4byte	0xa3e
 11473 09ff 02       		.uleb128 0x2
 11474 0a00 91       		.byte	0x91
 11475 0a01 64       		.sleb128 -28
 11476 0a02 18       		.uleb128 0x18
 11477 0a03 6F667300 		.ascii	"ofs\000"
 11478 0a07 01       		.byte	0x1
 11479 0a08 9505     		.2byte	0x595
 11480 0a0a 70000000 		.4byte	0x70
 11481 0a0e 02       		.uleb128 0x2
 11482 0a0f 91       		.byte	0x91
 11483 0a10 60       		.sleb128 -32
 11484 0a11 19       		.uleb128 0x19
 11485 0a12 63737A00 		.ascii	"csz\000"
 11486 0a16 01       		.byte	0x1
 11487 0a17 9805     		.2byte	0x598
 11488 0a19 70000000 		.4byte	0x70
 11489 0a1d 02       		.uleb128 0x2
 11490 0a1e 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 309


 11491 0a1f 6C       		.sleb128 -20
 11492 0a20 1E       		.uleb128 0x1e
 11493 0a21 51020000 		.4byte	.LASF92
 11494 0a25 01       		.byte	0x1
 11495 0a26 9805     		.2byte	0x598
 11496 0a28 70000000 		.4byte	0x70
 11497 0a2c 02       		.uleb128 0x2
 11498 0a2d 91       		.byte	0x91
 11499 0a2e 74       		.sleb128 -12
 11500 0a2f 19       		.uleb128 0x19
 11501 0a30 667300   		.ascii	"fs\000"
 11502 0a33 01       		.byte	0x1
 11503 0a34 9905     		.2byte	0x599
 11504 0a36 F2010000 		.4byte	0x1f2
 11505 0a3a 02       		.uleb128 0x2
 11506 0a3b 91       		.byte	0x91
 11507 0a3c 70       		.sleb128 -16
 11508 0a3d 00       		.byte	0
 11509 0a3e 0B       		.uleb128 0xb
 11510 0a3f 04       		.byte	0x4
 11511 0a40 EA020000 		.4byte	0x2ea
 11512 0a44 1D       		.uleb128 0x1d
 11513 0a45 9B020000 		.4byte	.LASF99
 11514 0a49 01       		.byte	0x1
 11515 0a4a C405     		.2byte	0x5c4
 11516 0a4c D6030000 		.4byte	0x3d6
 11517 0a50 00000000 		.4byte	.LFB17
 11518 0a54 98010000 		.4byte	.LFE17-.LFB17
 11519 0a58 01       		.uleb128 0x1
 11520 0a59 9C       		.byte	0x9c
 11521 0a5a B50A0000 		.4byte	0xab5
 11522 0a5e 18       		.uleb128 0x18
 11523 0a5f 647000   		.ascii	"dp\000"
 11524 0a62 01       		.byte	0x1
 11525 0a63 C505     		.2byte	0x5c5
 11526 0a65 3E0A0000 		.4byte	0xa3e
 11527 0a69 02       		.uleb128 0x2
 11528 0a6a 91       		.byte	0x91
 11529 0a6b 64       		.sleb128 -28
 11530 0a6c 1F       		.uleb128 0x1f
 11531 0a6d BE010000 		.4byte	.LASF100
 11532 0a71 01       		.byte	0x1
 11533 0a72 C605     		.2byte	0x5c6
 11534 0a74 50000000 		.4byte	0x50
 11535 0a78 02       		.uleb128 0x2
 11536 0a79 91       		.byte	0x91
 11537 0a7a 60       		.sleb128 -32
 11538 0a7b 19       		.uleb128 0x19
 11539 0a7c 6F667300 		.ascii	"ofs\000"
 11540 0a80 01       		.byte	0x1
 11541 0a81 C905     		.2byte	0x5c9
 11542 0a83 70000000 		.4byte	0x70
 11543 0a87 02       		.uleb128 0x2
 11544 0a88 91       		.byte	0x91
 11545 0a89 68       		.sleb128 -24
 11546 0a8a 1E       		.uleb128 0x1e
 11547 0a8b 51020000 		.4byte	.LASF92
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 310


 11548 0a8f 01       		.byte	0x1
 11549 0a90 C905     		.2byte	0x5c9
 11550 0a92 70000000 		.4byte	0x70
 11551 0a96 02       		.uleb128 0x2
 11552 0a97 91       		.byte	0x91
 11553 0a98 74       		.sleb128 -12
 11554 0a99 19       		.uleb128 0x19
 11555 0a9a 667300   		.ascii	"fs\000"
 11556 0a9d 01       		.byte	0x1
 11557 0a9e CA05     		.2byte	0x5ca
 11558 0aa0 F2010000 		.4byte	0x1f2
 11559 0aa4 02       		.uleb128 0x2
 11560 0aa5 91       		.byte	0x91
 11561 0aa6 6C       		.sleb128 -20
 11562 0aa7 19       		.uleb128 0x19
 11563 0aa8 6E00     		.ascii	"n\000"
 11564 0aaa 01       		.byte	0x1
 11565 0aab CC05     		.2byte	0x5cc
 11566 0aad 57000000 		.4byte	0x57
 11567 0ab1 02       		.uleb128 0x2
 11568 0ab2 91       		.byte	0x91
 11569 0ab3 70       		.sleb128 -16
 11570 0ab4 00       		.byte	0
 11571 0ab5 1D       		.uleb128 0x1d
 11572 0ab6 9F040000 		.4byte	.LASF101
 11573 0aba 01       		.byte	0x1
 11574 0abb 0A06     		.2byte	0x60a
 11575 0abd D6030000 		.4byte	0x3d6
 11576 0ac1 00000000 		.4byte	.LFB18
 11577 0ac5 B8000000 		.4byte	.LFE18-.LFB18
 11578 0ac9 01       		.uleb128 0x1
 11579 0aca 9C       		.byte	0x9c
 11580 0acb 170B0000 		.4byte	0xb17
 11581 0acf 18       		.uleb128 0x18
 11582 0ad0 647000   		.ascii	"dp\000"
 11583 0ad3 01       		.byte	0x1
 11584 0ad4 0B06     		.2byte	0x60b
 11585 0ad6 3E0A0000 		.4byte	0xa3e
 11586 0ada 02       		.uleb128 0x2
 11587 0adb 91       		.byte	0x91
 11588 0adc 5C       		.sleb128 -36
 11589 0add 1F       		.uleb128 0x1f
 11590 0ade C5040000 		.4byte	.LASF102
 11591 0ae2 01       		.byte	0x1
 11592 0ae3 0C06     		.2byte	0x60c
 11593 0ae5 57000000 		.4byte	0x57
 11594 0ae9 02       		.uleb128 0x2
 11595 0aea 91       		.byte	0x91
 11596 0aeb 58       		.sleb128 -40
 11597 0aec 19       		.uleb128 0x19
 11598 0aed 72657300 		.ascii	"res\000"
 11599 0af1 01       		.byte	0x1
 11600 0af2 0F06     		.2byte	0x60f
 11601 0af4 D6030000 		.4byte	0x3d6
 11602 0af8 02       		.uleb128 0x2
 11603 0af9 91       		.byte	0x91
 11604 0afa 6F       		.sleb128 -17
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 311


 11605 0afb 19       		.uleb128 0x19
 11606 0afc 6E00     		.ascii	"n\000"
 11607 0afe 01       		.byte	0x1
 11608 0aff 1006     		.2byte	0x610
 11609 0b01 57000000 		.4byte	0x57
 11610 0b05 02       		.uleb128 0x2
 11611 0b06 91       		.byte	0x91
 11612 0b07 68       		.sleb128 -24
 11613 0b08 19       		.uleb128 0x19
 11614 0b09 667300   		.ascii	"fs\000"
 11615 0b0c 01       		.byte	0x1
 11616 0b0d 1106     		.2byte	0x611
 11617 0b0f F2010000 		.4byte	0x1f2
 11618 0b13 02       		.uleb128 0x2
 11619 0b14 91       		.byte	0x91
 11620 0b15 64       		.sleb128 -28
 11621 0b16 00       		.byte	0
 11622 0b17 1D       		.uleb128 0x1d
 11623 0b18 79040000 		.4byte	.LASF103
 11624 0b1c 01       		.byte	0x1
 11625 0b1d 3506     		.2byte	0x635
 11626 0b1f 70000000 		.4byte	0x70
 11627 0b23 00000000 		.4byte	.LFB19
 11628 0b27 3E000000 		.4byte	.LFE19-.LFB19
 11629 0b2b 01       		.uleb128 0x1
 11630 0b2c 9C       		.byte	0x9c
 11631 0b2d 5D0B0000 		.4byte	0xb5d
 11632 0b31 18       		.uleb128 0x18
 11633 0b32 667300   		.ascii	"fs\000"
 11634 0b35 01       		.byte	0x1
 11635 0b36 3606     		.2byte	0x636
 11636 0b38 F2010000 		.4byte	0x1f2
 11637 0b3c 02       		.uleb128 0x2
 11638 0b3d 91       		.byte	0x91
 11639 0b3e 6C       		.sleb128 -20
 11640 0b3f 18       		.uleb128 0x18
 11641 0b40 64697200 		.ascii	"dir\000"
 11642 0b44 01       		.byte	0x1
 11643 0b45 3706     		.2byte	0x637
 11644 0b47 D9040000 		.4byte	0x4d9
 11645 0b4b 02       		.uleb128 0x2
 11646 0b4c 91       		.byte	0x91
 11647 0b4d 68       		.sleb128 -24
 11648 0b4e 19       		.uleb128 0x19
 11649 0b4f 636C00   		.ascii	"cl\000"
 11650 0b52 01       		.byte	0x1
 11651 0b53 3A06     		.2byte	0x63a
 11652 0b55 70000000 		.4byte	0x70
 11653 0b59 02       		.uleb128 0x2
 11654 0b5a 91       		.byte	0x91
 11655 0b5b 74       		.sleb128 -12
 11656 0b5c 00       		.byte	0
 11657 0b5d 20       		.uleb128 0x20
 11658 0b5e 1B010000 		.4byte	.LASF104
 11659 0b62 01       		.byte	0x1
 11660 0b63 4706     		.2byte	0x647
 11661 0b65 00000000 		.4byte	.LFB20
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 312


 11662 0b69 40000000 		.4byte	.LFE20-.LFB20
 11663 0b6d 01       		.uleb128 0x1
 11664 0b6e 9C       		.byte	0x9c
 11665 0b6f 9F0B0000 		.4byte	0xb9f
 11666 0b73 18       		.uleb128 0x18
 11667 0b74 667300   		.ascii	"fs\000"
 11668 0b77 01       		.byte	0x1
 11669 0b78 4806     		.2byte	0x648
 11670 0b7a F2010000 		.4byte	0x1f2
 11671 0b7e 02       		.uleb128 0x2
 11672 0b7f 91       		.byte	0x91
 11673 0b80 74       		.sleb128 -12
 11674 0b81 18       		.uleb128 0x18
 11675 0b82 64697200 		.ascii	"dir\000"
 11676 0b86 01       		.byte	0x1
 11677 0b87 4906     		.2byte	0x649
 11678 0b89 79020000 		.4byte	0x279
 11679 0b8d 02       		.uleb128 0x2
 11680 0b8e 91       		.byte	0x91
 11681 0b8f 70       		.sleb128 -16
 11682 0b90 18       		.uleb128 0x18
 11683 0b91 636C00   		.ascii	"cl\000"
 11684 0b94 01       		.byte	0x1
 11685 0b95 4A06     		.2byte	0x64a
 11686 0b97 70000000 		.4byte	0x70
 11687 0b9b 02       		.uleb128 0x2
 11688 0b9c 91       		.byte	0x91
 11689 0b9d 6C       		.sleb128 -20
 11690 0b9e 00       		.byte	0
 11691 0b9f 1D       		.uleb128 0x1d
 11692 0ba0 1A060000 		.4byte	.LASF105
 11693 0ba4 01       		.byte	0x1
 11694 0ba5 2908     		.2byte	0x829
 11695 0ba7 D6030000 		.4byte	0x3d6
 11696 0bab 00000000 		.4byte	.LFB21
 11697 0baf F6000000 		.4byte	.LFE21-.LFB21
 11698 0bb3 01       		.uleb128 0x1
 11699 0bb4 9C       		.byte	0x9c
 11700 0bb5 0E0C0000 		.4byte	0xc0e
 11701 0bb9 18       		.uleb128 0x18
 11702 0bba 647000   		.ascii	"dp\000"
 11703 0bbd 01       		.byte	0x1
 11704 0bbe 2A08     		.2byte	0x82a
 11705 0bc0 3E0A0000 		.4byte	0xa3e
 11706 0bc4 02       		.uleb128 0x2
 11707 0bc5 91       		.byte	0x91
 11708 0bc6 5C       		.sleb128 -36
 11709 0bc7 18       		.uleb128 0x18
 11710 0bc8 766F6C00 		.ascii	"vol\000"
 11711 0bcc 01       		.byte	0x1
 11712 0bcd 2B08     		.2byte	0x82b
 11713 0bcf 50000000 		.4byte	0x50
 11714 0bd3 02       		.uleb128 0x2
 11715 0bd4 91       		.byte	0x91
 11716 0bd5 58       		.sleb128 -40
 11717 0bd6 19       		.uleb128 0x19
 11718 0bd7 72657300 		.ascii	"res\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 313


 11719 0bdb 01       		.byte	0x1
 11720 0bdc 2E08     		.2byte	0x82e
 11721 0bde D6030000 		.4byte	0x3d6
 11722 0be2 02       		.uleb128 0x2
 11723 0be3 91       		.byte	0x91
 11724 0be4 6F       		.sleb128 -17
 11725 0be5 19       		.uleb128 0x19
 11726 0be6 667300   		.ascii	"fs\000"
 11727 0be9 01       		.byte	0x1
 11728 0bea 2F08     		.2byte	0x82f
 11729 0bec F2010000 		.4byte	0x1f2
 11730 0bf0 02       		.uleb128 0x2
 11731 0bf1 91       		.byte	0x91
 11732 0bf2 68       		.sleb128 -24
 11733 0bf3 19       		.uleb128 0x19
 11734 0bf4 6100     		.ascii	"a\000"
 11735 0bf6 01       		.byte	0x1
 11736 0bf7 3008     		.2byte	0x830
 11737 0bf9 25000000 		.4byte	0x25
 11738 0bfd 02       		.uleb128 0x2
 11739 0bfe 91       		.byte	0x91
 11740 0bff 66       		.sleb128 -26
 11741 0c00 19       		.uleb128 0x19
 11742 0c01 6300     		.ascii	"c\000"
 11743 0c03 01       		.byte	0x1
 11744 0c04 3008     		.2byte	0x830
 11745 0c06 25000000 		.4byte	0x25
 11746 0c0a 02       		.uleb128 0x2
 11747 0c0b 91       		.byte	0x91
 11748 0c0c 67       		.sleb128 -25
 11749 0c0d 00       		.byte	0
 11750 0c0e 1D       		.uleb128 0x1d
 11751 0c0f 7A000000 		.4byte	.LASF106
 11752 0c13 01       		.byte	0x1
 11753 0c14 7608     		.2byte	0x876
 11754 0c16 D6030000 		.4byte	0x3d6
 11755 0c1a 00000000 		.4byte	.LFB22
 11756 0c1e D8000000 		.4byte	.LFE22-.LFB22
 11757 0c22 01       		.uleb128 0x1
 11758 0c23 9C       		.byte	0x9c
 11759 0c24 610C0000 		.4byte	0xc61
 11760 0c28 18       		.uleb128 0x18
 11761 0c29 647000   		.ascii	"dp\000"
 11762 0c2c 01       		.byte	0x1
 11763 0c2d 7708     		.2byte	0x877
 11764 0c2f 3E0A0000 		.4byte	0xa3e
 11765 0c33 02       		.uleb128 0x2
 11766 0c34 91       		.byte	0x91
 11767 0c35 5C       		.sleb128 -36
 11768 0c36 19       		.uleb128 0x19
 11769 0c37 72657300 		.ascii	"res\000"
 11770 0c3b 01       		.byte	0x1
 11771 0c3c 7A08     		.2byte	0x87a
 11772 0c3e D6030000 		.4byte	0x3d6
 11773 0c42 02       		.uleb128 0x2
 11774 0c43 91       		.byte	0x91
 11775 0c44 6F       		.sleb128 -17
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 314


 11776 0c45 19       		.uleb128 0x19
 11777 0c46 667300   		.ascii	"fs\000"
 11778 0c49 01       		.byte	0x1
 11779 0c4a 7B08     		.2byte	0x87b
 11780 0c4c F2010000 		.4byte	0x1f2
 11781 0c50 02       		.uleb128 0x2
 11782 0c51 91       		.byte	0x91
 11783 0c52 68       		.sleb128 -24
 11784 0c53 19       		.uleb128 0x19
 11785 0c54 6300     		.ascii	"c\000"
 11786 0c56 01       		.byte	0x1
 11787 0c57 7C08     		.2byte	0x87c
 11788 0c59 25000000 		.4byte	0x25
 11789 0c5d 02       		.uleb128 0x2
 11790 0c5e 91       		.byte	0x91
 11791 0c5f 67       		.sleb128 -25
 11792 0c60 00       		.byte	0
 11793 0c61 1D       		.uleb128 0x1d
 11794 0c62 67000000 		.4byte	.LASF107
 11795 0c66 01       		.byte	0x1
 11796 0c67 C508     		.2byte	0x8c5
 11797 0c69 D6030000 		.4byte	0x3d6
 11798 0c6d 00000000 		.4byte	.LFB23
 11799 0c71 7E000000 		.4byte	.LFE23-.LFB23
 11800 0c75 01       		.uleb128 0x1
 11801 0c76 9C       		.byte	0x9c
 11802 0c77 A70C0000 		.4byte	0xca7
 11803 0c7b 18       		.uleb128 0x18
 11804 0c7c 647000   		.ascii	"dp\000"
 11805 0c7f 01       		.byte	0x1
 11806 0c80 C608     		.2byte	0x8c6
 11807 0c82 3E0A0000 		.4byte	0xa3e
 11808 0c86 02       		.uleb128 0x2
 11809 0c87 91       		.byte	0x91
 11810 0c88 64       		.sleb128 -28
 11811 0c89 19       		.uleb128 0x19
 11812 0c8a 72657300 		.ascii	"res\000"
 11813 0c8e 01       		.byte	0x1
 11814 0c8f C908     		.2byte	0x8c9
 11815 0c91 D6030000 		.4byte	0x3d6
 11816 0c95 02       		.uleb128 0x2
 11817 0c96 91       		.byte	0x91
 11818 0c97 6F       		.sleb128 -17
 11819 0c98 19       		.uleb128 0x19
 11820 0c99 667300   		.ascii	"fs\000"
 11821 0c9c 01       		.byte	0x1
 11822 0c9d CA08     		.2byte	0x8ca
 11823 0c9f F2010000 		.4byte	0x1f2
 11824 0ca3 02       		.uleb128 0x2
 11825 0ca4 91       		.byte	0x91
 11826 0ca5 68       		.sleb128 -24
 11827 0ca6 00       		.byte	0
 11828 0ca7 1D       		.uleb128 0x1d
 11829 0ca8 3D020000 		.4byte	.LASF108
 11830 0cac 01       		.byte	0x1
 11831 0cad 2C09     		.2byte	0x92c
 11832 0caf D6030000 		.4byte	0x3d6
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 315


 11833 0cb3 00000000 		.4byte	.LFB24
 11834 0cb7 4A000000 		.4byte	.LFE24-.LFB24
 11835 0cbb 01       		.uleb128 0x1
 11836 0cbc 9C       		.byte	0x9c
 11837 0cbd ED0C0000 		.4byte	0xced
 11838 0cc1 18       		.uleb128 0x18
 11839 0cc2 647000   		.ascii	"dp\000"
 11840 0cc5 01       		.byte	0x1
 11841 0cc6 2D09     		.2byte	0x92d
 11842 0cc8 3E0A0000 		.4byte	0xa3e
 11843 0ccc 02       		.uleb128 0x2
 11844 0ccd 91       		.byte	0x91
 11845 0cce 64       		.sleb128 -28
 11846 0ccf 19       		.uleb128 0x19
 11847 0cd0 72657300 		.ascii	"res\000"
 11848 0cd4 01       		.byte	0x1
 11849 0cd5 3009     		.2byte	0x930
 11850 0cd7 D6030000 		.4byte	0x3d6
 11851 0cdb 02       		.uleb128 0x2
 11852 0cdc 91       		.byte	0x91
 11853 0cdd 6B       		.sleb128 -21
 11854 0cde 19       		.uleb128 0x19
 11855 0cdf 667300   		.ascii	"fs\000"
 11856 0ce2 01       		.byte	0x1
 11857 0ce3 3109     		.2byte	0x931
 11858 0ce5 F2010000 		.4byte	0x1f2
 11859 0ce9 02       		.uleb128 0x2
 11860 0cea 91       		.byte	0x91
 11861 0ceb 6C       		.sleb128 -20
 11862 0cec 00       		.byte	0
 11863 0ced 20       		.uleb128 0x20
 11864 0cee 06030000 		.4byte	.LASF109
 11865 0cf2 01       		.byte	0x1
 11866 0cf3 5C09     		.2byte	0x95c
 11867 0cf5 00000000 		.4byte	.LFB25
 11868 0cf9 D2000000 		.4byte	.LFE25-.LFB25
 11869 0cfd 01       		.uleb128 0x1
 11870 0cfe 9C       		.byte	0x9c
 11871 0cff 560D0000 		.4byte	0xd56
 11872 0d03 18       		.uleb128 0x18
 11873 0d04 647000   		.ascii	"dp\000"
 11874 0d07 01       		.byte	0x1
 11875 0d08 5D09     		.2byte	0x95d
 11876 0d0a 3E0A0000 		.4byte	0xa3e
 11877 0d0e 02       		.uleb128 0x2
 11878 0d0f 91       		.byte	0x91
 11879 0d10 64       		.sleb128 -28
 11880 0d11 18       		.uleb128 0x18
 11881 0d12 666E6F00 		.ascii	"fno\000"
 11882 0d16 01       		.byte	0x1
 11883 0d17 5E09     		.2byte	0x95e
 11884 0d19 560D0000 		.4byte	0xd56
 11885 0d1d 02       		.uleb128 0x2
 11886 0d1e 91       		.byte	0x91
 11887 0d1f 60       		.sleb128 -32
 11888 0d20 19       		.uleb128 0x19
 11889 0d21 6900     		.ascii	"i\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 316


 11890 0d23 01       		.byte	0x1
 11891 0d24 6109     		.2byte	0x961
 11892 0d26 57000000 		.4byte	0x57
 11893 0d2a 02       		.uleb128 0x2
 11894 0d2b 91       		.byte	0x91
 11895 0d2c 74       		.sleb128 -12
 11896 0d2d 19       		.uleb128 0x19
 11897 0d2e 6A00     		.ascii	"j\000"
 11898 0d30 01       		.byte	0x1
 11899 0d31 6109     		.2byte	0x961
 11900 0d33 57000000 		.4byte	0x57
 11901 0d37 02       		.uleb128 0x2
 11902 0d38 91       		.byte	0x91
 11903 0d39 70       		.sleb128 -16
 11904 0d3a 19       		.uleb128 0x19
 11905 0d3b 6300     		.ascii	"c\000"
 11906 0d3d 01       		.byte	0x1
 11907 0d3e 6209     		.2byte	0x962
 11908 0d40 82000000 		.4byte	0x82
 11909 0d44 02       		.uleb128 0x2
 11910 0d45 91       		.byte	0x91
 11911 0d46 6F       		.sleb128 -17
 11912 0d47 19       		.uleb128 0x19
 11913 0d48 746D00   		.ascii	"tm\000"
 11914 0d4b 01       		.byte	0x1
 11915 0d4c 6309     		.2byte	0x963
 11916 0d4e 70000000 		.4byte	0x70
 11917 0d52 02       		.uleb128 0x2
 11918 0d53 91       		.byte	0x91
 11919 0d54 68       		.sleb128 -24
 11920 0d55 00       		.byte	0
 11921 0d56 0B       		.uleb128 0xb
 11922 0d57 04       		.byte	0x4
 11923 0d58 4A030000 		.4byte	0x34a
 11924 0d5c 1D       		.uleb128 0x1d
 11925 0d5d 87040000 		.4byte	.LASF110
 11926 0d61 01       		.byte	0x1
 11927 0d62 0A0A     		.2byte	0xa0a
 11928 0d64 D6030000 		.4byte	0x3d6
 11929 0d68 00000000 		.4byte	.LFB26
 11930 0d6c 6C010000 		.4byte	.LFE26-.LFB26
 11931 0d70 01       		.uleb128 0x1
 11932 0d71 9C       		.byte	0x9c
 11933 0d72 F00D0000 		.4byte	0xdf0
 11934 0d76 18       		.uleb128 0x18
 11935 0d77 647000   		.ascii	"dp\000"
 11936 0d7a 01       		.byte	0x1
 11937 0d7b 0B0A     		.2byte	0xa0b
 11938 0d7d 3E0A0000 		.4byte	0xa3e
 11939 0d81 02       		.uleb128 0x2
 11940 0d82 91       		.byte	0x91
 11941 0d83 5C       		.sleb128 -36
 11942 0d84 1F       		.uleb128 0x1f
 11943 0d85 62000000 		.4byte	.LASF111
 11944 0d89 01       		.byte	0x1
 11945 0d8a 0C0A     		.2byte	0xa0c
 11946 0d8c F00D0000 		.4byte	0xdf0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 317


 11947 0d90 02       		.uleb128 0x2
 11948 0d91 91       		.byte	0x91
 11949 0d92 58       		.sleb128 -40
 11950 0d93 19       		.uleb128 0x19
 11951 0d94 6300     		.ascii	"c\000"
 11952 0d96 01       		.byte	0x1
 11953 0d97 860A     		.2byte	0xa86
 11954 0d99 25000000 		.4byte	0x25
 11955 0d9d 02       		.uleb128 0x2
 11956 0d9e 91       		.byte	0x91
 11957 0d9f 77       		.sleb128 -9
 11958 0da0 21       		.uleb128 0x21
 11959 0da1 6400     		.ascii	"d\000"
 11960 0da3 01       		.byte	0x1
 11961 0da4 860A     		.2byte	0xa86
 11962 0da6 25000000 		.4byte	0x25
 11963 0daa 19       		.uleb128 0x19
 11964 0dab 73666E00 		.ascii	"sfn\000"
 11965 0daf 01       		.byte	0x1
 11966 0db0 860A     		.2byte	0xa86
 11967 0db2 79020000 		.4byte	0x279
 11968 0db6 02       		.uleb128 0x2
 11969 0db7 91       		.byte	0x91
 11970 0db8 60       		.sleb128 -32
 11971 0db9 19       		.uleb128 0x19
 11972 0dba 6E6900   		.ascii	"ni\000"
 11973 0dbd 01       		.byte	0x1
 11974 0dbe 870A     		.2byte	0xa87
 11975 0dc0 57000000 		.4byte	0x57
 11976 0dc4 02       		.uleb128 0x2
 11977 0dc5 91       		.byte	0x91
 11978 0dc6 70       		.sleb128 -16
 11979 0dc7 19       		.uleb128 0x19
 11980 0dc8 736900   		.ascii	"si\000"
 11981 0dcb 01       		.byte	0x1
 11982 0dcc 870A     		.2byte	0xa87
 11983 0dce 57000000 		.4byte	0x57
 11984 0dd2 02       		.uleb128 0x2
 11985 0dd3 91       		.byte	0x91
 11986 0dd4 6C       		.sleb128 -20
 11987 0dd5 19       		.uleb128 0x19
 11988 0dd6 6900     		.ascii	"i\000"
 11989 0dd8 01       		.byte	0x1
 11990 0dd9 870A     		.2byte	0xa87
 11991 0ddb 57000000 		.4byte	0x57
 11992 0ddf 02       		.uleb128 0x2
 11993 0de0 91       		.byte	0x91
 11994 0de1 68       		.sleb128 -24
 11995 0de2 19       		.uleb128 0x19
 11996 0de3 7000     		.ascii	"p\000"
 11997 0de5 01       		.byte	0x1
 11998 0de6 880A     		.2byte	0xa88
 11999 0de8 E4060000 		.4byte	0x6e4
 12000 0dec 02       		.uleb128 0x2
 12001 0ded 91       		.byte	0x91
 12002 0dee 64       		.sleb128 -28
 12003 0def 00       		.byte	0
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 318


 12004 0df0 0B       		.uleb128 0xb
 12005 0df1 04       		.byte	0x4
 12006 0df2 F60D0000 		.4byte	0xdf6
 12007 0df6 0B       		.uleb128 0xb
 12008 0df7 04       		.byte	0x4
 12009 0df8 FC0D0000 		.4byte	0xdfc
 12010 0dfc 1A       		.uleb128 0x1a
 12011 0dfd 82000000 		.4byte	0x82
 12012 0e01 1D       		.uleb128 0x1d
 12013 0e02 02040000 		.4byte	.LASF112
 12014 0e06 01       		.byte	0x1
 12015 0e07 CD0A     		.2byte	0xacd
 12016 0e09 D6030000 		.4byte	0x3d6
 12017 0e0d 00000000 		.4byte	.LFB27
 12018 0e11 10010000 		.4byte	.LFE27-.LFB27
 12019 0e15 01       		.uleb128 0x1
 12020 0e16 9C       		.byte	0x9c
 12021 0e17 730E0000 		.4byte	0xe73
 12022 0e1b 18       		.uleb128 0x18
 12023 0e1c 647000   		.ascii	"dp\000"
 12024 0e1f 01       		.byte	0x1
 12025 0e20 CE0A     		.2byte	0xace
 12026 0e22 3E0A0000 		.4byte	0xa3e
 12027 0e26 02       		.uleb128 0x2
 12028 0e27 91       		.byte	0x91
 12029 0e28 5C       		.sleb128 -36
 12030 0e29 1F       		.uleb128 0x1f
 12031 0e2a 62000000 		.4byte	.LASF111
 12032 0e2e 01       		.byte	0x1
 12033 0e2f CF0A     		.2byte	0xacf
 12034 0e31 F60D0000 		.4byte	0xdf6
 12035 0e35 02       		.uleb128 0x2
 12036 0e36 91       		.byte	0x91
 12037 0e37 58       		.sleb128 -40
 12038 0e38 19       		.uleb128 0x19
 12039 0e39 72657300 		.ascii	"res\000"
 12040 0e3d 01       		.byte	0x1
 12041 0e3e D20A     		.2byte	0xad2
 12042 0e40 D6030000 		.4byte	0x3d6
 12043 0e44 02       		.uleb128 0x2
 12044 0e45 91       		.byte	0x91
 12045 0e46 6F       		.sleb128 -17
 12046 0e47 19       		.uleb128 0x19
 12047 0e48 6E7300   		.ascii	"ns\000"
 12048 0e4b 01       		.byte	0x1
 12049 0e4c D30A     		.2byte	0xad3
 12050 0e4e 25000000 		.4byte	0x25
 12051 0e52 02       		.uleb128 0x2
 12052 0e53 91       		.byte	0x91
 12053 0e54 63       		.sleb128 -29
 12054 0e55 19       		.uleb128 0x19
 12055 0e56 6F626A00 		.ascii	"obj\000"
 12056 0e5a 01       		.byte	0x1
 12057 0e5b D40A     		.2byte	0xad4
 12058 0e5d 6D080000 		.4byte	0x86d
 12059 0e61 02       		.uleb128 0x2
 12060 0e62 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 319


 12061 0e63 68       		.sleb128 -24
 12062 0e64 19       		.uleb128 0x19
 12063 0e65 667300   		.ascii	"fs\000"
 12064 0e68 01       		.byte	0x1
 12065 0e69 D50A     		.2byte	0xad5
 12066 0e6b F2010000 		.4byte	0x1f2
 12067 0e6f 02       		.uleb128 0x2
 12068 0e70 91       		.byte	0x91
 12069 0e71 64       		.sleb128 -28
 12070 0e72 00       		.byte	0
 12071 0e73 17       		.uleb128 0x17
 12072 0e74 83030000 		.4byte	.LASF113
 12073 0e78 01       		.byte	0x1
 12074 0e79 250B     		.2byte	0xb25
 12075 0e7b 50000000 		.4byte	0x50
 12076 0e7f 00000000 		.4byte	.LFB28
 12077 0e83 84000000 		.4byte	.LFE28-.LFB28
 12078 0e87 01       		.uleb128 0x1
 12079 0e88 9C       		.byte	0x9c
 12080 0e89 D50E0000 		.4byte	0xed5
 12081 0e8d 1F       		.uleb128 0x1f
 12082 0e8e 62000000 		.4byte	.LASF111
 12083 0e92 01       		.byte	0x1
 12084 0e93 260B     		.2byte	0xb26
 12085 0e95 F00D0000 		.4byte	0xdf0
 12086 0e99 02       		.uleb128 0x2
 12087 0e9a 91       		.byte	0x91
 12088 0e9b 64       		.sleb128 -28
 12089 0e9c 19       		.uleb128 0x19
 12090 0e9d 747000   		.ascii	"tp\000"
 12091 0ea0 01       		.byte	0x1
 12092 0ea1 290B     		.2byte	0xb29
 12093 0ea3 F60D0000 		.4byte	0xdf6
 12094 0ea7 02       		.uleb128 0x2
 12095 0ea8 91       		.byte	0x91
 12096 0ea9 6C       		.sleb128 -20
 12097 0eaa 19       		.uleb128 0x19
 12098 0eab 747400   		.ascii	"tt\000"
 12099 0eae 01       		.byte	0x1
 12100 0eaf 290B     		.2byte	0xb29
 12101 0eb1 F60D0000 		.4byte	0xdf6
 12102 0eb5 02       		.uleb128 0x2
 12103 0eb6 91       		.byte	0x91
 12104 0eb7 74       		.sleb128 -12
 12105 0eb8 19       		.uleb128 0x19
 12106 0eb9 6900     		.ascii	"i\000"
 12107 0ebb 01       		.byte	0x1
 12108 0ebc 2A0B     		.2byte	0xb2a
 12109 0ebe 57000000 		.4byte	0x57
 12110 0ec2 02       		.uleb128 0x2
 12111 0ec3 91       		.byte	0x91
 12112 0ec4 68       		.sleb128 -24
 12113 0ec5 19       		.uleb128 0x19
 12114 0ec6 766F6C00 		.ascii	"vol\000"
 12115 0eca 01       		.byte	0x1
 12116 0ecb 2B0B     		.2byte	0xb2b
 12117 0ecd 50000000 		.4byte	0x50
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 320


 12118 0ed1 02       		.uleb128 0x2
 12119 0ed2 91       		.byte	0x91
 12120 0ed3 70       		.sleb128 -16
 12121 0ed4 00       		.byte	0
 12122 0ed5 1D       		.uleb128 0x1d
 12123 0ed6 66030000 		.4byte	.LASF114
 12124 0eda 01       		.byte	0x1
 12125 0edb 620B     		.2byte	0xb62
 12126 0edd 25000000 		.4byte	0x25
 12127 0ee1 00000000 		.4byte	.LFB29
 12128 0ee5 B0000000 		.4byte	.LFE29-.LFB29
 12129 0ee9 01       		.uleb128 0x1
 12130 0eea 9C       		.byte	0x9c
 12131 0eeb 0D0F0000 		.4byte	0xf0d
 12132 0eef 18       		.uleb128 0x18
 12133 0ef0 667300   		.ascii	"fs\000"
 12134 0ef3 01       		.byte	0x1
 12135 0ef4 630B     		.2byte	0xb63
 12136 0ef6 F2010000 		.4byte	0x1f2
 12137 0efa 02       		.uleb128 0x2
 12138 0efb 91       		.byte	0x91
 12139 0efc 74       		.sleb128 -12
 12140 0efd 1F       		.uleb128 0x1f
 12141 0efe 83000000 		.4byte	.LASF38
 12142 0f02 01       		.byte	0x1
 12143 0f03 640B     		.2byte	0xb64
 12144 0f05 70000000 		.4byte	0x70
 12145 0f09 02       		.uleb128 0x2
 12146 0f0a 91       		.byte	0x91
 12147 0f0b 70       		.sleb128 -16
 12148 0f0c 00       		.byte	0
 12149 0f0d 1D       		.uleb128 0x1d
 12150 0f0e F1030000 		.4byte	.LASF115
 12151 0f12 01       		.byte	0x1
 12152 0f13 7E0B     		.2byte	0xb7e
 12153 0f15 D6030000 		.4byte	0x3d6
 12154 0f19 00000000 		.4byte	.LFB30
 12155 0f1d D8040000 		.4byte	.LFE30-.LFB30
 12156 0f21 01       		.uleb128 0x1
 12157 0f22 9C       		.byte	0x9c
 12158 0f23 27100000 		.4byte	0x1027
 12159 0f27 1F       		.uleb128 0x1f
 12160 0f28 62000000 		.4byte	.LASF111
 12161 0f2c 01       		.byte	0x1
 12162 0f2d 7F0B     		.2byte	0xb7f
 12163 0f2f F00D0000 		.4byte	0xdf0
 12164 0f33 03       		.uleb128 0x3
 12165 0f34 91       		.byte	0x91
 12166 0f35 A47F     		.sleb128 -92
 12167 0f37 18       		.uleb128 0x18
 12168 0f38 72667300 		.ascii	"rfs\000"
 12169 0f3c 01       		.byte	0x1
 12170 0f3d 800B     		.2byte	0xb80
 12171 0f3f 27100000 		.4byte	0x1027
 12172 0f43 03       		.uleb128 0x3
 12173 0f44 91       		.byte	0x91
 12174 0f45 A07F     		.sleb128 -96
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 321


 12175 0f47 1F       		.uleb128 0x1f
 12176 0f48 C6010000 		.4byte	.LASF116
 12177 0f4c 01       		.byte	0x1
 12178 0f4d 810B     		.2byte	0xb81
 12179 0f4f 25000000 		.4byte	0x25
 12180 0f53 03       		.uleb128 0x3
 12181 0f54 91       		.byte	0x91
 12182 0f55 9F7F     		.sleb128 -97
 12183 0f57 19       		.uleb128 0x19
 12184 0f58 666D7400 		.ascii	"fmt\000"
 12185 0f5c 01       		.byte	0x1
 12186 0f5d 840B     		.2byte	0xb84
 12187 0f5f 25000000 		.4byte	0x25
 12188 0f63 02       		.uleb128 0x2
 12189 0f64 91       		.byte	0x91
 12190 0f65 6F       		.sleb128 -17
 12191 0f66 19       		.uleb128 0x19
 12192 0f67 707400   		.ascii	"pt\000"
 12193 0f6a 01       		.byte	0x1
 12194 0f6b 840B     		.2byte	0xb84
 12195 0f6d 79020000 		.4byte	0x279
 12196 0f71 02       		.uleb128 0x2
 12197 0f72 91       		.byte	0x91
 12198 0f73 48       		.sleb128 -56
 12199 0f74 19       		.uleb128 0x19
 12200 0f75 766F6C00 		.ascii	"vol\000"
 12201 0f79 01       		.byte	0x1
 12202 0f7a 850B     		.2byte	0xb85
 12203 0f7c 50000000 		.4byte	0x50
 12204 0f80 02       		.uleb128 0x2
 12205 0f81 91       		.byte	0x91
 12206 0f82 54       		.sleb128 -44
 12207 0f83 1E       		.uleb128 0x1e
 12208 0f84 75050000 		.4byte	.LASF31
 12209 0f88 01       		.byte	0x1
 12210 0f89 860B     		.2byte	0xb86
 12211 0f8b E1030000 		.4byte	0x3e1
 12212 0f8f 02       		.uleb128 0x2
 12213 0f90 91       		.byte	0x91
 12214 0f91 4F       		.sleb128 -49
 12215 0f92 1E       		.uleb128 0x1e
 12216 0f93 14020000 		.4byte	.LASF117
 12217 0f97 01       		.byte	0x1
 12218 0f98 870B     		.2byte	0xb87
 12219 0f9a 70000000 		.4byte	0x70
 12220 0f9e 02       		.uleb128 0x2
 12221 0f9f 91       		.byte	0x91
 12222 0fa0 68       		.sleb128 -24
 12223 0fa1 1E       		.uleb128 0x1e
 12224 0fa2 9A000000 		.4byte	.LASF118
 12225 0fa6 01       		.byte	0x1
 12226 0fa7 870B     		.2byte	0xb87
 12227 0fa9 70000000 		.4byte	0x70
 12228 0fad 02       		.uleb128 0x2
 12229 0fae 91       		.byte	0x91
 12230 0faf 64       		.sleb128 -28
 12231 0fb0 1E       		.uleb128 0x1e
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 322


 12232 0fb1 8B060000 		.4byte	.LASF119
 12233 0fb5 01       		.byte	0x1
 12234 0fb6 870B     		.2byte	0xb87
 12235 0fb8 70000000 		.4byte	0x70
 12236 0fbc 02       		.uleb128 0x2
 12237 0fbd 91       		.byte	0x91
 12238 0fbe 60       		.sleb128 -32
 12239 0fbf 1E       		.uleb128 0x1e
 12240 0fc0 1A020000 		.4byte	.LASF120
 12241 0fc4 01       		.byte	0x1
 12242 0fc5 870B     		.2byte	0xb87
 12243 0fc7 70000000 		.4byte	0x70
 12244 0fcb 02       		.uleb128 0x2
 12245 0fcc 91       		.byte	0x91
 12246 0fcd 40       		.sleb128 -64
 12247 0fce 1E       		.uleb128 0x1e
 12248 0fcf 13030000 		.4byte	.LASF121
 12249 0fd3 01       		.byte	0x1
 12250 0fd4 870B     		.2byte	0xb87
 12251 0fd6 70000000 		.4byte	0x70
 12252 0fda 03       		.uleb128 0x3
 12253 0fdb 91       		.byte	0x91
 12254 0fdc BC7F     		.sleb128 -68
 12255 0fde 1E       		.uleb128 0x1e
 12256 0fdf 94020000 		.4byte	.LASF122
 12257 0fe3 01       		.byte	0x1
 12258 0fe4 870B     		.2byte	0xb87
 12259 0fe6 70000000 		.4byte	0x70
 12260 0fea 02       		.uleb128 0x2
 12261 0feb 91       		.byte	0x91
 12262 0fec 5C       		.sleb128 -36
 12263 0fed 19       		.uleb128 0x19
 12264 0fee 627200   		.ascii	"br\000"
 12265 0ff1 01       		.byte	0x1
 12266 0ff2 870B     		.2byte	0xb87
 12267 0ff4 2D100000 		.4byte	0x102d
 12268 0ff8 03       		.uleb128 0x3
 12269 0ff9 91       		.byte	0x91
 12270 0ffa AC7F     		.sleb128 -84
 12271 0ffc 1E       		.uleb128 0x1e
 12272 0ffd A1000000 		.4byte	.LASF123
 12273 1001 01       		.byte	0x1
 12274 1002 880B     		.2byte	0xb88
 12275 1004 3E000000 		.4byte	0x3e
 12276 1008 02       		.uleb128 0x2
 12277 1009 91       		.byte	0x91
 12278 100a 46       		.sleb128 -58
 12279 100b 19       		.uleb128 0x19
 12280 100c 667300   		.ascii	"fs\000"
 12281 100f 01       		.byte	0x1
 12282 1010 890B     		.2byte	0xb89
 12283 1012 F2010000 		.4byte	0x1f2
 12284 1016 02       		.uleb128 0x2
 12285 1017 91       		.byte	0x91
 12286 1018 50       		.sleb128 -48
 12287 1019 19       		.uleb128 0x19
 12288 101a 6900     		.ascii	"i\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 323


 12289 101c 01       		.byte	0x1
 12290 101d 8A0B     		.2byte	0xb8a
 12291 101f 57000000 		.4byte	0x57
 12292 1023 02       		.uleb128 0x2
 12293 1024 91       		.byte	0x91
 12294 1025 58       		.sleb128 -40
 12295 1026 00       		.byte	0
 12296 1027 0B       		.uleb128 0xb
 12297 1028 04       		.byte	0x4
 12298 1029 F2010000 		.4byte	0x1f2
 12299 102d 08       		.uleb128 0x8
 12300 102e 70000000 		.4byte	0x70
 12301 1032 3D100000 		.4byte	0x103d
 12302 1036 0D       		.uleb128 0xd
 12303 1037 91010000 		.4byte	0x191
 12304 103b 03       		.byte	0x3
 12305 103c 00       		.byte	0
 12306 103d 1D       		.uleb128 0x1d
 12307 103e 29040000 		.4byte	.LASF124
 12308 1042 01       		.byte	0x1
 12309 1043 5B0C     		.2byte	0xc5b
 12310 1045 D6030000 		.4byte	0x3d6
 12311 1049 00000000 		.4byte	.LFB31
 12312 104d 78000000 		.4byte	.LFE31-.LFB31
 12313 1051 01       		.uleb128 0x1
 12314 1052 9C       		.byte	0x9c
 12315 1053 93100000 		.4byte	0x1093
 12316 1057 18       		.uleb128 0x18
 12317 1058 64667000 		.ascii	"dfp\000"
 12318 105c 01       		.byte	0x1
 12319 105d 5C0C     		.2byte	0xc5c
 12320 105f 35040000 		.4byte	0x435
 12321 1063 02       		.uleb128 0x2
 12322 1064 91       		.byte	0x91
 12323 1065 6C       		.sleb128 -20
 12324 1066 18       		.uleb128 0x18
 12325 1067 667300   		.ascii	"fs\000"
 12326 106a 01       		.byte	0x1
 12327 106b 5D0C     		.2byte	0xc5d
 12328 106d 27100000 		.4byte	0x1027
 12329 1071 02       		.uleb128 0x2
 12330 1072 91       		.byte	0x91
 12331 1073 68       		.sleb128 -24
 12332 1074 19       		.uleb128 0x19
 12333 1075 6F626A00 		.ascii	"obj\000"
 12334 1079 01       		.byte	0x1
 12335 107a 600C     		.2byte	0xc60
 12336 107c 6D080000 		.4byte	0x86d
 12337 1080 02       		.uleb128 0x2
 12338 1081 91       		.byte	0x91
 12339 1082 70       		.sleb128 -16
 12340 1083 19       		.uleb128 0x19
 12341 1084 72657300 		.ascii	"res\000"
 12342 1088 01       		.byte	0x1
 12343 1089 610C     		.2byte	0xc61
 12344 108b D6030000 		.4byte	0x3d6
 12345 108f 02       		.uleb128 0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 324


 12346 1090 91       		.byte	0x91
 12347 1091 77       		.sleb128 -9
 12348 1092 00       		.byte	0
 12349 1093 22       		.uleb128 0x22
 12350 1094 98030000 		.4byte	.LASF125
 12351 1098 01       		.byte	0x1
 12352 1099 7E0C     		.2byte	0xc7e
 12353 109b D6030000 		.4byte	0x3d6
 12354 109f 00000000 		.4byte	.LFB32
 12355 10a3 94000000 		.4byte	.LFE32-.LFB32
 12356 10a7 01       		.uleb128 0x1
 12357 10a8 9C       		.byte	0x9c
 12358 10a9 15110000 		.4byte	0x1115
 12359 10ad 18       		.uleb128 0x18
 12360 10ae 667300   		.ascii	"fs\000"
 12361 10b1 01       		.byte	0x1
 12362 10b2 7F0C     		.2byte	0xc7f
 12363 10b4 F2010000 		.4byte	0x1f2
 12364 10b8 02       		.uleb128 0x2
 12365 10b9 91       		.byte	0x91
 12366 10ba 5C       		.sleb128 -36
 12367 10bb 1F       		.uleb128 0x1f
 12368 10bc 62000000 		.4byte	.LASF111
 12369 10c0 01       		.byte	0x1
 12370 10c1 800C     		.2byte	0xc80
 12371 10c3 F60D0000 		.4byte	0xdf6
 12372 10c7 02       		.uleb128 0x2
 12373 10c8 91       		.byte	0x91
 12374 10c9 58       		.sleb128 -40
 12375 10ca 18       		.uleb128 0x18
 12376 10cb 6F707400 		.ascii	"opt\000"
 12377 10cf 01       		.byte	0x1
 12378 10d0 810C     		.2byte	0xc81
 12379 10d2 25000000 		.4byte	0x25
 12380 10d6 02       		.uleb128 0x2
 12381 10d7 91       		.byte	0x91
 12382 10d8 57       		.sleb128 -41
 12383 10d9 19       		.uleb128 0x19
 12384 10da 63667300 		.ascii	"cfs\000"
 12385 10de 01       		.byte	0x1
 12386 10df 840C     		.2byte	0xc84
 12387 10e1 F2010000 		.4byte	0x1f2
 12388 10e5 02       		.uleb128 0x2
 12389 10e6 91       		.byte	0x91
 12390 10e7 68       		.sleb128 -24
 12391 10e8 19       		.uleb128 0x19
 12392 10e9 766F6C00 		.ascii	"vol\000"
 12393 10ed 01       		.byte	0x1
 12394 10ee 850C     		.2byte	0xc85
 12395 10f0 50000000 		.4byte	0x50
 12396 10f4 02       		.uleb128 0x2
 12397 10f5 91       		.byte	0x91
 12398 10f6 6C       		.sleb128 -20
 12399 10f7 19       		.uleb128 0x19
 12400 10f8 72657300 		.ascii	"res\000"
 12401 10fc 01       		.byte	0x1
 12402 10fd 860C     		.2byte	0xc86
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 325


 12403 10ff D6030000 		.4byte	0x3d6
 12404 1103 02       		.uleb128 0x2
 12405 1104 91       		.byte	0x91
 12406 1105 67       		.sleb128 -25
 12407 1106 19       		.uleb128 0x19
 12408 1107 727000   		.ascii	"rp\000"
 12409 110a 01       		.byte	0x1
 12410 110b 870C     		.2byte	0xc87
 12411 110d F60D0000 		.4byte	0xdf6
 12412 1111 02       		.uleb128 0x2
 12413 1112 91       		.byte	0x91
 12414 1113 60       		.sleb128 -32
 12415 1114 00       		.byte	0
 12416 1115 22       		.uleb128 0x22
 12417 1116 23060000 		.4byte	.LASF126
 12418 111a 01       		.byte	0x1
 12419 111b AD0C     		.2byte	0xcad
 12420 111d D6030000 		.4byte	0x3d6
 12421 1121 00000000 		.4byte	.LFB33
 12422 1125 BE030000 		.4byte	.LFE33-.LFB33
 12423 1129 01       		.uleb128 0x1
 12424 112a 9C       		.byte	0x9c
 12425 112b F3110000 		.4byte	0x11f3
 12426 112f 18       		.uleb128 0x18
 12427 1130 667000   		.ascii	"fp\000"
 12428 1133 01       		.byte	0x1
 12429 1134 AE0C     		.2byte	0xcae
 12430 1136 7F040000 		.4byte	0x47f
 12431 113a 03       		.uleb128 0x3
 12432 113b 91       		.byte	0x91
 12433 113c 9C7F     		.sleb128 -100
 12434 113e 1F       		.uleb128 0x1f
 12435 113f 62000000 		.4byte	.LASF111
 12436 1143 01       		.byte	0x1
 12437 1144 AF0C     		.2byte	0xcaf
 12438 1146 F60D0000 		.4byte	0xdf6
 12439 114a 03       		.uleb128 0x3
 12440 114b 91       		.byte	0x91
 12441 114c 987F     		.sleb128 -104
 12442 114e 1F       		.uleb128 0x1f
 12443 114f C6010000 		.4byte	.LASF116
 12444 1153 01       		.byte	0x1
 12445 1154 B00C     		.2byte	0xcb0
 12446 1156 25000000 		.4byte	0x25
 12447 115a 03       		.uleb128 0x3
 12448 115b 91       		.byte	0x91
 12449 115c 977F     		.sleb128 -105
 12450 115e 1F       		.uleb128 0x1f
 12451 115f FD030000 		.4byte	.LASF35
 12452 1163 01       		.byte	0x1
 12453 1164 B10C     		.2byte	0xcb1
 12454 1166 F3110000 		.4byte	0x11f3
 12455 116a 03       		.uleb128 0x3
 12456 116b 91       		.byte	0x91
 12457 116c 907F     		.sleb128 -112
 12458 116e 19       		.uleb128 0x19
 12459 116f 72657300 		.ascii	"res\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 326


 12460 1173 01       		.byte	0x1
 12461 1174 B40C     		.2byte	0xcb4
 12462 1176 D6030000 		.4byte	0x3d6
 12463 117a 02       		.uleb128 0x2
 12464 117b 91       		.byte	0x91
 12465 117c 6F       		.sleb128 -17
 12466 117d 19       		.uleb128 0x19
 12467 117e 646A00   		.ascii	"dj\000"
 12468 1181 01       		.byte	0x1
 12469 1182 B50C     		.2byte	0xcb5
 12470 1184 EA020000 		.4byte	0x2ea
 12471 1188 03       		.uleb128 0x3
 12472 1189 91       		.byte	0x91
 12473 118a A87F     		.sleb128 -88
 12474 118c 19       		.uleb128 0x19
 12475 118d 667300   		.ascii	"fs\000"
 12476 1190 01       		.byte	0x1
 12477 1191 B60C     		.2byte	0xcb6
 12478 1193 F2010000 		.4byte	0x1f2
 12479 1197 03       		.uleb128 0x3
 12480 1198 91       		.byte	0x91
 12481 1199 A47F     		.sleb128 -92
 12482 119b 19       		.uleb128 0x19
 12483 119c 647700   		.ascii	"dw\000"
 12484 119f 01       		.byte	0x1
 12485 11a0 B80C     		.2byte	0xcb8
 12486 11a2 70000000 		.4byte	0x70
 12487 11a6 02       		.uleb128 0x2
 12488 11a7 91       		.byte	0x91
 12489 11a8 60       		.sleb128 -32
 12490 11a9 19       		.uleb128 0x19
 12491 11aa 636C00   		.ascii	"cl\000"
 12492 11ad 01       		.byte	0x1
 12493 11ae B80C     		.2byte	0xcb8
 12494 11b0 70000000 		.4byte	0x70
 12495 11b4 02       		.uleb128 0x2
 12496 11b5 91       		.byte	0x91
 12497 11b6 5C       		.sleb128 -36
 12498 11b7 19       		.uleb128 0x19
 12499 11b8 62637300 		.ascii	"bcs\000"
 12500 11bc 01       		.byte	0x1
 12501 11bd B80C     		.2byte	0xcb8
 12502 11bf 70000000 		.4byte	0x70
 12503 11c3 02       		.uleb128 0x2
 12504 11c4 91       		.byte	0x91
 12505 11c5 58       		.sleb128 -40
 12506 11c6 1E       		.uleb128 0x1e
 12507 11c7 51020000 		.4byte	.LASF92
 12508 11cb 01       		.byte	0x1
 12509 11cc B80C     		.2byte	0xcb8
 12510 11ce 70000000 		.4byte	0x70
 12511 11d2 02       		.uleb128 0x2
 12512 11d3 91       		.byte	0x91
 12513 11d4 68       		.sleb128 -24
 12514 11d5 19       		.uleb128 0x19
 12515 11d6 736300   		.ascii	"sc\000"
 12516 11d9 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 327


 12517 11da B80C     		.2byte	0xcb8
 12518 11dc 70000000 		.4byte	0x70
 12519 11e0 02       		.uleb128 0x2
 12520 11e1 91       		.byte	0x91
 12521 11e2 54       		.sleb128 -44
 12522 11e3 19       		.uleb128 0x19
 12523 11e4 6F667300 		.ascii	"ofs\000"
 12524 11e8 01       		.byte	0x1
 12525 11e9 B90C     		.2byte	0xcb9
 12526 11eb 94000000 		.4byte	0x94
 12527 11ef 02       		.uleb128 0x2
 12528 11f0 91       		.byte	0x91
 12529 11f1 64       		.sleb128 -28
 12530 11f2 00       		.byte	0
 12531 11f3 0B       		.uleb128 0xb
 12532 11f4 04       		.byte	0x4
 12533 11f5 70000000 		.4byte	0x70
 12534 11f9 22       		.uleb128 0x22
 12535 11fa 2C050000 		.4byte	.LASF127
 12536 11fe 01       		.byte	0x1
 12537 11ff 780D     		.2byte	0xd78
 12538 1201 D6030000 		.4byte	0x3d6
 12539 1205 00000000 		.4byte	.LFB34
 12540 1209 82020000 		.4byte	.LFE34-.LFB34
 12541 120d 01       		.uleb128 0x1
 12542 120e 9C       		.byte	0x9c
 12543 120f D5120000 		.4byte	0x12d5
 12544 1213 18       		.uleb128 0x18
 12545 1214 667000   		.ascii	"fp\000"
 12546 1217 01       		.byte	0x1
 12547 1218 790D     		.2byte	0xd79
 12548 121a 7F040000 		.4byte	0x47f
 12549 121e 02       		.uleb128 0x2
 12550 121f 91       		.byte	0x91
 12551 1220 44       		.sleb128 -60
 12552 1221 1F       		.uleb128 0x1f
 12553 1222 16010000 		.4byte	.LASF128
 12554 1226 01       		.byte	0x1
 12555 1227 7A0D     		.2byte	0xd7a
 12556 1229 35040000 		.4byte	0x435
 12557 122d 02       		.uleb128 0x2
 12558 122e 91       		.byte	0x91
 12559 122f 40       		.sleb128 -64
 12560 1230 18       		.uleb128 0x18
 12561 1231 62747200 		.ascii	"btr\000"
 12562 1235 01       		.byte	0x1
 12563 1236 7B0D     		.2byte	0xd7b
 12564 1238 57000000 		.4byte	0x57
 12565 123c 03       		.uleb128 0x3
 12566 123d 91       		.byte	0x91
 12567 123e BC7F     		.sleb128 -68
 12568 1240 18       		.uleb128 0x18
 12569 1241 627200   		.ascii	"br\000"
 12570 1244 01       		.byte	0x1
 12571 1245 7C0D     		.2byte	0xd7c
 12572 1247 D5120000 		.4byte	0x12d5
 12573 124b 03       		.uleb128 0x3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 328


 12574 124c 91       		.byte	0x91
 12575 124d B87F     		.sleb128 -72
 12576 124f 19       		.uleb128 0x19
 12577 1250 72657300 		.ascii	"res\000"
 12578 1254 01       		.byte	0x1
 12579 1255 7F0D     		.2byte	0xd7f
 12580 1257 D6030000 		.4byte	0x3d6
 12581 125b 02       		.uleb128 0x2
 12582 125c 91       		.byte	0x91
 12583 125d 6F       		.sleb128 -17
 12584 125e 19       		.uleb128 0x19
 12585 125f 667300   		.ascii	"fs\000"
 12586 1262 01       		.byte	0x1
 12587 1263 800D     		.2byte	0xd80
 12588 1265 F2010000 		.4byte	0x1f2
 12589 1269 02       		.uleb128 0x2
 12590 126a 91       		.byte	0x91
 12591 126b 4C       		.sleb128 -52
 12592 126c 1E       		.uleb128 0x1e
 12593 126d 51020000 		.4byte	.LASF92
 12594 1271 01       		.byte	0x1
 12595 1272 810D     		.2byte	0xd81
 12596 1274 70000000 		.4byte	0x70
 12597 1278 02       		.uleb128 0x2
 12598 1279 91       		.byte	0x91
 12599 127a 68       		.sleb128 -24
 12600 127b 1E       		.uleb128 0x1e
 12601 127c 83000000 		.4byte	.LASF38
 12602 1280 01       		.byte	0x1
 12603 1281 810D     		.2byte	0xd81
 12604 1283 70000000 		.4byte	0x70
 12605 1287 02       		.uleb128 0x2
 12606 1288 91       		.byte	0x91
 12607 1289 50       		.sleb128 -48
 12608 128a 1E       		.uleb128 0x1e
 12609 128b 25050000 		.4byte	.LASF129
 12610 128f 01       		.byte	0x1
 12611 1290 820D     		.2byte	0xd82
 12612 1292 94000000 		.4byte	0x94
 12613 1296 02       		.uleb128 0x2
 12614 1297 91       		.byte	0x91
 12615 1298 58       		.sleb128 -40
 12616 1299 1E       		.uleb128 0x1e
 12617 129a 63050000 		.4byte	.LASF130
 12618 129e 01       		.byte	0x1
 12619 129f 830D     		.2byte	0xd83
 12620 12a1 57000000 		.4byte	0x57
 12621 12a5 02       		.uleb128 0x2
 12622 12a6 91       		.byte	0x91
 12623 12a7 64       		.sleb128 -28
 12624 12a8 19       		.uleb128 0x19
 12625 12a9 636300   		.ascii	"cc\000"
 12626 12ac 01       		.byte	0x1
 12627 12ad 830D     		.2byte	0xd83
 12628 12af 57000000 		.4byte	0x57
 12629 12b3 02       		.uleb128 0x2
 12630 12b4 91       		.byte	0x91
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 329


 12631 12b5 60       		.sleb128 -32
 12632 12b6 1E       		.uleb128 0x1e
 12633 12b7 31000000 		.4byte	.LASF131
 12634 12bb 01       		.byte	0x1
 12635 12bc 830D     		.2byte	0xd83
 12636 12be 57000000 		.4byte	0x57
 12637 12c2 02       		.uleb128 0x2
 12638 12c3 91       		.byte	0x91
 12639 12c4 54       		.sleb128 -44
 12640 12c5 1E       		.uleb128 0x1e
 12641 12c6 74000000 		.4byte	.LASF132
 12642 12ca 01       		.byte	0x1
 12643 12cb 840D     		.2byte	0xd84
 12644 12cd 79020000 		.4byte	0x279
 12645 12d1 02       		.uleb128 0x2
 12646 12d2 91       		.byte	0x91
 12647 12d3 5C       		.sleb128 -36
 12648 12d4 00       		.byte	0
 12649 12d5 0B       		.uleb128 0xb
 12650 12d6 04       		.byte	0x4
 12651 12d7 57000000 		.4byte	0x57
 12652 12db 22       		.uleb128 0x22
 12653 12dc 5F010000 		.4byte	.LASF133
 12654 12e0 01       		.byte	0x1
 12655 12e1 E00D     		.2byte	0xde0
 12656 12e3 D6030000 		.4byte	0x3d6
 12657 12e7 00000000 		.4byte	.LFB35
 12658 12eb EC020000 		.4byte	.LFE35-.LFB35
 12659 12ef 01       		.uleb128 0x1
 12660 12f0 9C       		.byte	0x9c
 12661 12f1 A6130000 		.4byte	0x13a6
 12662 12f5 18       		.uleb128 0x18
 12663 12f6 667000   		.ascii	"fp\000"
 12664 12f9 01       		.byte	0x1
 12665 12fa E10D     		.2byte	0xde1
 12666 12fc 7F040000 		.4byte	0x47f
 12667 1300 02       		.uleb128 0x2
 12668 1301 91       		.byte	0x91
 12669 1302 4C       		.sleb128 -52
 12670 1303 1F       		.uleb128 0x1f
 12671 1304 16010000 		.4byte	.LASF128
 12672 1308 01       		.byte	0x1
 12673 1309 E20D     		.2byte	0xde2
 12674 130b E4050000 		.4byte	0x5e4
 12675 130f 02       		.uleb128 0x2
 12676 1310 91       		.byte	0x91
 12677 1311 48       		.sleb128 -56
 12678 1312 18       		.uleb128 0x18
 12679 1313 62747700 		.ascii	"btw\000"
 12680 1317 01       		.byte	0x1
 12681 1318 E30D     		.2byte	0xde3
 12682 131a 57000000 		.4byte	0x57
 12683 131e 02       		.uleb128 0x2
 12684 131f 91       		.byte	0x91
 12685 1320 44       		.sleb128 -60
 12686 1321 18       		.uleb128 0x18
 12687 1322 627700   		.ascii	"bw\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 330


 12688 1325 01       		.byte	0x1
 12689 1326 E40D     		.2byte	0xde4
 12690 1328 D5120000 		.4byte	0x12d5
 12691 132c 02       		.uleb128 0x2
 12692 132d 91       		.byte	0x91
 12693 132e 40       		.sleb128 -64
 12694 132f 19       		.uleb128 0x19
 12695 1330 72657300 		.ascii	"res\000"
 12696 1334 01       		.byte	0x1
 12697 1335 E70D     		.2byte	0xde7
 12698 1337 D6030000 		.4byte	0x3d6
 12699 133b 02       		.uleb128 0x2
 12700 133c 91       		.byte	0x91
 12701 133d 6F       		.sleb128 -17
 12702 133e 19       		.uleb128 0x19
 12703 133f 667300   		.ascii	"fs\000"
 12704 1342 01       		.byte	0x1
 12705 1343 E80D     		.2byte	0xde8
 12706 1345 F2010000 		.4byte	0x1f2
 12707 1349 02       		.uleb128 0x2
 12708 134a 91       		.byte	0x91
 12709 134b 50       		.sleb128 -48
 12710 134c 1E       		.uleb128 0x1e
 12711 134d 51020000 		.4byte	.LASF92
 12712 1351 01       		.byte	0x1
 12713 1352 E90D     		.2byte	0xde9
 12714 1354 70000000 		.4byte	0x70
 12715 1358 02       		.uleb128 0x2
 12716 1359 91       		.byte	0x91
 12717 135a 68       		.sleb128 -24
 12718 135b 1E       		.uleb128 0x1e
 12719 135c 83000000 		.4byte	.LASF38
 12720 1360 01       		.byte	0x1
 12721 1361 E90D     		.2byte	0xde9
 12722 1363 70000000 		.4byte	0x70
 12723 1367 02       		.uleb128 0x2
 12724 1368 91       		.byte	0x91
 12725 1369 54       		.sleb128 -44
 12726 136a 1E       		.uleb128 0x1e
 12727 136b E0020000 		.4byte	.LASF134
 12728 136f 01       		.byte	0x1
 12729 1370 EA0D     		.2byte	0xdea
 12730 1372 57000000 		.4byte	0x57
 12731 1376 02       		.uleb128 0x2
 12732 1377 91       		.byte	0x91
 12733 1378 64       		.sleb128 -28
 12734 1379 19       		.uleb128 0x19
 12735 137a 636300   		.ascii	"cc\000"
 12736 137d 01       		.byte	0x1
 12737 137e EA0D     		.2byte	0xdea
 12738 1380 57000000 		.4byte	0x57
 12739 1384 02       		.uleb128 0x2
 12740 1385 91       		.byte	0x91
 12741 1386 60       		.sleb128 -32
 12742 1387 1E       		.uleb128 0x1e
 12743 1388 31000000 		.4byte	.LASF131
 12744 138c 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 331


 12745 138d EA0D     		.2byte	0xdea
 12746 138f 57000000 		.4byte	0x57
 12747 1393 02       		.uleb128 0x2
 12748 1394 91       		.byte	0x91
 12749 1395 58       		.sleb128 -40
 12750 1396 1E       		.uleb128 0x1e
 12751 1397 DA030000 		.4byte	.LASF135
 12752 139b 01       		.byte	0x1
 12753 139c EB0D     		.2byte	0xdeb
 12754 139e D9040000 		.4byte	0x4d9
 12755 13a2 02       		.uleb128 0x2
 12756 13a3 91       		.byte	0x91
 12757 13a4 5C       		.sleb128 -36
 12758 13a5 00       		.byte	0
 12759 13a6 22       		.uleb128 0x22
 12760 13a7 EA030000 		.4byte	.LASF136
 12761 13ab 01       		.byte	0x1
 12762 13ac 5D0E     		.2byte	0xe5d
 12763 13ae D6030000 		.4byte	0x3d6
 12764 13b2 00000000 		.4byte	.LFB36
 12765 13b6 20010000 		.4byte	.LFE36-.LFB36
 12766 13ba 01       		.uleb128 0x1
 12767 13bb 9C       		.byte	0x9c
 12768 13bc 09140000 		.4byte	0x1409
 12769 13c0 18       		.uleb128 0x18
 12770 13c1 667000   		.ascii	"fp\000"
 12771 13c4 01       		.byte	0x1
 12772 13c5 5E0E     		.2byte	0xe5e
 12773 13c7 7F040000 		.4byte	0x47f
 12774 13cb 02       		.uleb128 0x2
 12775 13cc 91       		.byte	0x91
 12776 13cd 5C       		.sleb128 -36
 12777 13ce 19       		.uleb128 0x19
 12778 13cf 72657300 		.ascii	"res\000"
 12779 13d3 01       		.byte	0x1
 12780 13d4 610E     		.2byte	0xe61
 12781 13d6 D6030000 		.4byte	0x3d6
 12782 13da 02       		.uleb128 0x2
 12783 13db 91       		.byte	0x91
 12784 13dc 6F       		.sleb128 -17
 12785 13dd 19       		.uleb128 0x19
 12786 13de 667300   		.ascii	"fs\000"
 12787 13e1 01       		.byte	0x1
 12788 13e2 620E     		.2byte	0xe62
 12789 13e4 F2010000 		.4byte	0x1f2
 12790 13e8 02       		.uleb128 0x2
 12791 13e9 91       		.byte	0x91
 12792 13ea 60       		.sleb128 -32
 12793 13eb 19       		.uleb128 0x19
 12794 13ec 746D00   		.ascii	"tm\000"
 12795 13ef 01       		.byte	0x1
 12796 13f0 630E     		.2byte	0xe63
 12797 13f2 70000000 		.4byte	0x70
 12798 13f6 02       		.uleb128 0x2
 12799 13f7 91       		.byte	0x91
 12800 13f8 68       		.sleb128 -24
 12801 13f9 19       		.uleb128 0x19
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 332


 12802 13fa 64697200 		.ascii	"dir\000"
 12803 13fe 01       		.byte	0x1
 12804 13ff 640E     		.2byte	0xe64
 12805 1401 79020000 		.4byte	0x279
 12806 1405 02       		.uleb128 0x2
 12807 1406 91       		.byte	0x91
 12808 1407 64       		.sleb128 -28
 12809 1408 00       		.byte	0
 12810 1409 22       		.uleb128 0x22
 12811 140a 0C020000 		.4byte	.LASF137
 12812 140e 01       		.byte	0x1
 12813 140f AB0E     		.2byte	0xeab
 12814 1411 D6030000 		.4byte	0x3d6
 12815 1415 00000000 		.4byte	.LFB37
 12816 1419 56000000 		.4byte	.LFE37-.LFB37
 12817 141d 01       		.uleb128 0x1
 12818 141e 9C       		.byte	0x9c
 12819 141f 4F140000 		.4byte	0x144f
 12820 1423 18       		.uleb128 0x18
 12821 1424 667000   		.ascii	"fp\000"
 12822 1427 01       		.byte	0x1
 12823 1428 AC0E     		.2byte	0xeac
 12824 142a 7F040000 		.4byte	0x47f
 12825 142e 02       		.uleb128 0x2
 12826 142f 91       		.byte	0x91
 12827 1430 64       		.sleb128 -28
 12828 1431 19       		.uleb128 0x19
 12829 1432 72657300 		.ascii	"res\000"
 12830 1436 01       		.byte	0x1
 12831 1437 AF0E     		.2byte	0xeaf
 12832 1439 D6030000 		.4byte	0x3d6
 12833 143d 02       		.uleb128 0x2
 12834 143e 91       		.byte	0x91
 12835 143f 6F       		.sleb128 -17
 12836 1440 19       		.uleb128 0x19
 12837 1441 667300   		.ascii	"fs\000"
 12838 1444 01       		.byte	0x1
 12839 1445 B00E     		.2byte	0xeb0
 12840 1447 F2010000 		.4byte	0x1f2
 12841 144b 02       		.uleb128 0x2
 12842 144c 91       		.byte	0x91
 12843 144d 68       		.sleb128 -24
 12844 144e 00       		.byte	0
 12845 144f 22       		.uleb128 0x22
 12846 1450 BB030000 		.4byte	.LASF138
 12847 1454 01       		.byte	0x1
 12848 1455 660F     		.2byte	0xf66
 12849 1457 D6030000 		.4byte	0x3d6
 12850 145b 00000000 		.4byte	.LFB38
 12851 145f 8C020000 		.4byte	.LFE38-.LFB38
 12852 1463 01       		.uleb128 0x1
 12853 1464 9C       		.byte	0x9c
 12854 1465 E0140000 		.4byte	0x14e0
 12855 1469 18       		.uleb128 0x18
 12856 146a 667000   		.ascii	"fp\000"
 12857 146d 01       		.byte	0x1
 12858 146e 670F     		.2byte	0xf67
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 333


 12859 1470 7F040000 		.4byte	0x47f
 12860 1474 02       		.uleb128 0x2
 12861 1475 91       		.byte	0x91
 12862 1476 54       		.sleb128 -44
 12863 1477 18       		.uleb128 0x18
 12864 1478 6F667300 		.ascii	"ofs\000"
 12865 147c 01       		.byte	0x1
 12866 147d 680F     		.2byte	0xf68
 12867 147f 94000000 		.4byte	0x94
 12868 1483 02       		.uleb128 0x2
 12869 1484 91       		.byte	0x91
 12870 1485 50       		.sleb128 -48
 12871 1486 19       		.uleb128 0x19
 12872 1487 72657300 		.ascii	"res\000"
 12873 148b 01       		.byte	0x1
 12874 148c 6B0F     		.2byte	0xf6b
 12875 148e D6030000 		.4byte	0x3d6
 12876 1492 02       		.uleb128 0x2
 12877 1493 91       		.byte	0x91
 12878 1494 6F       		.sleb128 -17
 12879 1495 19       		.uleb128 0x19
 12880 1496 667300   		.ascii	"fs\000"
 12881 1499 01       		.byte	0x1
 12882 149a 6C0F     		.2byte	0xf6c
 12883 149c F2010000 		.4byte	0x1f2
 12884 14a0 02       		.uleb128 0x2
 12885 14a1 91       		.byte	0x91
 12886 14a2 58       		.sleb128 -40
 12887 14a3 1E       		.uleb128 0x1e
 12888 14a4 51020000 		.4byte	.LASF92
 12889 14a8 01       		.byte	0x1
 12890 14a9 6D0F     		.2byte	0xf6d
 12891 14ab 70000000 		.4byte	0x70
 12892 14af 02       		.uleb128 0x2
 12893 14b0 91       		.byte	0x91
 12894 14b1 68       		.sleb128 -24
 12895 14b2 19       		.uleb128 0x19
 12896 14b3 62637300 		.ascii	"bcs\000"
 12897 14b7 01       		.byte	0x1
 12898 14b8 6D0F     		.2byte	0xf6d
 12899 14ba 70000000 		.4byte	0x70
 12900 14be 02       		.uleb128 0x2
 12901 14bf 91       		.byte	0x91
 12902 14c0 5C       		.sleb128 -36
 12903 14c1 1E       		.uleb128 0x1e
 12904 14c2 6F050000 		.4byte	.LASF139
 12905 14c6 01       		.byte	0x1
 12906 14c7 6D0F     		.2byte	0xf6d
 12907 14c9 70000000 		.4byte	0x70
 12908 14cd 02       		.uleb128 0x2
 12909 14ce 91       		.byte	0x91
 12910 14cf 64       		.sleb128 -28
 12911 14d0 1E       		.uleb128 0x1e
 12912 14d1 AA020000 		.4byte	.LASF140
 12913 14d5 01       		.byte	0x1
 12914 14d6 6E0F     		.2byte	0xf6e
 12915 14d8 94000000 		.4byte	0x94
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 334


 12916 14dc 02       		.uleb128 0x2
 12917 14dd 91       		.byte	0x91
 12918 14de 60       		.sleb128 -32
 12919 14df 00       		.byte	0
 12920 14e0 22       		.uleb128 0x22
 12921 14e1 E5040000 		.4byte	.LASF141
 12922 14e5 01       		.byte	0x1
 12923 14e6 FE0F     		.2byte	0xffe
 12924 14e8 D6030000 		.4byte	0x3d6
 12925 14ec 00000000 		.4byte	.LFB39
 12926 14f0 EA000000 		.4byte	.LFE39-.LFB39
 12927 14f4 01       		.uleb128 0x1
 12928 14f5 9C       		.byte	0x9c
 12929 14f6 44150000 		.4byte	0x1544
 12930 14fa 18       		.uleb128 0x18
 12931 14fb 647000   		.ascii	"dp\000"
 12932 14fe 01       		.byte	0x1
 12933 14ff FF0F     		.2byte	0xfff
 12934 1501 3E0A0000 		.4byte	0xa3e
 12935 1505 02       		.uleb128 0x2
 12936 1506 91       		.byte	0x91
 12937 1507 5C       		.sleb128 -36
 12938 1508 1F       		.uleb128 0x1f
 12939 1509 62000000 		.4byte	.LASF111
 12940 150d 01       		.byte	0x1
 12941 150e 0010     		.2byte	0x1000
 12942 1510 F60D0000 		.4byte	0xdf6
 12943 1514 02       		.uleb128 0x2
 12944 1515 91       		.byte	0x91
 12945 1516 58       		.sleb128 -40
 12946 1517 19       		.uleb128 0x19
 12947 1518 72657300 		.ascii	"res\000"
 12948 151c 01       		.byte	0x1
 12949 151d 0310     		.2byte	0x1003
 12950 151f D6030000 		.4byte	0x3d6
 12951 1523 02       		.uleb128 0x2
 12952 1524 91       		.byte	0x91
 12953 1525 6F       		.sleb128 -17
 12954 1526 19       		.uleb128 0x19
 12955 1527 667300   		.ascii	"fs\000"
 12956 152a 01       		.byte	0x1
 12957 152b 0410     		.2byte	0x1004
 12958 152d F2010000 		.4byte	0x1f2
 12959 1531 02       		.uleb128 0x2
 12960 1532 91       		.byte	0x91
 12961 1533 64       		.sleb128 -28
 12962 1534 19       		.uleb128 0x19
 12963 1535 6F626A00 		.ascii	"obj\000"
 12964 1539 01       		.byte	0x1
 12965 153a 0510     		.2byte	0x1005
 12966 153c 6D080000 		.4byte	0x86d
 12967 1540 02       		.uleb128 0x2
 12968 1541 91       		.byte	0x91
 12969 1542 68       		.sleb128 -24
 12970 1543 00       		.byte	0
 12971 1544 22       		.uleb128 0x22
 12972 1545 35060000 		.4byte	.LASF142
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 335


 12973 1549 01       		.byte	0x1
 12974 154a 4410     		.2byte	0x1044
 12975 154c D6030000 		.4byte	0x3d6
 12976 1550 00000000 		.4byte	.LFB40
 12977 1554 3C000000 		.4byte	.LFE40-.LFB40
 12978 1558 01       		.uleb128 0x1
 12979 1559 9C       		.byte	0x9c
 12980 155a 8A150000 		.4byte	0x158a
 12981 155e 18       		.uleb128 0x18
 12982 155f 647000   		.ascii	"dp\000"
 12983 1562 01       		.byte	0x1
 12984 1563 4510     		.2byte	0x1045
 12985 1565 3E0A0000 		.4byte	0xa3e
 12986 1569 02       		.uleb128 0x2
 12987 156a 91       		.byte	0x91
 12988 156b 64       		.sleb128 -28
 12989 156c 19       		.uleb128 0x19
 12990 156d 72657300 		.ascii	"res\000"
 12991 1571 01       		.byte	0x1
 12992 1572 4810     		.2byte	0x1048
 12993 1574 D6030000 		.4byte	0x3d6
 12994 1578 02       		.uleb128 0x2
 12995 1579 91       		.byte	0x91
 12996 157a 6F       		.sleb128 -17
 12997 157b 19       		.uleb128 0x19
 12998 157c 667300   		.ascii	"fs\000"
 12999 157f 01       		.byte	0x1
 13000 1580 4910     		.2byte	0x1049
 13001 1582 F2010000 		.4byte	0x1f2
 13002 1586 02       		.uleb128 0x2
 13003 1587 91       		.byte	0x91
 13004 1588 68       		.sleb128 -24
 13005 1589 00       		.byte	0
 13006 158a 22       		.uleb128 0x22
 13007 158b 47040000 		.4byte	.LASF143
 13008 158f 01       		.byte	0x1
 13009 1590 6510     		.2byte	0x1065
 13010 1592 D6030000 		.4byte	0x3d6
 13011 1596 00000000 		.4byte	.LFB41
 13012 159a B0000000 		.4byte	.LFE41-.LFB41
 13013 159e 01       		.uleb128 0x1
 13014 159f 9C       		.byte	0x9c
 13015 15a0 DF150000 		.4byte	0x15df
 13016 15a4 18       		.uleb128 0x18
 13017 15a5 647000   		.ascii	"dp\000"
 13018 15a8 01       		.byte	0x1
 13019 15a9 6610     		.2byte	0x1066
 13020 15ab 3E0A0000 		.4byte	0xa3e
 13021 15af 02       		.uleb128 0x2
 13022 15b0 91       		.byte	0x91
 13023 15b1 64       		.sleb128 -28
 13024 15b2 18       		.uleb128 0x18
 13025 15b3 666E6F00 		.ascii	"fno\000"
 13026 15b7 01       		.byte	0x1
 13027 15b8 6710     		.2byte	0x1067
 13028 15ba 560D0000 		.4byte	0xd56
 13029 15be 02       		.uleb128 0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 336


 13030 15bf 91       		.byte	0x91
 13031 15c0 60       		.sleb128 -32
 13032 15c1 19       		.uleb128 0x19
 13033 15c2 72657300 		.ascii	"res\000"
 13034 15c6 01       		.byte	0x1
 13035 15c7 6A10     		.2byte	0x106a
 13036 15c9 D6030000 		.4byte	0x3d6
 13037 15cd 02       		.uleb128 0x2
 13038 15ce 91       		.byte	0x91
 13039 15cf 6F       		.sleb128 -17
 13040 15d0 19       		.uleb128 0x19
 13041 15d1 667300   		.ascii	"fs\000"
 13042 15d4 01       		.byte	0x1
 13043 15d5 6B10     		.2byte	0x106b
 13044 15d7 F2010000 		.4byte	0x1f2
 13045 15db 02       		.uleb128 0x2
 13046 15dc 91       		.byte	0x91
 13047 15dd 68       		.sleb128 -24
 13048 15de 00       		.byte	0
 13049 15df 22       		.uleb128 0x22
 13050 15e0 79010000 		.4byte	.LASF144
 13051 15e4 01       		.byte	0x1
 13052 15e5 BD10     		.2byte	0x10bd
 13053 15e7 D6030000 		.4byte	0x3d6
 13054 15eb 00000000 		.4byte	.LFB42
 13055 15ef 88000000 		.4byte	.LFE42-.LFB42
 13056 15f3 01       		.uleb128 0x1
 13057 15f4 9C       		.byte	0x9c
 13058 15f5 37160000 		.4byte	0x1637
 13059 15f9 1F       		.uleb128 0x1f
 13060 15fa 62000000 		.4byte	.LASF111
 13061 15fe 01       		.byte	0x1
 13062 15ff BE10     		.2byte	0x10be
 13063 1601 F60D0000 		.4byte	0xdf6
 13064 1605 03       		.uleb128 0x3
 13065 1606 91       		.byte	0x91
 13066 1607 BC7F     		.sleb128 -68
 13067 1609 18       		.uleb128 0x18
 13068 160a 666E6F00 		.ascii	"fno\000"
 13069 160e 01       		.byte	0x1
 13070 160f BF10     		.2byte	0x10bf
 13071 1611 560D0000 		.4byte	0xd56
 13072 1615 03       		.uleb128 0x3
 13073 1616 91       		.byte	0x91
 13074 1617 B87F     		.sleb128 -72
 13075 1619 19       		.uleb128 0x19
 13076 161a 72657300 		.ascii	"res\000"
 13077 161e 01       		.byte	0x1
 13078 161f C210     		.2byte	0x10c2
 13079 1621 D6030000 		.4byte	0x3d6
 13080 1625 02       		.uleb128 0x2
 13081 1626 91       		.byte	0x91
 13082 1627 6F       		.sleb128 -17
 13083 1628 19       		.uleb128 0x19
 13084 1629 646A00   		.ascii	"dj\000"
 13085 162c 01       		.byte	0x1
 13086 162d C310     		.2byte	0x10c3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 337


 13087 162f EA020000 		.4byte	0x2ea
 13088 1633 02       		.uleb128 0x2
 13089 1634 91       		.byte	0x91
 13090 1635 40       		.sleb128 -64
 13091 1636 00       		.byte	0
 13092 1637 22       		.uleb128 0x22
 13093 1638 79030000 		.4byte	.LASF145
 13094 163c 01       		.byte	0x1
 13095 163d E010     		.2byte	0x10e0
 13096 163f D6030000 		.4byte	0x3d6
 13097 1643 00000000 		.4byte	.LFB43
 13098 1647 82010000 		.4byte	.LFE43-.LFB43
 13099 164b 01       		.uleb128 0x1
 13100 164c 9C       		.byte	0x9c
 13101 164d 04170000 		.4byte	0x1704
 13102 1651 1F       		.uleb128 0x1f
 13103 1652 62000000 		.4byte	.LASF111
 13104 1656 01       		.byte	0x1
 13105 1657 E110     		.2byte	0x10e1
 13106 1659 F60D0000 		.4byte	0xdf6
 13107 165d 03       		.uleb128 0x3
 13108 165e 91       		.byte	0x91
 13109 165f BC7F     		.sleb128 -68
 13110 1661 1F       		.uleb128 0x1f
 13111 1662 13030000 		.4byte	.LASF121
 13112 1666 01       		.byte	0x1
 13113 1667 E210     		.2byte	0x10e2
 13114 1669 F3110000 		.4byte	0x11f3
 13115 166d 03       		.uleb128 0x3
 13116 166e 91       		.byte	0x91
 13117 166f B87F     		.sleb128 -72
 13118 1671 1F       		.uleb128 0x1f
 13119 1672 42030000 		.4byte	.LASF146
 13120 1676 01       		.byte	0x1
 13121 1677 E310     		.2byte	0x10e3
 13122 1679 27100000 		.4byte	0x1027
 13123 167d 03       		.uleb128 0x3
 13124 167e 91       		.byte	0x91
 13125 167f B47F     		.sleb128 -76
 13126 1681 19       		.uleb128 0x19
 13127 1682 72657300 		.ascii	"res\000"
 13128 1686 01       		.byte	0x1
 13129 1687 E610     		.2byte	0x10e6
 13130 1689 D6030000 		.4byte	0x3d6
 13131 168d 02       		.uleb128 0x2
 13132 168e 91       		.byte	0x91
 13133 168f 6F       		.sleb128 -17
 13134 1690 19       		.uleb128 0x19
 13135 1691 667300   		.ascii	"fs\000"
 13136 1694 01       		.byte	0x1
 13137 1695 E710     		.2byte	0x10e7
 13138 1697 F2010000 		.4byte	0x1f2
 13139 169b 02       		.uleb128 0x2
 13140 169c 91       		.byte	0x91
 13141 169d 50       		.sleb128 -48
 13142 169e 1E       		.uleb128 0x1e
 13143 169f B7000000 		.4byte	.LASF147
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 338


 13144 16a3 01       		.byte	0x1
 13145 16a4 E810     		.2byte	0x10e8
 13146 16a6 70000000 		.4byte	0x70
 13147 16aa 02       		.uleb128 0x2
 13148 16ab 91       		.byte	0x91
 13149 16ac 68       		.sleb128 -24
 13150 16ad 1E       		.uleb128 0x1e
 13151 16ae 51020000 		.4byte	.LASF92
 13152 16b2 01       		.byte	0x1
 13153 16b3 E810     		.2byte	0x10e8
 13154 16b5 70000000 		.4byte	0x70
 13155 16b9 02       		.uleb128 0x2
 13156 16ba 91       		.byte	0x91
 13157 16bb 64       		.sleb128 -28
 13158 16bc 1E       		.uleb128 0x1e
 13159 16bd 83000000 		.4byte	.LASF38
 13160 16c1 01       		.byte	0x1
 13161 16c2 E810     		.2byte	0x10e8
 13162 16c4 70000000 		.4byte	0x70
 13163 16c8 02       		.uleb128 0x2
 13164 16c9 91       		.byte	0x91
 13165 16ca 60       		.sleb128 -32
 13166 16cb 1E       		.uleb128 0x1e
 13167 16cc 75050000 		.4byte	.LASF31
 13168 16d0 01       		.byte	0x1
 13169 16d1 E810     		.2byte	0x10e8
 13170 16d3 70000000 		.4byte	0x70
 13171 16d7 02       		.uleb128 0x2
 13172 16d8 91       		.byte	0x91
 13173 16d9 54       		.sleb128 -44
 13174 16da 19       		.uleb128 0x19
 13175 16db 6900     		.ascii	"i\000"
 13176 16dd 01       		.byte	0x1
 13177 16de E910     		.2byte	0x10e9
 13178 16e0 57000000 		.4byte	0x57
 13179 16e4 02       		.uleb128 0x2
 13180 16e5 91       		.byte	0x91
 13181 16e6 5C       		.sleb128 -36
 13182 16e7 19       		.uleb128 0x19
 13183 16e8 7000     		.ascii	"p\000"
 13184 16ea 01       		.byte	0x1
 13185 16eb EA10     		.2byte	0x10ea
 13186 16ed 79020000 		.4byte	0x279
 13187 16f1 02       		.uleb128 0x2
 13188 16f2 91       		.byte	0x91
 13189 16f3 58       		.sleb128 -40
 13190 16f4 19       		.uleb128 0x19
 13191 16f5 6F626A00 		.ascii	"obj\000"
 13192 16f9 01       		.byte	0x1
 13193 16fa EB10     		.2byte	0x10eb
 13194 16fc F8010000 		.4byte	0x1f8
 13195 1700 02       		.uleb128 0x2
 13196 1701 91       		.byte	0x91
 13197 1702 40       		.sleb128 -64
 13198 1703 00       		.byte	0
 13199 1704 22       		.uleb128 0x22
 13200 1705 58050000 		.4byte	.LASF148
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 339


 13201 1709 01       		.byte	0x1
 13202 170a 3711     		.2byte	0x1137
 13203 170c D6030000 		.4byte	0x3d6
 13204 1710 00000000 		.4byte	.LFB44
 13205 1714 7A010000 		.4byte	.LFE44-.LFB44
 13206 1718 01       		.uleb128 0x1
 13207 1719 9C       		.byte	0x9c
 13208 171a 59170000 		.4byte	0x1759
 13209 171e 18       		.uleb128 0x18
 13210 171f 667000   		.ascii	"fp\000"
 13211 1722 01       		.byte	0x1
 13212 1723 3811     		.2byte	0x1138
 13213 1725 7F040000 		.4byte	0x47f
 13214 1729 02       		.uleb128 0x2
 13215 172a 91       		.byte	0x91
 13216 172b 5C       		.sleb128 -36
 13217 172c 19       		.uleb128 0x19
 13218 172d 72657300 		.ascii	"res\000"
 13219 1731 01       		.byte	0x1
 13220 1732 3B11     		.2byte	0x113b
 13221 1734 D6030000 		.4byte	0x3d6
 13222 1738 02       		.uleb128 0x2
 13223 1739 91       		.byte	0x91
 13224 173a 6F       		.sleb128 -17
 13225 173b 19       		.uleb128 0x19
 13226 173c 667300   		.ascii	"fs\000"
 13227 173f 01       		.byte	0x1
 13228 1740 3C11     		.2byte	0x113c
 13229 1742 F2010000 		.4byte	0x1f2
 13230 1746 02       		.uleb128 0x2
 13231 1747 91       		.byte	0x91
 13232 1748 64       		.sleb128 -28
 13233 1749 19       		.uleb128 0x19
 13234 174a 6E636C00 		.ascii	"ncl\000"
 13235 174e 01       		.byte	0x1
 13236 174f 3D11     		.2byte	0x113d
 13237 1751 70000000 		.4byte	0x70
 13238 1755 02       		.uleb128 0x2
 13239 1756 91       		.byte	0x91
 13240 1757 68       		.sleb128 -24
 13241 1758 00       		.byte	0
 13242 1759 22       		.uleb128 0x22
 13243 175a D1030000 		.4byte	.LASF149
 13244 175e 01       		.byte	0x1
 13245 175f 6911     		.2byte	0x1169
 13246 1761 D6030000 		.4byte	0x3d6
 13247 1765 00000000 		.4byte	.LFB45
 13248 1769 88010000 		.4byte	.LFE45-.LFB45
 13249 176d 01       		.uleb128 0x1
 13250 176e 9C       		.byte	0x9c
 13251 176f D0170000 		.4byte	0x17d0
 13252 1773 1F       		.uleb128 0x1f
 13253 1774 62000000 		.4byte	.LASF111
 13254 1778 01       		.byte	0x1
 13255 1779 6A11     		.2byte	0x116a
 13256 177b F60D0000 		.4byte	0xdf6
 13257 177f 03       		.uleb128 0x3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 340


 13258 1780 91       		.byte	0x91
 13259 1781 847F     		.sleb128 -124
 13260 1783 19       		.uleb128 0x19
 13261 1784 72657300 		.ascii	"res\000"
 13262 1788 01       		.byte	0x1
 13263 1789 6D11     		.2byte	0x116d
 13264 178b D6030000 		.4byte	0x3d6
 13265 178f 02       		.uleb128 0x2
 13266 1790 91       		.byte	0x91
 13267 1791 6F       		.sleb128 -17
 13268 1792 19       		.uleb128 0x19
 13269 1793 646A00   		.ascii	"dj\000"
 13270 1796 01       		.byte	0x1
 13271 1797 6E11     		.2byte	0x116e
 13272 1799 EA020000 		.4byte	0x2ea
 13273 179d 03       		.uleb128 0x3
 13274 179e 91       		.byte	0x91
 13275 179f BC7F     		.sleb128 -68
 13276 17a1 19       		.uleb128 0x19
 13277 17a2 73646A00 		.ascii	"sdj\000"
 13278 17a6 01       		.byte	0x1
 13279 17a7 6E11     		.2byte	0x116e
 13280 17a9 EA020000 		.4byte	0x2ea
 13281 17ad 03       		.uleb128 0x3
 13282 17ae 91       		.byte	0x91
 13283 17af 907F     		.sleb128 -112
 13284 17b1 1E       		.uleb128 0x1e
 13285 17b2 A0030000 		.4byte	.LASF150
 13286 17b6 01       		.byte	0x1
 13287 17b7 6F11     		.2byte	0x116f
 13288 17b9 70000000 		.4byte	0x70
 13289 17bd 02       		.uleb128 0x2
 13290 17be 91       		.byte	0x91
 13291 17bf 68       		.sleb128 -24
 13292 17c0 19       		.uleb128 0x19
 13293 17c1 667300   		.ascii	"fs\000"
 13294 17c4 01       		.byte	0x1
 13295 17c5 7011     		.2byte	0x1170
 13296 17c7 F2010000 		.4byte	0x1f2
 13297 17cb 03       		.uleb128 0x3
 13298 17cc 91       		.byte	0x91
 13299 17cd 8C7F     		.sleb128 -116
 13300 17cf 00       		.byte	0
 13301 17d0 22       		.uleb128 0x22
 13302 17d1 D2020000 		.4byte	.LASF151
 13303 17d5 01       		.byte	0x1
 13304 17d6 C811     		.2byte	0x11c8
 13305 17d8 D6030000 		.4byte	0x3d6
 13306 17dc 00000000 		.4byte	.LFB46
 13307 17e0 72020000 		.4byte	.LFE46-.LFB46
 13308 17e4 01       		.uleb128 0x1
 13309 17e5 9C       		.byte	0x9c
 13310 17e6 7F180000 		.4byte	0x187f
 13311 17ea 1F       		.uleb128 0x1f
 13312 17eb 62000000 		.4byte	.LASF111
 13313 17ef 01       		.byte	0x1
 13314 17f0 C911     		.2byte	0x11c9
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 341


 13315 17f2 F60D0000 		.4byte	0xdf6
 13316 17f6 03       		.uleb128 0x3
 13317 17f7 91       		.byte	0x91
 13318 17f8 9C7F     		.sleb128 -100
 13319 17fa 19       		.uleb128 0x19
 13320 17fb 72657300 		.ascii	"res\000"
 13321 17ff 01       		.byte	0x1
 13322 1800 CC11     		.2byte	0x11cc
 13323 1802 D6030000 		.4byte	0x3d6
 13324 1806 02       		.uleb128 0x2
 13325 1807 91       		.byte	0x91
 13326 1808 6F       		.sleb128 -17
 13327 1809 19       		.uleb128 0x19
 13328 180a 646A00   		.ascii	"dj\000"
 13329 180d 01       		.byte	0x1
 13330 180e CD11     		.2byte	0x11cd
 13331 1810 EA020000 		.4byte	0x2ea
 13332 1814 03       		.uleb128 0x3
 13333 1815 91       		.byte	0x91
 13334 1816 A87F     		.sleb128 -88
 13335 1818 19       		.uleb128 0x19
 13336 1819 667300   		.ascii	"fs\000"
 13337 181c 01       		.byte	0x1
 13338 181d CE11     		.2byte	0x11ce
 13339 181f F2010000 		.4byte	0x1f2
 13340 1823 03       		.uleb128 0x3
 13341 1824 91       		.byte	0x91
 13342 1825 A47F     		.sleb128 -92
 13343 1827 19       		.uleb128 0x19
 13344 1828 64697200 		.ascii	"dir\000"
 13345 182c 01       		.byte	0x1
 13346 182d CF11     		.2byte	0x11cf
 13347 182f 79020000 		.4byte	0x279
 13348 1833 02       		.uleb128 0x2
 13349 1834 91       		.byte	0x91
 13350 1835 54       		.sleb128 -44
 13351 1836 19       		.uleb128 0x19
 13352 1837 6E00     		.ascii	"n\000"
 13353 1839 01       		.byte	0x1
 13354 183a D011     		.2byte	0x11d0
 13355 183c 57000000 		.4byte	0x57
 13356 1840 02       		.uleb128 0x2
 13357 1841 91       		.byte	0x91
 13358 1842 68       		.sleb128 -24
 13359 1843 19       		.uleb128 0x19
 13360 1844 64736300 		.ascii	"dsc\000"
 13361 1848 01       		.byte	0x1
 13362 1849 D111     		.2byte	0x11d1
 13363 184b 70000000 		.4byte	0x70
 13364 184f 02       		.uleb128 0x2
 13365 1850 91       		.byte	0x91
 13366 1851 64       		.sleb128 -28
 13367 1852 19       		.uleb128 0x19
 13368 1853 64636C00 		.ascii	"dcl\000"
 13369 1857 01       		.byte	0x1
 13370 1858 D111     		.2byte	0x11d1
 13371 185a 70000000 		.4byte	0x70
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 342


 13372 185e 02       		.uleb128 0x2
 13373 185f 91       		.byte	0x91
 13374 1860 5C       		.sleb128 -36
 13375 1861 19       		.uleb128 0x19
 13376 1862 70636C00 		.ascii	"pcl\000"
 13377 1866 01       		.byte	0x1
 13378 1867 D111     		.2byte	0x11d1
 13379 1869 70000000 		.4byte	0x70
 13380 186d 02       		.uleb128 0x2
 13381 186e 91       		.byte	0x91
 13382 186f 60       		.sleb128 -32
 13383 1870 19       		.uleb128 0x19
 13384 1871 746D00   		.ascii	"tm\000"
 13385 1874 01       		.byte	0x1
 13386 1875 D111     		.2byte	0x11d1
 13387 1877 70000000 		.4byte	0x70
 13388 187b 02       		.uleb128 0x2
 13389 187c 91       		.byte	0x91
 13390 187d 58       		.sleb128 -40
 13391 187e 00       		.byte	0
 13392 187f 22       		.uleb128 0x22
 13393 1880 48020000 		.4byte	.LASF152
 13394 1884 01       		.byte	0x1
 13395 1885 2512     		.2byte	0x1225
 13396 1887 D6030000 		.4byte	0x3d6
 13397 188b 00000000 		.4byte	.LFB47
 13398 188f 26020000 		.4byte	.LFE47-.LFB47
 13399 1893 01       		.uleb128 0x1
 13400 1894 9C       		.byte	0x9c
 13401 1895 25190000 		.4byte	0x1925
 13402 1899 1F       		.uleb128 0x1f
 13403 189a 3B050000 		.4byte	.LASF153
 13404 189e 01       		.byte	0x1
 13405 189f 2612     		.2byte	0x1226
 13406 18a1 F60D0000 		.4byte	0xdf6
 13407 18a5 03       		.uleb128 0x3
 13408 18a6 91       		.byte	0x91
 13409 18a7 EC7E     		.sleb128 -148
 13410 18a9 1F       		.uleb128 0x1f
 13411 18aa 68020000 		.4byte	.LASF154
 13412 18ae 01       		.byte	0x1
 13413 18af 2712     		.2byte	0x1227
 13414 18b1 F60D0000 		.4byte	0xdf6
 13415 18b5 03       		.uleb128 0x3
 13416 18b6 91       		.byte	0x91
 13417 18b7 E87E     		.sleb128 -152
 13418 18b9 19       		.uleb128 0x19
 13419 18ba 72657300 		.ascii	"res\000"
 13420 18be 01       		.byte	0x1
 13421 18bf 2A12     		.2byte	0x122a
 13422 18c1 D6030000 		.4byte	0x3d6
 13423 18c5 02       		.uleb128 0x2
 13424 18c6 91       		.byte	0x91
 13425 18c7 6F       		.sleb128 -17
 13426 18c8 19       		.uleb128 0x19
 13427 18c9 646A6F00 		.ascii	"djo\000"
 13428 18cd 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 343


 13429 18ce 2B12     		.2byte	0x122b
 13430 18d0 EA020000 		.4byte	0x2ea
 13431 18d4 03       		.uleb128 0x3
 13432 18d5 91       		.byte	0x91
 13433 18d6 B87F     		.sleb128 -72
 13434 18d8 19       		.uleb128 0x19
 13435 18d9 646A6E00 		.ascii	"djn\000"
 13436 18dd 01       		.byte	0x1
 13437 18de 2B12     		.2byte	0x122b
 13438 18e0 EA020000 		.4byte	0x2ea
 13439 18e4 03       		.uleb128 0x3
 13440 18e5 91       		.byte	0x91
 13441 18e6 8C7F     		.sleb128 -116
 13442 18e8 19       		.uleb128 0x19
 13443 18e9 667300   		.ascii	"fs\000"
 13444 18ec 01       		.byte	0x1
 13445 18ed 2C12     		.2byte	0x122c
 13446 18ef F2010000 		.4byte	0x1f2
 13447 18f3 03       		.uleb128 0x3
 13448 18f4 91       		.byte	0x91
 13449 18f5 887F     		.sleb128 -120
 13450 18f7 19       		.uleb128 0x19
 13451 18f8 62756600 		.ascii	"buf\000"
 13452 18fc 01       		.byte	0x1
 13453 18fd 2D12     		.2byte	0x122d
 13454 18ff 25190000 		.4byte	0x1925
 13455 1903 03       		.uleb128 0x3
 13456 1904 91       		.byte	0x91
 13457 1905 F07E     		.sleb128 -144
 13458 1907 19       		.uleb128 0x19
 13459 1908 64697200 		.ascii	"dir\000"
 13460 190c 01       		.byte	0x1
 13461 190d 2D12     		.2byte	0x122d
 13462 190f 79020000 		.4byte	0x279
 13463 1913 02       		.uleb128 0x2
 13464 1914 91       		.byte	0x91
 13465 1915 68       		.sleb128 -24
 13466 1916 19       		.uleb128 0x19
 13467 1917 647700   		.ascii	"dw\000"
 13468 191a 01       		.byte	0x1
 13469 191b 2E12     		.2byte	0x122e
 13470 191d 70000000 		.4byte	0x70
 13471 1921 02       		.uleb128 0x2
 13472 1922 91       		.byte	0x91
 13473 1923 64       		.sleb128 -28
 13474 1924 00       		.byte	0
 13475 1925 08       		.uleb128 0x8
 13476 1926 25000000 		.4byte	0x25
 13477 192a 35190000 		.4byte	0x1935
 13478 192e 0D       		.uleb128 0xd
 13479 192f 91010000 		.4byte	0x191
 13480 1933 17       		.byte	0x17
 13481 1934 00       		.byte	0
 13482 1935 22       		.uleb128 0x22
 13483 1936 BE040000 		.4byte	.LASF155
 13484 193a 01       		.byte	0x1
 13485 193b 6416     		.2byte	0x1664
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 344


 13486 193d BE190000 		.4byte	0x19be
 13487 1941 00000000 		.4byte	.LFB48
 13488 1945 8E000000 		.4byte	.LFE48-.LFB48
 13489 1949 01       		.uleb128 0x1
 13490 194a 9C       		.byte	0x9c
 13491 194b BE190000 		.4byte	0x19be
 13492 194f 1F       		.uleb128 0x1f
 13493 1950 16010000 		.4byte	.LASF128
 13494 1954 01       		.byte	0x1
 13495 1955 6516     		.2byte	0x1665
 13496 1957 BE190000 		.4byte	0x19be
 13497 195b 02       		.uleb128 0x2
 13498 195c 91       		.byte	0x91
 13499 195d 64       		.sleb128 -28
 13500 195e 18       		.uleb128 0x18
 13501 195f 6C656E00 		.ascii	"len\000"
 13502 1963 01       		.byte	0x1
 13503 1964 6616     		.2byte	0x1666
 13504 1966 50000000 		.4byte	0x50
 13505 196a 02       		.uleb128 0x2
 13506 196b 91       		.byte	0x91
 13507 196c 60       		.sleb128 -32
 13508 196d 18       		.uleb128 0x18
 13509 196e 667000   		.ascii	"fp\000"
 13510 1971 01       		.byte	0x1
 13511 1972 6716     		.2byte	0x1667
 13512 1974 7F040000 		.4byte	0x47f
 13513 1978 02       		.uleb128 0x2
 13514 1979 91       		.byte	0x91
 13515 197a 5C       		.sleb128 -36
 13516 197b 19       		.uleb128 0x19
 13517 197c 6E00     		.ascii	"n\000"
 13518 197e 01       		.byte	0x1
 13519 197f 6A16     		.2byte	0x166a
 13520 1981 50000000 		.4byte	0x50
 13521 1985 02       		.uleb128 0x2
 13522 1986 91       		.byte	0x91
 13523 1987 74       		.sleb128 -12
 13524 1988 19       		.uleb128 0x19
 13525 1989 6300     		.ascii	"c\000"
 13526 198b 01       		.byte	0x1
 13527 198c 6B16     		.2byte	0x166b
 13528 198e 82000000 		.4byte	0x82
 13529 1992 02       		.uleb128 0x2
 13530 1993 91       		.byte	0x91
 13531 1994 6F       		.sleb128 -17
 13532 1995 19       		.uleb128 0x19
 13533 1996 7000     		.ascii	"p\000"
 13534 1998 01       		.byte	0x1
 13535 1999 6B16     		.2byte	0x166b
 13536 199b BE190000 		.4byte	0x19be
 13537 199f 02       		.uleb128 0x2
 13538 19a0 91       		.byte	0x91
 13539 19a1 70       		.sleb128 -16
 13540 19a2 19       		.uleb128 0x19
 13541 19a3 7300     		.ascii	"s\000"
 13542 19a5 01       		.byte	0x1
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 345


 13543 19a6 6C16     		.2byte	0x166c
 13544 19a8 C4190000 		.4byte	0x19c4
 13545 19ac 02       		.uleb128 0x2
 13546 19ad 91       		.byte	0x91
 13547 19ae 6C       		.sleb128 -20
 13548 19af 19       		.uleb128 0x19
 13549 19b0 726300   		.ascii	"rc\000"
 13550 19b3 01       		.byte	0x1
 13551 19b4 6D16     		.2byte	0x166d
 13552 19b6 57000000 		.4byte	0x57
 13553 19ba 02       		.uleb128 0x2
 13554 19bb 91       		.byte	0x91
 13555 19bc 68       		.sleb128 -24
 13556 19bd 00       		.byte	0
 13557 19be 0B       		.uleb128 0xb
 13558 19bf 04       		.byte	0x4
 13559 19c0 82000000 		.4byte	0x82
 13560 19c4 08       		.uleb128 0x8
 13561 19c5 25000000 		.4byte	0x25
 13562 19c9 D4190000 		.4byte	0x19d4
 13563 19cd 0D       		.uleb128 0xd
 13564 19ce 91010000 		.4byte	0x191
 13565 19d2 01       		.byte	0x1
 13566 19d3 00       		.byte	0
 13567 19d4 20       		.uleb128 0x20
 13568 19d5 70040000 		.4byte	.LASF156
 13569 19d9 01       		.byte	0x1
 13570 19da BB16     		.2byte	0x16bb
 13571 19dc 00000000 		.4byte	.LFB49
 13572 19e0 7E000000 		.4byte	.LFE49-.LFB49
 13573 19e4 01       		.uleb128 0x1
 13574 19e5 9C       		.byte	0x9c
 13575 19e6 211A0000 		.4byte	0x1a21
 13576 19ea 18       		.uleb128 0x18
 13577 19eb 706200   		.ascii	"pb\000"
 13578 19ee 01       		.byte	0x1
 13579 19ef BC16     		.2byte	0x16bc
 13580 19f1 211A0000 		.4byte	0x1a21
 13581 19f5 02       		.uleb128 0x2
 13582 19f6 91       		.byte	0x91
 13583 19f7 6C       		.sleb128 -20
 13584 19f8 18       		.uleb128 0x18
 13585 19f9 6300     		.ascii	"c\000"
 13586 19fb 01       		.byte	0x1
 13587 19fc BD16     		.2byte	0x16bd
 13588 19fe 82000000 		.4byte	0x82
 13589 1a02 02       		.uleb128 0x2
 13590 1a03 91       		.byte	0x91
 13591 1a04 6B       		.sleb128 -21
 13592 1a05 19       		.uleb128 0x19
 13593 1a06 627700   		.ascii	"bw\000"
 13594 1a09 01       		.byte	0x1
 13595 1a0a C016     		.2byte	0x16c0
 13596 1a0c 57000000 		.4byte	0x57
 13597 1a10 02       		.uleb128 0x2
 13598 1a11 91       		.byte	0x91
 13599 1a12 70       		.sleb128 -16
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 346


 13600 1a13 19       		.uleb128 0x19
 13601 1a14 6900     		.ascii	"i\000"
 13602 1a16 01       		.byte	0x1
 13603 1a17 C116     		.2byte	0x16c1
 13604 1a19 50000000 		.4byte	0x50
 13605 1a1d 02       		.uleb128 0x2
 13606 1a1e 91       		.byte	0x91
 13607 1a1f 74       		.sleb128 -12
 13608 1a20 00       		.byte	0
 13609 1a21 0B       		.uleb128 0xb
 13610 1a22 04       		.byte	0x4
 13611 1a23 95040000 		.4byte	0x495
 13612 1a27 1D       		.uleb128 0x1d
 13613 1a28 F9000000 		.4byte	.LASF157
 13614 1a2c 01       		.byte	0x1
 13615 1a2d F316     		.2byte	0x16f3
 13616 1a2f 50000000 		.4byte	0x50
 13617 1a33 00000000 		.4byte	.LFB50
 13618 1a37 50000000 		.4byte	.LFE50-.LFB50
 13619 1a3b 01       		.uleb128 0x1
 13620 1a3c 9C       		.byte	0x9c
 13621 1a3d 5E1A0000 		.4byte	0x1a5e
 13622 1a41 18       		.uleb128 0x18
 13623 1a42 706200   		.ascii	"pb\000"
 13624 1a45 01       		.byte	0x1
 13625 1a46 F416     		.2byte	0x16f4
 13626 1a48 211A0000 		.4byte	0x1a21
 13627 1a4c 02       		.uleb128 0x2
 13628 1a4d 91       		.byte	0x91
 13629 1a4e 64       		.sleb128 -28
 13630 1a4f 19       		.uleb128 0x19
 13631 1a50 6E7700   		.ascii	"nw\000"
 13632 1a53 01       		.byte	0x1
 13633 1a54 F716     		.2byte	0x16f7
 13634 1a56 57000000 		.4byte	0x57
 13635 1a5a 02       		.uleb128 0x2
 13636 1a5b 91       		.byte	0x91
 13637 1a5c 6C       		.sleb128 -20
 13638 1a5d 00       		.byte	0
 13639 1a5e 1B       		.uleb128 0x1b
 13640 1a5f E0010000 		.4byte	.LASF158
 13641 1a63 01       		.byte	0x1
 13642 1a64 0117     		.2byte	0x1701
 13643 1a66 00000000 		.4byte	.LFB51
 13644 1a6a 24000000 		.4byte	.LFE51-.LFB51
 13645 1a6e 01       		.uleb128 0x1
 13646 1a6f 9C       		.byte	0x9c
 13647 1a70 911A0000 		.4byte	0x1a91
 13648 1a74 18       		.uleb128 0x18
 13649 1a75 706200   		.ascii	"pb\000"
 13650 1a78 01       		.byte	0x1
 13651 1a79 0217     		.2byte	0x1702
 13652 1a7b 211A0000 		.4byte	0x1a21
 13653 1a7f 02       		.uleb128 0x2
 13654 1a80 91       		.byte	0x91
 13655 1a81 74       		.sleb128 -12
 13656 1a82 18       		.uleb128 0x18
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 347


 13657 1a83 667000   		.ascii	"fp\000"
 13658 1a86 01       		.byte	0x1
 13659 1a87 0317     		.2byte	0x1703
 13660 1a89 7F040000 		.4byte	0x47f
 13661 1a8d 02       		.uleb128 0x2
 13662 1a8e 91       		.byte	0x91
 13663 1a8f 70       		.sleb128 -16
 13664 1a90 00       		.byte	0
 13665 1a91 22       		.uleb128 0x22
 13666 1a92 56020000 		.4byte	.LASF159
 13667 1a96 01       		.byte	0x1
 13668 1a97 0C17     		.2byte	0x170c
 13669 1a99 50000000 		.4byte	0x50
 13670 1a9d 00000000 		.4byte	.LFB52
 13671 1aa1 40000000 		.4byte	.LFE52-.LFB52
 13672 1aa5 01       		.uleb128 0x1
 13673 1aa6 9C       		.byte	0x9c
 13674 1aa7 D81A0000 		.4byte	0x1ad8
 13675 1aab 18       		.uleb128 0x18
 13676 1aac 6300     		.ascii	"c\000"
 13677 1aae 01       		.byte	0x1
 13678 1aaf 0D17     		.2byte	0x170d
 13679 1ab1 82000000 		.4byte	0x82
 13680 1ab5 03       		.uleb128 0x3
 13681 1ab6 91       		.byte	0x91
 13682 1ab7 A77F     		.sleb128 -89
 13683 1ab9 18       		.uleb128 0x18
 13684 1aba 667000   		.ascii	"fp\000"
 13685 1abd 01       		.byte	0x1
 13686 1abe 0E17     		.2byte	0x170e
 13687 1ac0 7F040000 		.4byte	0x47f
 13688 1ac4 03       		.uleb128 0x3
 13689 1ac5 91       		.byte	0x91
 13690 1ac6 A07F     		.sleb128 -96
 13691 1ac8 19       		.uleb128 0x19
 13692 1ac9 706200   		.ascii	"pb\000"
 13693 1acc 01       		.byte	0x1
 13694 1acd 1117     		.2byte	0x1711
 13695 1acf 95040000 		.4byte	0x495
 13696 1ad3 03       		.uleb128 0x3
 13697 1ad4 91       		.byte	0x91
 13698 1ad5 AC7F     		.sleb128 -84
 13699 1ad7 00       		.byte	0
 13700 1ad8 22       		.uleb128 0x22
 13701 1ad9 68050000 		.4byte	.LASF160
 13702 1add 01       		.byte	0x1
 13703 1ade 2017     		.2byte	0x1720
 13704 1ae0 50000000 		.4byte	0x50
 13705 1ae4 00000000 		.4byte	.LFB53
 13706 1ae8 4A000000 		.4byte	.LFE53-.LFB53
 13707 1aec 01       		.uleb128 0x1
 13708 1aed 9C       		.byte	0x9c
 13709 1aee 211B0000 		.4byte	0x1b21
 13710 1af2 18       		.uleb128 0x18
 13711 1af3 73747200 		.ascii	"str\000"
 13712 1af7 01       		.byte	0x1
 13713 1af8 2117     		.2byte	0x1721
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 348


 13714 1afa F60D0000 		.4byte	0xdf6
 13715 1afe 03       		.uleb128 0x3
 13716 1aff 91       		.byte	0x91
 13717 1b00 A47F     		.sleb128 -92
 13718 1b02 18       		.uleb128 0x18
 13719 1b03 667000   		.ascii	"fp\000"
 13720 1b06 01       		.byte	0x1
 13721 1b07 2217     		.2byte	0x1722
 13722 1b09 7F040000 		.4byte	0x47f
 13723 1b0d 03       		.uleb128 0x3
 13724 1b0e 91       		.byte	0x91
 13725 1b0f A07F     		.sleb128 -96
 13726 1b11 19       		.uleb128 0x19
 13727 1b12 706200   		.ascii	"pb\000"
 13728 1b15 01       		.byte	0x1
 13729 1b16 2517     		.2byte	0x1725
 13730 1b18 95040000 		.4byte	0x495
 13731 1b1c 03       		.uleb128 0x3
 13732 1b1d 91       		.byte	0x91
 13733 1b1e AC7F     		.sleb128 -84
 13734 1b20 00       		.byte	0
 13735 1b21 22       		.uleb128 0x22
 13736 1b22 B0020000 		.4byte	.LASF161
 13737 1b26 01       		.byte	0x1
 13738 1b27 3417     		.2byte	0x1734
 13739 1b29 50000000 		.4byte	0x50
 13740 1b2d 00000000 		.4byte	.LFB54
 13741 1b31 AC040000 		.4byte	.LFE54-.LFB54
 13742 1b35 01       		.uleb128 0x1
 13743 1b36 9C       		.byte	0x9c
 13744 1b37 FE1B0000 		.4byte	0x1bfe
 13745 1b3b 18       		.uleb128 0x18
 13746 1b3c 667000   		.ascii	"fp\000"
 13747 1b3f 01       		.byte	0x1
 13748 1b40 3517     		.2byte	0x1735
 13749 1b42 7F040000 		.4byte	0x47f
 13750 1b46 03       		.uleb128 0x3
 13751 1b47 91       		.byte	0x91
 13752 1b48 D47E     		.sleb128 -172
 13753 1b4a 18       		.uleb128 0x18
 13754 1b4b 666D7400 		.ascii	"fmt\000"
 13755 1b4f 01       		.byte	0x1
 13756 1b50 3617     		.2byte	0x1736
 13757 1b52 F60D0000 		.4byte	0xdf6
 13758 1b56 02       		.uleb128 0x2
 13759 1b57 91       		.byte	0x91
 13760 1b58 74       		.sleb128 -12
 13761 1b59 23       		.uleb128 0x23
 13762 1b5a 19       		.uleb128 0x19
 13763 1b5b 61727000 		.ascii	"arp\000"
 13764 1b5f 01       		.byte	0x1
 13765 1b60 3A17     		.2byte	0x173a
 13766 1b62 37040000 		.4byte	0x437
 13767 1b66 02       		.uleb128 0x2
 13768 1b67 91       		.byte	0x91
 13769 1b68 48       		.sleb128 -56
 13770 1b69 19       		.uleb128 0x19
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 349


 13771 1b6a 706200   		.ascii	"pb\000"
 13772 1b6d 01       		.byte	0x1
 13773 1b6e 3B17     		.2byte	0x173b
 13774 1b70 95040000 		.4byte	0x495
 13775 1b74 03       		.uleb128 0x3
 13776 1b75 91       		.byte	0x91
 13777 1b76 FC7E     		.sleb128 -132
 13778 1b78 19       		.uleb128 0x19
 13779 1b79 6600     		.ascii	"f\000"
 13780 1b7b 01       		.byte	0x1
 13781 1b7c 3C17     		.2byte	0x173c
 13782 1b7e 25000000 		.4byte	0x25
 13783 1b82 02       		.uleb128 0x2
 13784 1b83 91       		.byte	0x91
 13785 1b84 67       		.sleb128 -25
 13786 1b85 19       		.uleb128 0x19
 13787 1b86 7200     		.ascii	"r\000"
 13788 1b88 01       		.byte	0x1
 13789 1b89 3C17     		.2byte	0x173c
 13790 1b8b 25000000 		.4byte	0x25
 13791 1b8f 02       		.uleb128 0x2
 13792 1b90 91       		.byte	0x91
 13793 1b91 66       		.sleb128 -26
 13794 1b92 19       		.uleb128 0x19
 13795 1b93 6900     		.ascii	"i\000"
 13796 1b95 01       		.byte	0x1
 13797 1b96 3D17     		.2byte	0x173d
 13798 1b98 57000000 		.4byte	0x57
 13799 1b9c 02       		.uleb128 0x2
 13800 1b9d 91       		.byte	0x91
 13801 1b9e 60       		.sleb128 -32
 13802 1b9f 19       		.uleb128 0x19
 13803 1ba0 6A00     		.ascii	"j\000"
 13804 1ba2 01       		.byte	0x1
 13805 1ba3 3D17     		.2byte	0x173d
 13806 1ba5 57000000 		.4byte	0x57
 13807 1ba9 02       		.uleb128 0x2
 13808 1baa 91       		.byte	0x91
 13809 1bab 5C       		.sleb128 -36
 13810 1bac 19       		.uleb128 0x19
 13811 1bad 7700     		.ascii	"w\000"
 13812 1baf 01       		.byte	0x1
 13813 1bb0 3D17     		.2byte	0x173d
 13814 1bb2 57000000 		.4byte	0x57
 13815 1bb6 02       		.uleb128 0x2
 13816 1bb7 91       		.byte	0x91
 13817 1bb8 58       		.sleb128 -40
 13818 1bb9 19       		.uleb128 0x19
 13819 1bba 7600     		.ascii	"v\000"
 13820 1bbc 01       		.byte	0x1
 13821 1bbd 3E17     		.2byte	0x173e
 13822 1bbf 70000000 		.4byte	0x70
 13823 1bc3 02       		.uleb128 0x2
 13824 1bc4 91       		.byte	0x91
 13825 1bc5 54       		.sleb128 -44
 13826 1bc6 19       		.uleb128 0x19
 13827 1bc7 6300     		.ascii	"c\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 350


 13828 1bc9 01       		.byte	0x1
 13829 1bca 3F17     		.2byte	0x173f
 13830 1bcc 82000000 		.4byte	0x82
 13831 1bd0 02       		.uleb128 0x2
 13832 1bd1 91       		.byte	0x91
 13833 1bd2 53       		.sleb128 -45
 13834 1bd3 19       		.uleb128 0x19
 13835 1bd4 6400     		.ascii	"d\000"
 13836 1bd6 01       		.byte	0x1
 13837 1bd7 3F17     		.2byte	0x173f
 13838 1bd9 82000000 		.4byte	0x82
 13839 1bdd 02       		.uleb128 0x2
 13840 1bde 91       		.byte	0x91
 13841 1bdf 52       		.sleb128 -46
 13842 1be0 19       		.uleb128 0x19
 13843 1be1 73747200 		.ascii	"str\000"
 13844 1be5 01       		.byte	0x1
 13845 1be6 3F17     		.2byte	0x173f
 13846 1be8 FE1B0000 		.4byte	0x1bfe
 13847 1bec 03       		.uleb128 0x3
 13848 1bed 91       		.byte	0x91
 13849 1bee DC7E     		.sleb128 -164
 13850 1bf0 19       		.uleb128 0x19
 13851 1bf1 7000     		.ascii	"p\000"
 13852 1bf3 01       		.byte	0x1
 13853 1bf4 3F17     		.2byte	0x173f
 13854 1bf6 BE190000 		.4byte	0x19be
 13855 1bfa 02       		.uleb128 0x2
 13856 1bfb 91       		.byte	0x91
 13857 1bfc 4C       		.sleb128 -52
 13858 1bfd 00       		.byte	0
 13859 1bfe 08       		.uleb128 0x8
 13860 1bff 82000000 		.4byte	0x82
 13861 1c03 0E1C0000 		.4byte	0x1c0e
 13862 1c07 0D       		.uleb128 0xd
 13863 1c08 91010000 		.4byte	0x191
 13864 1c0c 1F       		.byte	0x1f
 13865 1c0d 00       		.byte	0
 13866 1c0e 08       		.uleb128 0x8
 13867 1c0f F2010000 		.4byte	0x1f2
 13868 1c13 1E1C0000 		.4byte	0x1c1e
 13869 1c17 0D       		.uleb128 0xd
 13870 1c18 91010000 		.4byte	0x191
 13871 1c1c 00       		.byte	0
 13872 1c1d 00       		.byte	0
 13873 1c1e 1E       		.uleb128 0x1e
 13874 1c1f 3F000000 		.4byte	.LASF162
 13875 1c23 01       		.byte	0x1
 13876 1c24 0E02     		.2byte	0x20e
 13877 1c26 0E1C0000 		.4byte	0x1c0e
 13878 1c2a 05       		.uleb128 0x5
 13879 1c2b 03       		.byte	0x3
 13880 1c2c 00000000 		.4byte	FatFs
 13881 1c30 1E       		.uleb128 0x1e
 13882 1c31 80060000 		.4byte	.LASF163
 13883 1c35 01       		.byte	0x1
 13884 1c36 0F02     		.2byte	0x20f
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 351


 13885 1c38 3E000000 		.4byte	0x3e
 13886 1c3c 05       		.uleb128 0x5
 13887 1c3d 03       		.byte	0x3
 13888 1c3e 04000000 		.4byte	Fsid
 13889 1c42 08       		.uleb128 0x8
 13890 1c43 25000000 		.4byte	0x25
 13891 1c47 521C0000 		.4byte	0x1c52
 13892 1c4b 0D       		.uleb128 0xd
 13893 1c4c 91010000 		.4byte	0x191
 13894 1c50 7F       		.byte	0x7f
 13895 1c51 00       		.byte	0
 13896 1c52 1E       		.uleb128 0x1e
 13897 1c53 DF040000 		.4byte	.LASF164
 13898 1c57 01       		.byte	0x1
 13899 1c58 4702     		.2byte	0x247
 13900 1c5a 641C0000 		.4byte	0x1c64
 13901 1c5e 05       		.uleb128 0x5
 13902 1c5f 03       		.byte	0x3
 13903 1c60 00000000 		.4byte	ExCvt
 13904 1c64 1A       		.uleb128 0x1a
 13905 1c65 421C0000 		.4byte	0x1c42
 13906 1c69 00       		.byte	0
 13907              		.section	.debug_abbrev,"",%progbits
 13908              	.Ldebug_abbrev0:
 13909 0000 01       		.uleb128 0x1
 13910 0001 11       		.uleb128 0x11
 13911 0002 01       		.byte	0x1
 13912 0003 25       		.uleb128 0x25
 13913 0004 0E       		.uleb128 0xe
 13914 0005 13       		.uleb128 0x13
 13915 0006 0B       		.uleb128 0xb
 13916 0007 03       		.uleb128 0x3
 13917 0008 0E       		.uleb128 0xe
 13918 0009 1B       		.uleb128 0x1b
 13919 000a 0E       		.uleb128 0xe
 13920 000b 55       		.uleb128 0x55
 13921 000c 17       		.uleb128 0x17
 13922 000d 11       		.uleb128 0x11
 13923 000e 01       		.uleb128 0x1
 13924 000f 10       		.uleb128 0x10
 13925 0010 17       		.uleb128 0x17
 13926 0011 00       		.byte	0
 13927 0012 00       		.byte	0
 13928 0013 02       		.uleb128 0x2
 13929 0014 16       		.uleb128 0x16
 13930 0015 00       		.byte	0
 13931 0016 03       		.uleb128 0x3
 13932 0017 0E       		.uleb128 0xe
 13933 0018 3A       		.uleb128 0x3a
 13934 0019 0B       		.uleb128 0xb
 13935 001a 3B       		.uleb128 0x3b
 13936 001b 0B       		.uleb128 0xb
 13937 001c 49       		.uleb128 0x49
 13938 001d 13       		.uleb128 0x13
 13939 001e 00       		.byte	0
 13940 001f 00       		.byte	0
 13941 0020 03       		.uleb128 0x3
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 352


 13942 0021 24       		.uleb128 0x24
 13943 0022 00       		.byte	0
 13944 0023 0B       		.uleb128 0xb
 13945 0024 0B       		.uleb128 0xb
 13946 0025 3E       		.uleb128 0x3e
 13947 0026 0B       		.uleb128 0xb
 13948 0027 03       		.uleb128 0x3
 13949 0028 0E       		.uleb128 0xe
 13950 0029 00       		.byte	0
 13951 002a 00       		.byte	0
 13952 002b 04       		.uleb128 0x4
 13953 002c 24       		.uleb128 0x24
 13954 002d 00       		.byte	0
 13955 002e 0B       		.uleb128 0xb
 13956 002f 0B       		.uleb128 0xb
 13957 0030 3E       		.uleb128 0x3e
 13958 0031 0B       		.uleb128 0xb
 13959 0032 03       		.uleb128 0x3
 13960 0033 08       		.uleb128 0x8
 13961 0034 00       		.byte	0
 13962 0035 00       		.byte	0
 13963 0036 05       		.uleb128 0x5
 13964 0037 13       		.uleb128 0x13
 13965 0038 01       		.byte	0x1
 13966 0039 0B       		.uleb128 0xb
 13967 003a 05       		.uleb128 0x5
 13968 003b 3A       		.uleb128 0x3a
 13969 003c 0B       		.uleb128 0xb
 13970 003d 3B       		.uleb128 0x3b
 13971 003e 0B       		.uleb128 0xb
 13972 003f 01       		.uleb128 0x1
 13973 0040 13       		.uleb128 0x13
 13974 0041 00       		.byte	0
 13975 0042 00       		.byte	0
 13976 0043 06       		.uleb128 0x6
 13977 0044 0D       		.uleb128 0xd
 13978 0045 00       		.byte	0
 13979 0046 03       		.uleb128 0x3
 13980 0047 0E       		.uleb128 0xe
 13981 0048 3A       		.uleb128 0x3a
 13982 0049 0B       		.uleb128 0xb
 13983 004a 3B       		.uleb128 0x3b
 13984 004b 0B       		.uleb128 0xb
 13985 004c 49       		.uleb128 0x49
 13986 004d 13       		.uleb128 0x13
 13987 004e 38       		.uleb128 0x38
 13988 004f 0B       		.uleb128 0xb
 13989 0050 00       		.byte	0
 13990 0051 00       		.byte	0
 13991 0052 07       		.uleb128 0x7
 13992 0053 0D       		.uleb128 0xd
 13993 0054 00       		.byte	0
 13994 0055 03       		.uleb128 0x3
 13995 0056 08       		.uleb128 0x8
 13996 0057 3A       		.uleb128 0x3a
 13997 0058 0B       		.uleb128 0xb
 13998 0059 3B       		.uleb128 0x3b
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 353


 13999 005a 0B       		.uleb128 0xb
 14000 005b 49       		.uleb128 0x49
 14001 005c 13       		.uleb128 0x13
 14002 005d 38       		.uleb128 0x38
 14003 005e 0B       		.uleb128 0xb
 14004 005f 00       		.byte	0
 14005 0060 00       		.byte	0
 14006 0061 08       		.uleb128 0x8
 14007 0062 01       		.uleb128 0x1
 14008 0063 01       		.byte	0x1
 14009 0064 49       		.uleb128 0x49
 14010 0065 13       		.uleb128 0x13
 14011 0066 01       		.uleb128 0x1
 14012 0067 13       		.uleb128 0x13
 14013 0068 00       		.byte	0
 14014 0069 00       		.byte	0
 14015 006a 09       		.uleb128 0x9
 14016 006b 21       		.uleb128 0x21
 14017 006c 00       		.byte	0
 14018 006d 49       		.uleb128 0x49
 14019 006e 13       		.uleb128 0x13
 14020 006f 2F       		.uleb128 0x2f
 14021 0070 05       		.uleb128 0x5
 14022 0071 00       		.byte	0
 14023 0072 00       		.byte	0
 14024 0073 0A       		.uleb128 0xa
 14025 0074 13       		.uleb128 0x13
 14026 0075 01       		.byte	0x1
 14027 0076 0B       		.uleb128 0xb
 14028 0077 0B       		.uleb128 0xb
 14029 0078 3A       		.uleb128 0x3a
 14030 0079 0B       		.uleb128 0xb
 14031 007a 3B       		.uleb128 0x3b
 14032 007b 0B       		.uleb128 0xb
 14033 007c 01       		.uleb128 0x1
 14034 007d 13       		.uleb128 0x13
 14035 007e 00       		.byte	0
 14036 007f 00       		.byte	0
 14037 0080 0B       		.uleb128 0xb
 14038 0081 0F       		.uleb128 0xf
 14039 0082 00       		.byte	0
 14040 0083 0B       		.uleb128 0xb
 14041 0084 0B       		.uleb128 0xb
 14042 0085 49       		.uleb128 0x49
 14043 0086 13       		.uleb128 0x13
 14044 0087 00       		.byte	0
 14045 0088 00       		.byte	0
 14046 0089 0C       		.uleb128 0xc
 14047 008a 16       		.uleb128 0x16
 14048 008b 00       		.byte	0
 14049 008c 03       		.uleb128 0x3
 14050 008d 08       		.uleb128 0x8
 14051 008e 3A       		.uleb128 0x3a
 14052 008f 0B       		.uleb128 0xb
 14053 0090 3B       		.uleb128 0x3b
 14054 0091 0B       		.uleb128 0xb
 14055 0092 49       		.uleb128 0x49
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 354


 14056 0093 13       		.uleb128 0x13
 14057 0094 00       		.byte	0
 14058 0095 00       		.byte	0
 14059 0096 0D       		.uleb128 0xd
 14060 0097 21       		.uleb128 0x21
 14061 0098 00       		.byte	0
 14062 0099 49       		.uleb128 0x49
 14063 009a 13       		.uleb128 0x13
 14064 009b 2F       		.uleb128 0x2f
 14065 009c 0B       		.uleb128 0xb
 14066 009d 00       		.byte	0
 14067 009e 00       		.byte	0
 14068 009f 0E       		.uleb128 0xe
 14069 00a0 04       		.uleb128 0x4
 14070 00a1 01       		.byte	0x1
 14071 00a2 0B       		.uleb128 0xb
 14072 00a3 0B       		.uleb128 0xb
 14073 00a4 3A       		.uleb128 0x3a
 14074 00a5 0B       		.uleb128 0xb
 14075 00a6 3B       		.uleb128 0x3b
 14076 00a7 0B       		.uleb128 0xb
 14077 00a8 01       		.uleb128 0x1
 14078 00a9 13       		.uleb128 0x13
 14079 00aa 00       		.byte	0
 14080 00ab 00       		.byte	0
 14081 00ac 0F       		.uleb128 0xf
 14082 00ad 28       		.uleb128 0x28
 14083 00ae 00       		.byte	0
 14084 00af 03       		.uleb128 0x3
 14085 00b0 0E       		.uleb128 0xe
 14086 00b1 1C       		.uleb128 0x1c
 14087 00b2 0D       		.uleb128 0xd
 14088 00b3 00       		.byte	0
 14089 00b4 00       		.byte	0
 14090 00b5 10       		.uleb128 0x10
 14091 00b6 13       		.uleb128 0x13
 14092 00b7 01       		.byte	0x1
 14093 00b8 03       		.uleb128 0x3
 14094 00b9 0E       		.uleb128 0xe
 14095 00ba 0B       		.uleb128 0xb
 14096 00bb 0B       		.uleb128 0xb
 14097 00bc 3A       		.uleb128 0x3a
 14098 00bd 0B       		.uleb128 0xb
 14099 00be 3B       		.uleb128 0x3b
 14100 00bf 0B       		.uleb128 0xb
 14101 00c0 01       		.uleb128 0x1
 14102 00c1 13       		.uleb128 0x13
 14103 00c2 00       		.byte	0
 14104 00c3 00       		.byte	0
 14105 00c4 11       		.uleb128 0x11
 14106 00c5 0D       		.uleb128 0xd
 14107 00c6 00       		.byte	0
 14108 00c7 03       		.uleb128 0x3
 14109 00c8 0E       		.uleb128 0xe
 14110 00c9 49       		.uleb128 0x49
 14111 00ca 13       		.uleb128 0x13
 14112 00cb 38       		.uleb128 0x38
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 355


 14113 00cc 0B       		.uleb128 0xb
 14114 00cd 34       		.uleb128 0x34
 14115 00ce 19       		.uleb128 0x19
 14116 00cf 00       		.byte	0
 14117 00d0 00       		.byte	0
 14118 00d1 12       		.uleb128 0x12
 14119 00d2 0F       		.uleb128 0xf
 14120 00d3 00       		.byte	0
 14121 00d4 0B       		.uleb128 0xb
 14122 00d5 0B       		.uleb128 0xb
 14123 00d6 00       		.byte	0
 14124 00d7 00       		.byte	0
 14125 00d8 13       		.uleb128 0x13
 14126 00d9 13       		.uleb128 0x13
 14127 00da 01       		.byte	0x1
 14128 00db 0B       		.uleb128 0xb
 14129 00dc 0B       		.uleb128 0xb
 14130 00dd 3A       		.uleb128 0x3a
 14131 00de 0B       		.uleb128 0xb
 14132 00df 3B       		.uleb128 0x3b
 14133 00e0 05       		.uleb128 0x5
 14134 00e1 01       		.uleb128 0x1
 14135 00e2 13       		.uleb128 0x13
 14136 00e3 00       		.byte	0
 14137 00e4 00       		.byte	0
 14138 00e5 14       		.uleb128 0x14
 14139 00e6 0D       		.uleb128 0xd
 14140 00e7 00       		.byte	0
 14141 00e8 03       		.uleb128 0x3
 14142 00e9 08       		.uleb128 0x8
 14143 00ea 3A       		.uleb128 0x3a
 14144 00eb 0B       		.uleb128 0xb
 14145 00ec 3B       		.uleb128 0x3b
 14146 00ed 05       		.uleb128 0x5
 14147 00ee 49       		.uleb128 0x49
 14148 00ef 13       		.uleb128 0x13
 14149 00f0 38       		.uleb128 0x38
 14150 00f1 0B       		.uleb128 0xb
 14151 00f2 00       		.byte	0
 14152 00f3 00       		.byte	0
 14153 00f4 15       		.uleb128 0x15
 14154 00f5 0D       		.uleb128 0xd
 14155 00f6 00       		.byte	0
 14156 00f7 03       		.uleb128 0x3
 14157 00f8 0E       		.uleb128 0xe
 14158 00f9 3A       		.uleb128 0x3a
 14159 00fa 0B       		.uleb128 0xb
 14160 00fb 3B       		.uleb128 0x3b
 14161 00fc 05       		.uleb128 0x5
 14162 00fd 49       		.uleb128 0x49
 14163 00fe 13       		.uleb128 0x13
 14164 00ff 38       		.uleb128 0x38
 14165 0100 0B       		.uleb128 0xb
 14166 0101 00       		.byte	0
 14167 0102 00       		.byte	0
 14168 0103 16       		.uleb128 0x16
 14169 0104 16       		.uleb128 0x16
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 356


 14170 0105 00       		.byte	0
 14171 0106 03       		.uleb128 0x3
 14172 0107 0E       		.uleb128 0xe
 14173 0108 3A       		.uleb128 0x3a
 14174 0109 0B       		.uleb128 0xb
 14175 010a 3B       		.uleb128 0x3b
 14176 010b 05       		.uleb128 0x5
 14177 010c 49       		.uleb128 0x49
 14178 010d 13       		.uleb128 0x13
 14179 010e 00       		.byte	0
 14180 010f 00       		.byte	0
 14181 0110 17       		.uleb128 0x17
 14182 0111 2E       		.uleb128 0x2e
 14183 0112 01       		.byte	0x1
 14184 0113 03       		.uleb128 0x3
 14185 0114 0E       		.uleb128 0xe
 14186 0115 3A       		.uleb128 0x3a
 14187 0116 0B       		.uleb128 0xb
 14188 0117 3B       		.uleb128 0x3b
 14189 0118 05       		.uleb128 0x5
 14190 0119 27       		.uleb128 0x27
 14191 011a 19       		.uleb128 0x19
 14192 011b 49       		.uleb128 0x49
 14193 011c 13       		.uleb128 0x13
 14194 011d 11       		.uleb128 0x11
 14195 011e 01       		.uleb128 0x1
 14196 011f 12       		.uleb128 0x12
 14197 0120 06       		.uleb128 0x6
 14198 0121 40       		.uleb128 0x40
 14199 0122 18       		.uleb128 0x18
 14200 0123 9742     		.uleb128 0x2117
 14201 0125 19       		.uleb128 0x19
 14202 0126 01       		.uleb128 0x1
 14203 0127 13       		.uleb128 0x13
 14204 0128 00       		.byte	0
 14205 0129 00       		.byte	0
 14206 012a 18       		.uleb128 0x18
 14207 012b 05       		.uleb128 0x5
 14208 012c 00       		.byte	0
 14209 012d 03       		.uleb128 0x3
 14210 012e 08       		.uleb128 0x8
 14211 012f 3A       		.uleb128 0x3a
 14212 0130 0B       		.uleb128 0xb
 14213 0131 3B       		.uleb128 0x3b
 14214 0132 05       		.uleb128 0x5
 14215 0133 49       		.uleb128 0x49
 14216 0134 13       		.uleb128 0x13
 14217 0135 02       		.uleb128 0x2
 14218 0136 18       		.uleb128 0x18
 14219 0137 00       		.byte	0
 14220 0138 00       		.byte	0
 14221 0139 19       		.uleb128 0x19
 14222 013a 34       		.uleb128 0x34
 14223 013b 00       		.byte	0
 14224 013c 03       		.uleb128 0x3
 14225 013d 08       		.uleb128 0x8
 14226 013e 3A       		.uleb128 0x3a
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 357


 14227 013f 0B       		.uleb128 0xb
 14228 0140 3B       		.uleb128 0x3b
 14229 0141 05       		.uleb128 0x5
 14230 0142 49       		.uleb128 0x49
 14231 0143 13       		.uleb128 0x13
 14232 0144 02       		.uleb128 0x2
 14233 0145 18       		.uleb128 0x18
 14234 0146 00       		.byte	0
 14235 0147 00       		.byte	0
 14236 0148 1A       		.uleb128 0x1a
 14237 0149 26       		.uleb128 0x26
 14238 014a 00       		.byte	0
 14239 014b 49       		.uleb128 0x49
 14240 014c 13       		.uleb128 0x13
 14241 014d 00       		.byte	0
 14242 014e 00       		.byte	0
 14243 014f 1B       		.uleb128 0x1b
 14244 0150 2E       		.uleb128 0x2e
 14245 0151 01       		.byte	0x1
 14246 0152 03       		.uleb128 0x3
 14247 0153 0E       		.uleb128 0xe
 14248 0154 3A       		.uleb128 0x3a
 14249 0155 0B       		.uleb128 0xb
 14250 0156 3B       		.uleb128 0x3b
 14251 0157 05       		.uleb128 0x5
 14252 0158 27       		.uleb128 0x27
 14253 0159 19       		.uleb128 0x19
 14254 015a 11       		.uleb128 0x11
 14255 015b 01       		.uleb128 0x1
 14256 015c 12       		.uleb128 0x12
 14257 015d 06       		.uleb128 0x6
 14258 015e 40       		.uleb128 0x40
 14259 015f 18       		.uleb128 0x18
 14260 0160 9742     		.uleb128 0x2117
 14261 0162 19       		.uleb128 0x19
 14262 0163 01       		.uleb128 0x1
 14263 0164 13       		.uleb128 0x13
 14264 0165 00       		.byte	0
 14265 0166 00       		.byte	0
 14266 0167 1C       		.uleb128 0x1c
 14267 0168 26       		.uleb128 0x26
 14268 0169 00       		.byte	0
 14269 016a 00       		.byte	0
 14270 016b 00       		.byte	0
 14271 016c 1D       		.uleb128 0x1d
 14272 016d 2E       		.uleb128 0x2e
 14273 016e 01       		.byte	0x1
 14274 016f 03       		.uleb128 0x3
 14275 0170 0E       		.uleb128 0xe
 14276 0171 3A       		.uleb128 0x3a
 14277 0172 0B       		.uleb128 0xb
 14278 0173 3B       		.uleb128 0x3b
 14279 0174 05       		.uleb128 0x5
 14280 0175 27       		.uleb128 0x27
 14281 0176 19       		.uleb128 0x19
 14282 0177 49       		.uleb128 0x49
 14283 0178 13       		.uleb128 0x13
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 358


 14284 0179 11       		.uleb128 0x11
 14285 017a 01       		.uleb128 0x1
 14286 017b 12       		.uleb128 0x12
 14287 017c 06       		.uleb128 0x6
 14288 017d 40       		.uleb128 0x40
 14289 017e 18       		.uleb128 0x18
 14290 017f 9642     		.uleb128 0x2116
 14291 0181 19       		.uleb128 0x19
 14292 0182 01       		.uleb128 0x1
 14293 0183 13       		.uleb128 0x13
 14294 0184 00       		.byte	0
 14295 0185 00       		.byte	0
 14296 0186 1E       		.uleb128 0x1e
 14297 0187 34       		.uleb128 0x34
 14298 0188 00       		.byte	0
 14299 0189 03       		.uleb128 0x3
 14300 018a 0E       		.uleb128 0xe
 14301 018b 3A       		.uleb128 0x3a
 14302 018c 0B       		.uleb128 0xb
 14303 018d 3B       		.uleb128 0x3b
 14304 018e 05       		.uleb128 0x5
 14305 018f 49       		.uleb128 0x49
 14306 0190 13       		.uleb128 0x13
 14307 0191 02       		.uleb128 0x2
 14308 0192 18       		.uleb128 0x18
 14309 0193 00       		.byte	0
 14310 0194 00       		.byte	0
 14311 0195 1F       		.uleb128 0x1f
 14312 0196 05       		.uleb128 0x5
 14313 0197 00       		.byte	0
 14314 0198 03       		.uleb128 0x3
 14315 0199 0E       		.uleb128 0xe
 14316 019a 3A       		.uleb128 0x3a
 14317 019b 0B       		.uleb128 0xb
 14318 019c 3B       		.uleb128 0x3b
 14319 019d 05       		.uleb128 0x5
 14320 019e 49       		.uleb128 0x49
 14321 019f 13       		.uleb128 0x13
 14322 01a0 02       		.uleb128 0x2
 14323 01a1 18       		.uleb128 0x18
 14324 01a2 00       		.byte	0
 14325 01a3 00       		.byte	0
 14326 01a4 20       		.uleb128 0x20
 14327 01a5 2E       		.uleb128 0x2e
 14328 01a6 01       		.byte	0x1
 14329 01a7 03       		.uleb128 0x3
 14330 01a8 0E       		.uleb128 0xe
 14331 01a9 3A       		.uleb128 0x3a
 14332 01aa 0B       		.uleb128 0xb
 14333 01ab 3B       		.uleb128 0x3b
 14334 01ac 05       		.uleb128 0x5
 14335 01ad 27       		.uleb128 0x27
 14336 01ae 19       		.uleb128 0x19
 14337 01af 11       		.uleb128 0x11
 14338 01b0 01       		.uleb128 0x1
 14339 01b1 12       		.uleb128 0x12
 14340 01b2 06       		.uleb128 0x6
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 359


 14341 01b3 40       		.uleb128 0x40
 14342 01b4 18       		.uleb128 0x18
 14343 01b5 9642     		.uleb128 0x2116
 14344 01b7 19       		.uleb128 0x19
 14345 01b8 01       		.uleb128 0x1
 14346 01b9 13       		.uleb128 0x13
 14347 01ba 00       		.byte	0
 14348 01bb 00       		.byte	0
 14349 01bc 21       		.uleb128 0x21
 14350 01bd 34       		.uleb128 0x34
 14351 01be 00       		.byte	0
 14352 01bf 03       		.uleb128 0x3
 14353 01c0 08       		.uleb128 0x8
 14354 01c1 3A       		.uleb128 0x3a
 14355 01c2 0B       		.uleb128 0xb
 14356 01c3 3B       		.uleb128 0x3b
 14357 01c4 05       		.uleb128 0x5
 14358 01c5 49       		.uleb128 0x49
 14359 01c6 13       		.uleb128 0x13
 14360 01c7 00       		.byte	0
 14361 01c8 00       		.byte	0
 14362 01c9 22       		.uleb128 0x22
 14363 01ca 2E       		.uleb128 0x2e
 14364 01cb 01       		.byte	0x1
 14365 01cc 3F       		.uleb128 0x3f
 14366 01cd 19       		.uleb128 0x19
 14367 01ce 03       		.uleb128 0x3
 14368 01cf 0E       		.uleb128 0xe
 14369 01d0 3A       		.uleb128 0x3a
 14370 01d1 0B       		.uleb128 0xb
 14371 01d2 3B       		.uleb128 0x3b
 14372 01d3 05       		.uleb128 0x5
 14373 01d4 27       		.uleb128 0x27
 14374 01d5 19       		.uleb128 0x19
 14375 01d6 49       		.uleb128 0x49
 14376 01d7 13       		.uleb128 0x13
 14377 01d8 11       		.uleb128 0x11
 14378 01d9 01       		.uleb128 0x1
 14379 01da 12       		.uleb128 0x12
 14380 01db 06       		.uleb128 0x6
 14381 01dc 40       		.uleb128 0x40
 14382 01dd 18       		.uleb128 0x18
 14383 01de 9642     		.uleb128 0x2116
 14384 01e0 19       		.uleb128 0x19
 14385 01e1 01       		.uleb128 0x1
 14386 01e2 13       		.uleb128 0x13
 14387 01e3 00       		.byte	0
 14388 01e4 00       		.byte	0
 14389 01e5 23       		.uleb128 0x23
 14390 01e6 18       		.uleb128 0x18
 14391 01e7 00       		.byte	0
 14392 01e8 00       		.byte	0
 14393 01e9 00       		.byte	0
 14394 01ea 00       		.byte	0
 14395              		.section	.debug_aranges,"",%progbits
 14396 0000 CC010000 		.4byte	0x1cc
 14397 0004 0200     		.2byte	0x2
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 360


 14398 0006 00000000 		.4byte	.Ldebug_info0
 14399 000a 04       		.byte	0x4
 14400 000b 00       		.byte	0
 14401 000c 0000     		.2byte	0
 14402 000e 0000     		.2byte	0
 14403 0010 00000000 		.4byte	.LFB0
 14404 0014 3C000000 		.4byte	.LFE0-.LFB0
 14405 0018 00000000 		.4byte	.LFB1
 14406 001c 42000000 		.4byte	.LFE1-.LFB1
 14407 0020 00000000 		.4byte	.LFB2
 14408 0024 3A000000 		.4byte	.LFE2-.LFB2
 14409 0028 00000000 		.4byte	.LFB3
 14410 002c 52000000 		.4byte	.LFE3-.LFB3
 14411 0030 00000000 		.4byte	.LFB4
 14412 0034 3C000000 		.4byte	.LFE4-.LFB4
 14413 0038 00000000 		.4byte	.LFB5
 14414 003c 2E000000 		.4byte	.LFE5-.LFB5
 14415 0040 00000000 		.4byte	.LFB6
 14416 0044 4A000000 		.4byte	.LFE6-.LFB6
 14417 0048 00000000 		.4byte	.LFB7
 14418 004c 32000000 		.4byte	.LFE7-.LFB7
 14419 0050 00000000 		.4byte	.LFB8
 14420 0054 9E000000 		.4byte	.LFE8-.LFB8
 14421 0058 00000000 		.4byte	.LFB9
 14422 005c 74000000 		.4byte	.LFE9-.LFB9
 14423 0060 00000000 		.4byte	.LFB10
 14424 0064 04010000 		.4byte	.LFE10-.LFB10
 14425 0068 00000000 		.4byte	.LFB11
 14426 006c 38000000 		.4byte	.LFE11-.LFB11
 14427 0070 00000000 		.4byte	.LFB12
 14428 0074 46010000 		.4byte	.LFE12-.LFB12
 14429 0078 00000000 		.4byte	.LFB13
 14430 007c FA010000 		.4byte	.LFE13-.LFB13
 14431 0080 00000000 		.4byte	.LFB14
 14432 0084 EC000000 		.4byte	.LFE14-.LFB14
 14433 0088 00000000 		.4byte	.LFB15
 14434 008c 5C010000 		.4byte	.LFE15-.LFB15
 14435 0090 00000000 		.4byte	.LFB16
 14436 0094 FC000000 		.4byte	.LFE16-.LFB16
 14437 0098 00000000 		.4byte	.LFB17
 14438 009c 98010000 		.4byte	.LFE17-.LFB17
 14439 00a0 00000000 		.4byte	.LFB18
 14440 00a4 B8000000 		.4byte	.LFE18-.LFB18
 14441 00a8 00000000 		.4byte	.LFB19
 14442 00ac 3E000000 		.4byte	.LFE19-.LFB19
 14443 00b0 00000000 		.4byte	.LFB20
 14444 00b4 40000000 		.4byte	.LFE20-.LFB20
 14445 00b8 00000000 		.4byte	.LFB21
 14446 00bc F6000000 		.4byte	.LFE21-.LFB21
 14447 00c0 00000000 		.4byte	.LFB22
 14448 00c4 D8000000 		.4byte	.LFE22-.LFB22
 14449 00c8 00000000 		.4byte	.LFB23
 14450 00cc 7E000000 		.4byte	.LFE23-.LFB23
 14451 00d0 00000000 		.4byte	.LFB24
 14452 00d4 4A000000 		.4byte	.LFE24-.LFB24
 14453 00d8 00000000 		.4byte	.LFB25
 14454 00dc D2000000 		.4byte	.LFE25-.LFB25
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 361


 14455 00e0 00000000 		.4byte	.LFB26
 14456 00e4 6C010000 		.4byte	.LFE26-.LFB26
 14457 00e8 00000000 		.4byte	.LFB27
 14458 00ec 10010000 		.4byte	.LFE27-.LFB27
 14459 00f0 00000000 		.4byte	.LFB28
 14460 00f4 84000000 		.4byte	.LFE28-.LFB28
 14461 00f8 00000000 		.4byte	.LFB29
 14462 00fc B0000000 		.4byte	.LFE29-.LFB29
 14463 0100 00000000 		.4byte	.LFB30
 14464 0104 D8040000 		.4byte	.LFE30-.LFB30
 14465 0108 00000000 		.4byte	.LFB31
 14466 010c 78000000 		.4byte	.LFE31-.LFB31
 14467 0110 00000000 		.4byte	.LFB32
 14468 0114 94000000 		.4byte	.LFE32-.LFB32
 14469 0118 00000000 		.4byte	.LFB33
 14470 011c BE030000 		.4byte	.LFE33-.LFB33
 14471 0120 00000000 		.4byte	.LFB34
 14472 0124 82020000 		.4byte	.LFE34-.LFB34
 14473 0128 00000000 		.4byte	.LFB35
 14474 012c EC020000 		.4byte	.LFE35-.LFB35
 14475 0130 00000000 		.4byte	.LFB36
 14476 0134 20010000 		.4byte	.LFE36-.LFB36
 14477 0138 00000000 		.4byte	.LFB37
 14478 013c 56000000 		.4byte	.LFE37-.LFB37
 14479 0140 00000000 		.4byte	.LFB38
 14480 0144 8C020000 		.4byte	.LFE38-.LFB38
 14481 0148 00000000 		.4byte	.LFB39
 14482 014c EA000000 		.4byte	.LFE39-.LFB39
 14483 0150 00000000 		.4byte	.LFB40
 14484 0154 3C000000 		.4byte	.LFE40-.LFB40
 14485 0158 00000000 		.4byte	.LFB41
 14486 015c B0000000 		.4byte	.LFE41-.LFB41
 14487 0160 00000000 		.4byte	.LFB42
 14488 0164 88000000 		.4byte	.LFE42-.LFB42
 14489 0168 00000000 		.4byte	.LFB43
 14490 016c 82010000 		.4byte	.LFE43-.LFB43
 14491 0170 00000000 		.4byte	.LFB44
 14492 0174 7A010000 		.4byte	.LFE44-.LFB44
 14493 0178 00000000 		.4byte	.LFB45
 14494 017c 88010000 		.4byte	.LFE45-.LFB45
 14495 0180 00000000 		.4byte	.LFB46
 14496 0184 72020000 		.4byte	.LFE46-.LFB46
 14497 0188 00000000 		.4byte	.LFB47
 14498 018c 26020000 		.4byte	.LFE47-.LFB47
 14499 0190 00000000 		.4byte	.LFB48
 14500 0194 8E000000 		.4byte	.LFE48-.LFB48
 14501 0198 00000000 		.4byte	.LFB49
 14502 019c 7E000000 		.4byte	.LFE49-.LFB49
 14503 01a0 00000000 		.4byte	.LFB50
 14504 01a4 50000000 		.4byte	.LFE50-.LFB50
 14505 01a8 00000000 		.4byte	.LFB51
 14506 01ac 24000000 		.4byte	.LFE51-.LFB51
 14507 01b0 00000000 		.4byte	.LFB52
 14508 01b4 40000000 		.4byte	.LFE52-.LFB52
 14509 01b8 00000000 		.4byte	.LFB53
 14510 01bc 4A000000 		.4byte	.LFE53-.LFB53
 14511 01c0 00000000 		.4byte	.LFB54
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 362


 14512 01c4 AC040000 		.4byte	.LFE54-.LFB54
 14513 01c8 00000000 		.4byte	0
 14514 01cc 00000000 		.4byte	0
 14515              		.section	.debug_ranges,"",%progbits
 14516              	.Ldebug_ranges0:
 14517 0000 00000000 		.4byte	.LFB0
 14518 0004 3C000000 		.4byte	.LFE0
 14519 0008 00000000 		.4byte	.LFB1
 14520 000c 42000000 		.4byte	.LFE1
 14521 0010 00000000 		.4byte	.LFB2
 14522 0014 3A000000 		.4byte	.LFE2
 14523 0018 00000000 		.4byte	.LFB3
 14524 001c 52000000 		.4byte	.LFE3
 14525 0020 00000000 		.4byte	.LFB4
 14526 0024 3C000000 		.4byte	.LFE4
 14527 0028 00000000 		.4byte	.LFB5
 14528 002c 2E000000 		.4byte	.LFE5
 14529 0030 00000000 		.4byte	.LFB6
 14530 0034 4A000000 		.4byte	.LFE6
 14531 0038 00000000 		.4byte	.LFB7
 14532 003c 32000000 		.4byte	.LFE7
 14533 0040 00000000 		.4byte	.LFB8
 14534 0044 9E000000 		.4byte	.LFE8
 14535 0048 00000000 		.4byte	.LFB9
 14536 004c 74000000 		.4byte	.LFE9
 14537 0050 00000000 		.4byte	.LFB10
 14538 0054 04010000 		.4byte	.LFE10
 14539 0058 00000000 		.4byte	.LFB11
 14540 005c 38000000 		.4byte	.LFE11
 14541 0060 00000000 		.4byte	.LFB12
 14542 0064 46010000 		.4byte	.LFE12
 14543 0068 00000000 		.4byte	.LFB13
 14544 006c FA010000 		.4byte	.LFE13
 14545 0070 00000000 		.4byte	.LFB14
 14546 0074 EC000000 		.4byte	.LFE14
 14547 0078 00000000 		.4byte	.LFB15
 14548 007c 5C010000 		.4byte	.LFE15
 14549 0080 00000000 		.4byte	.LFB16
 14550 0084 FC000000 		.4byte	.LFE16
 14551 0088 00000000 		.4byte	.LFB17
 14552 008c 98010000 		.4byte	.LFE17
 14553 0090 00000000 		.4byte	.LFB18
 14554 0094 B8000000 		.4byte	.LFE18
 14555 0098 00000000 		.4byte	.LFB19
 14556 009c 3E000000 		.4byte	.LFE19
 14557 00a0 00000000 		.4byte	.LFB20
 14558 00a4 40000000 		.4byte	.LFE20
 14559 00a8 00000000 		.4byte	.LFB21
 14560 00ac F6000000 		.4byte	.LFE21
 14561 00b0 00000000 		.4byte	.LFB22
 14562 00b4 D8000000 		.4byte	.LFE22
 14563 00b8 00000000 		.4byte	.LFB23
 14564 00bc 7E000000 		.4byte	.LFE23
 14565 00c0 00000000 		.4byte	.LFB24
 14566 00c4 4A000000 		.4byte	.LFE24
 14567 00c8 00000000 		.4byte	.LFB25
 14568 00cc D2000000 		.4byte	.LFE25
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 363


 14569 00d0 00000000 		.4byte	.LFB26
 14570 00d4 6C010000 		.4byte	.LFE26
 14571 00d8 00000000 		.4byte	.LFB27
 14572 00dc 10010000 		.4byte	.LFE27
 14573 00e0 00000000 		.4byte	.LFB28
 14574 00e4 84000000 		.4byte	.LFE28
 14575 00e8 00000000 		.4byte	.LFB29
 14576 00ec B0000000 		.4byte	.LFE29
 14577 00f0 00000000 		.4byte	.LFB30
 14578 00f4 D8040000 		.4byte	.LFE30
 14579 00f8 00000000 		.4byte	.LFB31
 14580 00fc 78000000 		.4byte	.LFE31
 14581 0100 00000000 		.4byte	.LFB32
 14582 0104 94000000 		.4byte	.LFE32
 14583 0108 00000000 		.4byte	.LFB33
 14584 010c BE030000 		.4byte	.LFE33
 14585 0110 00000000 		.4byte	.LFB34
 14586 0114 82020000 		.4byte	.LFE34
 14587 0118 00000000 		.4byte	.LFB35
 14588 011c EC020000 		.4byte	.LFE35
 14589 0120 00000000 		.4byte	.LFB36
 14590 0124 20010000 		.4byte	.LFE36
 14591 0128 00000000 		.4byte	.LFB37
 14592 012c 56000000 		.4byte	.LFE37
 14593 0130 00000000 		.4byte	.LFB38
 14594 0134 8C020000 		.4byte	.LFE38
 14595 0138 00000000 		.4byte	.LFB39
 14596 013c EA000000 		.4byte	.LFE39
 14597 0140 00000000 		.4byte	.LFB40
 14598 0144 3C000000 		.4byte	.LFE40
 14599 0148 00000000 		.4byte	.LFB41
 14600 014c B0000000 		.4byte	.LFE41
 14601 0150 00000000 		.4byte	.LFB42
 14602 0154 88000000 		.4byte	.LFE42
 14603 0158 00000000 		.4byte	.LFB43
 14604 015c 82010000 		.4byte	.LFE43
 14605 0160 00000000 		.4byte	.LFB44
 14606 0164 7A010000 		.4byte	.LFE44
 14607 0168 00000000 		.4byte	.LFB45
 14608 016c 88010000 		.4byte	.LFE45
 14609 0170 00000000 		.4byte	.LFB46
 14610 0174 72020000 		.4byte	.LFE46
 14611 0178 00000000 		.4byte	.LFB47
 14612 017c 26020000 		.4byte	.LFE47
 14613 0180 00000000 		.4byte	.LFB48
 14614 0184 8E000000 		.4byte	.LFE48
 14615 0188 00000000 		.4byte	.LFB49
 14616 018c 7E000000 		.4byte	.LFE49
 14617 0190 00000000 		.4byte	.LFB50
 14618 0194 50000000 		.4byte	.LFE50
 14619 0198 00000000 		.4byte	.LFB51
 14620 019c 24000000 		.4byte	.LFE51
 14621 01a0 00000000 		.4byte	.LFB52
 14622 01a4 40000000 		.4byte	.LFE52
 14623 01a8 00000000 		.4byte	.LFB53
 14624 01ac 4A000000 		.4byte	.LFE53
 14625 01b0 00000000 		.4byte	.LFB54
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 364


 14626 01b4 AC040000 		.4byte	.LFE54
 14627 01b8 00000000 		.4byte	0
 14628 01bc 00000000 		.4byte	0
 14629              		.section	.debug_line,"",%progbits
 14630              	.Ldebug_line0:
 14631 0000 0C100000 		.section	.debug_str,"MS",%progbits,1
 14631      0200D000 
 14631      00000201 
 14631      FB0E0D00 
 14631      01010101 
 14632              	.LASF71:
 14633 0000 5245535F 		.ascii	"RES_WRPRT\000"
 14633      57525052 
 14633      5400
 14634              	.LASF65:
 14635 000a 46525F54 		.ascii	"FR_TOO_MANY_OPEN_FILES\000"
 14635      4F4F5F4D 
 14635      414E595F 
 14635      4F50454E 
 14635      5F46494C 
 14636              	.LASF94:
 14637 0021 7075745F 		.ascii	"put_fat\000"
 14637      66617400 
 14638              	.LASF13:
 14639 0029 66735F74 		.ascii	"fs_type\000"
 14639      79706500 
 14640              	.LASF131:
 14641 0031 63736563 		.ascii	"csect\000"
 14641      7400
 14642              	.LASF85:
 14643 0037 63686B5F 		.ascii	"chk_chr\000"
 14643      63687200 
 14644              	.LASF162:
 14645 003f 46617446 		.ascii	"FatFs\000"
 14645      7300
 14646              	.LASF75:
 14647 0045 76615F6C 		.ascii	"va_list\000"
 14647      69737400 
 14648              	.LASF72:
 14649 004d 5245535F 		.ascii	"RES_NOTRDY\000"
 14649      4E4F5452 
 14649      445900
 14650              	.LASF17:
 14651 0058 6E5F726F 		.ascii	"n_rootdir\000"
 14651      6F746469 
 14651      7200
 14652              	.LASF111:
 14653 0062 70617468 		.ascii	"path\000"
 14653      00
 14654              	.LASF107:
 14655 0067 6469725F 		.ascii	"dir_register\000"
 14655      72656769 
 14655      73746572 
 14655      00
 14656              	.LASF132:
 14657 0074 72627566 		.ascii	"rbuff\000"
 14657      6600
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 365


 14658              	.LASF106:
 14659 007a 6469725F 		.ascii	"dir_find\000"
 14659      66696E64 
 14659      00
 14660              	.LASF38:
 14661 0083 73656374 		.ascii	"sect\000"
 14661      00
 14662              	.LASF56:
 14663 0088 46525F49 		.ascii	"FR_INVALID_OBJECT\000"
 14663      4E56414C 
 14663      49445F4F 
 14663      424A4543 
 14663      5400
 14664              	.LASF118:
 14665 009a 66617369 		.ascii	"fasize\000"
 14665      7A6500
 14666              	.LASF123:
 14667 00a1 6E727376 		.ascii	"nrsv\000"
 14667      00
 14668              	.LASF39:
 14669 00a6 6469725F 		.ascii	"dir_sect\000"
 14669      73656374 
 14669      00
 14670              	.LASF25:
 14671 00af 64697262 		.ascii	"dirbase\000"
 14671      61736500 
 14672              	.LASF147:
 14673 00b7 6E667265 		.ascii	"nfree\000"
 14673      6500
 14674              	.LASF66:
 14675 00bd 46525F49 		.ascii	"FR_INVALID_PARAMETER\000"
 14675      4E56414C 
 14675      49445F50 
 14675      4152414D 
 14675      45544552 
 14676              	.LASF22:
 14677 00d2 6673697A 		.ascii	"fsize\000"
 14677      6500
 14678              	.LASF21:
 14679 00d8 6E5F6661 		.ascii	"n_fatent\000"
 14679      74656E74 
 14679      00
 14680              	.LASF7:
 14681 00e1 6C6F6E67 		.ascii	"long int\000"
 14681      20696E74 
 14681      00
 14682              	.LASF166:
 14683 00ea 2E5C6C69 		.ascii	".\\lib_Fat\\ff.c\000"
 14683      625F4661 
 14683      745C6666 
 14683      2E6300
 14684              	.LASF157:
 14685 00f9 70757463 		.ascii	"putc_flush\000"
 14685      5F666C75 
 14685      736800
 14686              	.LASF73:
 14687 0104 5245535F 		.ascii	"RES_PARERR\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 366


 14687      50415245 
 14687      525200
 14688              	.LASF14:
 14689 010f 6E5F6661 		.ascii	"n_fats\000"
 14689      747300
 14690              	.LASF128:
 14691 0116 62756666 		.ascii	"buff\000"
 14691      00
 14692              	.LASF104:
 14693 011b 73745F63 		.ascii	"st_clust\000"
 14693      6C757374 
 14693      00
 14694              	.LASF60:
 14695 0124 46525F4E 		.ascii	"FR_NO_FILESYSTEM\000"
 14695      4F5F4649 
 14695      4C455359 
 14695      5354454D 
 14695      00
 14696              	.LASF64:
 14697 0135 46525F4E 		.ascii	"FR_NOT_ENOUGH_CORE\000"
 14697      4F545F45 
 14697      4E4F5547 
 14697      485F434F 
 14697      524500
 14698              	.LASF55:
 14699 0148 46525F45 		.ascii	"FR_EXIST\000"
 14699      58495354 
 14699      00
 14700              	.LASF24:
 14701 0151 66617462 		.ascii	"fatbase\000"
 14701      61736500 
 14702              	.LASF8:
 14703 0159 44574F52 		.ascii	"DWORD\000"
 14703      4400
 14704              	.LASF133:
 14705 015f 665F7772 		.ascii	"f_write\000"
 14705      69746500 
 14706              	.LASF12:
 14707 0167 4653495A 		.ascii	"FSIZE_t\000"
 14707      455F7400 
 14708              	.LASF168:
 14709 016f 5F5F7661 		.ascii	"__va_list\000"
 14709      5F6C6973 
 14709      7400
 14710              	.LASF144:
 14711 0179 665F7374 		.ascii	"f_stat\000"
 14711      617400
 14712              	.LASF46:
 14713 0180 46494C49 		.ascii	"FILINFO\000"
 14713      4E464F00 
 14714              	.LASF86:
 14715 0188 73796E63 		.ascii	"sync_window\000"
 14715      5F77696E 
 14715      646F7700 
 14716              	.LASF18:
 14717 0194 6373697A 		.ascii	"csize\000"
 14717      6500
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 367


 14718              	.LASF20:
 14719 019a 66726565 		.ascii	"free_clst\000"
 14719      5F636C73 
 14719      7400
 14720              	.LASF2:
 14721 01a4 42595445 		.ascii	"BYTE\000"
 14721      00
 14722              	.LASF77:
 14723 01a9 70757462 		.ascii	"putbuff\000"
 14723      75666600 
 14724              	.LASF40:
 14725 01b1 6469725F 		.ascii	"dir_ptr\000"
 14725      70747200 
 14726              	.LASF30:
 14727 01b9 61747472 		.ascii	"attr\000"
 14727      00
 14728              	.LASF100:
 14729 01be 73747265 		.ascii	"stretch\000"
 14729      74636800 
 14730              	.LASF116:
 14731 01c6 6D6F6465 		.ascii	"mode\000"
 14731      00
 14732              	.LASF90:
 14733 01cb 73796E63 		.ascii	"sync_fs\000"
 14733      5F667300 
 14734              	.LASF6:
 14735 01d3 756E7369 		.ascii	"unsigned int\000"
 14735      676E6564 
 14735      20696E74 
 14735      00
 14736              	.LASF158:
 14737 01e0 70757463 		.ascii	"putc_init\000"
 14737      5F696E69 
 14737      7400
 14738              	.LASF5:
 14739 01ea 55494E54 		.ascii	"UINT\000"
 14739      00
 14740              	.LASF43:
 14741 01ef 6674696D 		.ascii	"ftime\000"
 14741      6500
 14742              	.LASF9:
 14743 01f5 6C6F6E67 		.ascii	"long unsigned int\000"
 14743      20756E73 
 14743      69676E65 
 14743      6420696E 
 14743      7400
 14744              	.LASF76:
 14745 0207 6E636872 		.ascii	"nchr\000"
 14745      00
 14746              	.LASF137:
 14747 020c 665F636C 		.ascii	"f_close\000"
 14747      6F736500 
 14748              	.LASF117:
 14749 0214 62736563 		.ascii	"bsect\000"
 14749      7400
 14750              	.LASF120:
 14751 021a 73797365 		.ascii	"sysect\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 368


 14751      637400
 14752              	.LASF4:
 14753 0221 73686F72 		.ascii	"short unsigned int\000"
 14753      7420756E 
 14753      7369676E 
 14753      65642069 
 14753      6E7400
 14754              	.LASF26:
 14755 0234 64617461 		.ascii	"database\000"
 14755      62617365 
 14755      00
 14756              	.LASF108:
 14757 023d 6469725F 		.ascii	"dir_remove\000"
 14757      72656D6F 
 14757      766500
 14758              	.LASF152:
 14759 0248 665F7265 		.ascii	"f_rename\000"
 14759      6E616D65 
 14759      00
 14760              	.LASF92:
 14761 0251 636C7374 		.ascii	"clst\000"
 14761      00
 14762              	.LASF159:
 14763 0256 665F7075 		.ascii	"f_putc\000"
 14763      746300
 14764              	.LASF49:
 14765 025d 46525F49 		.ascii	"FR_INT_ERR\000"
 14765      4E545F45 
 14765      525200
 14766              	.LASF154:
 14767 0268 70617468 		.ascii	"path_new\000"
 14767      5F6E6577 
 14767      00
 14768              	.LASF48:
 14769 0271 46525F44 		.ascii	"FR_DISK_ERR\000"
 14769      49534B5F 
 14769      45525200 
 14770              	.LASF27:
 14771 027d 77696E73 		.ascii	"winsect\000"
 14771      65637400 
 14772              	.LASF84:
 14773 0285 6D656D5F 		.ascii	"mem_cmp\000"
 14773      636D7000 
 14774              	.LASF89:
 14775 028d 73656374 		.ascii	"sector\000"
 14775      6F7200
 14776              	.LASF122:
 14777 0294 737A6266 		.ascii	"szbfat\000"
 14777      617400
 14778              	.LASF99:
 14779 029b 6469725F 		.ascii	"dir_next\000"
 14779      6E657874 
 14779      00
 14780              	.LASF45:
 14781 02a4 666E616D 		.ascii	"fname\000"
 14781      6500
 14782              	.LASF140:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 369


 14783 02aa 69667074 		.ascii	"ifptr\000"
 14783      7200
 14784              	.LASF161:
 14785 02b0 665F7072 		.ascii	"f_printf\000"
 14785      696E7466 
 14785      00
 14786              	.LASF57:
 14787 02b9 46525F57 		.ascii	"FR_WRITE_PROTECTED\000"
 14787      52495445 
 14787      5F50524F 
 14787      54454354 
 14787      454400
 14788              	.LASF29:
 14789 02cc 46415446 		.ascii	"FATFS\000"
 14789      5300
 14790              	.LASF151:
 14791 02d2 665F6D6B 		.ascii	"f_mkdir\000"
 14791      64697200 
 14792              	.LASF42:
 14793 02da 66646174 		.ascii	"fdate\000"
 14793      6500
 14794              	.LASF134:
 14795 02e0 77636E74 		.ascii	"wcnt\000"
 14795      00
 14796              	.LASF36:
 14797 02e5 66707472 		.ascii	"fptr\000"
 14797      00
 14798              	.LASF91:
 14799 02ea 636C7573 		.ascii	"clust2sect\000"
 14799      74327365 
 14799      637400
 14800              	.LASF83:
 14801 02f5 6D656D5F 		.ascii	"mem_set\000"
 14801      73657400 
 14802              	.LASF28:
 14803 02fd 73697A65 		.ascii	"sizetype\000"
 14803      74797065 
 14803      00
 14804              	.LASF109:
 14805 0306 6765745F 		.ascii	"get_fileinfo\000"
 14805      66696C65 
 14805      696E666F 
 14805      00
 14806              	.LASF121:
 14807 0313 6E636C73 		.ascii	"nclst\000"
 14807      7400
 14808              	.LASF62:
 14809 0319 46525F54 		.ascii	"FR_TIMEOUT\000"
 14809      494D454F 
 14809      555400
 14810              	.LASF3:
 14811 0324 574F5244 		.ascii	"WORD\000"
 14811      00
 14812              	.LASF32:
 14813 0329 73636C75 		.ascii	"sclust\000"
 14813      737400
 14814              	.LASF69:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 370


 14815 0330 5245535F 		.ascii	"RES_OK\000"
 14815      4F4B00
 14816              	.LASF51:
 14817 0337 46525F4E 		.ascii	"FR_NO_FILE\000"
 14817      4F5F4649 
 14817      4C4500
 14818              	.LASF146:
 14819 0342 66617466 		.ascii	"fatfs\000"
 14819      7300
 14820              	.LASF10:
 14821 0348 54434841 		.ascii	"TCHAR\000"
 14821      5200
 14822              	.LASF81:
 14823 034e 73745F64 		.ascii	"st_dword\000"
 14823      776F7264 
 14823      00
 14824              	.LASF59:
 14825 0357 46525F4E 		.ascii	"FR_NOT_ENABLED\000"
 14825      4F545F45 
 14825      4E41424C 
 14825      454400
 14826              	.LASF114:
 14827 0366 63686563 		.ascii	"check_fs\000"
 14827      6B5F6673 
 14827      00
 14828              	.LASF19:
 14829 036f 6C617374 		.ascii	"last_clst\000"
 14829      5F636C73 
 14829      7400
 14830              	.LASF145:
 14831 0379 665F6765 		.ascii	"f_getfree\000"
 14831      74667265 
 14831      6500
 14832              	.LASF113:
 14833 0383 6765745F 		.ascii	"get_ldnumber\000"
 14833      6C646E75 
 14833      6D626572 
 14833      00
 14834              	.LASF33:
 14835 0390 6F626A73 		.ascii	"objsize\000"
 14835      697A6500 
 14836              	.LASF125:
 14837 0398 665F6D6F 		.ascii	"f_mount\000"
 14837      756E7400 
 14838              	.LASF150:
 14839 03a0 64636C73 		.ascii	"dclst\000"
 14839      7400
 14840              	.LASF93:
 14841 03a6 6765745F 		.ascii	"get_fat\000"
 14841      66617400 
 14842              	.LASF97:
 14843 03ae 63726561 		.ascii	"create_chain\000"
 14843      74655F63 
 14843      6861696E 
 14843      00
 14844              	.LASF138:
 14845 03bb 665F6C73 		.ascii	"f_lseek\000"
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 371


 14845      65656B00 
 14846              	.LASF0:
 14847 03c3 756E7369 		.ascii	"unsigned char\000"
 14847      676E6564 
 14847      20636861 
 14847      7200
 14848              	.LASF149:
 14849 03d1 665F756E 		.ascii	"f_unlink\000"
 14849      6C696E6B 
 14849      00
 14850              	.LASF135:
 14851 03da 77627566 		.ascii	"wbuff\000"
 14851      6600
 14852              	.LASF1:
 14853 03e0 73686F72 		.ascii	"short int\000"
 14853      7420696E 
 14853      7400
 14854              	.LASF136:
 14855 03ea 665F7379 		.ascii	"f_sync\000"
 14855      6E6300
 14856              	.LASF115:
 14857 03f1 66696E64 		.ascii	"find_volume\000"
 14857      5F766F6C 
 14857      756D6500 
 14858              	.LASF35:
 14859 03fd 666C6167 		.ascii	"flag\000"
 14859      00
 14860              	.LASF112:
 14861 0402 666F6C6C 		.ascii	"follow_path\000"
 14861      6F775F70 
 14861      61746800 
 14862              	.LASF58:
 14863 040e 46525F49 		.ascii	"FR_INVALID_DRIVE\000"
 14863      4E56414C 
 14863      49445F44 
 14863      52495645 
 14863      00
 14864              	.LASF54:
 14865 041f 46525F44 		.ascii	"FR_DENIED\000"
 14865      454E4945 
 14865      4400
 14866              	.LASF124:
 14867 0429 76616C69 		.ascii	"validate\000"
 14867      64617465 
 14867      00
 14868              	.LASF41:
 14869 0432 64707472 		.ascii	"dptr\000"
 14869      00
 14870              	.LASF61:
 14871 0437 46525F4D 		.ascii	"FR_MKFS_ABORTED\000"
 14871      4B46535F 
 14871      41424F52 
 14871      54454400 
 14872              	.LASF143:
 14873 0447 665F7265 		.ascii	"f_readdir\000"
 14873      61646469 
 14873      7200
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 372


 14874              	.LASF63:
 14875 0451 46525F4C 		.ascii	"FR_LOCKED\000"
 14875      4F434B45 
 14875      4400
 14876              	.LASF15:
 14877 045b 77666C61 		.ascii	"wflag\000"
 14877      6700
 14878              	.LASF74:
 14879 0461 5F5F676E 		.ascii	"__gnuc_va_list\000"
 14879      75635F76 
 14879      615F6C69 
 14879      737400
 14880              	.LASF156:
 14881 0470 70757463 		.ascii	"putc_bfd\000"
 14881      5F626664 
 14881      00
 14882              	.LASF103:
 14883 0479 6C645F63 		.ascii	"ld_clust\000"
 14883      6C757374 
 14883      00
 14884              	.LASF11:
 14885 0482 63686172 		.ascii	"char\000"
 14885      00
 14886              	.LASF110:
 14887 0487 63726561 		.ascii	"create_name\000"
 14887      74655F6E 
 14887      616D6500 
 14888              	.LASF47:
 14889 0493 46525F4F 		.ascii	"FR_OK\000"
 14889      4B00
 14890              	.LASF96:
 14891 0499 70636C73 		.ascii	"pclst\000"
 14891      7400
 14892              	.LASF101:
 14893 049f 6469725F 		.ascii	"dir_alloc\000"
 14893      616C6C6F 
 14893      6300
 14894              	.LASF95:
 14895 04a9 72656D6F 		.ascii	"remove_chain\000"
 14895      76655F63 
 14895      6861696E 
 14895      00
 14896              	.LASF68:
 14897 04b6 44535441 		.ascii	"DSTATUS\000"
 14897      54555300 
 14898              	.LASF155:
 14899 04be 665F6765 		.ascii	"f_gets\000"
 14899      747300
 14900              	.LASF102:
 14901 04c5 6E656E74 		.ascii	"nent\000"
 14901      00
 14902              	.LASF23:
 14903 04ca 766F6C62 		.ascii	"volbase\000"
 14903      61736500 
 14904              	.LASF78:
 14905 04d2 6C645F77 		.ascii	"ld_word\000"
 14905      6F726400 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 373


 14906              	.LASF169:
 14907 04da 5F5F6170 		.ascii	"__ap\000"
 14907      00
 14908              	.LASF164:
 14909 04df 45784376 		.ascii	"ExCvt\000"
 14909      7400
 14910              	.LASF141:
 14911 04e5 665F6F70 		.ascii	"f_opendir\000"
 14911      656E6469 
 14911      7200
 14912              	.LASF53:
 14913 04ef 46525F49 		.ascii	"FR_INVALID_NAME\000"
 14913      4E56414C 
 14913      49445F4E 
 14913      414D4500 
 14914              	.LASF88:
 14915 04ff 6D6F7665 		.ascii	"move_window\000"
 14915      5F77696E 
 14915      646F7700 
 14916              	.LASF79:
 14917 050b 6C645F64 		.ascii	"ld_dword\000"
 14917      776F7264 
 14917      00
 14918              	.LASF16:
 14919 0514 6673695F 		.ascii	"fsi_flag\000"
 14919      666C6167 
 14919      00
 14920              	.LASF82:
 14921 051d 6D656D5F 		.ascii	"mem_cpy\000"
 14921      63707900 
 14922              	.LASF129:
 14923 0525 72656D61 		.ascii	"remain\000"
 14923      696E00
 14924              	.LASF127:
 14925 052c 665F7265 		.ascii	"f_read\000"
 14925      616400
 14926              	.LASF44:
 14927 0533 66617474 		.ascii	"fattrib\000"
 14927      72696200 
 14928              	.LASF153:
 14929 053b 70617468 		.ascii	"path_old\000"
 14929      5F6F6C64 
 14929      00
 14930              	.LASF87:
 14931 0544 77736563 		.ascii	"wsect\000"
 14931      7400
 14932              	.LASF80:
 14933 054a 73745F77 		.ascii	"st_word\000"
 14933      6F726400 
 14934              	.LASF34:
 14935 0552 5F464449 		.ascii	"_FDID\000"
 14935      4400
 14936              	.LASF148:
 14937 0558 665F7472 		.ascii	"f_truncate\000"
 14937      756E6361 
 14937      746500
 14938              	.LASF130:
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 374


 14939 0563 72636E74 		.ascii	"rcnt\000"
 14939      00
 14940              	.LASF160:
 14941 0568 665F7075 		.ascii	"f_puts\000"
 14941      747300
 14942              	.LASF139:
 14943 056f 6E736563 		.ascii	"nsect\000"
 14943      7400
 14944              	.LASF31:
 14945 0575 73746174 		.ascii	"stat\000"
 14945      00
 14946              	.LASF67:
 14947 057a 46524553 		.ascii	"FRESULT\000"
 14947      554C5400 
 14948              	.LASF70:
 14949 0582 5245535F 		.ascii	"RES_ERROR\000"
 14949      4552524F 
 14949      5200
 14950              	.LASF165:
 14951 058c 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 14951      4320342E 
 14951      392E3320 
 14951      32303135 
 14951      30333033 
 14952 05bf 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 14952      20726576 
 14952      6973696F 
 14952      6E203232 
 14952      31323230 
 14953 05f2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 14953      66756E63 
 14953      74696F6E 
 14953      2D736563 
 14953      74696F6E 
 14954              	.LASF105:
 14955 061a 6469725F 		.ascii	"dir_read\000"
 14955      72656164 
 14955      00
 14956              	.LASF126:
 14957 0623 665F6F70 		.ascii	"f_open\000"
 14957      656E00
 14958              	.LASF52:
 14959 062a 46525F4E 		.ascii	"FR_NO_PATH\000"
 14959      4F5F5041 
 14959      544800
 14960              	.LASF142:
 14961 0635 665F636C 		.ascii	"f_closedir\000"
 14961      6F736564 
 14961      697200
 14962              	.LASF50:
 14963 0640 46525F4E 		.ascii	"FR_NOT_READY\000"
 14963      4F545F52 
 14963      45414459 
 14963      00
 14964              	.LASF167:
 14965 064d 633A5C43 		.ascii	"c:\\Cypress\\Mainline_v2\\Finish\\fin_v0.cydsn\000"
 14965      79707265 
ARM GAS  C:\DOCUME~1\Admin\LOCALS~1\Temp\ccRcpd29.s 			page 375


 14965      73735C4D 
 14965      61696E6C 
 14965      696E655F 
 14966              	.LASF98:
 14967 0678 6469725F 		.ascii	"dir_sdi\000"
 14967      73646900 
 14968              	.LASF163:
 14969 0680 46736964 		.ascii	"Fsid\000"
 14969      00
 14970              	.LASF37:
 14971 0685 636C7573 		.ascii	"clust\000"
 14971      7400
 14972              	.LASF119:
 14973 068b 74736563 		.ascii	"tsect\000"
 14973      7400
 14974              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
